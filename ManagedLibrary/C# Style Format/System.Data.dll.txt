internal static class AssemblyRef : object {
    
internal static string SystemConfiguration;
    
internal static string System;
    
public static string EcmaPublicKey;
    
public static string FrameworkPublicKeyFull;
    
public static string FrameworkPublicKeyFull2;
    
public static string MicrosoftPublicKey;
    
public static string MicrosoftJScript;
    
public static string MicrosoftVSDesigner;
    
public static string SystemData;
    
public static string SystemDesign;
    
public static string SystemDrawing;
    
public static string SystemWeb;
    
public static string SystemWebExtensions;
    
public static string SystemWindowsForms;
}
internal static class Consts : object {
    
public static string MonoVersion;
    
public static string MonoCompany;
    
public static string MonoProduct;
    
public static string MonoCopyright;
    
public static int MonoCorlibVersion;
    
public static string FxVersion;
    
public static string FxFileVersion;
    
public static string EnvironmentVersion;
    
public static string VsVersion;
    
public static string VsFileVersion;
    
private static string PublicKeyToken;
    
public static string AssemblyI18N;
    
public static string AssemblyMicrosoft_JScript;
    
public static string AssemblyMicrosoft_VisualStudio;
    
public static string AssemblyMicrosoft_VisualStudio_Web;
    
public static string AssemblyMicrosoft_VSDesigner;
    
public static string AssemblyMono_Http;
    
public static string AssemblyMono_Posix;
    
public static string AssemblyMono_Security;
    
public static string AssemblyMono_Messaging_RabbitMQ;
    
public static string AssemblyCorlib;
    
public static string AssemblySystem;
    
public static string AssemblySystem_Data;
    
public static string AssemblySystem_Design;
    
public static string AssemblySystem_DirectoryServices;
    
public static string AssemblySystem_Drawing;
    
public static string AssemblySystem_Drawing_Design;
    
public static string AssemblySystem_Messaging;
    
public static string AssemblySystem_Security;
    
public static string AssemblySystem_ServiceProcess;
    
public static string AssemblySystem_Web;
    
public static string AssemblySystem_Windows_Forms;
    
public static string AssemblySystem_2_0;
    
public static string AssemblySystemCore_3_5;
    
public static string AssemblySystem_Core;
    
public static string WindowsBase_3_0;
    
public static string AssemblyWindowsBase;
    
public static string AssemblyPresentationCore_3_5;
    
public static string AssemblyPresentationCore_4_0;
    
public static string AssemblyPresentationFramework_3_5;
    
public static string AssemblySystemServiceModel_3_0;
}
internal class DiagnosticListener : object {
    
internal static bool DiagnosticListenerEnabled;
    internal DiagnosticListener(string s);
    private static DiagnosticListener();
    internal bool IsEnabled(string s);
    internal void Write(string s1, object s2);
}
internal static class Interop : object {
}
internal class Locale : object {
    public static string GetText(string msg);
    public static string GetText(string fmt, Object[] args);
}
public enum Microsoft.SqlServer.Server.DataAccessKind : Enum {
    
public int value__;
    
public static DataAccessKind None;
    
public static DataAccessKind Read;
}
internal enum Microsoft.SqlServer.Server.EMDEventType : Enum {
    
public int value__;
    
public static EMDEventType x_eet_Invalid;
    
public static EMDEventType x_eet_Insert;
    
public static EMDEventType x_eet_Update;
    
public static EMDEventType x_eet_Delete;
    
public static EMDEventType x_eet_Create_Table;
    
public static EMDEventType x_eet_Alter_Table;
    
public static EMDEventType x_eet_Drop_Table;
    
public static EMDEventType x_eet_Create_Index;
    
public static EMDEventType x_eet_Alter_Index;
    
public static EMDEventType x_eet_Drop_Index;
    
public static EMDEventType x_eet_Create_Stats;
    
public static EMDEventType x_eet_Update_Stats;
    
public static EMDEventType x_eet_Drop_Stats;
    
public static EMDEventType x_eet_Create_Secexpr;
    
public static EMDEventType x_eet_Drop_Secexpr;
    
public static EMDEventType x_eet_Create_Synonym;
    
public static EMDEventType x_eet_Drop_Synonym;
    
public static EMDEventType x_eet_Create_View;
    
public static EMDEventType x_eet_Alter_View;
    
public static EMDEventType x_eet_Drop_View;
    
public static EMDEventType x_eet_Create_Procedure;
    
public static EMDEventType x_eet_Alter_Procedure;
    
public static EMDEventType x_eet_Drop_Procedure;
    
public static EMDEventType x_eet_Create_Function;
    
public static EMDEventType x_eet_Alter_Function;
    
public static EMDEventType x_eet_Drop_Function;
    
public static EMDEventType x_eet_Create_Trigger;
    
public static EMDEventType x_eet_Alter_Trigger;
    
public static EMDEventType x_eet_Drop_Trigger;
    
public static EMDEventType x_eet_Create_Event_Notification;
    
public static EMDEventType x_eet_Drop_Event_Notification;
    
public static EMDEventType x_eet_Create_Type;
    
public static EMDEventType x_eet_Drop_Type;
    
public static EMDEventType x_eet_Create_Assembly;
    
public static EMDEventType x_eet_Alter_Assembly;
    
public static EMDEventType x_eet_Drop_Assembly;
    
public static EMDEventType x_eet_Create_User;
    
public static EMDEventType x_eet_Alter_User;
    
public static EMDEventType x_eet_Drop_User;
    
public static EMDEventType x_eet_Create_Role;
    
public static EMDEventType x_eet_Alter_Role;
    
public static EMDEventType x_eet_Drop_Role;
    
public static EMDEventType x_eet_Create_AppRole;
    
public static EMDEventType x_eet_Alter_AppRole;
    
public static EMDEventType x_eet_Drop_AppRole;
    
public static EMDEventType x_eet_Create_Schema;
    
public static EMDEventType x_eet_Alter_Schema;
    
public static EMDEventType x_eet_Drop_Schema;
    
public static EMDEventType x_eet_Create_Login;
    
public static EMDEventType x_eet_Alter_Login;
    
public static EMDEventType x_eet_Drop_Login;
    
public static EMDEventType x_eet_Create_MsgType;
    
public static EMDEventType x_eet_Alter_MsgType;
    
public static EMDEventType x_eet_Drop_MsgType;
    
public static EMDEventType x_eet_Create_Contract;
    
public static EMDEventType x_eet_Alter_Contract;
    
public static EMDEventType x_eet_Drop_Contract;
    
public static EMDEventType x_eet_Create_Queue;
    
public static EMDEventType x_eet_Alter_Queue;
    
public static EMDEventType x_eet_Drop_Queue;
    
public static EMDEventType x_eet_Create_Service;
    
public static EMDEventType x_eet_Alter_Service;
    
public static EMDEventType x_eet_Drop_Service;
    
public static EMDEventType x_eet_Create_Route;
    
public static EMDEventType x_eet_Alter_Route;
    
public static EMDEventType x_eet_Drop_Route;
    
public static EMDEventType x_eet_Grant_Statement;
    
public static EMDEventType x_eet_Deny_Statement;
    
public static EMDEventType x_eet_Revoke_Statement;
    
public static EMDEventType x_eet_Grant_Object;
    
public static EMDEventType x_eet_Deny_Object;
    
public static EMDEventType x_eet_Revoke_Object;
    
public static EMDEventType x_eet_Activation;
    
public static EMDEventType x_eet_Create_Binding;
    
public static EMDEventType x_eet_Alter_Binding;
    
public static EMDEventType x_eet_Drop_Binding;
    
public static EMDEventType x_eet_Create_XmlSchema;
    
public static EMDEventType x_eet_Alter_XmlSchema;
    
public static EMDEventType x_eet_Drop_XmlSchema;
    
public static EMDEventType x_eet_Create_HttpEndpoint;
    
public static EMDEventType x_eet_Alter_HttpEndpoint;
    
public static EMDEventType x_eet_Drop_HttpEndpoint;
    
public static EMDEventType x_eet_Create_Partition_Function;
    
public static EMDEventType x_eet_Alter_Partition_Function;
    
public static EMDEventType x_eet_Drop_Partition_Function;
    
public static EMDEventType x_eet_Create_Partition_Scheme;
    
public static EMDEventType x_eet_Alter_Partition_Scheme;
    
public static EMDEventType x_eet_Drop_Partition_Scheme;
    
public static EMDEventType x_eet_Create_Database;
    
public static EMDEventType x_eet_Alter_Database;
    
public static EMDEventType x_eet_Drop_Database;
    
public static EMDEventType x_eet_Trace_Start;
    
public static EMDEventType x_eet_Trace_End;
}
internal enum Microsoft.SqlServer.Server.ExtendedClrTypeCode : Enum {
    
public int value__;
    
public static ExtendedClrTypeCode Invalid;
    
public static ExtendedClrTypeCode Boolean;
    
public static ExtendedClrTypeCode Byte;
    
public static ExtendedClrTypeCode Char;
    
public static ExtendedClrTypeCode DateTime;
    
public static ExtendedClrTypeCode DBNull;
    
public static ExtendedClrTypeCode Decimal;
    
public static ExtendedClrTypeCode Double;
    
public static ExtendedClrTypeCode Empty;
    
public static ExtendedClrTypeCode Int16;
    
public static ExtendedClrTypeCode Int32;
    
public static ExtendedClrTypeCode Int64;
    
public static ExtendedClrTypeCode SByte;
    
public static ExtendedClrTypeCode Single;
    
public static ExtendedClrTypeCode String;
    
public static ExtendedClrTypeCode UInt16;
    
public static ExtendedClrTypeCode UInt32;
    
public static ExtendedClrTypeCode UInt64;
    
public static ExtendedClrTypeCode Object;
    
public static ExtendedClrTypeCode ByteArray;
    
public static ExtendedClrTypeCode CharArray;
    
public static ExtendedClrTypeCode Guid;
    
public static ExtendedClrTypeCode SqlBinary;
    
public static ExtendedClrTypeCode SqlBoolean;
    
public static ExtendedClrTypeCode SqlByte;
    
public static ExtendedClrTypeCode SqlDateTime;
    
public static ExtendedClrTypeCode SqlDouble;
    
public static ExtendedClrTypeCode SqlGuid;
    
public static ExtendedClrTypeCode SqlInt16;
    
public static ExtendedClrTypeCode SqlInt32;
    
public static ExtendedClrTypeCode SqlInt64;
    
public static ExtendedClrTypeCode SqlMoney;
    
public static ExtendedClrTypeCode SqlDecimal;
    
public static ExtendedClrTypeCode SqlSingle;
    
public static ExtendedClrTypeCode SqlString;
    
public static ExtendedClrTypeCode SqlChars;
    
public static ExtendedClrTypeCode SqlBytes;
    
public static ExtendedClrTypeCode SqlXml;
    
public static ExtendedClrTypeCode DataTable;
    
public static ExtendedClrTypeCode DbDataReader;
    
public static ExtendedClrTypeCode IEnumerableOfSqlDataRecord;
    
public static ExtendedClrTypeCode TimeSpan;
    
public static ExtendedClrTypeCode DateTimeOffset;
    
public static ExtendedClrTypeCode Stream;
    
public static ExtendedClrTypeCode TextReader;
    
public static ExtendedClrTypeCode XmlReader;
    
public static ExtendedClrTypeCode Last;
    
public static ExtendedClrTypeCode First;
}
public enum Microsoft.SqlServer.Server.Format : Enum {
    
public int value__;
    
public static Format Unknown;
    
public static Format Native;
    
public static Format UserDefined;
}
public interface Microsoft.SqlServer.Server.IBinarySerialize {
    public abstract virtual void Read(BinaryReader r);
    public abstract virtual void Write(BinaryWriter w);
}
public class Microsoft.SqlServer.Server.InvalidUdtException : SystemException {
    internal InvalidUdtException(string message);
    internal InvalidUdtException(string message, Exception innerException);
    private InvalidUdtException(SerializationInfo si, StreamingContext sc);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    internal static InvalidUdtException Create(Type udtType, string resourceReason);
}
internal interface Microsoft.SqlServer.Server.ITypedGetters {
    public abstract virtual bool IsDBNull(int ordinal);
    public abstract virtual SqlDbType GetVariantType(int ordinal);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual SqlBoolean GetSqlBoolean(int ordinal);
    public abstract virtual SqlByte GetSqlByte(int ordinal);
    public abstract virtual SqlInt16 GetSqlInt16(int ordinal);
    public abstract virtual SqlInt32 GetSqlInt32(int ordinal);
    public abstract virtual SqlInt64 GetSqlInt64(int ordinal);
    public abstract virtual SqlSingle GetSqlSingle(int ordinal);
    public abstract virtual SqlDouble GetSqlDouble(int ordinal);
    public abstract virtual SqlMoney GetSqlMoney(int ordinal);
    public abstract virtual SqlDateTime GetSqlDateTime(int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(int ordinal);
    public abstract virtual SqlString GetSqlString(int ordinal);
    public abstract virtual SqlBinary GetSqlBinary(int ordinal);
    public abstract virtual SqlGuid GetSqlGuid(int ordinal);
    public abstract virtual SqlChars GetSqlChars(int ordinal);
    public abstract virtual SqlBytes GetSqlBytes(int ordinal);
    public abstract virtual SqlXml GetSqlXml(int ordinal);
    public abstract virtual SqlBytes GetSqlBytesRef(int ordinal);
    public abstract virtual SqlChars GetSqlCharsRef(int ordinal);
    public abstract virtual SqlXml GetSqlXmlRef(int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedGettersV3 {
    public abstract virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public abstract virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public abstract virtual byte GetByte(SmiEventSink sink, int ordinal);
    public abstract virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public abstract virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual string GetString(SmiEventSink sink, int ordinal);
    public abstract virtual short GetInt16(SmiEventSink sink, int ordinal);
    public abstract virtual int GetInt32(SmiEventSink sink, int ordinal);
    public abstract virtual long GetInt64(SmiEventSink sink, int ordinal);
    public abstract virtual float GetSingle(SmiEventSink sink, int ordinal);
    public abstract virtual double GetDouble(SmiEventSink sink, int ordinal);
    public abstract virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public abstract virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public abstract virtual Guid GetGuid(SmiEventSink sink, int ordinal);
}
internal interface Microsoft.SqlServer.Server.ITypedSetters {
    public abstract virtual void SetDBNull(int ordinal);
    public abstract virtual void SetBoolean(int ordinal, bool value);
    public abstract virtual void SetByte(int ordinal, byte value);
    public abstract virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetChar(int ordinal, char value);
    public abstract virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetInt16(int ordinal, short value);
    public abstract virtual void SetInt32(int ordinal, int value);
    public abstract virtual void SetInt64(int ordinal, long value);
    public abstract virtual void SetFloat(int ordinal, float value);
    public abstract virtual void SetDouble(int ordinal, double value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetString(int ordinal, string value);
    public abstract virtual void SetString(int ordinal, string value, int offset);
    public abstract virtual void SetDecimal(int ordinal, decimal value);
    public abstract virtual void SetDateTime(int ordinal, DateTime value);
    public abstract virtual void SetGuid(int ordinal, Guid value);
    public abstract virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public abstract virtual void SetSqlByte(int ordinal, SqlByte value);
    public abstract virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public abstract virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public abstract virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public abstract virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public abstract virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public abstract virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public abstract virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public abstract virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlString(int ordinal, SqlString value);
    public abstract virtual void SetSqlString(int ordinal, SqlString value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public abstract virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public abstract virtual void SetSqlGuid(int ordinal, SqlGuid value);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlChars(int ordinal, SqlChars value);
    public abstract virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    [ObsoleteAttribute("Not supported as of SMI v2.  Will be removed when v1 support dropped.  Use setter with offset.")]
public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public abstract virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public abstract virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal interface Microsoft.SqlServer.Server.ITypedSettersV3 {
    public abstract virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    public abstract virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public abstract virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public abstract virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public abstract virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public abstract virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public abstract virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public abstract virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public abstract virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public abstract virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public abstract virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public abstract virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public abstract virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public abstract virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public abstract virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
}
internal class Microsoft.SqlServer.Server.MemoryRecordBuffer : SmiRecordBuffer {
    
private SqlRecordBuffer[] _buffer;
    internal MemoryRecordBuffer(SmiMetaData[] metaData);
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
}
internal class Microsoft.SqlServer.Server.MetaDataUtilsSmi : object {
    
internal static SqlDbType InvalidSqlDbType;
    
internal static long InvalidMaxLength;
    
private static SqlDbType[] s_extendedTypeCodeToSqlDbTypeMap;
    
private static Dictionary`2<Type, ExtendedClrTypeCode> s_typeToExtendedTypeCodeMap;
    private static MetaDataUtilsSmi();
    private static Dictionary`2<Type, ExtendedClrTypeCode> CreateTypeToExtendedTypeCodeMap();
    internal static bool IsCharOrXmlType(SqlDbType type);
    internal static bool IsUnicodeType(SqlDbType type);
    internal static bool IsAnsiType(SqlDbType type);
    internal static bool IsBinaryType(SqlDbType type);
    internal static bool IsPlpFormat(SmiMetaData metaData);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeForUseWithSqlDbType(SqlDbType dbType, bool isMultiValued, object value);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCodeFromType(Type clrType);
    internal static ExtendedClrTypeCode DetermineExtendedTypeCode(object value);
    internal static SqlDbType InferSqlDbTypeFromTypeCode(ExtendedClrTypeCode typeCode);
    internal static SqlDbType InferSqlDbTypeFromType(Type type);
    internal static SqlDbType InferSqlDbTypeFromType_Katmai(Type type);
    internal static SqlMetaData SmiExtendedMetaDataToSqlMetaData(SmiExtendedMetaData source);
    internal static SmiExtendedMetaData SqlMetaDataToSmiExtendedMetaData(SqlMetaData source);
    internal static bool IsCompatible(SmiMetaData firstMd, SqlMetaData secondMd);
    internal static SmiExtendedMetaData SmiMetaDataFromDataColumn(DataColumn column, DataTable parent);
    internal static long AdjustMaxLength(SqlDbType dbType, long maxLength);
    internal static SmiExtendedMetaData SmiMetaDataFromSchemaTableRow(DataRow schemaRow);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiDefaultFieldsProperty : SmiMetaDataProperty {
    
private IList`1<bool> _defaults;
    
internal bool Item { get; }
    internal SmiDefaultFieldsProperty(IList`1<bool> defaultFields);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal abstract class Microsoft.SqlServer.Server.SmiEventSink : object {
}
internal class Microsoft.SqlServer.Server.SmiEventSink_Default : SmiEventSink {
    
private SqlErrorCollection _errors;
    
private SqlErrorCollection _warnings;
    
internal bool HasMessages { get; }
    
internal string ServerVersion { get; }
    internal bool get_HasMessages();
    internal virtual string get_ServerVersion();
    protected virtual void DispatchMessages();
    protected SqlException ProcessMessages(bool ignoreWarnings);
    internal void ProcessMessagesAndThrow();
}
internal class Microsoft.SqlServer.Server.SmiExtendedMetaData : SmiMetaData {
    
private string _name;
    
private string _typeSpecificNamePart1;
    
private string _typeSpecificNamePart2;
    
private string _typeSpecificNamePart3;
    
internal string Name { get; }
    
internal string TypeSpecificNamePart1 { get; }
    
internal string TypeSpecificNamePart2 { get; }
    
internal string TypeSpecificNamePart3 { get; }
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal SmiExtendedMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3);
    internal string get_Name();
    internal string get_TypeSpecificNamePart1();
    internal string get_TypeSpecificNamePart2();
    internal string get_TypeSpecificNamePart3();
}
internal class Microsoft.SqlServer.Server.SmiGettersStream : Stream {
    
private SmiEventSink_Default _sink;
    
private ITypedGettersV3 _getters;
    
private int _ordinal;
    
private long _readPosition;
    
private SmiMetaData _metaData;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal SmiGettersStream(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SmiMetaData : object {
    
private SqlDbType _databaseType;
    
private long _maxLength;
    
private byte _precision;
    
private byte _scale;
    
private long _localeId;
    
private SqlCompareOptions _compareOptions;
    
private bool _isMultiValued;
    
private IList`1<SmiExtendedMetaData> _fieldMetaData;
    
private SmiMetaDataPropertyCollection _extendedProperties;
    
internal static long UnlimitedMaxLengthIndicator;
    
internal static long MaxUnicodeCharacters;
    
internal static long MaxANSICharacters;
    
internal static long MaxBinaryLength;
    
internal static int MinPrecision;
    
internal static int MinScale;
    
internal static int MaxTimeScale;
    
internal static DateTime MaxSmallDateTime;
    
internal static DateTime MinSmallDateTime;
    
internal static SqlMoney MaxSmallMoney;
    
internal static SqlMoney MinSmallMoney;
    
internal static SqlCompareOptions DefaultStringCompareOptions;
    
internal static long MaxNameLength;
    
private static IList`1<SmiExtendedMetaData> s_emptyFieldList;
    
private static Byte[] s_maxLenFromPrecision;
    
private static Byte[] s_maxVarTimeLenOffsetFromScale;
    
internal static SmiMetaData DefaultBigInt;
    
internal static SmiMetaData DefaultBinary;
    
internal static SmiMetaData DefaultBit;
    
internal static SmiMetaData DefaultChar_NoCollation;
    
internal static SmiMetaData DefaultDateTime;
    
internal static SmiMetaData DefaultDecimal;
    
internal static SmiMetaData DefaultFloat;
    
internal static SmiMetaData DefaultImage;
    
internal static SmiMetaData DefaultInt;
    
internal static SmiMetaData DefaultMoney;
    
internal static SmiMetaData DefaultNChar_NoCollation;
    
internal static SmiMetaData DefaultNText_NoCollation;
    
internal static SmiMetaData DefaultNVarChar_NoCollation;
    
internal static SmiMetaData DefaultReal;
    
internal static SmiMetaData DefaultUniqueIdentifier;
    
internal static SmiMetaData DefaultSmallDateTime;
    
internal static SmiMetaData DefaultSmallInt;
    
internal static SmiMetaData DefaultSmallMoney;
    
internal static SmiMetaData DefaultText_NoCollation;
    
internal static SmiMetaData DefaultTimestamp;
    
internal static SmiMetaData DefaultTinyInt;
    
internal static SmiMetaData DefaultVarBinary;
    
internal static SmiMetaData DefaultVarChar_NoCollation;
    
internal static SmiMetaData DefaultVariant;
    
internal static SmiMetaData DefaultXml;
    
internal static SmiMetaData DefaultStructured;
    
internal static SmiMetaData DefaultDate;
    
internal static SmiMetaData DefaultTime;
    
internal static SmiMetaData DefaultDateTime2;
    
internal static SmiMetaData DefaultDateTimeOffset;
    
private static SmiMetaData[] s_defaultValues;
    
internal static SmiMetaData DefaultNVarChar { get; }
    
internal SqlCompareOptions CompareOptions { get; }
    
internal long LocaleId { get; }
    
internal long MaxLength { get; }
    
internal byte Precision { get; }
    
internal byte Scale { get; }
    
internal SqlDbType SqlDbType { get; }
    
internal bool IsMultiValued { get; }
    
internal IList`1<SmiExtendedMetaData> FieldMetaData { get; }
    
internal SmiMetaDataPropertyCollection ExtendedProperties { get; }
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions);
    internal SmiMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldTypes, SmiMetaDataPropertyCollection extendedProperties);
    private SmiMetaData(SqlDbType sqlDbType, long maxLength, byte precision, byte scale, SqlCompareOptions compareOptions);
    private static SmiMetaData();
    internal static SmiMetaData get_DefaultNVarChar();
    internal SqlCompareOptions get_CompareOptions();
    internal long get_LocaleId();
    internal long get_MaxLength();
    internal byte get_Precision();
    internal byte get_Scale();
    internal SqlDbType get_SqlDbType();
    internal bool get_IsMultiValued();
    internal IList`1<SmiExtendedMetaData> get_FieldMetaData();
    internal SmiMetaDataPropertyCollection get_ExtendedProperties();
    internal static bool IsSupportedDbType(SqlDbType dbType);
    internal static SmiMetaData GetDefaultForType(SqlDbType dbType);
    private void SetDefaultsForType(SqlDbType dbType);
}
internal abstract class Microsoft.SqlServer.Server.SmiMetaDataProperty : object {
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiMetaDataPropertyCollection : object {
    
private static int SelectorCount;
    
private SmiMetaDataProperty[] _properties;
    
private bool _isReadOnly;
    
private static SmiDefaultFieldsProperty s_emptyDefaultFields;
    
private static SmiOrderProperty s_emptySortOrder;
    
private static SmiUniqueKeyProperty s_emptyUniqueKey;
    
internal static SmiMetaDataPropertyCollection EmptyInstance;
    
internal SmiMetaDataProperty Item { get; internal set; }
    
internal bool IsReadOnly { get; }
    private static SmiMetaDataPropertyCollection();
    private static SmiMetaDataPropertyCollection CreateEmptyInstance();
    internal SmiMetaDataProperty get_Item(SmiPropertySelector key);
    internal void set_Item(SmiPropertySelector key, SmiMetaDataProperty value);
    internal bool get_IsReadOnly();
    internal void SetReadOnly();
    private void EnsureWritable();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiOrderProperty : SmiMetaDataProperty {
    
private IList`1<SmiColumnOrder> _columns;
    
internal SmiColumnOrder Item { get; }
    internal SmiOrderProperty(IList`1<SmiColumnOrder> columnOrders);
    internal SmiColumnOrder get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal class Microsoft.SqlServer.Server.SmiParameterMetaData : SmiExtendedMetaData {
    
private ParameterDirection _direction;
    
internal ParameterDirection Direction { get; }
    internal SmiParameterMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, ParameterDirection direction);
    internal ParameterDirection get_Direction();
}
internal enum Microsoft.SqlServer.Server.SmiPropertySelector : Enum {
    
public int value__;
    
public static SmiPropertySelector DefaultFields;
    
public static SmiPropertySelector SortOrder;
    
public static SmiPropertySelector UniqueKey;
}
internal class Microsoft.SqlServer.Server.SmiQueryMetaData : SmiStorageMetaData {
    
private bool _isReadOnly;
    
private SqlBoolean _isExpression;
    
private SqlBoolean _isAliased;
    
private SqlBoolean _isHidden;
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
    internal SmiQueryMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet, bool isReadOnly, SqlBoolean isExpression, SqlBoolean isAliased, SqlBoolean isHidden);
}
internal abstract class Microsoft.SqlServer.Server.SmiRecordBuffer : SmiTypedGetterSetter {
    
internal bool CanGet { get; }
    
internal bool CanSet { get; }
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void Dispose();
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlDbType GetVariantType(int ordinal);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlXml GetSqlXmlRef(int ordinal);
    public virtual SqlBytes GetSqlBytesRef(int ordinal);
    public virtual SqlChars GetSqlCharsRef(int ordinal);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetString(int ordinal, string value, int offset);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlString(int ordinal, SqlString value, int offset);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value, int offset);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlChars(int ordinal, SqlChars value, int offset);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value, int offset);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
}
internal class Microsoft.SqlServer.Server.SmiSettersStream : Stream {
    
private SmiEventSink_Default _sink;
    
private ITypedSettersV3 _setters;
    
private int _ordinal;
    
private long _lengthWritten;
    
private SmiMetaData _metaData;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal SmiSettersStream(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual void Flush();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class Microsoft.SqlServer.Server.SmiStorageMetaData : SmiExtendedMetaData {
    
private bool _allowsDBNull;
    
private string _serverName;
    
private string _catalogName;
    
private string _schemaName;
    
private string _tableName;
    
private string _columnName;
    
private SqlBoolean _isKey;
    
private bool _isIdentity;
    
private bool _isColumnSet;
    
internal SqlBoolean IsKey { get; }
    internal SmiStorageMetaData(SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool isMultiValued, IList`1<SmiExtendedMetaData> fieldMetaData, SmiMetaDataPropertyCollection extendedProperties, string name, string typeSpecificNamePart1, string typeSpecificNamePart2, string typeSpecificNamePart3, bool allowsDBNull, string serverName, string catalogName, string schemaName, string tableName, string columnName, SqlBoolean isKey, bool isIdentity, bool isColumnSet);
    internal SqlBoolean get_IsKey();
}
internal abstract class Microsoft.SqlServer.Server.SmiTypedGetterSetter : object {
    
internal bool CanGet { get; }
    
internal bool CanSet { get; }
    internal abstract virtual bool get_CanGet();
    internal abstract virtual bool get_CanSet();
    public virtual bool IsDBNull(SmiEventSink sink, int ordinal);
    public virtual SmiMetaData GetVariantType(SmiEventSink sink, int ordinal);
    public virtual bool GetBoolean(SmiEventSink sink, int ordinal);
    public virtual byte GetByte(SmiEventSink sink, int ordinal);
    public virtual long GetBytesLength(SmiEventSink sink, int ordinal);
    public virtual int GetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual long GetCharsLength(SmiEventSink sink, int ordinal);
    public virtual int GetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual string GetString(SmiEventSink sink, int ordinal);
    public virtual short GetInt16(SmiEventSink sink, int ordinal);
    public virtual int GetInt32(SmiEventSink sink, int ordinal);
    public virtual long GetInt64(SmiEventSink sink, int ordinal);
    public virtual float GetSingle(SmiEventSink sink, int ordinal);
    public virtual double GetDouble(SmiEventSink sink, int ordinal);
    public virtual SqlDecimal GetSqlDecimal(SmiEventSink sink, int ordinal);
    public virtual DateTime GetDateTime(SmiEventSink sink, int ordinal);
    public virtual Guid GetGuid(SmiEventSink sink, int ordinal);
    public virtual TimeSpan GetTimeSpan(SmiEventSink sink, int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(SmiEventSink sink, int ordinal);
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.SqlServer.Server.SmiUniqueKeyProperty : SmiMetaDataProperty {
    
private IList`1<bool> _columns;
    
internal bool Item { get; }
    internal SmiUniqueKeyProperty(IList`1<bool> columnIsKey);
    internal bool get_Item(int ordinal);
    [ConditionalAttribute("DEBUG")]
internal void CheckCount(int countToMatch);
}
internal class Microsoft.SqlServer.Server.SmiXetterAccessMap : object {
    
private static bool X;
    
private static bool _;
    
private static Boolean[0...,0...] s_isSetterAccessValid;
    private static SmiXetterAccessMap();
    internal static bool IsSetterAccessValid(SmiMetaData metaData, SmiXetterTypeCode xetterType);
}
internal enum Microsoft.SqlServer.Server.SmiXetterTypeCode : Enum {
    
public int value__;
    
public static SmiXetterTypeCode XetBoolean;
    
public static SmiXetterTypeCode XetByte;
    
public static SmiXetterTypeCode XetBytes;
    
public static SmiXetterTypeCode XetChars;
    
public static SmiXetterTypeCode XetString;
    
public static SmiXetterTypeCode XetInt16;
    
public static SmiXetterTypeCode XetInt32;
    
public static SmiXetterTypeCode XetInt64;
    
public static SmiXetterTypeCode XetSingle;
    
public static SmiXetterTypeCode XetDouble;
    
public static SmiXetterTypeCode XetSqlDecimal;
    
public static SmiXetterTypeCode XetDateTime;
    
public static SmiXetterTypeCode XetGuid;
    
public static SmiXetterTypeCode GetVariantMetaData;
    
public static SmiXetterTypeCode GetXet;
    
public static SmiXetterTypeCode XetTime;
    
public static SmiXetterTypeCode XetTimeSpan;
    
public static SmiXetterTypeCode XetDateTimeOffset;
}
public class Microsoft.SqlServer.Server.SqlContext : object {
    
public static bool IsAvailable { get; }
    
public static SqlPipe Pipe { get; }
    
public static SqlTriggerContext TriggerContext { get; }
    
public static WindowsIdentity WindowsIdentity { get; }
    public static bool get_IsAvailable();
    public static SqlPipe get_Pipe();
    public static SqlTriggerContext get_TriggerContext();
    public static WindowsIdentity get_WindowsIdentity();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SqlServer.Server.SqlDataRecord : object {
    
private SmiRecordBuffer _recordBuffer;
    
private SmiExtendedMetaData[] _columnSmiMetaData;
    
private SmiEventSink_Default _eventSink;
    
private SqlMetaData[] _columnMetaData;
    
private FieldNameLookup _fieldNameLookup;
    
private bool _usesStringStorageForXml;
    
private static SmiMetaData s_maxNVarCharForXml;
    
public int FieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    
internal SmiRecordBuffer RecordBuffer { get; }
    public SqlDataRecord(SqlMetaData[] metaData);
    internal SqlDataRecord(SmiRecordBuffer recordBuffer, SmiExtendedMetaData[] metaData);
    private static SqlDataRecord();
    public virtual int get_FieldCount();
    public virtual string GetName(int ordinal);
    public virtual string GetDataTypeName(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual string GetString(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual DateTimeOffset GetDateTimeOffset(int ordinal);
    public virtual TimeSpan GetTimeSpan(int ordinal);
    public virtual bool IsDBNull(int ordinal);
    public virtual SqlMetaData GetSqlMetaData(int ordinal);
    public virtual Type GetSqlFieldType(int ordinal);
    public virtual object GetSqlValue(int ordinal);
    public virtual int GetSqlValues(Object[] values);
    public virtual SqlBinary GetSqlBinary(int ordinal);
    public virtual SqlBytes GetSqlBytes(int ordinal);
    public virtual SqlXml GetSqlXml(int ordinal);
    public virtual SqlBoolean GetSqlBoolean(int ordinal);
    public virtual SqlByte GetSqlByte(int ordinal);
    public virtual SqlChars GetSqlChars(int ordinal);
    public virtual SqlInt16 GetSqlInt16(int ordinal);
    public virtual SqlInt32 GetSqlInt32(int ordinal);
    public virtual SqlInt64 GetSqlInt64(int ordinal);
    public virtual SqlSingle GetSqlSingle(int ordinal);
    public virtual SqlDouble GetSqlDouble(int ordinal);
    public virtual SqlMoney GetSqlMoney(int ordinal);
    public virtual SqlDateTime GetSqlDateTime(int ordinal);
    public virtual SqlDecimal GetSqlDecimal(int ordinal);
    public virtual SqlString GetSqlString(int ordinal);
    public virtual SqlGuid GetSqlGuid(int ordinal);
    public virtual int SetValues(Object[] values);
    public virtual void SetValue(int ordinal, object value);
    public virtual void SetBoolean(int ordinal, bool value);
    public virtual void SetByte(int ordinal, byte value);
    public virtual void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetChar(int ordinal, char value);
    public virtual void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetInt16(int ordinal, short value);
    public virtual void SetInt32(int ordinal, int value);
    public virtual void SetInt64(int ordinal, long value);
    public virtual void SetFloat(int ordinal, float value);
    public virtual void SetDouble(int ordinal, double value);
    public virtual void SetString(int ordinal, string value);
    public virtual void SetDecimal(int ordinal, decimal value);
    public virtual void SetDateTime(int ordinal, DateTime value);
    public virtual void SetTimeSpan(int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(int ordinal, DateTimeOffset value);
    public virtual void SetDBNull(int ordinal);
    public virtual void SetGuid(int ordinal, Guid value);
    public virtual void SetSqlBoolean(int ordinal, SqlBoolean value);
    public virtual void SetSqlByte(int ordinal, SqlByte value);
    public virtual void SetSqlInt16(int ordinal, SqlInt16 value);
    public virtual void SetSqlInt32(int ordinal, SqlInt32 value);
    public virtual void SetSqlInt64(int ordinal, SqlInt64 value);
    public virtual void SetSqlSingle(int ordinal, SqlSingle value);
    public virtual void SetSqlDouble(int ordinal, SqlDouble value);
    public virtual void SetSqlMoney(int ordinal, SqlMoney value);
    public virtual void SetSqlDateTime(int ordinal, SqlDateTime value);
    public virtual void SetSqlXml(int ordinal, SqlXml value);
    public virtual void SetSqlDecimal(int ordinal, SqlDecimal value);
    public virtual void SetSqlString(int ordinal, SqlString value);
    public virtual void SetSqlBinary(int ordinal, SqlBinary value);
    public virtual void SetSqlGuid(int ordinal, SqlGuid value);
    public virtual void SetSqlChars(int ordinal, SqlChars value);
    public virtual void SetSqlBytes(int ordinal, SqlBytes value);
    internal SmiRecordBuffer get_RecordBuffer();
    internal SqlMetaData[] InternalGetMetaData();
    internal SmiExtendedMetaData[] InternalGetSmiMetaData();
    internal SmiExtendedMetaData GetSmiMetaData(int ordinal);
    internal void ThrowIfInvalidOrdinal(int ordinal);
    private void EnsureSubclassOverride();
    public sealed virtual IDataReader GetData(int i);
}
[AttributeUsageAttribute("10624")]
public class Microsoft.SqlServer.Server.SqlFacetAttribute : Attribute {
    
private bool m_IsFixedLength;
    
private int m_MaxSize;
    
private int m_Scale;
    
private int m_Precision;
    
private bool m_IsNullable;
    
public bool IsFixedLength { get; public set; }
    
public int MaxSize { get; public set; }
    
public int Precision { get; public set; }
    
public int Scale { get; public set; }
    
public bool IsNullable { get; public set; }
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public int get_MaxSize();
    public void set_MaxSize(int value);
    public int get_Precision();
    public void set_Precision(int value);
    public int get_Scale();
    public void set_Scale(int value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlFunctionAttribute : Attribute {
    
private bool m_fDeterministic;
    
private DataAccessKind m_eDataAccess;
    
private SystemDataAccessKind m_eSystemDataAccess;
    
private bool m_fPrecise;
    
private string m_fName;
    
private string m_fTableDefinition;
    
private string m_FillRowMethodName;
    
public bool IsDeterministic { get; public set; }
    
public DataAccessKind DataAccess { get; public set; }
    
public SystemDataAccessKind SystemDataAccess { get; public set; }
    
public bool IsPrecise { get; public set; }
    
public string Name { get; public set; }
    
public string TableDefinition { get; public set; }
    
public string FillRowMethodName { get; public set; }
    public bool get_IsDeterministic();
    public void set_IsDeterministic(bool value);
    public DataAccessKind get_DataAccess();
    public void set_DataAccess(DataAccessKind value);
    public SystemDataAccessKind get_SystemDataAccess();
    public void set_SystemDataAccess(SystemDataAccessKind value);
    public bool get_IsPrecise();
    public void set_IsPrecise(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TableDefinition();
    public void set_TableDefinition(string value);
    public string get_FillRowMethodName();
    public void set_FillRowMethodName(string value);
}
public class Microsoft.SqlServer.Server.SqlMetaData : object {
    
private string _strName;
    
private long _lMaxLength;
    
private SqlDbType _sqlDbType;
    
private byte _bPrecision;
    
private byte _bScale;
    
private long _lLocale;
    
private SqlCompareOptions _eCompareOptions;
    
private string _xmlSchemaCollectionDatabase;
    
private string _xmlSchemaCollectionOwningSchema;
    
private string _xmlSchemaCollectionName;
    
private bool _bPartialLength;
    
private bool _useServerDefault;
    
private bool _isUniqueKey;
    
private SortOrder _columnSortOrder;
    
private int _sortOrdinal;
    
private static long x_lMax;
    
private static long x_lServerMaxUnicode;
    
private static long x_lServerMaxANSI;
    
private static long x_lServerMaxBinary;
    
private static bool x_defaultUseServerDefault;
    
private static bool x_defaultIsUniqueKey;
    
private static SortOrder x_defaultColumnSortOrder;
    
private static int x_defaultSortOrdinal;
    
private static SqlCompareOptions x_eDefaultStringCompareOptions;
    
private static Byte[] s_maxLenFromPrecision;
    
private static byte MaxTimeScale;
    
private static Byte[] s_maxVarTimeLenOffsetFromScale;
    
private static DateTime s_dtSmallMax;
    
private static DateTime s_dtSmallMin;
    
private static SqlMoney s_smSmallMax;
    
private static SqlMoney s_smSmallMin;
    
private static TimeSpan s_timeMin;
    
private static TimeSpan s_timeMax;
    
private static Int64[] s_unitTicksFromScale;
    
internal static SqlMetaData[] sxm_rgDefaults;
    
public SqlCompareOptions CompareOptions { get; }
    
public bool IsUniqueKey { get; }
    
public long LocaleId { get; }
    
public static long Max { get; }
    
public long MaxLength { get; }
    
public string Name { get; }
    
public byte Precision { get; }
    
public byte Scale { get; }
    
public SortOrder SortOrder { get; }
    
public int SortOrdinal { get; }
    
public SqlDbType SqlDbType { get; }
    
public string TypeName { get; }
    
public bool UseServerDefault { get; }
    
public string XmlSchemaCollectionDatabase { get; }
    
public string XmlSchemaCollectionName { get; }
    
public string XmlSchemaCollectionOwningSchema { get; }
    
internal bool IsPartialLength { get; }
    [MonoTODOAttribute]

public DbType DbType { get; }
    
public Type Type { get; }
    public SqlMetaData(string name, SqlDbType dbType);
    public SqlMetaData(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale);
    public SqlMetaData(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType);
    public SqlMetaData(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlMetaData(string name, SqlDbType dbType, string database, string owningSchema, string objectName);
    internal SqlMetaData(string name, SqlDbType sqlDBType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName, bool partialLength);
    private SqlMetaData(string name, SqlDbType sqlDbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, bool partialLength);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType);
    private static SqlMetaData();
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName);
    public SqlMetaData(string name, SqlDbType dbType, Type userDefinedType, string serverTypeName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    public SqlCompareOptions get_CompareOptions();
    public bool get_IsUniqueKey();
    public long get_LocaleId();
    public static long get_Max();
    public long get_MaxLength();
    public string get_Name();
    public byte get_Precision();
    public byte get_Scale();
    public SortOrder get_SortOrder();
    public int get_SortOrdinal();
    public SqlDbType get_SqlDbType();
    public string get_TypeName();
    public bool get_UseServerDefault();
    public string get_XmlSchemaCollectionDatabase();
    public string get_XmlSchemaCollectionName();
    public string get_XmlSchemaCollectionOwningSchema();
    internal bool get_IsPartialLength();
    private void Construct(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void Construct(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal);
    private void AssertNameIsValid(string name);
    private void ValidateSortOrder(SortOrder columnSortOrder, int sortOrdinal);
    public short Adjust(short value);
    public int Adjust(int value);
    public long Adjust(long value);
    public float Adjust(float value);
    public double Adjust(double value);
    public string Adjust(string value);
    public decimal Adjust(decimal value);
    public DateTime Adjust(DateTime value);
    public Guid Adjust(Guid value);
    public SqlBoolean Adjust(SqlBoolean value);
    public SqlByte Adjust(SqlByte value);
    public SqlInt16 Adjust(SqlInt16 value);
    public SqlInt32 Adjust(SqlInt32 value);
    public SqlInt64 Adjust(SqlInt64 value);
    public SqlSingle Adjust(SqlSingle value);
    public SqlDouble Adjust(SqlDouble value);
    public SqlMoney Adjust(SqlMoney value);
    public SqlDateTime Adjust(SqlDateTime value);
    public SqlDecimal Adjust(SqlDecimal value);
    public SqlString Adjust(SqlString value);
    public SqlBinary Adjust(SqlBinary value);
    public SqlGuid Adjust(SqlGuid value);
    public SqlChars Adjust(SqlChars value);
    public SqlBytes Adjust(SqlBytes value);
    public SqlXml Adjust(SqlXml value);
    public TimeSpan Adjust(TimeSpan value);
    public DateTimeOffset Adjust(DateTimeOffset value);
    public object Adjust(object value);
    public static SqlMetaData InferFromValue(object value, string name);
    public bool Adjust(bool value);
    public byte Adjust(byte value);
    public Byte[] Adjust(Byte[] value);
    public char Adjust(char value);
    public Char[] Adjust(Char[] value);
    internal static SqlMetaData GetPartialLengthMetaData(SqlMetaData md);
    private static void ThrowInvalidType();
    private void VerifyDateTimeRange(DateTime value);
    private void VerifyMoneyRange(SqlMoney value);
    private SqlDecimal InternalAdjustSqlDecimal(SqlDecimal value);
    private void VerifyTimeRange(TimeSpan value);
    private long InternalAdjustTimeTicks(long ticks);
    private static byte InferScaleFromTimeTicks(long ticks);
    private void SetDefaultsForType(SqlDbType dbType);
    private void ThrowIfUdt(SqlDbType dbType);
    public DbType get_DbType();
    public Type get_Type();
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlMethodAttribute : SqlFunctionAttribute {
    
private bool m_fCallOnNullInputs;
    
private bool m_fMutator;
    
private bool m_fInvokeIfReceiverIsNull;
    
public bool OnNullCall { get; public set; }
    
public bool IsMutator { get; public set; }
    
public bool InvokeIfReceiverIsNull { get; public set; }
    public bool get_OnNullCall();
    public void set_OnNullCall(bool value);
    public bool get_IsMutator();
    public void set_IsMutator(bool value);
    public bool get_InvokeIfReceiverIsNull();
    public void set_InvokeIfReceiverIsNull(bool value);
}
public class Microsoft.SqlServer.Server.SqlPipe : object {
    
public bool IsSendingResults { get; }
    public bool get_IsSendingResults();
    public void ExecuteAndSend(SqlCommand command);
    public void Send(string message);
    public void Send(SqlDataReader reader);
    public void Send(SqlDataRecord record);
    public void SendResultsStart(SqlDataRecord record);
    public void SendResultsRow(SqlDataRecord record);
    public void SendResultsEnd();
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlProcedureAttribute : Attribute {
    
private string m_fName;
    
public string Name { get; public set; }
    public string get_Name();
    public void set_Name(string value);
}
internal class Microsoft.SqlServer.Server.SqlRecordBuffer : object {
    
private bool _isNull;
    
private StorageType _type;
    
private Storage _value;
    
private object _object;
    
private SmiMetaData _metadata;
    
private bool _isMetaSet;
    
internal bool IsNull { get; }
    
internal bool Boolean { get; internal set; }
    
internal byte Byte { get; internal set; }
    
internal DateTime DateTime { get; internal set; }
    
internal DateTimeOffset DateTimeOffset { get; internal set; }
    
internal double Double { get; internal set; }
    
internal Guid Guid { get; internal set; }
    
internal short Int16 { get; internal set; }
    
internal int Int32 { get; internal set; }
    
internal long Int64 { get; internal set; }
    
internal float Single { get; internal set; }
    
internal string String { get; internal set; }
    
internal SqlDecimal SqlDecimal { get; internal set; }
    
internal TimeSpan TimeSpan { get; internal set; }
    
internal long BytesLength { get; internal set; }
    
internal long CharsLength { get; internal set; }
    
internal SmiMetaData VariantType { get; internal set; }
    internal SqlRecordBuffer(SmiMetaData metaData);
    internal bool get_IsNull();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
    internal DateTimeOffset get_DateTimeOffset();
    internal void set_DateTimeOffset(DateTimeOffset value);
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal void set_Guid(Guid value);
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal void set_String(string value);
    internal SqlDecimal get_SqlDecimal();
    internal void set_SqlDecimal(SqlDecimal value);
    internal TimeSpan get_TimeSpan();
    internal void set_TimeSpan(TimeSpan value);
    internal long get_BytesLength();
    internal void set_BytesLength(long value);
    internal long get_CharsLength();
    internal void set_CharsLength(long value);
    internal SmiMetaData get_VariantType();
    internal void set_VariantType(SmiMetaData value);
    internal int GetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int GetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetNull();
    private void ConvertXmlStringToByteArray();
}
[AttributeUsageAttribute("64")]
public class Microsoft.SqlServer.Server.SqlTriggerAttribute : Attribute {
    
private string m_fName;
    
private string m_fTarget;
    
private string m_fEvent;
    
public string Name { get; public set; }
    
public string Target { get; public set; }
    
public string Event { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Target();
    public void set_Target(string value);
    public string get_Event();
    public void set_Event(string value);
}
public class Microsoft.SqlServer.Server.SqlTriggerContext : object {
    
private TriggerAction _triggerAction;
    
private Boolean[] _columnsUpdated;
    
private SqlXml _eventInstanceData;
    
public int ColumnCount { get; }
    
public SqlXml EventData { get; }
    
public TriggerAction TriggerAction { get; }
    internal SqlTriggerContext(TriggerAction triggerAction, Boolean[] columnsUpdated, SqlXml eventInstanceData);
    public int get_ColumnCount();
    public SqlXml get_EventData();
    public TriggerAction get_TriggerAction();
    public bool IsUpdatedColumn(int columnOrdinal);
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute : Attribute {
    
private int m_MaxByteSize;
    
private bool m_fInvariantToDup;
    
private bool m_fInvariantToNulls;
    
private bool m_fInvariantToOrder;
    
private bool m_fNullIfEmpty;
    
private Format m_format;
    
private string m_fName;
    
public static int MaxByteSizeValue;
    
public int MaxByteSize { get; public set; }
    
public bool IsInvariantToDuplicates { get; public set; }
    
public bool IsInvariantToNulls { get; public set; }
    
public bool IsInvariantToOrder { get; public set; }
    
public bool IsNullIfEmpty { get; public set; }
    
public Format Format { get; }
    
public string Name { get; public set; }
    public SqlUserDefinedAggregateAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsInvariantToDuplicates();
    public void set_IsInvariantToDuplicates(bool value);
    public bool get_IsInvariantToNulls();
    public void set_IsInvariantToNulls(bool value);
    public bool get_IsInvariantToOrder();
    public void set_IsInvariantToOrder(bool value);
    public bool get_IsNullIfEmpty();
    public void set_IsNullIfEmpty(bool value);
    public Format get_Format();
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("12")]
public class Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute : Attribute {
    
private int m_MaxByteSize;
    
private bool m_IsFixedLength;
    
private bool m_IsByteOrdered;
    
private Format m_format;
    
private string m_fName;
    
internal static int YukonMaxByteSizeValue;
    
private string m_ValidationMethodName;
    
public int MaxByteSize { get; public set; }
    
public bool IsFixedLength { get; public set; }
    
public bool IsByteOrdered { get; public set; }
    
public Format Format { get; }
    
public string ValidationMethodName { get; public set; }
    
public string Name { get; public set; }
    public SqlUserDefinedTypeAttribute(Format format);
    public int get_MaxByteSize();
    public void set_MaxByteSize(int value);
    public bool get_IsFixedLength();
    public void set_IsFixedLength(bool value);
    public bool get_IsByteOrdered();
    public void set_IsByteOrdered(bool value);
    public Format get_Format();
    public string get_ValidationMethodName();
    public void set_ValidationMethodName(string value);
    public string get_Name();
    public void set_Name(string value);
}
public enum Microsoft.SqlServer.Server.SystemDataAccessKind : Enum {
    
public int value__;
    
public static SystemDataAccessKind None;
    
public static SystemDataAccessKind Read;
}
public enum Microsoft.SqlServer.Server.TriggerAction : Enum {
    
public int value__;
    
public static TriggerAction Invalid;
    
public static TriggerAction Insert;
    
public static TriggerAction Update;
    
public static TriggerAction Delete;
    
public static TriggerAction CreateTable;
    
public static TriggerAction AlterTable;
    
public static TriggerAction DropTable;
    
public static TriggerAction CreateIndex;
    
public static TriggerAction AlterIndex;
    
public static TriggerAction DropIndex;
    
public static TriggerAction CreateSynonym;
    
public static TriggerAction DropSynonym;
    
public static TriggerAction CreateSecurityExpression;
    
public static TriggerAction DropSecurityExpression;
    
public static TriggerAction CreateView;
    
public static TriggerAction AlterView;
    
public static TriggerAction DropView;
    
public static TriggerAction CreateProcedure;
    
public static TriggerAction AlterProcedure;
    
public static TriggerAction DropProcedure;
    
public static TriggerAction CreateFunction;
    
public static TriggerAction AlterFunction;
    
public static TriggerAction DropFunction;
    
public static TriggerAction CreateTrigger;
    
public static TriggerAction AlterTrigger;
    
public static TriggerAction DropTrigger;
    
public static TriggerAction CreateEventNotification;
    
public static TriggerAction DropEventNotification;
    
public static TriggerAction CreateType;
    
public static TriggerAction DropType;
    
public static TriggerAction CreateAssembly;
    
public static TriggerAction AlterAssembly;
    
public static TriggerAction DropAssembly;
    
public static TriggerAction CreateUser;
    
public static TriggerAction AlterUser;
    
public static TriggerAction DropUser;
    
public static TriggerAction CreateRole;
    
public static TriggerAction AlterRole;
    
public static TriggerAction DropRole;
    
public static TriggerAction CreateAppRole;
    
public static TriggerAction AlterAppRole;
    
public static TriggerAction DropAppRole;
    
public static TriggerAction CreateSchema;
    
public static TriggerAction AlterSchema;
    
public static TriggerAction DropSchema;
    
public static TriggerAction CreateLogin;
    
public static TriggerAction AlterLogin;
    
public static TriggerAction DropLogin;
    
public static TriggerAction CreateMsgType;
    
public static TriggerAction DropMsgType;
    
public static TriggerAction CreateContract;
    
public static TriggerAction DropContract;
    
public static TriggerAction CreateQueue;
    
public static TriggerAction AlterQueue;
    
public static TriggerAction DropQueue;
    
public static TriggerAction CreateService;
    
public static TriggerAction AlterService;
    
public static TriggerAction DropService;
    
public static TriggerAction CreateRoute;
    
public static TriggerAction AlterRoute;
    
public static TriggerAction DropRoute;
    
public static TriggerAction GrantStatement;
    
public static TriggerAction DenyStatement;
    
public static TriggerAction RevokeStatement;
    
public static TriggerAction GrantObject;
    
public static TriggerAction DenyObject;
    
public static TriggerAction RevokeObject;
    
public static TriggerAction CreateBinding;
    
public static TriggerAction AlterBinding;
    
public static TriggerAction DropBinding;
    
public static TriggerAction CreatePartitionFunction;
    
public static TriggerAction AlterPartitionFunction;
    
public static TriggerAction DropPartitionFunction;
    
public static TriggerAction CreatePartitionScheme;
    
public static TriggerAction AlterPartitionScheme;
    
public static TriggerAction DropPartitionScheme;
}
internal static class Microsoft.SqlServer.Server.ValueUtilsSmi : object {
    
private static int __maxByteChunkSize;
    
private static int __maxCharChunkSize;
    
private static int NoLengthLimit;
    
private static int constBinBufferSize;
    
private static int constTextBufferSize;
    
private static Object[] s_typeSpecificNullForSqlValue;
    
private static DateTime s_dtSmallMax;
    
private static DateTime s_dtSmallMin;
    
private static TimeSpan s_timeMin;
    
private static TimeSpan s_timeMax;
    
private static bool X;
    
private static bool _;
    
private static Boolean[0...,0...] s_canAccessGetterDirectly;
    
private static Boolean[0...,0...] s_canAccessSetterDirectly;
    private static ValueUtilsSmi();
    internal static bool IsDBNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static bool GetBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static byte GetByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static long GetBytesConversion(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiExtendedMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetBytesInternal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length, bool throwOnNull);
    internal static long GetChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static DateTime GetDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData, bool gettersSupportKatmaiDateTime);
    internal static DateTimeOffset GetDateTimeOffset(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static decimal GetDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static double GetDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static Guid GetGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static short GetInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static int GetInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static long GetInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static float GetSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBinary GetSqlBinary(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBoolean GetSqlBoolean(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlByte GetSqlByte(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlBytes GetSqlBytes(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlChars GetSqlChars(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDateTime GetSqlDateTime(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDecimal GetSqlDecimal(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlDouble GetSqlDouble(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlGuid GetSqlGuid(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt16 GetSqlInt16(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt32 GetSqlInt32(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlInt64 GetSqlInt64(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlMoney GetSqlMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlSingle GetSqlSingle(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlString GetSqlString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static SqlXml GetSqlXml(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static string GetString(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static TimeSpan GetTimeSpan(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static object GetSqlValue200(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal, SmiMetaData metaData);
    internal static object GetSqlValue(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    internal static void SetDBNull(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    internal static void SetBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, bool value);
    internal static void SetByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, byte value);
    internal static long SetBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal static long SetBytesLength(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long length);
    internal static long SetChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal static void SetDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    internal static void SetDateTimeOffset(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTimeOffset value);
    internal static void SetDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    internal static void SetDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, double value);
    internal static void SetGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Guid value);
    internal static void SetInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, short value);
    internal static void SetInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, int value);
    internal static void SetInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, long value);
    internal static void SetSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, float value);
    internal static void SetSqlBinary(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value);
    internal static void SetSqlBoolean(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBoolean value);
    internal static void SetSqlByte(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlByte value);
    internal static void SetSqlBytes(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value);
    internal static void SetSqlChars(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value);
    internal static void SetSqlDateTime(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    internal static void SetSqlDecimal(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDecimal value);
    internal static void SetSqlDouble(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDouble value);
    internal static void SetSqlGuid(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlGuid value);
    internal static void SetSqlInt16(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt16 value);
    internal static void SetSqlInt32(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt32 value);
    internal static void SetSqlInt64(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlInt64 value);
    internal static void SetSqlMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    internal static void SetSqlSingle(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlSingle value);
    internal static void SetSqlString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value);
    internal static void SetSqlXml(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlXml value);
    internal static void SetString(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value);
    internal static void SetTimeSpan(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, TimeSpan value);
    internal static void SetCompatibleValue(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead, StorageType storageType);
    internal static void SetCompatibleValueV200(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, object value, ExtendedClrTypeCode typeCode, int offset, int length, ParameterPeekAheadValue peekAhead);
    private static void SetDataTable_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DataTable value);
    internal static void FillCompatibleITypedSettersFromReader(SmiEventSink_Default sink, ITypedSettersV3 setters, SmiMetaData[] metaData, SqlDataReader reader);
    internal static void FillCompatibleSettersFromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, IList`1<SmiExtendedMetaData> metaData, DbDataReader reader);
    internal static void FillCompatibleSettersFromRecord(SmiEventSink_Default sink, SmiTypedGetterSetter setters, SmiMetaData[] metaData, SqlDataRecord record, SmiDefaultFieldsProperty useDefaultValues);
    internal static Stream CopyIntoNewSmiScratchStream(Stream source, SmiEventSink_Default sink);
    private static decimal GetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, SmiMetaData metaData);
    private static void SetDecimal_PossiblyMoney(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, decimal value);
    private static void VerifyDateTimeRange(SqlDbType dbType, DateTime value);
    private static void VerifyTimeRange(SqlDbType dbType, TimeSpan value);
    private static void SetDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Checked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, TimeSpan value);
    private static void SetSqlDateTime_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDateTime value);
    private static void SetDateTime2_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetSqlMoney_Checked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetByteArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Byte[] buffer, int offset);
    private static void SetCharArray_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, Char[] buffer, int offset);
    private static void SetSqlBinary_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBinary value, int offset);
    private static void SetBytes_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetBytes_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlBytes_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlBytes value, int offset);
    private static void SetChars_FromRecord(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlDataRecord record, int offset);
    private static void SetCharsOrString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetChars_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetString_FromReader(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader reader, int offset);
    private static void SetSqlChars_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlChars value, int offset);
    private static void SetSqlString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset);
    private static void SetString_LengthChecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, string value, int offset);
    private static void ThrowIfInvalidSetterAccess(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static void ThrowIfITypedGettersIsNull(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool CanAccessGetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static bool CanAccessSetterDirectly(SmiMetaData metaData, ExtendedClrTypeCode setterTypeCode);
    private static long PositiveMin(long first, long second);
    private static int CheckXetParameters(SqlDbType dbType, long maxLength, long actualLength, long fieldOffset, int bufferLength, int bufferOffset, int length);
    private static bool IsDBNull_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static bool GetBoolean_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static byte GetByte_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Byte[] GetByteArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetBytes_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static long GetBytesLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Char[] GetCharArray_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    internal static int GetChars_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static long GetCharsLength_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTime GetDateTime_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static DateTimeOffset GetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static double GetDouble_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static Guid GetGuid_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static short GetInt16_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static int GetInt32_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static long GetInt64_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static float GetSingle_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlBinary GetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlDecimal GetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlMoney GetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static SqlXml GetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static string GetString_Unchecked(SmiEventSink_Default sink, ITypedGettersV3 getters, int ordinal);
    private static TimeSpan GetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter getters, int ordinal);
    private static void SetBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, bool value);
    private static void SetByteArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Byte[] buffer, int bufferOffset, int length);
    private static void SetStream_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, StreamDataFeed feed);
    private static void SetTextReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metadata, TextDataFeed feed);
    private static void SetByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, byte value);
    private static int SetBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private static void SetCharArray_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Char[] buffer, int bufferOffset, int length);
    private static int SetChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    private static void SetDBNull_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal);
    private static void SetDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, decimal value);
    private static void SetDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, DateTime value);
    private static void SetDateTime2_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetDate_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, DateTime value);
    private static void SetTimeSpan_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, TimeSpan value);
    private static void SetDateTimeOffset_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, DateTimeOffset value);
    private static void SetDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, double value);
    private static void SetGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, Guid value);
    private static void SetInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, short value);
    private static void SetInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, int value);
    private static void SetInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, long value);
    private static void SetSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, float value);
    private static void SetSqlBinary_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBinary value, int offset, int length);
    private static void SetSqlBoolean_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBoolean value);
    private static void SetSqlByte_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlByte value);
    private static void SetSqlBytes_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlBytes value, int offset, long length);
    private static void SetSqlChars_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlChars value, int offset, int length);
    private static void SetSqlDateTime_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDateTime value);
    private static void SetSqlDecimal_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDecimal value);
    private static void SetSqlDouble_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlDouble value);
    private static void SetSqlGuid_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlGuid value);
    private static void SetSqlInt16_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt16 value);
    private static void SetSqlInt32_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt32 value);
    private static void SetSqlInt64_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlInt64 value);
    private static void SetSqlMoney_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlMoney value);
    private static void SetSqlSingle_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlSingle value);
    private static void SetSqlString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SmiMetaData metaData, SqlString value, int offset, int length);
    private static void SetSqlXml_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, SqlXml value);
    private static void SetXmlReader_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, XmlReader xmlReader);
    private static void SetString_Unchecked(SmiEventSink_Default sink, ITypedSettersV3 setters, int ordinal, string value, int offset, int length);
    private static void SetDbDataReader_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, DbDataReader value);
    private static void SetIEnumerableOfSqlDataRecord_Unchecked(SmiEventSink_Default sink, SmiTypedGetterSetter setters, int ordinal, SmiMetaData metaData, IEnumerable`1<SqlDataRecord> value, ParameterPeekAheadValue peekAhead);
}
internal class Microsoft.Win32.SafeHandles.SafeGssContextHandle : SafeHandle {
    
public bool IsInvalid { get; }
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeGssCredHandle : SafeHandle {
    
public bool IsInvalid { get; }
    public static SafeGssCredHandle Create(string username, string password, bool isNtlmOnly);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeGssNameHandle : SafeHandle {
    
public bool IsInvalid { get; }
    public static SafeGssNameHandle CreateUser(string name);
    public static SafeGssNameHandle CreatePrincipal(string name);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal static class Res : object {
    
internal static string CodeGen_InvalidIdentifier;
    
internal static string CodeGen_DuplicateTableName;
    
internal static string CodeGen_TypeCantBeNull;
    
internal static string CodeGen_NoCtor0;
    
internal static string CodeGen_NoCtor1;
    
internal static string SQLUDT_MaxByteSizeValue;
    
internal static string SqlUdt_InvalidUdtMessage;
    
internal static string Sql_NullCommandText;
    
internal static string Sql_MismatchedMetaDataDirectionArrayLengths;
    
public static string ADP_InvalidXMLBadVersion;
    
public static string ADP_NotAPermissionElement;
    
public static string ADP_PermissionTypeMismatch;
    
public static string ConfigProviderNotFound;
    
public static string ConfigProviderInvalid;
    
public static string ConfigProviderNotInstalled;
    
public static string ConfigProviderMissing;
    
public static string ConfigBaseElementsOnly;
    
public static string ConfigBaseNoChildNodes;
    
public static string ConfigUnrecognizedAttributes;
    
public static string ConfigUnrecognizedElement;
    
public static string ConfigSectionsUnique;
    
public static string ConfigRequiredAttributeMissing;
    
public static string ConfigRequiredAttributeEmpty;
    
public static string ADP_QuotePrefixNotSet;
    internal static string GetString(string name);
    internal static string GetString(string name, Object[] args);
}
internal class SqlDependencyProcessDispatcher : MarshalByRefObject {
    
private static SqlDependencyProcessDispatcher s_staticInstance;
    
private Dictionary`2<SqlConnectionContainerHashHelper, SqlConnectionContainer> _connectionContainers;
    
private Dictionary`2<string, SqlDependencyPerAppDomainDispatcher> _sqlDependencyPerAppDomainDispatchers;
    
internal static SqlDependencyProcessDispatcher SingletonProcessDispatcher { get; }
    private SqlDependencyProcessDispatcher(object dummyVariable);
    private static SqlDependencyProcessDispatcher();
    internal static SqlDependencyProcessDispatcher get_SingletonProcessDispatcher();
    private static SqlConnectionContainerHashHelper GetHashHelper(string connectionString, SqlConnectionStringBuilder& connectionStringBuilder, DbConnectionPoolIdentity& identity, String& user, string queue);
    public virtual object InitializeLifetimeService();
    private void Invalidate(string server, SqlNotification sqlNotification);
    internal void QueueAppDomainUnloading(string appDomainKey);
    private void AppDomainUnloading(object state);
    internal bool StartWithDefault(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& service, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart);
    internal bool Start(string connectionString, string queue, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher);
    private bool Start(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, SqlDependencyPerAppDomainDispatcher dispatcher, Boolean& errorOccurred, Boolean& appDomainStart, bool useDefaults);
    internal bool Stop(string connectionString, String& server, DbConnectionPoolIdentity& identity, String& user, String& database, String& queueService, string appDomainKey, Boolean& appDomainStop);
}
internal static class SR : object {
    
public static string ADP_CollectionIndexString;
    
public static string ADP_CollectionInvalidType;
    
public static string ADP_CollectionIsNotParent;
    
public static string ADP_CollectionNullValue;
    
public static string ADP_CollectionRemoveInvalidObject;
    
public static string ADP_CollectionUniqueValue;
    
public static string ADP_ConnectionStateMsg_Closed;
    
public static string ADP_ConnectionStateMsg_Connecting;
    
public static string ADP_ConnectionStateMsg_Open;
    
public static string ADP_ConnectionStateMsg_OpenExecuting;
    
public static string ADP_ConnectionStateMsg_OpenFetching;
    
public static string ADP_ConnectionStateMsg;
    
public static string ADP_ConnectionStringSyntax;
    
public static string ADP_DataReaderClosed;
    
public static string ADP_EmptyString;
    
public static string ADP_InvalidEnumerationValue;
    
public static string ADP_InvalidKey;
    
public static string ADP_InvalidValue;
    
public static string Xml_SimpleTypeNotSupported;
    
public static string Xml_MissingAttribute;
    
public static string Xml_ValueOutOfRange;
    
public static string Xml_AttributeValues;
    
public static string Xml_RelationParentNameMissing;
    
public static string Xml_RelationChildNameMissing;
    
public static string Xml_RelationTableKeyMissing;
    
public static string Xml_RelationChildKeyMissing;
    
public static string Xml_UndefinedDatatype;
    
public static string Xml_DatatypeNotDefined;
    
public static string Xml_InvalidField;
    
public static string Xml_InvalidSelector;
    
public static string Xml_InvalidKey;
    
public static string Xml_DuplicateConstraint;
    
public static string Xml_CannotConvert;
    
public static string Xml_MissingRefer;
    
public static string Xml_MismatchKeyLength;
    
public static string Xml_CircularComplexType;
    
public static string Xml_CannotInstantiateAbstract;
    
public static string Xml_MultipleTargetConverterError;
    
public static string Xml_MultipleTargetConverterEmpty;
    
public static string Xml_MergeDuplicateDeclaration;
    
public static string Xml_MissingTable;
    
public static string Xml_MissingSQL;
    
public static string Xml_ColumnConflict;
    
public static string Xml_InvalidPrefix;
    
public static string Xml_NestedCircular;
    
public static string Xml_FoundEntity;
    
public static string Xml_PolymorphismNotSupported;
    
public static string Xml_CanNotDeserializeObjectType;
    
public static string Xml_DataTableInferenceNotSupported;
    
public static string Xml_MultipleParentRows;
    
public static string Xml_IsDataSetAttributeMissingInSchema;
    
public static string Xml_TooManyIsDataSetAtributeInSchema;
    
public static string Xml_DynamicWithoutXmlSerializable;
    
public static string Expr_NYI;
    
public static string Expr_MissingOperand;
    
public static string Expr_TypeMismatch;
    
public static string Expr_ExpressionTooComplex;
    
public static string Expr_UnboundName;
    
public static string Expr_InvalidString;
    
public static string Expr_UndefinedFunction;
    
public static string Expr_Syntax;
    
public static string Expr_FunctionArgumentCount;
    
public static string Expr_MissingRightParen;
    
public static string Expr_UnknownToken;
    
public static string Expr_UnknownToken1;
    
public static string Expr_DatatypeConvertion;
    
public static string Expr_DatavalueConvertion;
    
public static string Expr_InvalidName;
    
public static string Expr_InvalidDate;
    
public static string Expr_NonConstantArgument;
    
public static string Expr_InvalidPattern;
    
public static string Expr_InWithoutParentheses;
    
public static string Expr_ArgumentType;
    
public static string Expr_ArgumentTypeInteger;
    
public static string Expr_TypeMismatchInBinop;
    
public static string Expr_AmbiguousBinop;
    
public static string Expr_InWithoutList;
    
public static string Expr_UnsupportedOperator;
    
public static string Expr_InvalidNameBracketing;
    
public static string Expr_MissingOperandBefore;
    
public static string Expr_TooManyRightParentheses;
    
public static string Expr_UnresolvedRelation;
    
public static string Expr_AggregateArgument;
    
public static string Expr_AggregateUnbound;
    
public static string Expr_EvalNoContext;
    
public static string Expr_ExpressionUnbound;
    
public static string Expr_ComputeNotAggregate;
    
public static string Expr_FilterConvertion;
    
public static string Expr_InvalidType;
    
public static string Expr_LookupArgument;
    
public static string Expr_InvokeArgument;
    
public static string Expr_ArgumentOutofRange;
    
public static string Expr_IsSyntax;
    
public static string Expr_Overflow;
    
public static string Expr_BindFailure;
    
public static string Expr_InvalidHoursArgument;
    
public static string Expr_InvalidMinutesArgument;
    
public static string Expr_InvalidTimeZoneRange;
    
public static string Expr_MismatchKindandTimeSpan;
    
public static string Expr_UnsupportedType;
    
public static string Data_EnforceConstraints;
    
public static string Data_CannotModifyCollection;
    
public static string Data_CaseInsensitiveNameConflict;
    
public static string Data_NamespaceNameConflict;
    
public static string Data_InvalidOffsetLength;
    
public static string Data_ArgumentOutOfRange;
    
public static string Data_ArgumentNull;
    
public static string Data_ArgumentContainsNull;
    
public static string DataColumns_OutOfRange;
    
public static string DataColumns_Add1;
    
public static string DataColumns_Add2;
    
public static string DataColumns_Add3;
    
public static string DataColumns_Add4;
    
public static string DataColumns_AddDuplicate;
    
public static string DataColumns_AddDuplicate2;
    
public static string DataColumns_AddDuplicate3;
    
public static string DataColumns_Remove;
    
public static string DataColumns_RemovePrimaryKey;
    
public static string DataColumns_RemoveChildKey;
    
public static string DataColumns_RemoveConstraint;
    
public static string DataColumn_AutoIncrementAndExpression;
    
public static string DataColumn_AutoIncrementAndDefaultValue;
    
public static string DataColumn_DefaultValueAndAutoIncrement;
    
public static string DataColumn_AutoIncrementSeed;
    
public static string DataColumn_NameRequired;
    
public static string DataColumn_ChangeDataType;
    
public static string DataColumn_NullDataType;
    
public static string DataColumn_DefaultValueDataType;
    
public static string DataColumn_DefaultValueDataType1;
    
public static string DataColumn_DefaultValueColumnDataType;
    
public static string DataColumn_ReadOnlyAndExpression;
    
public static string DataColumn_UniqueAndExpression;
    
public static string DataColumn_ExpressionAndUnique;
    
public static string DataColumn_ExpressionAndReadOnly;
    
public static string DataColumn_ExpressionAndConstraint;
    
public static string DataColumn_ExpressionInConstraint;
    
public static string DataColumn_ExpressionCircular;
    
public static string DataColumn_NullKeyValues;
    
public static string DataColumn_NullValues;
    
public static string DataColumn_ReadOnly;
    
public static string DataColumn_NonUniqueValues;
    
public static string DataColumn_NotInTheTable;
    
public static string DataColumn_NotInAnyTable;
    
public static string DataColumn_SetFailed;
    
public static string DataColumn_CannotSetToNull;
    
public static string DataColumn_LongerThanMaxLength;
    
public static string DataColumn_HasToBeStringType;
    
public static string DataColumn_CannotSetMaxLength;
    
public static string DataColumn_CannotSetMaxLength2;
    
public static string DataColumn_CannotSimpleContentType;
    
public static string DataColumn_CannotSimpleContent;
    
public static string DataColumn_ExceedMaxLength;
    
public static string DataColumn_NotAllowDBNull;
    
public static string DataColumn_CannotChangeNamespace;
    
public static string DataColumn_AutoIncrementCannotSetIfHasData;
    
public static string DataColumn_NotInTheUnderlyingTable;
    
public static string DataColumn_InvalidDataColumnMapping;
    
public static string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns;
    
public static string DataColumn_DateTimeMode;
    
public static string DataColumn_INullableUDTwithoutStaticNull;
    
public static string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible;
    
public static string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged;
    
public static string DataColumn_OrdinalExceedMaximun;
    
public static string DataColumn_NullableTypesNotSupported;
    
public static string DataConstraint_NoName;
    
public static string DataConstraint_Violation;
    
public static string DataConstraint_ViolationValue;
    
public static string DataConstraint_NotInTheTable;
    
public static string DataConstraint_OutOfRange;
    
public static string DataConstraint_Duplicate;
    
public static string DataConstraint_DuplicateName;
    
public static string DataConstraint_UniqueViolation;
    
public static string DataConstraint_ForeignTable;
    
public static string DataConstraint_ParentValues;
    
public static string DataConstraint_AddFailed;
    
public static string DataConstraint_RemoveFailed;
    
public static string DataConstraint_NeededForForeignKeyConstraint;
    
public static string DataConstraint_CascadeDelete;
    
public static string DataConstraint_CascadeUpdate;
    
public static string DataConstraint_ClearParentTable;
    
public static string DataConstraint_ForeignKeyViolation;
    
public static string DataConstraint_BadObjectPropertyAccess;
    
public static string DataConstraint_RemoveParentRow;
    
public static string DataConstraint_AddPrimaryKeyConstraint;
    
public static string DataConstraint_CantAddConstraintToMultipleNestedTable;
    
public static string DataKey_TableMismatch;
    
public static string DataKey_NoColumns;
    
public static string DataKey_TooManyColumns;
    
public static string DataKey_DuplicateColumns;
    
public static string DataKey_RemovePrimaryKey;
    
public static string DataKey_RemovePrimaryKey1;
    
public static string DataRelation_ColumnsTypeMismatch;
    
public static string DataRelation_KeyColumnsIdentical;
    
public static string DataRelation_KeyLengthMismatch;
    
public static string DataRelation_KeyZeroLength;
    
public static string DataRelation_ForeignRow;
    
public static string DataRelation_NoName;
    
public static string DataRelation_ForeignTable;
    
public static string DataRelation_ForeignDataSet;
    
public static string DataRelation_GetParentRowTableMismatch;
    
public static string DataRelation_SetParentRowTableMismatch;
    
public static string DataRelation_DataSetMismatch;
    
public static string DataRelation_TablesInDifferentSets;
    
public static string DataRelation_AlreadyExists;
    
public static string DataRelation_DoesNotExist;
    
public static string DataRelation_AlreadyInOtherDataSet;
    
public static string DataRelation_AlreadyInTheDataSet;
    
public static string DataRelation_DuplicateName;
    
public static string DataRelation_NotInTheDataSet;
    
public static string DataRelation_OutOfRange;
    
public static string DataRelation_TableNull;
    
public static string DataRelation_TableWasRemoved;
    
public static string DataRelation_ChildTableMismatch;
    
public static string DataRelation_ParentTableMismatch;
    
public static string DataRelation_RelationNestedReadOnly;
    
public static string DataRelation_TableCantBeNestedInTwoTables;
    
public static string DataRelation_LoopInNestedRelations;
    
public static string DataRelation_CaseLocaleMismatch;
    
public static string DataRelation_ParentOrChildColumnsDoNotHaveDataSet;
    
public static string DataRelation_InValidNestedRelation;
    
public static string DataRelation_InValidNamespaceInNestedRelation;
    
public static string DataRow_NotInTheDataSet;
    
public static string DataRow_NotInTheTable;
    
public static string DataRow_ParentRowNotInTheDataSet;
    
public static string DataRow_EditInRowChanging;
    
public static string DataRow_EndEditInRowChanging;
    
public static string DataRow_BeginEditInRowChanging;
    
public static string DataRow_CancelEditInRowChanging;
    
public static string DataRow_DeleteInRowDeleting;
    
public static string DataRow_ValuesArrayLength;
    
public static string DataRow_NoCurrentData;
    
public static string DataRow_NoOriginalData;
    
public static string DataRow_NoProposedData;
    
public static string DataRow_RemovedFromTheTable;
    
public static string DataRow_DeletedRowInaccessible;
    
public static string DataRow_InvalidVersion;
    
public static string DataRow_OutOfRange;
    
public static string DataRow_RowInsertOutOfRange;
    
public static string DataRow_RowInsertMissing;
    
public static string DataRow_RowOutOfRange;
    
public static string DataRow_AlreadyInOtherCollection;
    
public static string DataRow_AlreadyInTheCollection;
    
public static string DataRow_AlreadyDeleted;
    
public static string DataRow_Empty;
    
public static string DataRow_AlreadyRemoved;
    
public static string DataRow_MultipleParents;
    
public static string DataRow_InvalidRowBitPattern;
    
public static string DataSet_SetNameToEmpty;
    
public static string DataSet_SetDataSetNameConflicting;
    
public static string DataSet_UnsupportedSchema;
    
public static string DataSet_CannotChangeCaseLocale;
    
public static string DataSet_CannotChangeSchemaSerializationMode;
    
public static string DataTable_ForeignPrimaryKey;
    
public static string DataTable_CannotAddToSimpleContent;
    
public static string DataTable_NoName;
    
public static string DataTable_MultipleSimpleContentColumns;
    
public static string DataTable_MissingPrimaryKey;
    
public static string DataTable_InvalidSortString;
    
public static string DataTable_CanNotSerializeDataTableHierarchy;
    
public static string DataTable_CanNotRemoteDataTable;
    
public static string DataTable_CanNotSetRemotingFormat;
    
public static string DataTable_CanNotSerializeDataTableWithEmptyName;
    
public static string DataTable_DuplicateName;
    
public static string DataTable_DuplicateName2;
    
public static string DataTable_SelfnestedDatasetConflictingName;
    
public static string DataTable_DatasetConflictingName;
    
public static string DataTable_AlreadyInOtherDataSet;
    
public static string DataTable_AlreadyInTheDataSet;
    
public static string DataTable_NotInTheDataSet;
    
public static string DataTable_OutOfRange;
    
public static string DataTable_InRelation;
    
public static string DataTable_InConstraint;
    
public static string DataTable_TableNotFound;
    
public static string DataMerge_MissingDefinition;
    
public static string DataMerge_MissingConstraint;
    
public static string DataMerge_DataTypeMismatch;
    
public static string DataMerge_PrimaryKeyMismatch;
    
public static string DataMerge_PrimaryKeyColumnsMismatch;
    
public static string DataMerge_ReltionKeyColumnsMismatch;
    
public static string DataMerge_MissingColumnDefinition;
    
public static string DataIndex_RecordStateRange;
    
public static string DataIndex_FindWithoutSortOrder;
    
public static string DataIndex_KeyLength;
    
public static string DataStorage_AggregateException;
    
public static string DataStorage_InvalidStorageType;
    
public static string DataStorage_ProblematicChars;
    
public static string DataStorage_SetInvalidDataType;
    
public static string DataStorage_IComparableNotDefined;
    
public static string DataView_SetFailed;
    
public static string DataView_SetDataSetFailed;
    
public static string DataView_SetRowStateFilter;
    
public static string DataView_SetTable;
    
public static string DataView_CanNotSetDataSet;
    
public static string DataView_CanNotUseDataViewManager;
    
public static string DataView_CanNotSetTable;
    
public static string DataView_CanNotUse;
    
public static string DataView_CanNotBindTable;
    
public static string DataView_SetIListObject;
    
public static string DataView_AddNewNotAllowNull;
    
public static string DataView_NotOpen;
    
public static string DataView_CreateChildView;
    
public static string DataView_CanNotDelete;
    
public static string DataView_CanNotEdit;
    
public static string DataView_GetElementIndex;
    
public static string DataView_AddExternalObject;
    
public static string DataView_CanNotClear;
    
public static string DataView_InsertExternalObject;
    
public static string DataView_RemoveExternalObject;
    
public static string DataROWView_PropertyNotFound;
    
public static string Range_Argument;
    
public static string Range_NullRange;
    
public static string RecordManager_MinimumCapacity;
    
public static string SqlConvert_ConvertFailed;
    
public static string DataSet_DefaultDataException;
    
public static string DataSet_DefaultConstraintException;
    
public static string DataSet_DefaultDeletedRowInaccessibleException;
    
public static string DataSet_DefaultDuplicateNameException;
    
public static string DataSet_DefaultInRowChangingEventException;
    
public static string DataSet_DefaultInvalidConstraintException;
    
public static string DataSet_DefaultMissingPrimaryKeyException;
    
public static string DataSet_DefaultNoNullAllowedException;
    
public static string DataSet_DefaultReadOnlyException;
    
public static string DataSet_DefaultRowNotInTableException;
    
public static string DataSet_DefaultVersionNotFoundException;
    
public static string Load_ReadOnlyDataModified;
    
public static string DataTableReader_InvalidDataTableReader;
    
public static string DataTableReader_SchemaInvalidDataTableReader;
    
public static string DataTableReader_CannotCreateDataReaderOnEmptyDataSet;
    
public static string DataTableReader_DataTableReaderArgumentIsEmpty;
    
public static string DataTableReader_ArgumentContainsNullValue;
    
public static string DataTableReader_InvalidRowInDataTableReader;
    
public static string DataTableReader_DataTableCleared;
    
public static string RbTree_InvalidState;
    
public static string RbTree_EnumerationBroken;
    
public static string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration;
    
public static string DataDom_Foliation;
    
public static string DataDom_TableNameChange;
    
public static string DataDom_TableNamespaceChange;
    
public static string DataDom_ColumnNameChange;
    
public static string DataDom_ColumnNamespaceChange;
    
public static string DataDom_ColumnMappingChange;
    
public static string DataDom_TableColumnsChange;
    
public static string DataDom_DataSetTablesChange;
    
public static string DataDom_DataSetNestedRelationsChange;
    
public static string DataDom_DataSetNull;
    
public static string DataDom_DataSetNameChange;
    
public static string DataDom_CloneNode;
    
public static string DataDom_MultipleLoad;
    
public static string DataDom_MultipleDataSet;
    
public static string DataDom_NotSupport_GetElementById;
    
public static string DataDom_NotSupport_EntRef;
    
public static string DataDom_NotSupport_Clear;
    
public static string ADP_EmptyArray;
    
public static string SQL_WrongType;
    
public static string ADP_InvalidConnectionOptionValue;
    
public static string ADP_KeywordNotSupported;
    
public static string ADP_InternalProviderError;
    
public static string ADP_NoQuoteChange;
    
public static string ADP_MissingSourceCommand;
    
public static string ADP_MissingSourceCommandConnection;
    
public static string ADP_InvalidMultipartName;
    
public static string ADP_InvalidMultipartNameQuoteUsage;
    
public static string ADP_InvalidMultipartNameToManyParts;
    
public static string ADP_ColumnSchemaExpression;
    
public static string ADP_ColumnSchemaMismatch;
    
public static string ADP_ColumnSchemaMissing1;
    
public static string ADP_ColumnSchemaMissing2;
    
public static string ADP_InvalidSourceColumn;
    
public static string ADP_MissingColumnMapping;
    
public static string ADP_NotSupportedEnumerationValue;
    
public static string ADP_MissingTableSchema;
    
public static string ADP_InvalidSourceTable;
    
public static string ADP_MissingTableMapping;
    
public static string ADP_ConnectionRequired_Insert;
    
public static string ADP_ConnectionRequired_Update;
    
public static string ADP_ConnectionRequired_Delete;
    
public static string ADP_ConnectionRequired_Batch;
    
public static string ADP_ConnectionRequired_Clone;
    
public static string ADP_OpenConnectionRequired_Insert;
    
public static string ADP_OpenConnectionRequired_Update;
    
public static string ADP_OpenConnectionRequired_Delete;
    
public static string ADP_OpenConnectionRequired_Clone;
    
public static string ADP_MissingSelectCommand;
    
public static string ADP_UnwantedStatementType;
    
public static string ADP_FillSchemaRequiresSourceTableName;
    
public static string ADP_FillRequiresSourceTableName;
    
public static string ADP_FillChapterAutoIncrement;
    
public static string ADP_MissingDataReaderFieldType;
    
public static string ADP_OnlyOneTableForStartRecordOrMaxRecords;
    
public static string ADP_UpdateRequiresSourceTable;
    
public static string ADP_UpdateRequiresSourceTableName;
    
public static string ADP_UpdateRequiresCommandClone;
    
public static string ADP_UpdateRequiresCommandSelect;
    
public static string ADP_UpdateRequiresCommandInsert;
    
public static string ADP_UpdateRequiresCommandUpdate;
    
public static string ADP_UpdateRequiresCommandDelete;
    
public static string ADP_UpdateMismatchRowTable;
    
public static string ADP_RowUpdatedErrors;
    
public static string ADP_RowUpdatingErrors;
    
public static string ADP_ResultsNotAllowedDuringBatch;
    
public static string ADP_UpdateConcurrencyViolation_Update;
    
public static string ADP_UpdateConcurrencyViolation_Delete;
    
public static string ADP_UpdateConcurrencyViolation_Batch;
    
public static string ADP_InvalidSourceBufferIndex;
    
public static string ADP_InvalidDestinationBufferIndex;
    
public static string ADP_StreamClosed;
    
public static string ADP_InvalidSeekOrigin;
    
public static string ADP_DynamicSQLJoinUnsupported;
    
public static string ADP_DynamicSQLNoTableInfo;
    
public static string ADP_DynamicSQLNoKeyInfoDelete;
    
public static string ADP_DynamicSQLNoKeyInfoUpdate;
    
public static string ADP_DynamicSQLNoKeyInfoRowVersionDelete;
    
public static string ADP_DynamicSQLNoKeyInfoRowVersionUpdate;
    
public static string ADP_DynamicSQLNestedQuote;
    
public static string SQL_InvalidBufferSizeOrIndex;
    
public static string SQL_InvalidDataLength;
    
public static string SqlMisc_NullString;
    
public static string SqlMisc_MessageString;
    
public static string SqlMisc_ArithOverflowMessage;
    
public static string SqlMisc_DivideByZeroMessage;
    
public static string SqlMisc_NullValueMessage;
    
public static string SqlMisc_TruncationMessage;
    
public static string SqlMisc_DateTimeOverflowMessage;
    
public static string SqlMisc_ConcatDiffCollationMessage;
    
public static string SqlMisc_CompareDiffCollationMessage;
    
public static string SqlMisc_InvalidFlagMessage;
    
public static string SqlMisc_NumeToDecOverflowMessage;
    
public static string SqlMisc_ConversionOverflowMessage;
    
public static string SqlMisc_InvalidDateTimeMessage;
    
public static string SqlMisc_TimeZoneSpecifiedMessage;
    
public static string SqlMisc_InvalidArraySizeMessage;
    
public static string SqlMisc_InvalidPrecScaleMessage;
    
public static string SqlMisc_FormatMessage;
    
public static string SqlMisc_SqlTypeMessage;
    
public static string SqlMisc_NoBufferMessage;
    
public static string SqlMisc_BufferInsufficientMessage;
    
public static string SqlMisc_WriteNonZeroOffsetOnNullMessage;
    
public static string SqlMisc_WriteOffsetLargerThanLenMessage;
    
public static string SqlMisc_NotFilledMessage;
    
public static string SqlMisc_AlreadyFilledMessage;
    
public static string SqlMisc_ClosedXmlReaderMessage;
    
public static string SqlMisc_InvalidOpStreamClosed;
    
public static string SqlMisc_InvalidOpStreamNonWritable;
    
public static string SqlMisc_InvalidOpStreamNonReadable;
    
public static string SqlMisc_InvalidOpStreamNonSeekable;
    
public static string ADP_DBConcurrencyExceptionMessage;
    
public static string ADP_InvalidMaxRecords;
    
public static string ADP_CollectionIndexInt32;
    
public static string ADP_MissingTableMappingDestination;
    
public static string ADP_InvalidStartRecord;
    
public static string DataDom_EnforceConstraintsShouldBeOff;
    
public static string DataColumns_RemoveExpression;
    
public static string DataRow_RowInsertTwice;
    
public static string Xml_ElementTypeNotFound;
    
public static string ADP_ConnectionAlreadyOpen;
    
public static string ADP_InternalConnectionError;
    
public static string ADP_InvalidOffsetValue;
    
public static string ADP_TransactionPresent;
    
public static string ADP_LocalTransactionPresent;
    
public static string ADP_NoConnectionString;
    
public static string ADP_OpenConnectionPropertySet;
    
public static string ADP_PendingAsyncOperation;
    
public static string ADP_PooledOpenTimeout;
    
public static string ADP_NonPooledOpenTimeout;
    
public static string ADP_SingleValuedProperty;
    
public static string ADP_DoubleValuedProperty;
    
public static string ADP_InvalidPrefixSuffix;
    
public static string Arg_ArrayPlusOffTooSmall;
    
public static string Arg_RankMultiDimNotSupported;
    
public static string Arg_RemoveArgNotFound;
    
public static string ArgumentOutOfRange_NeedNonNegNum;
    
public static string ADP_DeriveParametersNotSupported;
    
public static string ADP_NoStoredProcedureExists;
    
public static string ADP_MissingConnectionOptionValue;
    
public static string ADP_InvalidConnectionOptionValueLength;
    
public static string SQL_SqlCommandCommandText;
    
public static string SQL_BatchedUpdatesNotAvailableOnContextConnection;
    
public static string SQL_BulkCopyDestinationTableName;
    
public static string SQL_TDSParserTableName;
    
public static string SQL_TypeName;
    
public static string SQLMSF_FailoverPartnerNotSupported;
    
public static string SQL_NotSupportedEnumerationValue;
    
public static string ADP_CommandTextRequired;
    
public static string ADP_ConnectionRequired;
    
public static string ADP_OpenConnectionRequired;
    
public static string ADP_TransactionConnectionMismatch;
    
public static string ADP_TransactionRequired;
    
public static string ADP_OpenReaderExists;
    
public static string ADP_CalledTwice;
    
public static string ADP_InvalidCommandTimeout;
    
public static string ADP_UninitializedParameterSize;
    
public static string ADP_PrepareParameterType;
    
public static string ADP_PrepareParameterSize;
    
public static string ADP_PrepareParameterScale;
    
public static string ADP_MismatchedAsyncResult;
    
public static string ADP_ClosedConnectionError;
    
public static string ADP_ConnectionIsDisabled;
    
public static string ADP_EmptyDatabaseName;
    
public static string ADP_NonSequentialColumnAccess;
    
public static string ADP_InvalidDataType;
    
public static string ADP_UnknownDataType;
    
public static string ADP_DbTypeNotSupported;
    
public static string ADP_VersionDoesNotSupportDataType;
    
public static string ADP_ParameterValueOutOfRange;
    
public static string ADP_BadParameterName;
    
public static string ADP_InvalidSizeValue;
    
public static string ADP_NegativeParameter;
    
public static string ADP_InvalidMetaDataValue;
    
public static string ADP_ParameterConversionFailed;
    
public static string ADP_ParallelTransactionsNotSupported;
    
public static string ADP_TransactionZombied;
    
public static string ADP_InvalidDataLength2;
    
public static string ADP_NonSeqByteAccess;
    
public static string ADP_InvalidMinMaxPoolSizeValues;
    
public static string SQL_InvalidPacketSizeValue;
    
public static string SQL_NullEmptyTransactionName;
    
public static string SQL_UserInstanceFailoverNotCompatible;
    
public static string SQL_EncryptionNotSupportedByClient;
    
public static string SQL_EncryptionNotSupportedByServer;
    
public static string SQL_InvalidSQLServerVersionUnknown;
    
public static string SQL_CannotModifyPropertyAsyncOperationInProgress;
    
public static string SQL_InstanceFailure;
    
public static string SQL_InvalidPartnerConfiguration;
    
public static string SQL_MarsUnsupportedOnConnection;
    
public static string SQL_NonLocalSSEInstance;
    
public static string SQL_PendingBeginXXXExists;
    
public static string SQL_NonXmlResult;
    
public static string SQL_InvalidParameterTypeNameFormat;
    
public static string SQL_InvalidParameterNameLength;
    
public static string SQL_PrecisionValueOutOfRange;
    
public static string SQL_ScaleValueOutOfRange;
    
public static string SQL_TimeScaleValueOutOfRange;
    
public static string SQL_ParameterInvalidVariant;
    
public static string SQL_ParameterTypeNameRequired;
    
public static string SQL_InvalidInternalPacketSize;
    
public static string SQL_InvalidTDSVersion;
    
public static string SQL_InvalidTDSPacketSize;
    
public static string SQL_ParsingError;
    
public static string SQL_ConnectionLockedForBcpEvent;
    
public static string SQL_SNIPacketAllocationFailure;
    
public static string SQL_SmallDateTimeOverflow;
    
public static string SQL_TimeOverflow;
    
public static string SQL_MoneyOverflow;
    
public static string SQL_CultureIdError;
    
public static string SQL_OperationCancelled;
    
public static string SQL_SevereError;
    
public static string SQL_SSPIGenerateError;
    
public static string SQL_KerberosTicketMissingError;
    
public static string SQL_SqlServerBrowserNotAccessible;
    
public static string SQL_InvalidSSPIPacketSize;
    
public static string SQL_SSPIInitializeError;
    
public static string SQL_Timeout;
    
public static string SQL_Timeout_PreLogin_Begin;
    
public static string SQL_Timeout_PreLogin_InitializeConnection;
    
public static string SQL_Timeout_PreLogin_SendHandshake;
    
public static string SQL_Timeout_PreLogin_ConsumeHandshake;
    
public static string SQL_Timeout_Login_Begin;
    
public static string SQL_Timeout_Login_ProcessConnectionAuth;
    
public static string SQL_Timeout_PostLogin;
    
public static string SQL_Timeout_FailoverInfo;
    
public static string SQL_Timeout_RoutingDestinationInfo;
    
public static string SQL_Duration_PreLogin_Begin;
    
public static string SQL_Duration_PreLoginHandshake;
    
public static string SQL_Duration_Login_Begin;
    
public static string SQL_Duration_Login_ProcessConnectionAuth;
    
public static string SQL_Duration_PostLogin;
    
public static string SQL_UserInstanceFailure;
    
public static string SQL_InvalidRead;
    
public static string SQL_NonBlobColumn;
    
public static string SQL_NonCharColumn;
    
public static string SQL_StreamNotSupportOnColumnType;
    
public static string SQL_TextReaderNotSupportOnColumnType;
    
public static string SQL_XmlReaderNotSupportOnColumnType;
    
public static string SqlDelegatedTransaction_PromotionFailed;
    
public static string SQL_BulkLoadMappingInaccessible;
    
public static string SQL_BulkLoadMappingsNamesOrOrdinalsOnly;
    
public static string SQL_BulkLoadCannotConvertValue;
    
public static string SQL_BulkLoadNonMatchingColumnMapping;
    
public static string SQL_BulkLoadNonMatchingColumnName;
    
public static string SQL_BulkLoadStringTooLong;
    
public static string SQL_BulkLoadInvalidTimeout;
    
public static string SQL_BulkLoadInvalidVariantValue;
    
public static string SQL_BulkLoadExistingTransaction;
    
public static string SQL_BulkLoadNoCollation;
    
public static string SQL_BulkLoadConflictingTransactionOption;
    
public static string SQL_BulkLoadInvalidOperationInsideEvent;
    
public static string SQL_BulkLoadMissingDestinationTable;
    
public static string SQL_BulkLoadInvalidDestinationTable;
    
public static string SQL_BulkLoadNotAllowDBNull;
    
public static string Sql_BulkLoadLcidMismatch;
    
public static string SQL_BulkLoadPendingOperation;
    
public static string SQL_CannotGetDTCAddress;
    
public static string SQL_ConnectionDoomed;
    
public static string SQL_OpenResultCountExceeded;
    
public static string SQL_StreamWriteNotSupported;
    
public static string SQL_StreamReadNotSupported;
    
public static string SQL_StreamSeekNotSupported;
    
public static string SQL_ExClientConnectionId;
    
public static string SQL_ExErrorNumberStateClass;
    
public static string SQL_ExOriginalClientConnectionId;
    
public static string SQL_ExRoutingDestination;
    
public static string SQL_UnsupportedSysTxVersion;
    
public static string SqlMisc_StreamErrorMessage;
    
public static string SqlMisc_TruncationMaxDataMessage;
    
public static string SqlMisc_SubclassMustOverride;
    
public static string Sql_InternalError;
    
public static string ADP_OperationAborted;
    
public static string ADP_OperationAbortedExceptionMessage;
    
public static string ADP_TransactionCompletedButNotDisposed;
    
public static string SqlParameter_UnsupportedTVPOutputParameter;
    
public static string SqlParameter_DBNullNotSupportedForTVP;
    
public static string SqlParameter_UnexpectedTypeNameForNonStruct;
    
public static string NullSchemaTableDataTypeNotSupported;
    
public static string InvalidSchemaTableOrdinals;
    
public static string SQL_EnumeratedRecordMetaDataChanged;
    
public static string SQL_EnumeratedRecordFieldCountChanged;
    
public static string GT_Disabled;
    
public static string SQL_UnknownSysTxIsolationLevel;
    
public static string SQLNotify_AlreadyHasCommand;
    
public static string SqlDependency_DatabaseBrokerDisabled;
    
public static string SqlDependency_DefaultOptionsButNoStart;
    
public static string SqlDependency_NoMatchingServerStart;
    
public static string SqlDependency_NoMatchingServerDatabaseStart;
    
public static string SqlDependency_EventNoDuplicate;
    
public static string SqlDependency_IdMismatch;
    
public static string SqlDependency_InvalidTimeout;
    
public static string SqlDependency_DuplicateStart;
    
public static string SqlMetaData_InvalidSqlDbTypeForConstructorFormat;
    
public static string SqlMetaData_NameTooLong;
    
public static string SqlMetaData_SpecifyBothSortOrderAndOrdinal;
    
public static string SqlProvider_InvalidDataColumnType;
    
public static string SqlProvider_NotEnoughColumnsInStructuredType;
    
public static string SqlProvider_DuplicateSortOrdinal;
    
public static string SqlProvider_MissingSortOrdinal;
    
public static string SqlProvider_SortOrdinalGreaterThanFieldCount;
    
public static string IEnumerableOfSqlDataRecordHasNoRows;
    
public static string SNI_ERROR_1;
    
public static string SNI_ERROR_2;
    
public static string SNI_ERROR_3;
    
public static string SNI_ERROR_5;
    
public static string SNI_ERROR_6;
    
public static string SNI_ERROR_7;
    
public static string SNI_ERROR_8;
    
public static string SNI_ERROR_9;
    
public static string SNI_ERROR_11;
    
public static string SNI_ERROR_12;
    
public static string SNI_ERROR_13;
    
public static string SNI_ERROR_14;
    
public static string SNI_ERROR_15;
    
public static string SNI_ERROR_16;
    
public static string SNI_ERROR_17;
    
public static string SNI_ERROR_18;
    
public static string SNI_ERROR_19;
    
public static string SNI_ERROR_20;
    
public static string SNI_ERROR_21;
    
public static string SNI_ERROR_22;
    
public static string SNI_ERROR_23;
    
public static string SNI_ERROR_24;
    
public static string SNI_ERROR_25;
    
public static string SNI_ERROR_26;
    
public static string SNI_ERROR_27;
    
public static string SNI_ERROR_28;
    
public static string SNI_ERROR_29;
    
public static string SNI_ERROR_30;
    
public static string SNI_ERROR_31;
    
public static string SNI_ERROR_32;
    
public static string SNI_ERROR_33;
    
public static string SNI_ERROR_34;
    
public static string SNI_ERROR_35;
    
public static string SNI_ERROR_36;
    
public static string SNI_ERROR_37;
    
public static string SNI_ERROR_38;
    
public static string SNI_ERROR_39;
    
public static string SNI_ERROR_40;
    
public static string SNI_ERROR_41;
    
public static string SNI_ERROR_42;
    
public static string SNI_ERROR_43;
    
public static string SNI_ERROR_44;
    
public static string SNI_ERROR_47;
    
public static string SNI_ERROR_48;
    
public static string SNI_ERROR_49;
    
public static string SNI_ERROR_50;
    
public static string SNI_ERROR_51;
    
public static string SNI_ERROR_52;
    
public static string SNI_ERROR_53;
    
public static string SNI_ERROR_54;
    
public static string SNI_ERROR_55;
    
public static string SNI_ERROR_56;
    
public static string SNI_ERROR_57;
    
public static string Snix_Connect;
    
public static string Snix_PreLoginBeforeSuccessfulWrite;
    
public static string Snix_PreLogin;
    
public static string Snix_LoginSspi;
    
public static string Snix_Login;
    
public static string Snix_EnableMars;
    
public static string Snix_AutoEnlist;
    
public static string Snix_GetMarsSession;
    
public static string Snix_Execute;
    
public static string Snix_Read;
    
public static string Snix_Close;
    
public static string Snix_SendRows;
    
public static string Snix_ProcessSspi;
    
public static string LocalDB_FailedGetDLLHandle;
    
public static string LocalDB_MethodNotFound;
    
public static string LocalDB_UnobtainableMessage;
    
public static string SQLROR_RecursiveRoutingNotSupported;
    
public static string SQLROR_FailoverNotSupported;
    
public static string SQLROR_UnexpectedRoutingInfo;
    
public static string SQLROR_InvalidRoutingInfo;
    
public static string SQLROR_TimeoutAfterRoutingInfo;
    
public static string SQLCR_InvalidConnectRetryCountValue;
    
public static string SQLCR_InvalidConnectRetryIntervalValue;
    
public static string SQLCR_NextAttemptWillExceedQueryTimeout;
    
public static string SQLCR_EncryptionChanged;
    
public static string SQLCR_TDSVestionNotPreserved;
    
public static string SQLCR_AllAttemptsFailed;
    
public static string SQLCR_UnrecoverableServer;
    
public static string SQLCR_UnrecoverableClient;
    
public static string SQLCR_NoCRAckAtReconnection;
    
public static string SQL_UnsupportedKeyword;
    
public static string SQL_UnsupportedFeature;
    
public static string SQL_UnsupportedToken;
    
public static string SQL_DbTypeNotSupportedOnThisPlatform;
    
public static string SQL_NetworkLibraryNotSupported;
    
public static string SNI_PN0;
    
public static string SNI_PN1;
    
public static string SNI_PN2;
    
public static string SNI_PN3;
    
public static string SNI_PN4;
    
public static string SNI_PN5;
    
public static string SNI_PN6;
    
public static string SNI_PN7;
    
public static string SNI_PN8;
    
public static string SNI_PN9;
    
public static string AZURESQL_GenericEndpoint;
    
public static string AZURESQL_GermanEndpoint;
    
public static string AZURESQL_UsGovEndpoint;
    
public static string AZURESQL_ChinaEndpoint;
    
public static string net_nego_channel_binding_not_supported;
    
public static string net_gssapi_operation_failed_detailed;
    
public static string net_gssapi_operation_failed;
    
public static string net_ntlm_not_possible_default_cred;
    
public static string net_nego_not_supported_empty_target_with_defaultcreds;
    
public static string net_nego_server_not_supported;
    
public static string net_nego_protection_level_not_supported;
    
public static string net_context_buffer_too_small;
    
public static string net_auth_message_not_encrypted;
    
public static string net_securitypackagesupport;
    
public static string net_log_operation_failed_with_error;
    
public static string net_MethodNotImplementedException;
    
public static string event_OperationReturnedSomething;
    
public static string net_invalid_enum;
    
public static string SSPIInvalidHandleType;
    
public static string LocalDBNotSupported;
    
public static string PlatformNotSupported_DataSqlClient;
    
public static string SqlParameter_InvalidTableDerivedPrecisionForTvp;
    
public static string SqlProvider_InvalidDataColumnMaxLength;
    
public static string MDF_InvalidXmlInvalidValue;
    
public static string MDF_CollectionNameISNotUnique;
    
public static string MDF_InvalidXmlMissingColumn;
    
public static string MDF_InvalidXml;
    
public static string MDF_NoColumns;
    
public static string MDF_QueryFailed;
    
public static string MDF_TooManyRestrictions;
    
public static string MDF_DataTableDoesNotExist;
    
public static string MDF_UndefinedCollection;
    
public static string MDF_UnsupportedVersion;
    
public static string MDF_MissingRestrictionColumn;
    
public static string MDF_MissingRestrictionRow;
    
public static string MDF_IncorrectNumberOfDataSourceInformationRows;
    
public static string MDF_MissingDataSourceInformationColumn;
    
public static string MDF_AmbigousCollectionName;
    
public static string MDF_UnableToBuildCollection;
    
public static string ADP_CollectionIsParent;
    
public static string ADP_InvalidDataDirectory;
    
public static string ADP_QuotePrefixNotSet;
    
public static string MDF_InvalidRestrictionValue;
    
public static string MDF_UndefinedPopulationMechanism;
    
public static string ODBC_ODBCCommandText;
    
public static string ODBC_NotSupportedEnumerationValue;
    
public static string ADP_DatabaseNameTooLong;
    
public static string ADP_DataReaderNoData;
    
public static string ADP_NumericToDecimalOverflow;
    
public static string ADP_UnknownDataTypeCode;
    
public static string ADP_DbRecordReadOnly;
    
public static string ADP_OffsetOutOfRangeException;
    
public static string ODBC_GetSchemaRestrictionRequired;
    
public static string ADP_OdbcNoTypesFromProvider;
    
public static string OdbcConnection_ConnectionStringTooLong;
    
public static string Odbc_UnknownSQLType;
    
public static string Odbc_NegativeArgument;
    
public static string Odbc_CantSetPropertyOnOpenConnection;
    
public static string Odbc_NoMappingForSqlTransactionLevel;
    
public static string Odbc_CantEnableConnectionpooling;
    
public static string Odbc_CantAllocateEnvironmentHandle;
    
public static string Odbc_FailedToGetDescriptorHandle;
    
public static string Odbc_NotInTransaction;
    
public static string Odbc_ExceptionMessage;
    
public static string Odbc_ConnectionClosed;
    
public static string Odbc_OpenConnectionNoOwner;
    
public static string Odbc_PlatformNotSupported;
    
public static string Odbc_UnixOdbcNotFound;
    internal static string GetString(string name, Object[] args);
    internal static string GetString(CultureInfo culture, string name, Object[] args);
    internal static string GetString(string name);
    internal static string GetString(CultureInfo culture, string name);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    public static string GetResourceString(string resourceKey, string defaultString);
}
internal static class System.Configuration.PrivilegedConfigurationManager : object {
    
internal static ConnectionStringSettingsCollection ConnectionStrings { get; }
    internal static ConnectionStringSettingsCollection get_ConnectionStrings();
    internal static object GetSection(string sectionName);
}
public enum System.Data.AcceptRejectRule : Enum {
    
public int value__;
    
public static AcceptRejectRule None;
    
public static AcceptRejectRule Cascade;
}
internal enum System.Data.Aggregate : Enum {
    
public int value__;
    
public static Aggregate None;
    
public static Aggregate Sum;
    
public static Aggregate Avg;
    
public static Aggregate Min;
    
public static Aggregate Max;
    
public static Aggregate Count;
    
public static Aggregate StDev;
    
public static Aggregate Var;
}
internal class System.Data.AggregateNode : ExpressionNode {
    
private AggregateType _type;
    
private Aggregate _aggregate;
    
private bool _local;
    
private string _relationName;
    
private string _columnName;
    
private DataTable _childTable;
    
private DataColumn _column;
    
private DataRelation _relation;
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName);
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName, bool local, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal static void Bind(DataRelation relation, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
internal enum System.Data.AggregateType : Enum {
    
public int value__;
    
public static AggregateType None;
    
public static AggregateType Sum;
    
public static AggregateType Mean;
    
public static AggregateType Min;
    
public static AggregateType Max;
    
public static AggregateType First;
    
public static AggregateType Count;
    
public static AggregateType Var;
    
public static AggregateType StDev;
}
internal class System.Data.AutoIncrementBigInteger : AutoIncrementValue {
    
private BigInteger _current;
    
private long _seed;
    
private BigInteger _step;
    
internal object Current { get; internal set; }
    
internal Type DataType { get; }
    
internal long Seed { get; internal set; }
    
internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
    private bool BoundaryCheck(BigInteger value);
}
internal class System.Data.AutoIncrementInt64 : AutoIncrementValue {
    
private long _current;
    
private long _seed;
    
private long _step;
    
internal object Current { get; internal set; }
    
internal Type DataType { get; }
    
internal long Seed { get; internal set; }
    
internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
    private bool BoundaryCheck(BigInteger value);
}
internal abstract class System.Data.AutoIncrementValue : object {
    [CompilerGeneratedAttribute]

private bool <Auto>k__BackingField;
    
internal bool Auto { get; internal set; }
    
internal object Current { get; internal set; }
    
internal long Seed { get; internal set; }
    
internal long Step { get; internal set; }
    
internal Type DataType { get; }
    [CompilerGeneratedAttribute]
internal bool get_Auto();
    [CompilerGeneratedAttribute]
internal void set_Auto(bool value);
    internal abstract virtual object get_Current();
    internal abstract virtual void set_Current(object value);
    internal abstract virtual long get_Seed();
    internal abstract virtual void set_Seed(long value);
    internal abstract virtual long get_Step();
    internal abstract virtual void set_Step(long value);
    internal abstract virtual Type get_DataType();
    internal abstract virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal abstract virtual void SetCurrentAndIncrement(object value);
    internal abstract virtual void MoveAfter();
    internal AutoIncrementValue Clone();
}
internal class System.Data.BinaryNode : ExpressionNode {
    
internal int _op;
    
internal ExpressionNode _left;
    
internal ExpressionNode _right;
    internal BinaryNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal void SetTypeMismatchError(int op, Type left, Type right);
    private static object Eval(ExpressionNode expr, DataRow row, DataRowVersion version, Int32[] recordNos);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op, CompareInfo comparer);
    private object EvalBinaryOp(int op, ExpressionNode left, ExpressionNode right, DataRow row, DataRowVersion version, Int32[] recordNos);
    private DataTypePrecedence GetPrecedence(StorageType storageType);
    private static StorageType GetPrecedenceType(DataTypePrecedence code);
    private bool IsMixed(StorageType left, StorageType right);
    private bool IsMixedSql(StorageType left, StorageType right);
    internal StorageType ResultType(StorageType left, StorageType right, bool lc, bool rc, int op);
    internal StorageType ResultSqlType(StorageType left, StorageType right, bool lc, bool rc, int op);
    private int SqlResultType(int typeCode);
}
internal class System.Data.ChildForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    
private DataTable _table;
    public ChildForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.ColumnTypeConverter : TypeConverter {
    
private static Type[] s_types;
    
private StandardValuesCollection _values;
    private static ColumnTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[FlagsAttribute]
public enum System.Data.CommandBehavior : Enum {
    
public int value__;
    
public static CommandBehavior Default;
    
public static CommandBehavior SingleResult;
    
public static CommandBehavior SchemaOnly;
    
public static CommandBehavior KeyInfo;
    
public static CommandBehavior SingleRow;
    
public static CommandBehavior SequentialAccess;
    
public static CommandBehavior CloseConnection;
}
public enum System.Data.CommandType : Enum {
    
public int value__;
    
public static CommandType Text;
    
public static CommandType StoredProcedure;
    
public static CommandType TableDirect;
}
internal static class System.Data.Common.ActivityCorrelator : object {
    [ThreadStaticAttribute]

private static ActivityId t_tlsActivity;
    
internal static ActivityId Current { get; }
    internal static ActivityId get_Current();
    internal static ActivityId Next();
}
internal static class System.Data.Common.ADP : object {
    
private static Task`1<bool> _trueTask;
    
private static Task`1<bool> _falseTask;
    
internal static CompareOptions DefaultCompareOptions;
    
internal static int DefaultConnectionTimeout;
    
private static Type s_stackOverflowType;
    
private static Type s_outOfMemoryType;
    
private static Type s_threadAbortType;
    
private static Type s_nullReferenceType;
    
private static Type s_accessViolationType;
    
private static Type s_securityType;
    
internal static bool IsWindowsNT;
    
internal static bool IsPlatformNT5;
    
internal static string ConnectionString;
    
internal static string DataSetColumn;
    
internal static string DataSetTable;
    
internal static string Fill;
    
internal static string FillSchema;
    
internal static string SourceColumn;
    
internal static string SourceTable;
    
internal static string Parameter;
    
internal static string ParameterName;
    
internal static string ParameterSetPosition;
    
internal static int DefaultCommandTimeout;
    
internal static float FailoverTimeoutStep;
    
internal static string StrEmpty;
    
internal static int CharSize;
    
private static Version s_systemDataVersion;
    
internal static String[] AzureSqlServerEndpoints;
    
internal static int DecimalMaxPrecision;
    
internal static int DecimalMaxPrecision28;
    
internal static IntPtr PtrZero;
    
internal static int PtrSize;
    
internal static string BeginTransaction;
    
internal static string ChangeDatabase;
    
internal static string CommitTransaction;
    
internal static string CommandTimeout;
    
internal static string DeriveParameters;
    
internal static string ExecuteReader;
    
internal static string ExecuteNonQuery;
    
internal static string ExecuteScalar;
    
internal static string GetSchema;
    
internal static string GetSchemaTable;
    
internal static string Prepare;
    
internal static string RollbackTransaction;
    
internal static string QuoteIdentifier;
    
internal static string UnquoteIdentifier;
    
internal static Task`1<bool> TrueTask { get; }
    
internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    private static void TraceException(string trace, Exception e);
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static InvalidOperationException DataAdapter(string error);
    private static InvalidOperationException Provider(string error);
    internal static ArgumentException InvalidMultipartName(string property, string value);
    internal static ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value);
    internal static ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static Exception InvalidConnectionOptionValue(string key);
    internal static Exception InvalidConnectionOptionValue(string key, Exception inner);
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    private static string ConnectionStateMsg(ConnectionState state);
    internal static Exception StreamClosed(string method);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsEmptyArray(String[] array);
    internal static bool IsNull(object value);
    internal static Exception InvalidSeekOrigin(string parameterName);
    internal static void SetCurrentTransaction(Transaction transaction);
    internal static Task`1<T> CreatedTaskWithCancellation();
    internal static void TraceExceptionForCapture(Exception e);
    internal static DataException Data(string message);
    internal static void CheckArgumentLength(string value, string parameterName);
    internal static void CheckArgumentLength(Array value, string parameterName);
    internal static ArgumentOutOfRangeException InvalidAcceptRejectRule(AcceptRejectRule value);
    internal static ArgumentOutOfRangeException InvalidCatalogLocation(CatalogLocation value);
    internal static ArgumentOutOfRangeException InvalidConflictOptions(ConflictOption value);
    internal static ArgumentOutOfRangeException InvalidDataRowState(DataRowState value);
    internal static ArgumentOutOfRangeException InvalidKeyRestrictionBehavior(KeyRestrictionBehavior value);
    internal static ArgumentOutOfRangeException InvalidLoadOption(LoadOption value);
    internal static ArgumentOutOfRangeException InvalidMissingMappingAction(MissingMappingAction value);
    internal static ArgumentOutOfRangeException InvalidMissingSchemaAction(MissingSchemaAction value);
    internal static ArgumentOutOfRangeException InvalidRule(Rule value);
    internal static ArgumentOutOfRangeException InvalidSchemaType(SchemaType value);
    internal static ArgumentOutOfRangeException InvalidStatementType(StatementType value);
    internal static ArgumentOutOfRangeException InvalidUpdateStatus(UpdateStatus value);
    internal static ArgumentOutOfRangeException NotSupportedStatementType(StatementType value, string method);
    internal static ArgumentException InvalidKeyname(string parameterName);
    internal static ArgumentException InvalidValue(string parameterName);
    internal static Exception WrongType(Type got, Type expected);
    internal static Exception CollectionUniqueValue(Type itemType, string propertyName, string propertyValue);
    internal static InvalidOperationException MissingSelectCommand(string method);
    private static InvalidOperationException DataMapping(string error);
    internal static InvalidOperationException ColumnSchemaExpression(string srcColumn, string cacheColumn);
    internal static InvalidOperationException ColumnSchemaMismatch(string srcColumn, Type srcType, DataColumn column);
    internal static InvalidOperationException ColumnSchemaMissing(string cacheColumn, string tableName, string srcColumn);
    internal static InvalidOperationException MissingColumnMapping(string srcColumn);
    internal static InvalidOperationException MissingTableSchema(string cacheTable, string srcTable);
    internal static InvalidOperationException MissingTableMapping(string srcTable);
    internal static InvalidOperationException MissingTableMappingDestination(string dstTable);
    internal static Exception InvalidSourceColumn(string parameter);
    internal static Exception ColumnsAddNullAttempt(string parameter);
    internal static Exception ColumnsDataSetColumn(string cacheColumn);
    internal static Exception ColumnsIndexInt32(int index, IColumnMappingCollection collection);
    internal static Exception ColumnsIndexSource(string srcColumn);
    internal static Exception ColumnsIsNotParent(ICollection collection);
    internal static Exception ColumnsIsParent(ICollection collection);
    internal static Exception ColumnsUniqueSourceColumn(string srcColumn);
    internal static Exception NotADataColumnMapping(object value);
    internal static Exception InvalidSourceTable(string parameter);
    internal static Exception TablesAddNullAttempt(string parameter);
    internal static Exception TablesDataSetTable(string cacheTable);
    internal static Exception TablesIndexInt32(int index, ITableMappingCollection collection);
    internal static Exception TablesIsNotParent(ICollection collection);
    internal static Exception TablesIsParent(ICollection collection);
    internal static Exception TablesSourceIndex(string srcTable);
    internal static Exception TablesUniqueSourceTable(string srcTable);
    internal static Exception NotADataTableMapping(object value);
    internal static InvalidOperationException UpdateConnectionRequired(StatementType statementType, bool isRowUpdatingCommand);
    internal static InvalidOperationException ConnectionRequired_Res(string method);
    internal static InvalidOperationException UpdateOpenConnectionRequired(StatementType statementType, bool isRowUpdatingCommand, ConnectionState state);
    internal static ArgumentException UnwantedStatementType(StatementType statementType);
    internal static Exception FillSchemaRequiresSourceTableName(string parameter);
    internal static Exception InvalidMaxRecords(string parameter, int max);
    internal static Exception InvalidStartRecord(string parameter, int start);
    internal static Exception FillRequires(string parameter);
    internal static Exception FillRequiresSourceTableName(string parameter);
    internal static Exception FillChapterAutoIncrement();
    internal static InvalidOperationException MissingDataReaderFieldType(int index);
    internal static InvalidOperationException OnlyOneTableForStartRecordOrMaxRecords();
    internal static ArgumentNullException UpdateRequiresNonNullDataSet(string parameter);
    internal static InvalidOperationException UpdateRequiresSourceTable(string defaultSrcTableName);
    internal static InvalidOperationException UpdateRequiresSourceTableName(string srcTable);
    internal static ArgumentNullException UpdateRequiresDataTable(string parameter);
    internal static Exception UpdateConcurrencyViolation(StatementType statementType, int affected, int expected, DataRow[] dataRows);
    internal static InvalidOperationException UpdateRequiresCommand(StatementType statementType, bool isRowUpdatingCommand);
    internal static ArgumentException UpdateMismatchRowTable(int i);
    internal static DataException RowUpdatedErrors();
    internal static DataException RowUpdatingErrors();
    internal static InvalidOperationException ResultsNotAllowedDuringBatch();
    internal static InvalidOperationException DynamicSQLJoinUnsupported();
    internal static InvalidOperationException DynamicSQLNoTableInfo();
    internal static InvalidOperationException DynamicSQLNoKeyInfoDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoUpdate();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionUpdate();
    internal static InvalidOperationException DynamicSQLNestedQuote(string name, string quote);
    internal static InvalidOperationException NoQuoteChange();
    internal static InvalidOperationException MissingSourceCommand();
    internal static InvalidOperationException MissingSourceCommandConnection();
    internal static DataRow[] SelectAdapterRows(DataTable dataTable, bool sorted);
    internal static void BuildSchemaTableInfoTableNames(String[] columnNameArray);
    private static int GenerateUniqueName(Dictionary`2<string, int> hash, String& columnName, int index, int uniqueIndex);
    internal static int SrcCompare(string strA, string strB);
    internal static Exception ExceptionWithStackTrace(Exception e);
    internal static IndexOutOfRangeException IndexOutOfRange(int value);
    internal static IndexOutOfRangeException IndexOutOfRange();
    internal static TimeoutException TimeoutException(string error);
    internal static InvalidOperationException InvalidOperation(string error, Exception inner);
    internal static OverflowException Overflow(string error);
    internal static OverflowException Overflow(string error, Exception inner);
    internal static PlatformNotSupportedException DbTypeNotSupported(string dbType);
    internal static InvalidCastException InvalidCast();
    internal static IOException IO(string error);
    internal static IOException IO(string error, Exception inner);
    internal static ObjectDisposedException ObjectDisposed(object instance);
    internal static Exception DataTableDoesNotExist(string collectionName);
    internal static InvalidOperationException MethodCalledTwice(string method);
    internal static ArgumentOutOfRangeException InvalidCommandType(CommandType value);
    internal static ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value);
    internal static ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value);
    internal static Exception TooManyRestrictions(string collectionName);
    internal static ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value);
    internal static ArgumentException InvalidMinMaxPoolSizeValues();
    internal static InvalidOperationException NoConnectionString();
    internal static Exception MethodNotImplemented(string methodName);
    internal static Exception QueryFailed(string collectionName, Exception e);
    internal static Exception InvalidConnectionOptionValueLength(string key, int limit);
    internal static Exception MissingConnectionOptionValue(string key, string requiredAdditionalKey);
    internal static Exception PooledOpenTimeout();
    internal static Exception NonPooledOpenTimeout();
    internal static InvalidOperationException TransactionConnectionMismatch();
    internal static InvalidOperationException TransactionRequired(string method);
    internal static Exception CommandTextRequired(string method);
    internal static Exception NoColumns();
    internal static InvalidOperationException ConnectionRequired(string method);
    internal static InvalidOperationException OpenConnectionRequired(string method, ConnectionState state);
    internal static Exception OpenReaderExists();
    internal static Exception OpenReaderExists(Exception e);
    internal static Exception NonSeqByteAccess(long badIndex, long currIndex, string method);
    internal static Exception InvalidXml();
    internal static Exception NegativeParameter(string parameterName);
    internal static Exception InvalidXmlMissingColumn(string collectionName, string columnName);
    internal static Exception InvalidMetaDataValue();
    internal static InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol);
    internal static Exception InvalidXmlInvalidValue(string collectionName, string columnName);
    internal static Exception CollectionNameIsNotUnique(string collectionName);
    internal static Exception InvalidCommandTimeout(int value, string property);
    internal static Exception UninitializedParameterSize(int index, Type dataType);
    internal static Exception UnableToBuildCollection(string collectionName);
    internal static Exception PrepareParameterType(DbCommand cmd);
    internal static Exception UndefinedCollection(string collectionName);
    internal static Exception UnsupportedVersion(string collectionName);
    internal static Exception AmbigousCollectionName(string collectionName);
    internal static Exception PrepareParameterSize(DbCommand cmd);
    internal static Exception PrepareParameterScale(DbCommand cmd, string type);
    internal static Exception MissingDataSourceInformationColumn();
    internal static Exception IncorrectNumberOfDataSourceInformationRows();
    internal static Exception MismatchedAsyncResult(string expectedMethod, string gotMethod);
    internal static Exception ClosedConnectionError();
    internal static Exception ConnectionAlreadyOpen(ConnectionState state);
    internal static Exception TransactionPresent();
    internal static Exception LocalTransactionPresent();
    internal static Exception OpenConnectionPropertySet(string property, ConnectionState state);
    internal static Exception EmptyDatabaseName();
    internal static Exception MissingRestrictionColumn();
    internal static Exception InternalConnectionError(ConnectionError internalError);
    internal static Exception InvalidConnectRetryCountValue();
    internal static Exception MissingRestrictionRow();
    internal static Exception InvalidConnectRetryIntervalValue();
    internal static InvalidOperationException AsyncOperationPending();
    internal static IOException ErrorReadingFromStream(Exception internalException);
    internal static ArgumentException InvalidDataType(string typeName);
    internal static ArgumentException UnknownDataType(Type dataType);
    internal static ArgumentException DbTypeNotSupported(DbType type, Type enumtype);
    internal static ArgumentException InvalidOffsetValue(int value);
    internal static ArgumentException InvalidSizeValue(int value);
    internal static ArgumentException ParameterValueOutOfRange(decimal value);
    internal static ArgumentException ParameterValueOutOfRange(SqlDecimal value);
    internal static ArgumentException VersionDoesNotSupportDataType(string typeName);
    internal static Exception ParameterConversionFailed(object value, Type destType, Exception inner);
    internal static Exception ParametersMappingIndex(int index, DbParameterCollection collection);
    internal static Exception ParametersSourceIndex(string parameterName, DbParameterCollection collection, Type parameterType);
    internal static Exception ParameterNull(string parameter, DbParameterCollection collection, Type parameterType);
    internal static Exception UndefinedPopulationMechanism(string populationMechanism);
    internal static Exception InvalidParameterType(DbParameterCollection collection, Type parameterType, object invalidValue);
    internal static Exception ParallelTransactionsNotSupported(DbConnection obj);
    internal static Exception TransactionZombied(DbTransaction obj);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    internal static void TimerCurrent(Int64& ticks);
    internal static long TimerCurrent();
    internal static long TimerFromSeconds(int seconds);
    internal static long TimerFromMilliseconds(long milliseconds);
    internal static bool TimerHasExpired(long timerExpire);
    internal static long TimerRemaining(long timerExpire);
    internal static long TimerRemainingMilliseconds(long timerExpire);
    internal static long TimerRemainingSeconds(long timerExpire);
    internal static long TimerToMilliseconds(long timerValue);
    private static long TimerToSeconds(long timerValue);
    internal static string MachineName();
    internal static Transaction GetCurrentTransaction();
    internal static bool IsDirection(DbParameter value, ParameterDirection condition);
    internal static void IsNullOrSqlType(object value, Boolean& isNull, Boolean& isSqlType);
    internal static Version GetAssemblyVersion();
    internal static bool IsAzureSqlServerEndpoint(string dataSource);
    internal static ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value);
    internal static ArgumentException SingleValuedProperty(string propertyName, string value);
    internal static ArgumentException DoubleValuedProperty(string propertyName, string value1, string value2);
    internal static ArgumentException InvalidPrefixSuffix();
    internal static ArgumentOutOfRangeException InvalidCommandBehavior(CommandBehavior value);
    internal static void ValidateCommandBehavior(CommandBehavior value);
    internal static ArgumentOutOfRangeException NotSupportedCommandBehavior(CommandBehavior value, string method);
    internal static ArgumentException BadParameterName(string parameterName);
    internal static Exception DeriveParametersNotSupported(IDbCommand value);
    internal static Exception NoStoredProcedureExists(string sproc);
    internal static InvalidOperationException TransactionCompletedButNotDisposed();
    internal static bool NeedManualEnlistment();
    internal static bool IsEmpty(string str);
    internal static Exception DatabaseNameTooLong();
    internal static int StringLength(string inputString);
    internal static Exception NumericToDecimalOverflow();
    internal static Exception OdbcNoTypesFromProvider();
    internal static ArgumentException InvalidRestrictionValue(string collectionName, string restrictionName, string restrictionValue);
    internal static Exception DataReaderNoData();
    internal static Exception ConnectionIsDisabled(Exception InnerException);
    internal static Exception OffsetOutOfRangeException();
    internal static ArgumentException InvalidDataType(TypeCode typecode);
    internal static InvalidOperationException QuotePrefixNotSet(string method);
    internal static string GetFullPath(string filename);
    internal static InvalidOperationException InvalidDataDirectory();
    internal static ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode);
    internal static void EscapeSpecialCharacters(string unescapedString, StringBuilder escapedString);
    [ReliabilityContractAttribute("3", "1")]
internal static IntPtr IntPtrOffset(IntPtr pbase, int offset);
    internal static ArgumentOutOfRangeException NotSupportedUserDefinedTypeSerializationFormat(Format value, string method);
    internal static ArgumentOutOfRangeException InvalidUserDefinedTypeSerializationFormat(Format value);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName, object value);
    internal static Exception InvalidXMLBadVersion();
    internal static Exception NotAPermissionElement();
    internal static Exception PermissionTypeMismatch();
    internal static ArgumentOutOfRangeException InvalidPermissionState(PermissionState value);
    internal static ConfigurationException Configuration(string message);
    internal static ConfigurationException Configuration(string message, XmlNode node);
    internal static ArgumentException ConfigProviderNotFound();
    internal static InvalidOperationException ConfigProviderInvalid();
    internal static ConfigurationException ConfigProviderNotInstalled();
    internal static ConfigurationException ConfigProviderMissing();
    internal static ConfigurationException ConfigBaseNoChildNodes(XmlNode node);
    internal static ConfigurationException ConfigBaseElementsOnly(XmlNode node);
    internal static ConfigurationException ConfigUnrecognizedAttributes(XmlNode node);
    internal static ConfigurationException ConfigUnrecognizedElement(XmlNode node);
    internal static ConfigurationException ConfigSectionsUnique(string sectionName);
    internal static ConfigurationException ConfigRequiredAttributeMissing(string name, XmlNode node);
    internal static ConfigurationException ConfigRequiredAttributeEmpty(string name, XmlNode node);
    internal static Exception OleDb();
}
internal class System.Data.Common.BigIntegerStorage : DataStorage {
    
private BigInteger[] _values;
    internal BigIntegerStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    internal static BigInteger ConvertToBigInteger(object value, IFormatProvider formatProvider);
    internal static object ConvertFromBigInteger(BigInteger value, Type type, IFormatProvider formatProvider);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.BooleanStorage : DataStorage {
    
private static bool defaultValue;
    
private Boolean[] _values;
    internal BooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.ByteStorage : DataStorage {
    
private static byte defaultValue;
    
private Byte[] _values;
    internal ByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public enum System.Data.Common.CatalogLocation : Enum {
    
public int value__;
    
public static CatalogLocation Start;
    
public static CatalogLocation End;
}
internal class System.Data.Common.CharStorage : DataStorage {
    
private static char defaultValue;
    
private Char[] _values;
    internal CharStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public class System.Data.Common.DataAdapter : Component {
    
private static object s_eventFillError;
    
private bool _acceptChangesDuringUpdate;
    
private bool _acceptChangesDuringUpdateAfterInsert;
    
private bool _continueUpdateOnError;
    
private bool _hasFillErrorHandler;
    
private bool _returnProviderSpecificTypes;
    
private bool _acceptChangesDuringFill;
    
private LoadOption _fillLoadOption;
    
private MissingMappingAction _missingMappingAction;
    
private MissingSchemaAction _missingSchemaAction;
    
private DataTableMappingCollection _tableMappings;
    
private static int s_objectTypeCount;
    
internal int _objectID;
    [DefaultValueAttribute("True")]

public bool AcceptChangesDuringFill { get; public set; }
    [DefaultValueAttribute("True")]

public bool AcceptChangesDuringUpdate { get; public set; }
    [DefaultValueAttribute("False")]

public bool ContinueUpdateOnError { get; public set; }
    [RefreshPropertiesAttribute("1")]

public LoadOption FillLoadOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public MissingMappingAction MissingMappingAction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public MissingSchemaAction MissingSchemaAction { get; public set; }
    
internal int ObjectID { get; }
    [DefaultValueAttribute("False")]

public bool ReturnProviderSpecificTypes { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataTableMappingCollection TableMappings { get; }
    
private ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    protected DataAdapter(DataAdapter from);
    private static DataAdapter();
    [ConditionalAttribute("DEBUG")]
private void AssertReaderHandleFieldCount(DataReaderContainer readerHandler);
    [ConditionalAttribute("DEBUG")]
private void AssertSchemaMapping(SchemaMapping mapping);
    public bool get_AcceptChangesDuringFill();
    public void set_AcceptChangesDuringFill(bool value);
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeAcceptChangesDuringFill();
    public bool get_AcceptChangesDuringUpdate();
    public void set_AcceptChangesDuringUpdate(bool value);
    public bool get_ContinueUpdateOnError();
    public void set_ContinueUpdateOnError(bool value);
    public LoadOption get_FillLoadOption();
    public void set_FillLoadOption(LoadOption value);
    [EditorBrowsableAttribute("1")]
public void ResetFillLoadOption();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeFillLoadOption();
    public sealed virtual MissingMappingAction get_MissingMappingAction();
    public sealed virtual void set_MissingMappingAction(MissingMappingAction value);
    public sealed virtual MissingSchemaAction get_MissingSchemaAction();
    public sealed virtual void set_MissingSchemaAction(MissingSchemaAction value);
    internal int get_ObjectID();
    public virtual bool get_ReturnProviderSpecificTypes();
    public virtual void set_ReturnProviderSpecificTypes(bool value);
    public DataTableMappingCollection get_TableMappings();
    private sealed virtual override ITableMappingCollection System.Data.IDataAdapter.get_TableMappings();
    protected virtual bool ShouldSerializeTableMappings();
    protected bool HasTableMappings();
    public void add_FillError(FillErrorEventHandler value);
    public void remove_FillError(FillErrorEventHandler value);
    [ObsoleteAttribute("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual DataAdapter CloneInternals();
    private void CloneFrom(DataAdapter from);
    protected virtual DataTableMappingCollection CreateTableMappings();
    protected virtual void Dispose(bool disposing);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    internal object FillSchemaFromReader(DataSet dataset, DataTable datatable, SchemaType schemaType, string srcTable, IDataReader dataReader);
    public virtual int Fill(DataSet dataSet);
    protected virtual int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);
    protected virtual int Fill(DataTable dataTable, IDataReader dataReader);
    protected virtual int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
    internal int FillFromReader(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int startRecord, int maxRecords, DataColumn parentChapterColumn, object parentChapterValue);
    private int FillLoadDataRowChunk(SchemaMapping mapping, int startRecord, int maxRecords);
    private int FillLoadDataRow(SchemaMapping mapping);
    private SchemaMapping FillMappingInternal(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue);
    private SchemaMapping FillMapping(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue);
    private bool FillNextResult(DataReaderContainer dataReader);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMappingBySchemaAction(string sourceTableName, string dataSetTableName, MissingMappingAction mappingAction);
    internal int IndexOfDataSetTable(string dataSetTable);
    protected virtual void OnFillError(FillErrorEventArgs value);
    private void OnFillErrorHandler(Exception e, DataTable dataTable, Object[] dataValues);
    public virtual int Update(DataSet dataSet);
    private static DataTable[] AddDataTableToArray(DataTable[] tables, DataTable newTable);
    private static string GetSourceTableName(string srcTable, int index);
}
[TypeConverterAttribute("System.Data.Common.DataColumnMapping/DataColumnMappingConverter")]
public class System.Data.Common.DataColumnMapping : MarshalByRefObject {
    
private DataColumnMappingCollection _parent;
    
private string _dataSetColumnName;
    
private string _sourceColumnName;
    [DefaultValueAttribute("")]

public string DataSetColumn { get; public set; }
    
internal DataColumnMappingCollection Parent { get; internal set; }
    [DefaultValueAttribute("")]

public string SourceColumn { get; public set; }
    public DataColumnMapping(string sourceColumn, string dataSetColumn);
    public sealed virtual string get_DataSetColumn();
    public sealed virtual void set_DataSetColumn(string value);
    internal DataColumnMappingCollection get_Parent();
    internal void set_Parent(DataColumnMappingCollection value);
    public sealed virtual string get_SourceColumn();
    public sealed virtual void set_SourceColumn(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    internal static DataColumn CreateDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
    
private List`1<DataColumnMapping> _items;
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    
private bool System.Collections.IList.IsReadOnly { get; }
    
private bool System.Collections.IList.IsFixedSize { get; }
    
private object System.Collections.IList.Item { get; private set; }
    
private object System.Data.IColumnMappingCollection.Item { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public int Count { get; }
    
private Type ItemType { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DataColumnMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DataColumnMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IColumnMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.IColumnMappingCollection.set_Item(string index, object value);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName);
    public sealed virtual int get_Count();
    private Type get_ItemType();
    public DataColumnMapping get_Item(int index);
    public void set_Item(int index, DataColumnMapping value);
    public DataColumnMapping get_Item(string sourceColumn);
    public void set_Item(string sourceColumn, DataColumnMapping value);
    public sealed virtual int Add(object value);
    private DataColumnMapping Add(DataColumnMapping value);
    public DataColumnMapping Add(string sourceColumn, string dataSetColumn);
    public void AddRange(DataColumnMapping[] values);
    public void AddRange(Array values);
    private void AddEnumerableRange(IEnumerable values, bool doClone);
    private void AddWithoutEvents(DataColumnMapping value);
    private List`1<DataColumnMapping> ArrayList();
    public sealed virtual void Clear();
    private void ClearWithoutEvents();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataColumnMapping[] array, int index);
    public DataColumnMapping GetByDataSetColumn(string value);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceColumn);
    public int IndexOfDataSetColumn(string dataSetColumn);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataColumnMapping value);
    private void RangeCheck(int index);
    private int RangeCheck(string sourceColumn);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceColumn);
    private void RemoveIndex(int index);
    public sealed virtual void Remove(object value);
    public void Remove(DataColumnMapping value);
    private void Replace(int index, DataColumnMapping newValue);
    private void ValidateType(object value);
    private void Validate(int index, DataColumnMapping value);
    internal void ValidateSourceColumn(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DataRecordInternal : DbDataRecord {
    
private SchemaInfo[] _schemaInfo;
    
private Object[] _values;
    
private PropertyDescriptorCollection _propertyDescriptors;
    
private FieldNameLookup _fieldNameLookup;
    
public int FieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    internal DataRecordInternal(SchemaInfo[] schemaInfo, Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup);
    public virtual int get_FieldCount();
    public virtual int GetValues(Object[] values);
    public virtual string GetName(int i);
    public virtual object GetValue(int i);
    public virtual string GetDataTypeName(int i);
    public virtual Type GetFieldType(int i);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual float GetFloat(int i);
    public virtual double GetDouble(int i);
    public virtual string GetString(int i);
    public virtual decimal GetDecimal(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal abstract class System.Data.Common.DataStorage : object {
    
private static Type[] s_storageClassType;
    
internal DataColumn _column;
    
internal DataTable _table;
    
internal Type _dataType;
    
internal StorageType _storageTypeCode;
    
private BitArray _dbNullBits;
    
private object _defaultValue;
    
internal object _nullValue;
    
internal bool _isCloneable;
    
internal bool _isCustomDefinedType;
    
internal bool _isStringType;
    
internal bool _isValueType;
    
private static Func`2<Type, Tuple`4<bool, bool, bool, bool>> s_inspectTypeForInterfaces;
    
private static ConcurrentDictionary`2<Type, Tuple`4<bool, bool, bool, bool>> s_typeImplementsInterface;
    
internal DataSetDateTime DateTimeMode { get; }
    
internal IFormatProvider FormatProvider { get; }
    protected DataStorage(DataColumn column, Type type, object defaultValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, bool isICloneable, StorageType storageType);
    private static DataStorage();
    internal DataSetDateTime get_DateTimeMode();
    internal IFormatProvider get_FormatProvider();
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public object AggregateCount(Int32[] recordNos);
    protected int CompareBits(int recordNo1, int recordNo2);
    public abstract virtual int Compare(int recordNo1, int recordNo2);
    public abstract virtual int CompareValueTo(int recordNo1, object value);
    public virtual object ConvertValue(object value);
    protected void CopyBits(int srcRecordNo, int dstRecordNo);
    public abstract virtual void Copy(int recordNo1, int recordNo2);
    public abstract virtual object Get(int recordNo);
    protected object GetBits(int recordNo);
    public virtual int GetStringLength(int record);
    protected bool HasValue(int recordNo);
    public virtual bool IsNull(int recordNo);
    public abstract virtual void Set(int recordNo, object value);
    protected void SetNullBit(int recordNo, bool flag);
    public virtual void SetCapacity(int capacity);
    public abstract virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public abstract virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    public static DataStorage CreateStorage(DataColumn column, Type dataType, StorageType typeCode);
    internal static StorageType GetStorageType(Type dataType);
    internal static Type GetTypeStorage(StorageType storageType);
    internal static bool IsTypeCustomType(Type type);
    internal static bool IsTypeCustomType(StorageType typeCode);
    internal static bool IsSqlType(StorageType storageType);
    public static bool IsSqlType(Type dataType);
    private static bool DetermineIfValueType(StorageType typeCode, Type dataType);
    internal static void ImplementsInterfaces(StorageType typeCode, Type dataType, Boolean& sqlType, Boolean& nullable, Boolean& xmlSerializable, Boolean& changeTracking, Boolean& revertibleChangeTracking);
    private static Tuple`4<bool, bool, bool, bool> InspectTypeForInterfaces(Type dataType);
    internal static bool ImplementsINullableValue(StorageType typeCode, Type dataType);
    public static bool IsObjectNull(object value);
    public static bool IsObjectSqlNull(object value);
    internal object GetEmptyStorageInternal(int recordCount);
    internal void CopyValueInternal(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorageInternal(object store, BitArray nullbits);
    protected abstract virtual object GetEmptyStorage(int recordCount);
    protected abstract virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected abstract virtual void SetStorage(object store, BitArray nullbits);
    protected void SetNullStorage(BitArray nullbits);
    internal static Type GetType(string value);
    internal static string GetQualifiedName(Type type);
}
[TypeConverterAttribute("System.Data.Common.DataTableMapping/DataTableMappingConverter")]
public class System.Data.Common.DataTableMapping : MarshalByRefObject {
    
private DataTableMappingCollection _parent;
    
private DataColumnMappingCollection _columnMappings;
    
private string _dataSetTableName;
    
private string _sourceTableName;
    
private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings { get; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataColumnMappingCollection ColumnMappings { get; }
    [DefaultValueAttribute("")]

public string DataSetTable { get; public set; }
    
internal DataTableMappingCollection Parent { get; internal set; }
    [DefaultValueAttribute("")]

public string SourceTable { get; public set; }
    public DataTableMapping(string sourceTable, string dataSetTable);
    public DataTableMapping(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings);
    private sealed virtual override IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings();
    public DataColumnMappingCollection get_ColumnMappings();
    public sealed virtual string get_DataSetTable();
    public sealed virtual void set_DataSetTable(string value);
    internal DataTableMappingCollection get_Parent();
    internal void set_Parent(DataTableMappingCollection value);
    public sealed virtual string get_SourceTable();
    public sealed virtual void set_SourceTable(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction);
    [EditorBrowsableAttribute("2")]
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
    
private List`1<DataTableMapping> _items;
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    
private bool System.Collections.IList.IsReadOnly { get; }
    
private bool System.Collections.IList.IsFixedSize { get; }
    
private object System.Collections.IList.Item { get; private set; }
    
private object System.Data.ITableMappingCollection.Item { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public int Count { get; }
    
private Type ItemType { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DataTableMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DataTableMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.ITableMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.ITableMappingCollection.set_Item(string index, object value);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName);
    public sealed virtual int get_Count();
    private Type get_ItemType();
    public DataTableMapping get_Item(int index);
    public void set_Item(int index, DataTableMapping value);
    public DataTableMapping get_Item(string sourceTable);
    public void set_Item(string sourceTable, DataTableMapping value);
    public sealed virtual int Add(object value);
    private DataTableMapping Add(DataTableMapping value);
    public void AddRange(DataTableMapping[] values);
    public void AddRange(Array values);
    private void AddEnumerableRange(IEnumerable values, bool doClone);
    public DataTableMapping Add(string sourceTable, string dataSetTable);
    private void AddWithoutEvents(DataTableMapping value);
    private List`1<DataTableMapping> ArrayList();
    public sealed virtual void Clear();
    private void ClearWithoutEvents();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataTableMapping[] array, int index);
    public DataTableMapping GetByDataSetTable(string dataSetTable);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceTable);
    public int IndexOfDataSetTable(string dataSetTable);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataTableMapping value);
    private void RangeCheck(int index);
    private int RangeCheck(string sourceTable);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceTable);
    private void RemoveIndex(int index);
    public sealed virtual void Remove(object value);
    public void Remove(DataTableMapping value);
    private void Replace(int index, DataTableMapping newValue);
    private void ValidateType(object value);
    private void Validate(int index, DataTableMapping value);
    internal void ValidateSourceTable(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction);
}
internal class System.Data.Common.DateTimeOffsetStorage : DataStorage {
    
private static DateTimeOffset s_defaultValue;
    
private DateTimeOffset[] _values;
    internal DateTimeOffsetStorage(DataColumn column);
    private static DateTimeOffsetStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DateTimeStorage : DataStorage {
    
private static DateTime s_defaultValue;
    
private DateTime[] _values;
    internal DateTimeStorage(DataColumn column);
    private static DateTimeStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbColumn : object {
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <AllowDBNull>k__BackingField;
    [CompilerGeneratedAttribute]

private string <BaseCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <BaseColumnName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <BaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <BaseServerName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <BaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<int> <ColumnOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<int> <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsAliased>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsAutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsExpression>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsLong>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<int> <NumericPrecision>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<int> <NumericScale>k__BackingField;
    [CompilerGeneratedAttribute]

private string <UdtAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]

private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]

private string <DataTypeName>k__BackingField;
    
public Nullable`1<bool> AllowDBNull { get; protected set; }
    
public string BaseCatalogName { get; protected set; }
    
public string BaseColumnName { get; protected set; }
    
public string BaseSchemaName { get; protected set; }
    
public string BaseServerName { get; protected set; }
    
public string BaseTableName { get; protected set; }
    
public string ColumnName { get; protected set; }
    
public Nullable`1<int> ColumnOrdinal { get; protected set; }
    
public Nullable`1<int> ColumnSize { get; protected set; }
    
public Nullable`1<bool> IsAliased { get; protected set; }
    
public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    
public Nullable`1<bool> IsExpression { get; protected set; }
    
public Nullable`1<bool> IsHidden { get; protected set; }
    
public Nullable`1<bool> IsIdentity { get; protected set; }
    
public Nullable`1<bool> IsKey { get; protected set; }
    
public Nullable`1<bool> IsLong { get; protected set; }
    
public Nullable`1<bool> IsReadOnly { get; protected set; }
    
public Nullable`1<bool> IsUnique { get; protected set; }
    
public Nullable`1<int> NumericPrecision { get; protected set; }
    
public Nullable`1<int> NumericScale { get; protected set; }
    
public string UdtAssemblyQualifiedName { get; protected set; }
    
public Type DataType { get; protected set; }
    
public string DataTypeName { get; protected set; }
    
public object Item { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDBNull();
    [CompilerGeneratedAttribute]
protected void set_AllowDBNull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
protected void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
protected void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
protected void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
protected void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
protected void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
protected void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
protected void set_ColumnOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnSize();
    [CompilerGeneratedAttribute]
protected void set_ColumnSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAliased();
    [CompilerGeneratedAttribute]
protected void set_IsAliased(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
protected void set_IsAutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpression();
    [CompilerGeneratedAttribute]
protected void set_IsExpression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
protected void set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIdentity();
    [CompilerGeneratedAttribute]
protected void set_IsIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsKey();
    [CompilerGeneratedAttribute]
protected void set_IsKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLong();
    [CompilerGeneratedAttribute]
protected void set_IsLong(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnique();
    [CompilerGeneratedAttribute]
protected void set_IsUnique(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericPrecision();
    [CompilerGeneratedAttribute]
protected void set_NumericPrecision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericScale();
    [CompilerGeneratedAttribute]
protected void set_NumericScale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UdtAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_UdtAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
protected void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
public abstract class System.Data.Common.DbCommand : Component {
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]

public string CommandText { get; public set; }
    
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DbConnection Connection { get; public set; }
    
private IDbConnection System.Data.IDbCommand.Connection { get; private set; }
    
protected DbConnection DbConnection { get; protected set; }
    
protected DbParameterCollection DbParameterCollection { get; }
    
protected DbTransaction DbTransaction { get; protected set; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
[DefaultValueAttribute("True")]

public bool DesignTimeVisible { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DbParameterCollection Parameters { get; }
    
private IDataParameterCollection System.Data.IDbCommand.Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("")]

public DbTransaction Transaction { get; public set; }
    
private IDbTransaction System.Data.IDbCommand.Transaction { get; private set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    private sealed virtual override IDbConnection System.Data.IDbCommand.get_Connection();
    private sealed virtual override void System.Data.IDbCommand.set_Connection(IDbConnection value);
    protected abstract virtual DbConnection get_DbConnection();
    protected abstract virtual void set_DbConnection(DbConnection value);
    protected abstract virtual DbParameterCollection get_DbParameterCollection();
    protected abstract virtual DbTransaction get_DbTransaction();
    protected abstract virtual void set_DbTransaction(DbTransaction value);
    public abstract virtual bool get_DesignTimeVisible();
    public abstract virtual void set_DesignTimeVisible(bool value);
    public DbParameterCollection get_Parameters();
    private sealed virtual override IDataParameterCollection System.Data.IDbCommand.get_Parameters();
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    private sealed virtual override IDbTransaction System.Data.IDbCommand.get_Transaction();
    private sealed virtual override void System.Data.IDbCommand.set_Transaction(IDbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal void CancelIgnoreFailure();
    public abstract virtual void Cancel();
    public DbParameter CreateParameter();
    private sealed virtual override IDbDataParameter System.Data.IDbCommand.CreateParameter();
    protected abstract virtual DbParameter CreateDbParameter();
    protected abstract virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public abstract virtual int ExecuteNonQuery();
    public DbDataReader ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    public DbDataReader ExecuteReader(CommandBehavior behavior);
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    public Task`1<int> ExecuteNonQueryAsync();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync();
    public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar();
    public abstract virtual void Prepare();
}
public abstract class System.Data.Common.DbCommandBuilder : Component {
    
private static string DeleteFrom;
    
private static string InsertInto;
    
private static string DefaultValues;
    
private static string Values;
    
private static string Update;
    
private static string Set;
    
private static string Where;
    
private static string SpaceLeftParenthesis;
    
private static string Comma;
    
private static string Equal;
    
private static string LeftParenthesis;
    
private static string RightParenthesis;
    
private static string NameSeparator;
    
private static string IsNull;
    
private static string EqualOne;
    
private static string And;
    
private static string Or;
    
private DbDataAdapter _dataAdapter;
    
private DbCommand _insertCommand;
    
private DbCommand _updateCommand;
    
private DbCommand _deleteCommand;
    
private MissingMappingAction _missingMappingAction;
    
private ConflictOption _conflictDetection;
    
private bool _setAllValues;
    
private bool _hasPartialPrimaryKey;
    
private DataTable _dbSchemaTable;
    
private DbSchemaRow[] _dbSchemaRows;
    
private String[] _sourceColumnNames;
    
private ParameterNames _parameterNames;
    
private string _quotedBaseTableName;
    
private CatalogLocation _catalogLocation;
    
private string _catalogSeparator;
    
private string _schemaSeparator;
    
private string _quotePrefix;
    
private string _quoteSuffix;
    
private string _parameterNamePattern;
    
private string _parameterMarkerFormat;
    
private int _parameterNameMaxLength;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public ConflictOption ConflictOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public CatalogLocation CatalogLocation { get; public set; }
    [DefaultValueAttribute(".")]

public string CatalogSeparator { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DbDataAdapter DataAdapter { get; public set; }
    
internal int ParameterNameMaxLength { get; }
    
internal string ParameterNamePattern { get; }
    
private string QuotedBaseTableName { get; }
    [DefaultValueAttribute("")]

public string QuotePrefix { get; public set; }
    [DefaultValueAttribute("")]

public string QuoteSuffix { get; public set; }
    [DefaultValueAttribute(".")]

public string SchemaSeparator { get; public set; }
    [DefaultValueAttribute("False")]

public bool SetAllValues { get; public set; }
    
private DbCommand InsertCommand { get; private set; }
    
private DbCommand UpdateCommand { get; private set; }
    
private DbCommand DeleteCommand { get; private set; }
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public DbDataAdapter get_DataAdapter();
    public void set_DataAdapter(DbDataAdapter value);
    internal int get_ParameterNameMaxLength();
    internal string get_ParameterNamePattern();
    private string get_QuotedBaseTableName();
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public bool get_SetAllValues();
    public void set_SetAllValues(bool value);
    private DbCommand get_InsertCommand();
    private void set_InsertCommand(DbCommand value);
    private DbCommand get_UpdateCommand();
    private void set_UpdateCommand(DbCommand value);
    private DbCommand get_DeleteCommand();
    private void set_DeleteCommand(DbCommand value);
    private void BuildCache(bool closeConnection, DataRow dataRow, bool useColumnsForParameterNames);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    private void BuildInformation(DataTable schemaTable);
    private DbCommand BuildDeleteCommand(DataTableMapping mappings, DataRow dataRow);
    private DbCommand BuildInsertCommand(DataTableMapping mappings, DataRow dataRow);
    private DbCommand BuildUpdateCommand(DataTableMapping mappings, DataRow dataRow);
    private int BuildWhereClause(DataTableMapping mappings, DataRow dataRow, StringBuilder builder, DbCommand command, int parameterCount, bool isUpdate);
    private string CreateParameterForNullTest(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause);
    private string CreateParameterForValue(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause);
    protected virtual void Dispose(bool disposing);
    private DataTableMapping GetTableMapping(DataRow dataRow);
    private string GetBaseParameterName(int index);
    private string GetOriginalParameterName(int index);
    private string GetNullParameterName(int index);
    private DbCommand GetSelectCommand();
    public DbCommand GetInsertCommand();
    public DbCommand GetInsertCommand(bool useColumnsForParameterNames);
    internal DbCommand GetInsertCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetUpdateCommand();
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    internal DbCommand GetUpdateCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetDeleteCommand();
    public DbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    internal DbCommand GetDeleteCommand(DataRow dataRow, bool useColumnsForParameterNames);
    private object GetColumnValue(DataRow row, string columnName, DataTableMapping mappings, DataRowVersion version);
    private object GetColumnValue(DataRow row, DataColumn column, DataRowVersion version);
    private DataColumn GetDataColumn(string columnName, DataTableMapping tablemapping, DataRow row);
    private static DbParameter GetNextParameter(DbCommand command, int pcount);
    private bool IncludeInInsertValues(DbSchemaRow row);
    private bool IncludeInUpdateSet(DbSchemaRow row);
    private bool IncludeInWhereClause(DbSchemaRow row, bool isUpdate);
    private bool IncrementWhereCount(DbSchemaRow row);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    private string QuotedColumn(string column);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual void RefreshSchema();
    private static void RemoveExtraParameters(DbCommand command, int usedParameterCount);
    protected void RowUpdatingHandler(RowUpdatingEventArgs rowUpdatingEvent);
    private void RowUpdatingHandlerBuilder(RowUpdatingEventArgs rowUpdatingEvent);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected abstract virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected abstract virtual string GetParameterName(int parameterOrdinal);
    protected abstract virtual string GetParameterName(string parameterName);
    protected abstract virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected abstract virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
}
public abstract class System.Data.Common.DbConnection : Component {
    
internal bool _suppressStateChangeForReconnection;
    [CompilerGeneratedAttribute]

private StateChangeEventHandler StateChange;
    [RecommendedAsConfigurableAttribute("True")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]

public string ConnectionString { get; public set; }
    
public int ConnectionTimeout { get; }
    
public string Database { get; }
    
public string DataSource { get; }
    
protected DbProviderFactory DbProviderFactory { get; }
    [BrowsableAttribute("False")]

public string ServerVersion { get; }
    [BrowsableAttribute("False")]

public ConnectionState State { get; }
    
internal DbProviderFactory ProviderFactory { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual string get_DataSource();
    protected virtual DbProviderFactory get_DbProviderFactory();
    public abstract virtual string get_ServerVersion();
    public abstract virtual ConnectionState get_State();
    [CompilerGeneratedAttribute]
public virtual void add_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChange(StateChangeEventHandler value);
    protected abstract virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DbTransaction BeginTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction();
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual void Close();
    public abstract virtual void ChangeDatabase(string databaseName);
    public DbCommand CreateCommand();
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
    protected abstract virtual DbCommand CreateDbCommand();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public abstract virtual void Open();
    public Task OpenAsync();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    internal DbProviderFactory get_ProviderFactory();
}
internal static class System.Data.Common.DbConnectionOptionKeywords : object {
    
internal static string Driver;
    
internal static string Pwd;
    
internal static string UID;
    
internal static string DataProvider;
    
internal static string ExtendedProperties;
    
internal static string FileName;
    
internal static string Provider;
    
internal static string RemoteProvider;
    
internal static string Password;
    
internal static string UserID;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DbConnectionOptions : object {
    
private static string ConnectionStringValidKeyPattern;
    
private static string ConnectionStringValidValuePattern;
    
private static string ConnectionStringQuoteValuePattern;
    
private static string ConnectionStringQuoteOdbcValuePattern;
    
internal static string DataDirectory;
    
private static Regex s_connectionStringValidKeyRegex;
    
private static Regex s_connectionStringValidValueRegex;
    
private static Regex s_connectionStringQuoteValueRegex;
    
private static Regex s_connectionStringQuoteOdbcValueRegex;
    
private string _usersConnectionString;
    
private Dictionary`2<string, string> _parsetable;
    
internal NameValuePair _keyChain;
    
internal bool _hasPasswordKeyword;
    
internal bool _useOdbcRules;
    
internal bool _hasUserIdKeyword;
    
internal bool HasPersistablePassword { get; }
    
internal Dictionary`2<string, string> Parsetable { get; }
    
public string Item { get; }
    
public bool IsEmpty { get; }
    
internal bool HasBlankPassword { get; }
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms, bool useOdbcRules);
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms);
    protected DbConnectionOptions(DbConnectionOptions connectionOptions);
    private static DbConnectionOptions();
    public string UsersConnectionString(bool hidePassword);
    private string UsersConnectionString(bool hidePassword, bool forceHidePassword);
    internal bool get_HasPersistablePassword();
    public bool ConvertValueToBoolean(string keyName, bool defaultValue);
    internal static bool ConvertValueToBooleanInternal(string keyName, string stringValue);
    private static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    [ConditionalAttribute("DEBUG")]
[ConditionalAttribute("DEBUG")]
private static void DebugTraceKeyValuePair(string keyname, string keyvalue, Dictionary`2<string, string> synonyms);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Dictionary`2<string, string> parsetable, string connectionString, bool buildChain, Dictionary`2<string, string> synonyms, bool firstKey);
    internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword);
    internal Dictionary`2<string, string> get_Parsetable();
    public string get_Item(string keyword);
    internal static void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules);
    protected internal virtual string Expand();
    internal string ExpandKeyword(string keyword, string replacementValue);
    internal static void ValidateKeyValuePair(string keyword, string value);
    public bool get_IsEmpty();
    internal bool TryGetParsetableValue(string key, String& value);
    public bool ConvertValueToIntegratedSecurity();
    internal bool ConvertValueToIntegratedSecurityInternal(string stringValue);
    public int ConvertValueToInt32(string keyName, int defaultValue);
    internal static int ConvertToInt32Internal(string keyname, string stringValue);
    public string ConvertValueToString(string keyName, string defaultValue);
    public bool ContainsKey(string keyword);
    internal static string ExpandDataDirectory(string keyword, string value, String& datadir);
    internal string ExpandDataDirectories(String& filename, Int32& position);
    internal bool get_HasBlankPassword();
}
internal class System.Data.Common.DbConnectionPoolKey : object {
    
private string _connectionString;
    
internal string ConnectionString { get; internal set; }
    internal DbConnectionPoolKey(string connectionString);
    protected DbConnectionPoolKey(DbConnectionPoolKey key);
    public virtual object Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DBConnectionString : object {
    
private string _encryptedUsersConnectionString;
    
private Dictionary`2<string, string> _parsetable;
    
private NameValuePair _keychain;
    
private bool _hasPassword;
    
private String[] _restrictionValues;
    
private string _restrictions;
    
private KeyRestrictionBehavior _behavior;
    
private string _encryptedActualConnectionString;
    
internal KeyRestrictionBehavior Behavior { get; }
    
internal string ConnectionString { get; }
    
internal bool IsEmpty { get; }
    
internal NameValuePair KeyChain { get; }
    
internal string Restrictions { get; }
    
internal string Item { get; }
    internal DBConnectionString(string value, string restrictions, KeyRestrictionBehavior behavior, Dictionary`2<string, string> synonyms, bool useOdbcRules);
    internal DBConnectionString(DbConnectionOptions connectionOptions);
    private DBConnectionString(DbConnectionOptions connectionOptions, string restrictions, KeyRestrictionBehavior behavior, Dictionary`2<string, string> synonyms, bool mustCloneDictionary);
    private DBConnectionString(DBConnectionString connectionString, String[] restrictionValues, KeyRestrictionBehavior behavior);
    internal KeyRestrictionBehavior get_Behavior();
    internal string get_ConnectionString();
    internal bool get_IsEmpty();
    internal NameValuePair get_KeyChain();
    internal string get_Restrictions();
    internal string get_Item(string keyword);
    internal bool ContainsKey(string keyword);
    internal DBConnectionString Intersect(DBConnectionString entry);
    [ConditionalAttribute("DEBUG")]
private void ValidateCombinedSet(DBConnectionString componentSet, DBConnectionString combinedSet);
    private bool IsRestrictedKeyword(string key);
    internal bool IsSupersetOf(DBConnectionString entry);
    private static String[] NewRestrictionAllowOnly(String[] allowonly, String[] preventusage);
    private static String[] NewRestrictionIntersect(String[] a, String[] b);
    private static String[] NoDuplicateUnion(String[] a, String[] b);
    private static String[] ParseRestrictions(string restrictions, Dictionary`2<string, string> synonyms);
    internal static String[] RemoveDuplicates(String[] restrictions);
    [ConditionalAttribute("DEBUG")]
private static void Verify(String[] restrictionValues);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DbConnectionStringBuilder : object {
    
private Dictionary`2<string, object> _currentValues;
    
private string _connectionString;
    
private PropertyDescriptorCollection _propertyDescriptors;
    
private bool _browsableConnectionString;
    
private bool _useOdbcRules;
    
private static int s_objectTypeCount;
    
internal int _objectID;
    
private ICollection Collection { get; }
    
private IDictionary Dictionary { get; }
    
private Dictionary`2<string, object> CurrentValues { get; }
    
private object System.Collections.IDictionary.Item { get; private set; }
    [BrowsableAttribute("False")]

public object Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignOnlyAttribute("True")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]

public bool BrowsableConnectionString { get; public set; }
    [RefreshPropertiesAttribute("1")]

public string ConnectionString { get; public set; }
    [BrowsableAttribute("False")]

public int Count { get; }
    [BrowsableAttribute("False")]

public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]

public bool IsFixedSize { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    [BrowsableAttribute("False")]

public ICollection Keys { get; }
    
internal int ObjectID { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    [BrowsableAttribute("False")]

public ICollection Values { get; }
    public DbConnectionStringBuilder(bool useOdbcRules);
    private ICollection get_Collection();
    private IDictionary get_Dictionary();
    private Dictionary`2<string, object> get_CurrentValues();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object keyword);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object keyword, object value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public bool get_BrowsableConnectionString();
    public void set_BrowsableConnectionString(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual ICollection get_Keys();
    internal int get_ObjectID();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual ICollection get_Values();
    internal virtual string ConvertValueToString(object value);
    private sealed virtual override void System.Collections.IDictionary.Add(object keyword, object value);
    public void Add(string keyword, object value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules);
    public virtual void Clear();
    protected internal void ClearPropertyDescriptors();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object keyword);
    public virtual bool ContainsKey(string keyword);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private string ObjectToString(object keyword);
    private sealed virtual override void System.Collections.IDictionary.Remove(object keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual string ToString();
    public virtual bool TryGetValue(string keyword, Object& value);
    internal Attribute[] GetAttributesFromCollection(AttributeCollection collection);
    private PropertyDescriptorCollection GetProperties();
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    private PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Data.Common.DbConnectionStringBuilderDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]

private bool <RefreshOnChange>k__BackingField;
    [CompilerGeneratedAttribute]

private Type <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]

private Type <PropertyType>k__BackingField;
    
internal bool RefreshOnChange { get; internal set; }
    
public Type ComponentType { get; }
    
public bool IsReadOnly { get; }
    
public Type PropertyType { get; }
    internal DbConnectionStringBuilderDescriptor(string propertyName, Type componentType, Type propertyType, bool isReadOnly, Attribute[] attributes);
    [CompilerGeneratedAttribute]
internal bool get_RefreshOnChange();
    [CompilerGeneratedAttribute]
internal void set_RefreshOnChange(bool value);
    [CompilerGeneratedAttribute]
public virtual Type get_ComponentType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    
private static string ApplicationIntentReadWriteString;
    
private static string ApplicationIntentReadOnlyString;
    internal static bool ConvertToBoolean(object value);
    internal static bool ConvertToIntegratedSecurity(object value);
    internal static int ConvertToInt32(object value);
    internal static string ConvertToString(object value);
    internal static bool TryConvertToApplicationIntent(string value, ApplicationIntent& result);
    internal static bool IsValidApplicationIntentValue(ApplicationIntent value);
    internal static string ApplicationIntentToString(ApplicationIntent value);
    internal static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
}
internal static class System.Data.Common.DbConnectionStringDefaults : object {
    
internal static ApplicationIntent ApplicationIntent;
    
internal static string ApplicationName;
    
internal static string AttachDBFilename;
    
internal static int ConnectTimeout;
    
internal static string CurrentLanguage;
    
internal static string DataSource;
    
internal static bool Encrypt;
    
internal static bool Enlist;
    
internal static string FailoverPartner;
    
internal static string InitialCatalog;
    
internal static bool IntegratedSecurity;
    
internal static int LoadBalanceTimeout;
    
internal static bool MultipleActiveResultSets;
    
internal static bool MultiSubnetFailover;
    
internal static int MaxPoolSize;
    
internal static int MinPoolSize;
    
internal static int PacketSize;
    
internal static string Password;
    
internal static bool PersistSecurityInfo;
    
internal static bool Pooling;
    
internal static bool TrustServerCertificate;
    
internal static string TypeSystemVersion;
    
internal static string UserID;
    
internal static bool UserInstance;
    
internal static bool Replication;
    
internal static string WorkstationID;
    
internal static string TransactionBinding;
    
internal static int ConnectRetryCount;
    
internal static int ConnectRetryInterval;
    
internal static string Dsn;
    
internal static string Driver;
}
internal static class System.Data.Common.DbConnectionStringKeywords : object {
    
internal static string ApplicationIntent;
    
internal static string ApplicationName;
    
internal static string AsynchronousProcessing;
    
internal static string AttachDBFilename;
    
internal static string ConnectTimeout;
    
internal static string ConnectionReset;
    
internal static string ContextConnection;
    
internal static string CurrentLanguage;
    
internal static string Encrypt;
    
internal static string FailoverPartner;
    
internal static string InitialCatalog;
    
internal static string MultipleActiveResultSets;
    
internal static string MultiSubnetFailover;
    
internal static string NetworkLibrary;
    
internal static string PacketSize;
    
internal static string Replication;
    
internal static string TransactionBinding;
    
internal static string TrustServerCertificate;
    
internal static string TypeSystemVersion;
    
internal static string UserInstance;
    
internal static string WorkstationID;
    
internal static string ConnectRetryCount;
    
internal static string ConnectRetryInterval;
    
internal static string DataSource;
    
internal static string IntegratedSecurity;
    
internal static string Password;
    
internal static string Driver;
    
internal static string PersistSecurityInfo;
    
internal static string UserID;
    
internal static string Enlist;
    
internal static string LoadBalanceTimeout;
    
internal static string MaxPoolSize;
    
internal static string Pooling;
    
internal static string MinPoolSize;
    
internal static string Dsn;
}
internal static class System.Data.Common.DbConnectionStringSynonyms : object {
    
internal static string Async;
    
internal static string APP;
    
internal static string EXTENDEDPROPERTIES;
    
internal static string INITIALFILENAME;
    
internal static string CONNECTIONTIMEOUT;
    
internal static string TIMEOUT;
    
internal static string LANGUAGE;
    
internal static string ADDR;
    
internal static string ADDRESS;
    
internal static string SERVER;
    
internal static string NETWORKADDRESS;
    
internal static string DATABASE;
    
internal static string TRUSTEDCONNECTION;
    
internal static string ConnectionLifetime;
    
internal static string NET;
    
internal static string NETWORK;
    
internal static string Pwd;
    
internal static string PERSISTSECURITYINFO;
    
internal static string UID;
    
internal static string User;
    
internal static string WSID;
}
public abstract class System.Data.Common.DbDataAdapter : DataAdapter {
    
public static string DefaultSourceTableName;
    
internal static object s_parameterValueNonNullValue;
    
internal static object s_parameterValueNullValue;
    
private IDbCommand _deleteCommand;
    
private IDbCommand _insertCommand;
    
private IDbCommand _selectCommand;
    
private IDbCommand _updateCommand;
    
private CommandBehavior _fillCommandBehavior;
    
private IDbDataAdapter _IDbDataAdapter { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DbCommand DeleteCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    
protected internal CommandBehavior FillCommandBehavior { get; protected internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DbCommand InsertCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DbCommand SelectCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [DefaultValueAttribute("1")]

public int UpdateBatchSize { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DbCommand UpdateCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    
private MissingMappingAction UpdateMappingAction { get; }
    
private MissingSchemaAction UpdateSchemaAction { get; }
    protected DbDataAdapter(DbDataAdapter adapter);
    private static DbDataAdapter();
    private IDbDataAdapter get__IDbDataAdapter();
    public DbCommand get_DeleteCommand();
    public void set_DeleteCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    protected internal CommandBehavior get_FillCommandBehavior();
    protected internal void set_FillCommandBehavior(CommandBehavior value);
    public DbCommand get_InsertCommand();
    public void set_InsertCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public DbCommand get_SelectCommand();
    public void set_SelectCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public DbCommand get_UpdateCommand();
    public void set_UpdateCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    private MissingMappingAction get_UpdateMappingAction();
    private MissingSchemaAction get_UpdateSchemaAction();
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    private sealed virtual override object System.ICloneable.Clone();
    private void CloneFrom(DbDataAdapter from);
    private IDbCommand CloneCommand(IDbCommand command);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void Dispose(bool disposing);
    protected virtual int ExecuteBatch();
    public DataTable FillSchema(DataTable dataTable, SchemaType schemaType);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    private object FillSchemaInternal(DataSet dataset, DataTable datatable, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    public virtual int Fill(DataSet dataSet);
    public int Fill(DataSet dataSet, string srcTable);
    public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    protected virtual int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    public int Fill(DataTable dataTable);
    public int Fill(int startRecord, int maxRecords, DataTable[] dataTables);
    protected virtual int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    private int FillInternal(DataSet dataset, DataTable[] datatables, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMapping(DataTable dataTable);
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private void ParameterInput(IDataParameterCollection parameters, StatementType typeIndex, DataRow row, DataTableMapping mappings);
    private void ParameterOutput(IDataParameter parameter, DataRow row, DataTableMapping mappings, MissingMappingAction missingMapping, MissingSchemaAction missingSchema);
    private void ParameterOutput(IDataParameterCollection parameters, DataRow row, DataTableMapping mappings);
    protected virtual void TerminateBatching();
    public virtual int Update(DataSet dataSet);
    public int Update(DataRow[] dataRows);
    public int Update(DataTable dataTable);
    public int Update(DataSet dataSet, string srcTable);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    private void UpdateBatchExecute(BatchCommandInfo[] batchCommands, int commandCount, RowUpdatedEventArgs rowUpdatedEvent);
    private ConnectionState UpdateConnectionOpen(IDbConnection connection, StatementType statementType, IDbConnection[] connections, ConnectionState[] connectionStates, bool useSelectConnectionState);
    private int UpdateFromDataTable(DataTable dataTable, DataTableMapping tableMapping);
    private void UpdateRowExecute(RowUpdatedEventArgs rowUpdatedEvent, IDbCommand dataCommand, StatementType cmdIndex);
    private int UpdatedRowStatus(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusContinue(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusErrors(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusSkip(BatchCommandInfo[] batchCommands, int commandCount);
    private void UpdatingRowStatusErrors(RowUpdatingEventArgs rowUpdatedEvent, DataRow dataRow);
    private static IDbConnection GetConnection1(DbDataAdapter adapter);
    private static IDbConnection GetConnection3(DbDataAdapter adapter, IDbCommand command, string method);
    private static IDbConnection GetConnection4(DbDataAdapter adapter, IDbCommand command, StatementType statementType, bool isCommandFromRowUpdating);
    private static DataRowVersion GetParameterSourceVersion(StatementType statementType, IDataParameter parameter);
    private static void QuietClose(IDbConnection connection, ConnectionState originalState);
    private static void QuietOpen(IDbConnection connection, ConnectionState& originalState);
}
public abstract class System.Data.Common.DBDataPermission : CodeAccessPermission {
    
private bool _isUnrestricted;
    
private bool _allowBlankPassword;
    
private NameValuePermission _keyvaluetree;
    
private ArrayList _keyvalues;
    
public bool AllowBlankPassword { get; public set; }
    protected DBDataPermission(PermissionState state);
    [ObsoleteAttribute("DBDataPermission(PermissionState state,Boolean allowBlankPassword) has been deprecated.  Use the DBDataPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
protected DBDataPermission(PermissionState state, bool allowBlankPassword);
    protected DBDataPermission(DBDataPermission permission);
    protected DBDataPermission(DBDataPermissionAttribute permissionAttribute);
    internal DBDataPermission(DbConnectionOptions connectionOptions);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    internal void AddPermissionEntry(DBConnectionString entry);
    protected void Clear();
    public virtual IPermission Copy();
    private void CopyFrom(DBDataPermission permission);
    protected virtual DBDataPermission CreateInstance();
    public virtual IPermission Intersect(IPermission target);
    private bool IsEmpty();
    public virtual bool IsSubsetOf(IPermission target);
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Union(IPermission target);
    private string DecodeXmlValue(string value);
    private string EncodeXmlValue(string value);
    public virtual void FromXml(SecurityElement securityElement);
    public virtual SecurityElement ToXml();
}
[AttributeUsageAttribute("109")]
public abstract class System.Data.Common.DBDataPermissionAttribute : CodeAccessSecurityAttribute {
    
private bool _allowBlankPassword;
    
private string _connectionString;
    
private string _restrictions;
    
private KeyRestrictionBehavior _behavior;
    
public bool AllowBlankPassword { get; public set; }
    
public string ConnectionString { get; public set; }
    
public KeyRestrictionBehavior KeyRestrictionBehavior { get; public set; }
    
public string KeyRestrictions { get; public set; }
    protected DBDataPermissionAttribute(SecurityAction action);
    public bool get_AllowBlankPassword();
    public void set_AllowBlankPassword(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public KeyRestrictionBehavior get_KeyRestrictionBehavior();
    public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value);
    public string get_KeyRestrictions();
    public void set_KeyRestrictions(string value);
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeConnectionString();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeKeyRestrictions();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataReader : MarshalByRefObject {
    
public int Depth { get; }
    
public int FieldCount { get; }
    
public bool HasRows { get; }
    
public bool IsClosed { get; }
    
public int RecordsAffected { get; }
    
public int VisibleFieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    public abstract virtual int get_Depth();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool get_HasRows();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public abstract virtual object get_Item(int ordinal);
    public abstract virtual object get_Item(string name);
    public virtual void Close();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual string GetDataTypeName(int ordinal);
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual Type GetFieldType(int ordinal);
    public abstract virtual string GetName(int ordinal);
    public abstract virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    [EditorBrowsableAttribute("1")]
public DbDataReader GetData(int ordinal);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public abstract virtual string GetString(int ordinal);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public abstract virtual object GetValue(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
    public Task`1<bool> ReadAsync();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public Task`1<bool> NextResultAsync();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Data.Common.DbDataReaderExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<DbColumn> GetColumnSchema(DbDataReader reader);
    [ExtensionAttribute]
public static bool CanGetColumnSchema(DbDataReader reader);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataRecord : object {
    
public int FieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual IDataReader GetData(int i);
    protected virtual DbDataReader GetDbDataReader(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public abstract class System.Data.Common.DbDataSourceEnumerator : object {
    public abstract virtual DataTable GetDataSources();
}
public class System.Data.Common.DbEnumerator : object {
    
internal IDataReader _reader;
    
internal DbDataRecord _current;
    
internal SchemaInfo[] _schemaInfo;
    
internal PropertyDescriptorCollection _descriptors;
    
private FieldNameLookup _fieldNameLookup;
    
private bool _closeReader;
    
public object Current { get; }
    public DbEnumerator(IDataReader reader);
    public DbEnumerator(IDataReader reader, bool closeReader);
    public DbEnumerator(DbDataReader reader);
    public DbEnumerator(DbDataReader reader, bool closeReader);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Reset();
    private void BuildSchemaInfo();
}
public abstract class System.Data.Common.DbException : ExternalException {
    protected DbException(string message);
    protected DbException(string message, Exception innerException);
    protected DbException(string message, int errorCode);
    protected DbException(SerializationInfo info, StreamingContext context);
}
public static class System.Data.Common.DbMetaDataCollectionNames : object {
    
public static string MetaDataCollections;
    
public static string DataSourceInformation;
    
public static string DataTypes;
    
public static string Restrictions;
    
public static string ReservedWords;
    private static DbMetaDataCollectionNames();
}
public static class System.Data.Common.DbMetaDataColumnNames : object {
    
public static string CollectionName;
    
public static string ColumnSize;
    
public static string CompositeIdentifierSeparatorPattern;
    
public static string CreateFormat;
    
public static string CreateParameters;
    
public static string DataSourceProductName;
    
public static string DataSourceProductVersion;
    
public static string DataType;
    
public static string DataSourceProductVersionNormalized;
    
public static string GroupByBehavior;
    
public static string IdentifierCase;
    
public static string IdentifierPattern;
    
public static string IsAutoIncrementable;
    
public static string IsBestMatch;
    
public static string IsCaseSensitive;
    
public static string IsConcurrencyType;
    
public static string IsFixedLength;
    
public static string IsFixedPrecisionScale;
    
public static string IsLiteralSupported;
    
public static string IsLong;
    
public static string IsNullable;
    
public static string IsSearchable;
    
public static string IsSearchableWithLike;
    
public static string IsUnsigned;
    
public static string LiteralPrefix;
    
public static string LiteralSuffix;
    
public static string MaximumScale;
    
public static string MinimumScale;
    
public static string NumberOfIdentifierParts;
    
public static string NumberOfRestrictions;
    
public static string OrderByColumnsInSelect;
    
public static string ParameterMarkerFormat;
    
public static string ParameterMarkerPattern;
    
public static string ParameterNameMaxLength;
    
public static string ParameterNamePattern;
    
public static string ProviderDbType;
    
public static string QuotedIdentifierCase;
    
public static string QuotedIdentifierPattern;
    
public static string ReservedWord;
    
public static string StatementSeparatorPattern;
    
public static string StringLiteralPattern;
    
public static string SupportedJoinOperators;
    
public static string TypeName;
    private static DbMetaDataColumnNames();
}
public abstract class System.Data.Common.DbParameter : MarshalByRefObject {
    [BrowsableAttribute("False")]
[RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]

public DbType DbType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public ParameterDirection Direction { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]

public bool IsNullable { get; public set; }
    [DefaultValueAttribute("")]

public string ParameterName { get; public set; }
    
private byte System.Data.IDbDataParameter.Precision { get; private set; }
    
private byte System.Data.IDbDataParameter.Scale { get; private set; }
    
public byte Precision { get; public set; }
    
public byte Scale { get; public set; }
    
public int Size { get; public set; }
    [DefaultValueAttribute("")]

public string SourceColumn { get; public set; }
    [RefreshPropertiesAttribute("1")]
[EditorBrowsableAttribute("2")]
[DefaultValueAttribute("False")]

public bool SourceColumnNullMapping { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public DataRowVersion SourceVersion { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]

public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    [EditorBrowsableAttribute("2")]
public abstract virtual void ResetDbType();
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Precision();
    private sealed virtual override void System.Data.IDbDataParameter.set_Precision(byte value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Scale();
    private sealed virtual override void System.Data.IDbDataParameter.set_Scale(byte value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual bool get_SourceColumnNullMapping();
    public abstract virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbParameterCollection : MarshalByRefObject {
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public int Count { get; }
    [EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]

public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]

public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]

public object SyncRoot { get; }
    
private object System.Collections.IList.Item { get; private set; }
    
private object System.Data.IDataParameterCollection.Item { get; private set; }
    
public DbParameter Item { get; public set; }
    
public DbParameter Item { get; public set; }
    public abstract virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    public abstract virtual int Add(object value);
    public abstract virtual void AddRange(Array values);
    public abstract virtual bool Contains(object value);
    public abstract virtual bool Contains(string value);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual void Clear();
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    protected abstract virtual DbParameter GetParameter(int index);
    protected abstract virtual DbParameter GetParameter(string parameterName);
    public abstract virtual int IndexOf(object value);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void Insert(int index, object value);
    public abstract virtual void Remove(object value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void RemoveAt(string parameterName);
    protected abstract virtual void SetParameter(int index, DbParameter value);
    protected abstract virtual void SetParameter(string parameterName, DbParameter value);
}
public class System.Data.Common.DbProviderConfigurationHandler : object {
    
internal static string settings;
    internal static NameValueCollection CloneParent(NameValueCollection parentConfig);
    public virtual object Create(object parent, object configContext, XmlNode section);
    internal static object CreateStatic(object parent, object configContext, XmlNode section);
    internal static string RemoveAttribute(XmlNode node, string name);
}
public static class System.Data.Common.DbProviderFactories : object {
    
private static string AssemblyQualifiedName;
    
private static string Instance;
    
private static string InvariantName;
    
private static string Name;
    
private static string Description;
    
private static ConnectionState _initState;
    
private static DataTable _providerTable;
    
private static object _lockobj;
    private static DbProviderFactories();
    public static DbProviderFactory GetFactory(string providerInvariantName);
    public static DbProviderFactory GetFactory(DataRow providerRow);
    public static DbProviderFactory GetFactory(DbConnection connection);
    public static DataTable GetFactoryClasses();
    private static DataTable IncludeFrameworkFactoryClasses(DataTable configDataTable);
    private static DataTable GetProviderTable();
    private static void Initialize();
}
public class System.Data.Common.DbProviderFactoriesConfigurationHandler : object {
    
internal static string sectionName;
    
internal static string providerGroup;
    
internal static string odbcProviderName;
    
internal static string odbcProviderDescription;
    
internal static string oledbProviderName;
    
internal static string oledbProviderDescription;
    
internal static string oracleclientProviderName;
    
internal static string oracleclientProviderNamespace;
    
internal static string oracleclientProviderDescription;
    
internal static string sqlclientProviderName;
    
internal static string sqlclientProviderDescription;
    
internal static string sqlclientPartialAssemblyQualifiedName;
    
internal static string oracleclientPartialAssemblyQualifiedName;
    public virtual object Create(object parent, object configContext, XmlNode section);
    internal static object CreateStatic(object parent, object configContext, XmlNode section);
    private static void HandleProviders(DataSet config, object configContext, XmlNode section, string sectionName);
    internal static DataTable CreateProviderDataTable();
}
public abstract class System.Data.Common.DbProviderFactory : object {
    
public bool CanCreateDataSourceEnumerator { get; }
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
}
internal class System.Data.Common.DbProviderFactoryConfigSection : object {
    
private Type factType;
    
private string name;
    
private string invariantName;
    
private string description;
    
private string assemblyQualifiedName;
    
public string Name { get; }
    
public string InvariantName { get; }
    
public string Description { get; }
    
public string AssemblyQualifiedName { get; }
    public DbProviderFactoryConfigSection(Type FactoryType, string FactoryName, string FactoryDescription);
    public DbProviderFactoryConfigSection(string FactoryName, string FactoryInvariantName, string FactoryDescription, string FactoryAssemblyQualifiedName);
    public bool IsNull();
    public string get_Name();
    public string get_InvariantName();
    public string get_Description();
    public string get_AssemblyQualifiedName();
}
internal enum System.Data.Common.DbProvidersIndex : Enum {
    
public int value__;
    
public static DbProvidersIndex Odbc;
    
public static DbProvidersIndex OleDb;
    
public static DbProvidersIndex OracleClient;
    
public static DbProvidersIndex SqlClient;
    
public static DbProvidersIndex DbProvidersIndexCount;
}
[AttributeUsageAttribute("128")]
public class System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <IsProviderSpecificTypeProperty>k__BackingField;
    
public bool IsProviderSpecificTypeProperty { get; }
    public DbProviderSpecificTypePropertyAttribute(bool isProviderSpecificTypeProperty);
    [CompilerGeneratedAttribute]
public bool get_IsProviderSpecificTypeProperty();
}
internal class System.Data.Common.DbSchemaRow : object {
    
internal static string SchemaMappingUnsortedIndex;
    
private DbSchemaTable _schemaTable;
    
private DataRow _dataRow;
    
internal DataRow DataRow { get; }
    
internal string ColumnName { get; }
    
internal int Size { get; }
    
internal string BaseColumnName { get; }
    
internal string BaseServerName { get; }
    
internal string BaseCatalogName { get; }
    
internal string BaseSchemaName { get; }
    
internal string BaseTableName { get; }
    
internal bool IsAutoIncrement { get; }
    
internal bool IsUnique { get; }
    
internal bool IsRowVersion { get; }
    
internal bool IsKey { get; }
    
internal bool IsExpression { get; }
    
internal bool IsHidden { get; }
    
internal bool IsLong { get; }
    
internal bool IsReadOnly { get; }
    
internal Type DataType { get; }
    
internal bool AllowDBNull { get; }
    
internal int UnsortedIndex { get; }
    internal DbSchemaRow(DbSchemaTable schemaTable, DataRow dataRow);
    internal static DbSchemaRow[] GetSortedSchemaRows(DataTable dataTable, bool returnProviderSpecificTypes);
    internal DataRow get_DataRow();
    internal string get_ColumnName();
    internal int get_Size();
    internal string get_BaseColumnName();
    internal string get_BaseServerName();
    internal string get_BaseCatalogName();
    internal string get_BaseSchemaName();
    internal string get_BaseTableName();
    internal bool get_IsAutoIncrement();
    internal bool get_IsUnique();
    internal bool get_IsRowVersion();
    internal bool get_IsKey();
    internal bool get_IsExpression();
    internal bool get_IsHidden();
    internal bool get_IsLong();
    internal bool get_IsReadOnly();
    internal Type get_DataType();
    internal bool get_AllowDBNull();
    internal int get_UnsortedIndex();
}
internal class System.Data.Common.DbSchemaTable : object {
    
private static String[] s_DBCOLUMN_NAME;
    
internal DataTable _dataTable;
    
private DataColumnCollection _columns;
    
private DataColumn[] _columnCache;
    
private bool _returnProviderSpecificTypes;
    
internal DataColumn ColumnName { get; }
    
internal DataColumn Size { get; }
    
internal DataColumn BaseServerName { get; }
    
internal DataColumn BaseColumnName { get; }
    
internal DataColumn BaseTableName { get; }
    
internal DataColumn BaseCatalogName { get; }
    
internal DataColumn BaseSchemaName { get; }
    
internal DataColumn IsAutoIncrement { get; }
    
internal DataColumn IsUnique { get; }
    
internal DataColumn IsKey { get; }
    
internal DataColumn IsRowVersion { get; }
    
internal DataColumn AllowDBNull { get; }
    
internal DataColumn IsExpression { get; }
    
internal DataColumn IsHidden { get; }
    
internal DataColumn IsLong { get; }
    
internal DataColumn IsReadOnly { get; }
    
internal DataColumn UnsortedIndex { get; }
    
internal DataColumn DataType { get; }
    internal DbSchemaTable(DataTable dataTable, bool returnProviderSpecificTypes);
    private static DbSchemaTable();
    internal DataColumn get_ColumnName();
    internal DataColumn get_Size();
    internal DataColumn get_BaseServerName();
    internal DataColumn get_BaseColumnName();
    internal DataColumn get_BaseTableName();
    internal DataColumn get_BaseCatalogName();
    internal DataColumn get_BaseSchemaName();
    internal DataColumn get_IsAutoIncrement();
    internal DataColumn get_IsUnique();
    internal DataColumn get_IsKey();
    internal DataColumn get_IsRowVersion();
    internal DataColumn get_AllowDBNull();
    internal DataColumn get_IsExpression();
    internal DataColumn get_IsHidden();
    internal DataColumn get_IsLong();
    internal DataColumn get_IsReadOnly();
    internal DataColumn get_UnsortedIndex();
    internal DataColumn get_DataType();
    private DataColumn CachedDataColumn(ColumnEnum column);
    private DataColumn CachedDataColumn(ColumnEnum column, ColumnEnum column2);
}
public abstract class System.Data.Common.DbTransaction : MarshalByRefObject {
    
public DbConnection Connection { get; }
    
private IDbConnection System.Data.IDbTransaction.Connection { get; }
    
protected DbConnection DbConnection { get; }
    
public IsolationLevel IsolationLevel { get; }
    public DbConnection get_Connection();
    private sealed virtual override IDbConnection System.Data.IDbTransaction.get_Connection();
    protected abstract virtual DbConnection get_DbConnection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Rollback();
}
internal class System.Data.Common.DecimalStorage : DataStorage {
    
private static decimal s_defaultValue;
    
private Decimal[] _values;
    internal DecimalStorage(DataColumn column);
    private static DecimalStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DoubleStorage : DataStorage {
    
private static double defaultValue;
    
private Double[] _values;
    internal DoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal static class System.Data.Common.ExternDll : object {
    
public static string Odbc32;
}
public enum System.Data.Common.GroupByBehavior : Enum {
    
public int value__;
    
public static GroupByBehavior Unknown;
    
public static GroupByBehavior NotSupported;
    
public static GroupByBehavior Unrelated;
    
public static GroupByBehavior MustContainAll;
    
public static GroupByBehavior ExactMatch;
}
internal static class System.Data.Common.HandlerBase : object {
    internal static void CheckForChildNodes(XmlNode node);
    private static void CheckForNonElement(XmlNode node);
    internal static void CheckForUnrecognizedAttributes(XmlNode node);
    internal static bool IsIgnorableAlsoCheckForNonElement(XmlNode node);
    internal static string RemoveAttribute(XmlNode node, string name, bool required, bool allowEmpty);
    internal static DataSet CloneParent(DataSet parentConfig, bool insenstive);
}
public interface System.Data.Common.IDbColumnSchemaGenerator {
    public abstract virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
public enum System.Data.Common.IdentifierCase : Enum {
    
public int value__;
    
public static IdentifierCase Unknown;
    
public static IdentifierCase Insensitive;
    
public static IdentifierCase Sensitive;
}
internal class System.Data.Common.Int16Storage : DataStorage {
    
private static short defaultValue;
    
private Int16[] _values;
    internal Int16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int32Storage : DataStorage {
    
private static int defaultValue;
    
private Int32[] _values;
    internal Int32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int64Storage : DataStorage {
    
private static long defaultValue;
    
private Int64[] _values;
    internal Int64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.LoadAdapter : DataAdapter {
    internal int FillFromReader(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
}
internal class System.Data.Common.MultipartIdentifier : object {
    
private static int MaxParts;
    
internal static int ServerIndex;
    
internal static int CatalogIndex;
    
internal static int SchemaIndex;
    
internal static int TableIndex;
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName);
    private static void IncrementStringCount(string name, String[] ary, Int32& position, string property);
    private static bool IsWhitespace(char ch);
    internal static String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName);
}
internal class System.Data.Common.NameValuePair : object {
    
private string _name;
    
private string _value;
    
private int _length;
    
private NameValuePair _next;
    
internal int Length { get; }
    
internal string Name { get; }
    
internal string Value { get; }
    
internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal int get_Length();
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal class System.Data.Common.NameValuePermission : object {
    
private string _value;
    
private DBConnectionString _entry;
    
private NameValuePermission[] _tree;
    
internal static NameValuePermission Default;
    private NameValuePermission(string keyword);
    private NameValuePermission(string value, DBConnectionString entry);
    private NameValuePermission(NameValuePermission permit);
    private static NameValuePermission();
    private sealed virtual override int System.IComparable.CompareTo(object a);
    internal static void AddEntry(NameValuePermission kvtree, ArrayList entries, DBConnectionString entry);
    internal void Intersect(ArrayList entries, NameValuePermission target);
    private void Add(NameValuePermission permit);
    internal bool CheckValueForKeyPermit(DBConnectionString parsetable);
    private NameValuePermission CheckKeyForValue(string keyInQuestion);
    internal NameValuePermission CopyNameValue();
}
internal class System.Data.Common.ObjectStorage : DataStorage {
    
private static object s_defaultValue;
    
private Object[] _values;
    
private bool _implementsIXmlSerializable;
    
private static object s_tempAssemblyCacheLock;
    
private static Dictionary`2<KeyValuePair`2<Type, XmlRootAttribute>, XmlSerializer> s_tempAssemblyCache;
    
private static XmlSerializerFactory s_serializerFactory;
    internal ObjectStorage(DataColumn column, Type type);
    private static ObjectStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    private int CompareTo(object valueNo1, object valueNo2);
    private int CompareWithFamilies(object valueNo1, object valueNo2);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    private Families GetFamily(Type dataType);
    public virtual bool IsNull(int record);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
    internal static void VerifyIDynamicMetaObjectProvider(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type, XmlRootAttribute attribute);
}
public class System.Data.Common.RowUpdatedEventArgs : EventArgs {
    
private IDbCommand _command;
    
private StatementType _statementType;
    
private DataTableMapping _tableMapping;
    
private Exception _errors;
    
private DataRow _dataRow;
    
private DataRow[] _dataRows;
    
private UpdateStatus _status;
    
private int _recordsAffected;
    
public IDbCommand Command { get; }
    
public Exception Errors { get; public set; }
    
public int RecordsAffected { get; }
    
public DataRow Row { get; }
    
internal DataRow[] Rows { get; }
    
public int RowCount { get; }
    
public StatementType StatementType { get; }
    
public UpdateStatus Status { get; public set; }
    
public DataTableMapping TableMapping { get; }
    public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public IDbCommand get_Command();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public int get_RecordsAffected();
    public DataRow get_Row();
    internal DataRow[] get_Rows();
    public int get_RowCount();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
    internal void AdapterInit(DataRow[] dataRows);
    internal void AdapterInit(int recordsAffected);
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public class System.Data.Common.RowUpdatingEventArgs : EventArgs {
    
private IDbCommand _command;
    
private StatementType _statementType;
    
private DataTableMapping _tableMapping;
    
private Exception _errors;
    
private DataRow _dataRow;
    
private UpdateStatus _status;
    
protected IDbCommand BaseCommand { get; protected set; }
    
public IDbCommand Command { get; public set; }
    
public Exception Errors { get; public set; }
    
public DataRow Row { get; }
    
public StatementType StatementType { get; }
    
public UpdateStatus Status { get; public set; }
    
public DataTableMapping TableMapping { get; }
    public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public IDbCommand get_Command();
    public void set_Command(IDbCommand value);
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public DataRow get_Row();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
}
internal class System.Data.Common.SByteStorage : DataStorage {
    
private static sbyte defaultValue;
    
private SByte[] _values;
    public SByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SchemaInfo : ValueType {
    
public string name;
    
public string typeName;
    
public Type type;
}
public static class System.Data.Common.SchemaTableColumn : object {
    
public static string ColumnName;
    
public static string ColumnOrdinal;
    
public static string ColumnSize;
    
public static string NumericPrecision;
    
public static string NumericScale;
    
public static string DataType;
    
public static string ProviderType;
    
public static string NonVersionedProviderType;
    
public static string IsLong;
    
public static string AllowDBNull;
    
public static string IsAliased;
    
public static string IsExpression;
    
public static string IsKey;
    
public static string IsUnique;
    
public static string BaseSchemaName;
    
public static string BaseTableName;
    
public static string BaseColumnName;
    private static SchemaTableColumn();
}
public static class System.Data.Common.SchemaTableOptionalColumn : object {
    
public static string ProviderSpecificDataType;
    
public static string IsAutoIncrement;
    
public static string IsHidden;
    
public static string IsReadOnly;
    
public static string IsRowVersion;
    
public static string BaseServerName;
    
public static string BaseCatalogName;
    
public static string AutoIncrementSeed;
    
public static string AutoIncrementStep;
    
public static string DefaultValue;
    
public static string Expression;
    
public static string BaseTableNamespace;
    
public static string BaseColumnNamespace;
    
public static string ColumnMapping;
    private static SchemaTableOptionalColumn();
}
internal class System.Data.Common.SingleStorage : DataStorage {
    
private static float defaultValue;
    
private Single[] _values;
    public SingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBinaryStorage : DataStorage {
    
private SqlBinary[] _values;
    public SqlBinaryStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBooleanStorage : DataStorage {
    
private SqlBoolean[] _values;
    public SqlBooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBytesStorage : DataStorage {
    
private SqlBytes[] _values;
    public SqlBytesStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlByteStorage : DataStorage {
    
private SqlByte[] _values;
    public SqlByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlCharsStorage : DataStorage {
    
private SqlChars[] _values;
    public SqlCharsStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal static class System.Data.Common.SqlConvert : object {
    public static SqlByte ConvertToSqlByte(object value);
    public static SqlInt16 ConvertToSqlInt16(object value);
    public static SqlInt32 ConvertToSqlInt32(object value);
    public static SqlInt64 ConvertToSqlInt64(object value);
    public static SqlDouble ConvertToSqlDouble(object value);
    public static SqlDecimal ConvertToSqlDecimal(object value);
    public static SqlSingle ConvertToSqlSingle(object value);
    public static SqlMoney ConvertToSqlMoney(object value);
    public static SqlDateTime ConvertToSqlDateTime(object value);
    public static SqlBoolean ConvertToSqlBoolean(object value);
    public static SqlGuid ConvertToSqlGuid(object value);
    public static SqlBinary ConvertToSqlBinary(object value);
    public static SqlString ConvertToSqlString(object value);
    public static SqlChars ConvertToSqlChars(object value);
    public static SqlBytes ConvertToSqlBytes(object value);
    public static DateTimeOffset ConvertStringToDateTimeOffset(string value, IFormatProvider formatProvider);
    public static object ChangeTypeForDefaultValue(object value, Type type, IFormatProvider formatProvider);
    public static object ChangeType2(object value, StorageType stype, Type type, IFormatProvider formatProvider);
    public static object ChangeTypeForXML(object value, Type type);
}
internal class System.Data.Common.SqlDateTimeStorage : DataStorage {
    
private SqlDateTime[] _values;
    public SqlDateTimeStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDecimalStorage : DataStorage {
    
private SqlDecimal[] _values;
    public SqlDecimalStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDoubleStorage : DataStorage {
    
private SqlDouble[] _values;
    public SqlDoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlGuidStorage : DataStorage {
    
private SqlGuid[] _values;
    public SqlGuidStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt16Storage : DataStorage {
    
private SqlInt16[] _values;
    public SqlInt16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt32Storage : DataStorage {
    
private SqlInt32[] _values;
    public SqlInt32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt64Storage : DataStorage {
    
private SqlInt64[] _values;
    public SqlInt64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlMoneyStorage : DataStorage {
    
private SqlMoney[] _values;
    public SqlMoneyStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlSingleStorage : DataStorage {
    
private SqlSingle[] _values;
    public SqlSingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlStringStorage : DataStorage {
    
private SqlString[] _values;
    public SqlStringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public int Compare(SqlString valueNo1, SqlString valueNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlUdtStorage : DataStorage {
    
private Object[] _values;
    
private bool _implementsIXmlSerializable;
    
private bool _implementsIComparable;
    
private static Dictionary`2<Type, object> s_typeToNull;
    public SqlUdtStorage(DataColumn column, Type type);
    private SqlUdtStorage(DataColumn column, Type type, object nullValue);
    private static SqlUdtStorage();
    internal static object GetStaticNullForUdtType(Type type);
    public virtual bool IsNull(int record);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal enum System.Data.Common.StorageType : Enum {
    
public int value__;
    
public static StorageType Empty;
    
public static StorageType Object;
    
public static StorageType DBNull;
    
public static StorageType Boolean;
    
public static StorageType Char;
    
public static StorageType SByte;
    
public static StorageType Byte;
    
public static StorageType Int16;
    
public static StorageType UInt16;
    
public static StorageType Int32;
    
public static StorageType UInt32;
    
public static StorageType Int64;
    
public static StorageType UInt64;
    
public static StorageType Single;
    
public static StorageType Double;
    
public static StorageType Decimal;
    
public static StorageType DateTime;
    
public static StorageType TimeSpan;
    
public static StorageType String;
    
public static StorageType Guid;
    
public static StorageType ByteArray;
    
public static StorageType CharArray;
    
public static StorageType Type;
    
public static StorageType DateTimeOffset;
    
public static StorageType BigInteger;
    
public static StorageType Uri;
    
public static StorageType SqlBinary;
    
public static StorageType SqlBoolean;
    
public static StorageType SqlByte;
    
public static StorageType SqlBytes;
    
public static StorageType SqlChars;
    
public static StorageType SqlDateTime;
    
public static StorageType SqlDecimal;
    
public static StorageType SqlDouble;
    
public static StorageType SqlGuid;
    
public static StorageType SqlInt16;
    
public static StorageType SqlInt32;
    
public static StorageType SqlInt64;
    
public static StorageType SqlMoney;
    
public static StorageType SqlSingle;
    
public static StorageType SqlString;
}
internal class System.Data.Common.StringStorage : DataStorage {
    
private String[] _values;
    public StringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[FlagsAttribute]
public enum System.Data.Common.SupportedJoinOperators : Enum {
    
public int value__;
    
public static SupportedJoinOperators None;
    
public static SupportedJoinOperators Inner;
    
public static SupportedJoinOperators LeftOuter;
    
public static SupportedJoinOperators RightOuter;
    
public static SupportedJoinOperators FullOuter;
}
internal class System.Data.Common.TimeSpanStorage : DataStorage {
    
private static TimeSpan s_defaultValue;
    
private TimeSpan[] _values;
    public TimeSpanStorage(DataColumn column);
    private static TimeSpanStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    private static TimeSpan ConvertToTimeSpan(object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt16Storage : DataStorage {
    
private static ushort s_defaultValue;
    
private UInt16[] _values;
    public UInt16Storage(DataColumn column);
    private static UInt16Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt32Storage : DataStorage {
    
private static UInt32 s_defaultValue;
    
private UInt32[] _values;
    public UInt32Storage(DataColumn column);
    private static UInt32Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt64Storage : DataStorage {
    
private static ulong s_defaultValue;
    
private UInt64[] _values;
    public UInt64Storage(DataColumn column);
    private static UInt64Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class System.Data.Common.UnsafeNativeMethods : object {
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLAllocHandle(SQL_HANDLE HandleType, IntPtr InputHandle, IntPtr& OutputHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLAllocHandle(SQL_HANDLE HandleType, OdbcHandle InputHandle, IntPtr& OutputHandle);
    internal static RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, HandleRef TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind);
    internal static RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, IntPtr TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind);
    internal static RetCode SQLBindParameter(OdbcStatementHandle StatementHandle, ushort ParameterNumber, short ParamDirection, SQL_C SQLCType, short SQLType, IntPtr cbColDef, IntPtr ibScale, HandleRef rgbValue, IntPtr BufferLength, HandleRef StrLen_or_Ind);
    internal static RetCode SQLCancel(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLCloseCursor(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLColAttributeW(OdbcStatementHandle StatementHandle, short ColumnNumber, short FieldIdentifier, CNativeBuffer CharacterAttribute, short BufferLength, Int16& StringLength, IntPtr& NumericAttribute);
    internal static RetCode SQLColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string ColumnName, short NameLen4);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLDisconnect(IntPtr ConnectionHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLDriverConnectW(OdbcConnectionHandle hdbc, IntPtr hwnd, string connectionstring, short cbConnectionstring, IntPtr connectionstringout, short cbConnectionstringoutMax, Int16& cbConnectionstringout, short fDriverCompletion);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLEndTran(SQL_HANDLE HandleType, IntPtr Handle, short CompletionType);
    internal static RetCode SQLExecDirectW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength);
    internal static RetCode SQLExecute(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLFetch(OdbcStatementHandle StatementHandle);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLFreeHandle(SQL_HANDLE HandleType, IntPtr StatementHandle);
    internal static RetCode SQLFreeStmt(OdbcStatementHandle StatementHandle, STMT Option);
    internal static RetCode SQLGetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, Byte[] Value, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetData(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, CNativeBuffer TargetValue, IntPtr BufferLength, IntPtr& StrLen_or_Ind);
    internal static RetCode SQLGetDescFieldW(OdbcDescriptorHandle StatementHandle, short RecNumber, SQL_DESC FieldIdentifier, CNativeBuffer ValuePointer, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetDiagRecW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, StringBuilder rchState, Int32& NativeError, StringBuilder MessageText, short BufferLength, Int16& TextLength);
    internal static RetCode SQLGetDiagFieldW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, short DiagIdentifier, StringBuilder rchState, short BufferLength, Int16& StringLength);
    internal static RetCode SQLGetFunctions(OdbcConnectionHandle hdbc, SQL_API fFunction, Int16& pfExists);
    internal static RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, Int16& pcbInfoValue);
    internal static RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, IntPtr pcbInfoValue);
    internal static RetCode SQLGetStmtAttrW(OdbcStatementHandle StatementHandle, SQL_ATTR Attribute, IntPtr& Value, int BufferLength, Int32& StringLength);
    internal static RetCode SQLGetTypeInfo(OdbcStatementHandle StatementHandle, short fSqlType);
    internal static RetCode SQLMoreResults(OdbcStatementHandle StatementHandle);
    internal static RetCode SQLNumResultCols(OdbcStatementHandle StatementHandle, Int16& ColumnCount);
    internal static RetCode SQLPrepareW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength);
    internal static RetCode SQLPrimaryKeysW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3);
    internal static RetCode SQLProcedureColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3, string ColumnName, short NameLen4);
    internal static RetCode SQLProceduresW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3);
    internal static RetCode SQLRowCount(OdbcStatementHandle StatementHandle, IntPtr& RowCount);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IDtcTransaction Value, int StringLength);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, string Value, int StringLength);
    internal static RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength);
    [ReliabilityContractAttribute("3", "1")]
internal static RetCode SQLSetConnectAttrW(IntPtr ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength);
    internal static RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, HandleRef CharacterAttribute, int BufferLength);
    internal static RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, IntPtr CharacterAttribute, int BufferLength);
    internal static RetCode SQLSetEnvAttr(OdbcEnvironmentHandle EnvironmentHandle, SQL_ATTR Attribute, IntPtr Value, SQL_IS StringLength);
    internal static RetCode SQLSetStmtAttrW(OdbcStatementHandle StatementHandle, int Attribute, IntPtr Value, int StringLength);
    internal static RetCode SQLSpecialColumnsW(OdbcStatementHandle StatementHandle, SQL_SPECIALCOLS IdentifierType, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, SQL_SCOPE Scope, SQL_NULLABILITY Nullable);
    internal static RetCode SQLStatisticsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, short Unique, short Reserved);
    internal static RetCode SQLTablesW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string TableType, short NameLen4);
}
public enum System.Data.ConflictOption : Enum {
    
public int value__;
    
public static ConflictOption CompareAllSearchableValues;
    
public static ConflictOption CompareRowVersion;
    
public static ConflictOption OverwriteChanges;
}
[FlagsAttribute]
public enum System.Data.ConnectionState : Enum {
    
public int value__;
    
public static ConnectionState Closed;
    
public static ConnectionState Open;
    
public static ConnectionState Connecting;
    
public static ConnectionState Executing;
    
public static ConnectionState Fetching;
    
public static ConnectionState Broken;
}
internal class System.Data.ConstNode : ExpressionNode {
    
internal object _val;
    internal ConstNode(DataTable table, ValueType type, object constant);
    internal ConstNode(DataTable table, ValueType type, object constant, bool fParseQuotes);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
    private object SmallestDecimal(object constant);
    private object SmallestNumeric(object constant);
}
[TypeConverterAttribute("System.Data.ConstraintConverter")]
[DefaultPropertyAttribute("ConstraintName")]
public abstract class System.Data.Constraint : object {
    
private string _schemaName;
    
private bool _inCollection;
    
private DataSet _dataSet;
    
internal string _name;
    
internal PropertyCollection _extendedProperties;
    [DefaultValueAttribute("")]

public string ConstraintName { get; public set; }
    
internal string SchemaName { get; internal set; }
    
internal bool InCollection { get; internal set; }
    
public DataTable Table { get; }
    [BrowsableAttribute("False")]

public PropertyCollection ExtendedProperties { get; }
    [CLSCompliantAttribute("False")]

protected DataSet _DataSet { get; }
    public virtual string get_ConstraintName();
    public virtual void set_ConstraintName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal virtual bool get_InCollection();
    internal virtual void set_InCollection(bool value);
    public abstract virtual DataTable get_Table();
    public PropertyCollection get_ExtendedProperties();
    internal abstract virtual bool ContainsColumn(DataColumn column);
    internal abstract virtual bool CanEnableConstraint();
    internal abstract virtual Constraint Clone(DataSet destination);
    internal abstract virtual Constraint Clone(DataSet destination, bool ignoreNSforTableLookup);
    internal void CheckConstraint();
    internal abstract virtual void CheckCanAddToCollection(ConstraintCollection constraint);
    internal abstract virtual bool CanBeRemovedFromCollection(ConstraintCollection constraint, bool fThrowException);
    internal abstract virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal abstract virtual void CheckState();
    protected void CheckStateForProperty();
    protected virtual DataSet get__DataSet();
    protected internal void SetDataSet(DataSet dataSet);
    internal abstract virtual bool IsConstraintViolated();
    public virtual string ToString();
}
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public class System.Data.ConstraintCollection : InternalDataCollectionBase {
    
private DataTable _table;
    
private ArrayList _list;
    
private int _defaultNameIndex;
    
private CollectionChangeEventHandler _onCollectionChanged;
    
private Constraint[] _delayLoadingConstraints;
    
private bool _fLoadForeignKeyConstraintsOnly;
    
protected ArrayList List { get; }
    
public Constraint Item { get; }
    
internal DataTable Table { get; }
    
public Constraint Item { get; }
    internal ConstraintCollection(DataTable table);
    protected virtual ArrayList get_List();
    public Constraint get_Item(int index);
    internal DataTable get_Table();
    public Constraint get_Item(string name);
    public void Add(Constraint constraint);
    internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign);
    public Constraint Add(string name, DataColumn[] columns, bool primaryKey);
    public Constraint Add(string name, DataColumn column, bool primaryKey);
    public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn);
    public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns);
    public void AddRange(Constraint[] constraints);
    private void AddUniqueConstraint(UniqueConstraint constraint);
    private void AddForeignKeyConstraint(ForeignKeyConstraint constraint);
    private bool AutoGenerated(Constraint constraint);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    private void ArrayAdd(Constraint constraint);
    private void ArrayRemove(Constraint constraint);
    internal string AssignName();
    private void BaseAdd(Constraint constraint);
    private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength);
    private void BaseRemove(Constraint constraint);
    public bool CanRemove(Constraint constraint);
    internal bool CanRemove(Constraint constraint, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(Constraint[] array, int index);
    internal Constraint FindConstraint(Constraint constraint);
    internal UniqueConstraint FindKeyConstraint(DataColumn[] columns);
    internal UniqueConstraint FindKeyConstraint(DataColumn column);
    internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2);
    public int IndexOf(Constraint constraint);
    public int IndexOf(string constraintName);
    internal int InternalIndexOf(string constraintName);
    private string MakeName(int index);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name);
    public void Remove(Constraint constraint);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
    internal void FinishInitConstraints();
}
internal class System.Data.ConstraintConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Data.ConstraintEnumerator : object {
    
private IEnumerator _tables;
    
private IEnumerator _constraints;
    
private Constraint _currentObject;
    
protected Constraint CurrentObject { get; }
    public ConstraintEnumerator(DataSet dataSet);
    public bool GetNext();
    public Constraint GetConstraint();
    protected virtual bool IsValidCandidate(Constraint constraint);
    protected Constraint get_CurrentObject();
}
public class System.Data.ConstraintException : DataException {
    protected ConstraintException(SerializationInfo info, StreamingContext context);
    public ConstraintException(string s);
    public ConstraintException(string message, Exception innerException);
}
internal class System.Data.ConstraintTable : object {
    
public DataTable table;
    
public XmlSchemaIdentityConstraint constraint;
    public ConstraintTable(DataTable t, XmlSchemaIdentityConstraint c);
}
[ToolboxItemAttribute("False")]
[DefaultPropertyAttribute("ColumnName")]
[DesignTimeVisibleAttribute("False")]
[DefaultMemberAttribute("Item")]
public class System.Data.DataColumn : MarshalByValueComponent {
    
private bool _allowNull;
    
private string _caption;
    
private string _columnName;
    
private Type _dataType;
    
private StorageType _storageType;
    
internal object _defaultValue;
    
private DataSetDateTime _dateTimeMode;
    
private DataExpression _expression;
    
private int _maxLength;
    
private int _ordinal;
    
private bool _readOnly;
    
internal Index _sortIndex;
    
internal DataTable _table;
    
private bool _unique;
    
internal MappingType _columnMapping;
    
internal int _hashCode;
    
internal int _errors;
    
private bool _isSqlType;
    
private bool _implementsINullable;
    
private bool _implementsIChangeTracking;
    
private bool _implementsIRevertibleChangeTracking;
    
private bool _implementsIXMLSerializable;
    
private bool _defaultValueIsNull;
    
internal List`1<DataColumn> _dependentColumns;
    
internal PropertyCollection _extendedProperties;
    
private DataStorage _storage;
    
private AutoIncrementValue _autoInc;
    
internal string _columnUri;
    
private string _columnPrefix;
    
internal string _encodedColumnName;
    
internal SimpleType _simpleType;
    
private static int s_objectTypeCount;
    
private int _objectID;
    [CompilerGeneratedAttribute]

private string <XmlDataType>k__BackingField;
    [CompilerGeneratedAttribute]

private PropertyChangedEventHandler PropertyChanging;
    [DefaultValueAttribute("True")]

public bool AllowDBNull { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]

public bool AutoIncrement { get; public set; }
    
internal object AutoIncrementCurrent { get; internal set; }
    
internal AutoIncrementValue AutoInc { get; }
    [DefaultValueAttribute("0")]

public long AutoIncrementSeed { get; public set; }
    [DefaultValueAttribute("1")]

public long AutoIncrementStep { get; public set; }
    
public string Caption { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]

public string ColumnName { get; public set; }
    
internal string EncodedColumnName { get; }
    
internal IFormatProvider FormatProvider { get; }
    
internal CultureInfo Locale { get; }
    
internal int ObjectID { get; }
    [DefaultValueAttribute("")]

public string Prefix { get; public set; }
    
internal bool Computed { get; }
    
internal DataExpression DataExpression { get; }
    [RefreshPropertiesAttribute("1")]
[TypeConverterAttribute("System.Data.ColumnTypeConverter")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public Type DataType { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public DataSetDateTime DateTimeMode { get; public set; }
    [TypeConverterAttribute("System.Data.DefaultValueTypeConverter")]

public object DefaultValue { get; public set; }
    
internal bool DefaultValueIsNull { get; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]

public string Expression { get; public set; }
    [BrowsableAttribute("False")]

public PropertyCollection ExtendedProperties { get; }
    
internal bool HasData { get; }
    
internal bool ImplementsINullable { get; }
    
internal bool ImplementsIChangeTracking { get; }
    
internal bool ImplementsIRevertibleChangeTracking { get; }
    
internal bool IsCloneable { get; }
    
internal bool IsStringType { get; }
    
internal bool IsValueType { get; }
    
internal bool IsSqlType { get; }
    [DefaultValueAttribute("-1")]

public int MaxLength { get; public set; }
    
public string Namespace { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public int Ordinal { get; }
    [DefaultValueAttribute("False")]

public bool ReadOnly { get; public set; }
    [DebuggerBrowsableAttribute("0")]

private Index SortIndex { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DataTable Table { get; }
    
internal object Item { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("False")]

public bool Unique { get; public set; }
    
internal string XmlDataType { get; internal set; }
    
internal SimpleType SimpleType { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public MappingType ColumnMapping { get; public set; }
    
internal bool IsCustomType { get; }
    
internal bool ImplementsIXMLSerializable { get; }
    public DataColumn(string columnName);
    public DataColumn(string columnName, Type dataType);
    public DataColumn(string columnName, Type dataType, string expr);
    public DataColumn(string columnName, Type dataType, string expr, MappingType type);
    private void UpdateColumnType(Type type, StorageType typeCode);
    public bool get_AllowDBNull();
    public void set_AllowDBNull(bool value);
    public bool get_AutoIncrement();
    public void set_AutoIncrement(bool value);
    internal object get_AutoIncrementCurrent();
    internal void set_AutoIncrementCurrent(object value);
    internal AutoIncrementValue get_AutoInc();
    public long get_AutoIncrementSeed();
    public void set_AutoIncrementSeed(long value);
    public long get_AutoIncrementStep();
    public void set_AutoIncrementStep(long value);
    public string get_Caption();
    public void set_Caption(string value);
    private void ResetCaption();
    private bool ShouldSerializeCaption();
    public string get_ColumnName();
    public void set_ColumnName(string value);
    internal string get_EncodedColumnName();
    internal IFormatProvider get_FormatProvider();
    internal CultureInfo get_Locale();
    internal int get_ObjectID();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal string GetColumnValueAsString(DataRow row, DataRowVersion version);
    internal bool get_Computed();
    internal DataExpression get_DataExpression();
    public Type get_DataType();
    public void set_DataType(Type value);
    public DataSetDateTime get_DateTimeMode();
    public void set_DateTimeMode(DataSetDateTime value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal bool get_DefaultValueIsNull();
    internal void BindExpression();
    public string get_Expression();
    public void set_Expression(string value);
    public PropertyCollection get_ExtendedProperties();
    internal bool get_HasData();
    internal bool get_ImplementsINullable();
    internal bool get_ImplementsIChangeTracking();
    internal bool get_ImplementsIRevertibleChangeTracking();
    internal bool get_IsCloneable();
    internal bool get_IsStringType();
    internal bool get_IsValueType();
    internal bool get_IsSqlType();
    private void SetMaxLengthSimpleType();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Namespace();
    public void set_Namespace(string value);
    private bool ShouldSerializeNamespace();
    private void ResetNamespace();
    public int get_Ordinal();
    public void SetOrdinal(int ordinal);
    internal void SetOrdinalInternal(int ordinal);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    private Index get_SortIndex();
    public DataTable get_Table();
    internal void SetTable(DataTable table);
    private DataRow GetDataRow(int index);
    internal object get_Item(int record);
    internal void set_Item(int record, object value);
    internal void InitializeRecord(int record);
    internal void SetValue(int record, object value);
    internal void FreeRecord(int record);
    public bool get_Unique();
    public void set_Unique(bool value);
    internal void InternalUnique(bool value);
    [CompilerGeneratedAttribute]
internal string get_XmlDataType();
    [CompilerGeneratedAttribute]
internal void set_XmlDataType(string value);
    internal SimpleType get_SimpleType();
    internal void set_SimpleType(SimpleType value);
    public virtual MappingType get_ColumnMapping();
    public virtual void set_ColumnMapping(MappingType value);
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckColumnConstraint(DataRow row, DataRowAction action);
    internal bool CheckMaxLength();
    internal void CheckMaxLength(DataRow dr);
    protected internal void CheckNotAllowNull();
    internal void CheckNullable(DataRow row);
    protected void CheckUnique();
    internal int Compare(int record1, int record2);
    internal bool CompareValueTo(int record1, object value, bool checkType);
    internal int CompareValueTo(int record1, object value);
    internal object ConvertValue(object value);
    internal void Copy(int srcRecordNo, int dstRecordNo);
    internal DataColumn Clone();
    internal DataRelation FindParentRelation();
    internal object GetAggregateValue(Int32[] records, AggregateType kind);
    private int GetStringLength(int record);
    internal void Init(int record);
    internal static bool IsAutoIncrementType(Type dataType);
    private bool IsColumnMappingValid(StorageType typeCode, MappingType mapping);
    internal bool get_IsCustomType();
    internal bool IsValueCustomTypeInstance(object value);
    internal bool get_ImplementsIXMLSerializable();
    internal bool IsNull(int record);
    internal bool IsInRelation();
    internal bool IsMaxLengthViolated();
    internal bool IsNotAllowDBNullViolated();
    internal void FinishInitInProgress();
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    private void InsureStorage();
    internal void SetCapacity(int capacity);
    private bool ShouldSerializeDefaultValue();
    internal void OnSetDataSet();
    public virtual string ToString();
    internal object ConvertXmlToObject(string s);
    internal object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    internal string ConvertObjectToXml(object value);
    internal void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    internal object GetEmptyColumnStore(int recordCount);
    internal void CopyValueIntoStore(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorage(object store, BitArray nullbits);
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void HandleDependentColumnList(DataExpression oldExpression, DataExpression newExpression);
}
public class System.Data.DataColumnChangeEventArgs : EventArgs {
    
private DataColumn _column;
    [CompilerGeneratedAttribute]

private DataRow <Row>k__BackingField;
    [CompilerGeneratedAttribute]

private object <ProposedValue>k__BackingField;
    
public DataColumn Column { get; }
    
public DataRow Row { get; }
    
public object ProposedValue { get; public set; }
    internal DataColumnChangeEventArgs(DataRow row);
    public DataColumnChangeEventArgs(DataRow row, DataColumn column, object value);
    public DataColumn get_Column();
    [CompilerGeneratedAttribute]
public DataRow get_Row();
    [CompilerGeneratedAttribute]
public object get_ProposedValue();
    [CompilerGeneratedAttribute]
public void set_ProposedValue(object value);
    internal void InitializeColumnChangeEvent(DataColumn column, object value);
}
public class System.Data.DataColumnChangeEventHandler : MulticastDelegate {
    public DataColumnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataColumnChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Data.DataColumnCollection : InternalDataCollectionBase {
    
private DataTable _table;
    
private ArrayList _list;
    
private int _defaultNameIndex;
    
private DataColumn[] _delayedAddRangeColumns;
    
private Dictionary`2<string, DataColumn> _columnFromName;
    
private bool _fInClear;
    
private DataColumn[] _columnsImplementingIChangeTracking;
    
private int _nColumnsImplementingIChangeTracking;
    
private int _nColumnsImplementingIRevertibleChangeTracking;
    [CompilerGeneratedAttribute]

private CollectionChangeEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]

private CollectionChangeEventHandler CollectionChanging;
    [CompilerGeneratedAttribute]

private CollectionChangeEventHandler ColumnPropertyChanged;
    
protected ArrayList List { get; }
    
internal DataColumn[] ColumnsImplementingIChangeTracking { get; }
    
internal int ColumnsImplementingIChangeTrackingCount { get; }
    
internal int ColumnsImplementingIRevertibleChangeTrackingCount { get; }
    
public DataColumn Item { get; }
    
public DataColumn Item { get; }
    
internal DataColumn Item { get; }
    internal DataColumnCollection(DataTable table);
    protected virtual ArrayList get_List();
    internal DataColumn[] get_ColumnsImplementingIChangeTracking();
    internal int get_ColumnsImplementingIChangeTrackingCount();
    internal int get_ColumnsImplementingIRevertibleChangeTrackingCount();
    public DataColumn get_Item(int index);
    public DataColumn get_Item(string name);
    internal DataColumn get_Item(string name, string ns);
    internal void EnsureAdditionalCapacity(int capacity);
    public void Add(DataColumn column);
    internal void AddAt(int index, DataColumn column);
    public void AddRange(DataColumn[] columns);
    public DataColumn Add(string columnName, Type type, string expression);
    public DataColumn Add(string columnName, Type type);
    public DataColumn Add(string columnName);
    public DataColumn Add();
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CollectionChanging(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ColumnPropertyChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ColumnPropertyChanged(CollectionChangeEventHandler value);
    private void ArrayAdd(DataColumn column);
    private void ArrayAdd(int index, DataColumn column);
    private void ArrayRemove(DataColumn column);
    internal string AssignName();
    private void BaseAdd(DataColumn column);
    private void BaseGroupSwitch(DataColumn[] oldArray, int oldLength, DataColumn[] newArray, int newLength);
    private void BaseRemove(DataColumn column);
    public bool CanRemove(DataColumn column);
    internal bool CanRemove(DataColumn column, bool fThrowException);
    private void CheckIChangeTracking(DataColumn column);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataColumn[] array, int index);
    public int IndexOf(DataColumn column);
    public int IndexOf(string columnName);
    internal int IndexOfCaseInsensitive(string name);
    internal void FinishInitCollection();
    private string MakeName(int index);
    internal void MoveTo(DataColumn column, int newPosition);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    private void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void OnColumnPropertyChanged(CollectionChangeEventArgs ccevent);
    internal void RegisterColumnName(string name, DataColumn column);
    internal bool CanRegisterName(string name);
    public void Remove(DataColumn column);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
    private void AddColumnsImplementingIChangeTrackingList(DataColumn dataColumn);
    private void RemoveColumnsImplementingIChangeTrackingList(DataColumn dataColumn);
}
internal class System.Data.DataColumnPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]

private DataColumn <Column>k__BackingField;
    
public AttributeCollection Attributes { get; }
    
internal DataColumn Column { get; }
    
public Type ComponentType { get; }
    
public bool IsReadOnly { get; }
    
public Type PropertyType { get; }
    
public bool IsBrowsable { get; }
    internal DataColumnPropertyDescriptor(DataColumn dataColumn);
    public virtual AttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
internal DataColumn get_Column();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_IsBrowsable();
}
[EventSourceAttribute]
internal class System.Data.DataCommonEventSource : EventSource {
    
internal static DataCommonEventSource Log;
    
private static long s_nextScopeId;
    
private static int TraceEventId;
    
private static int EnterScopeId;
    
private static int ExitScopeId;
    private static DataCommonEventSource();
    [EventAttribute("1")]
internal void Trace(string message);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    [EventAttribute("2")]
internal long EnterScope(string message);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2, T3 arg3);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [EventAttribute("3")]
internal void ExitScope(long scopeId);
}
internal class System.Data.DataError : object {
    
private string _rowError;
    
private int _count;
    
private ColumnError[] _errorList;
    
internal static int initialCapacity;
    
internal string Text { get; internal set; }
    
internal bool HasErrors { get; }
    internal DataError(string rowError);
    internal string get_Text();
    internal void set_Text(string value);
    internal bool get_HasErrors();
    internal void SetColumnError(DataColumn column, string error);
    internal string GetColumnError(DataColumn column);
    internal void Clear(DataColumn column);
    internal void Clear();
    internal DataColumn[] GetColumnsInError();
    private void SetText(string errorText);
    internal int IndexOf(DataColumn column);
}
public class System.Data.DataException : SystemException {
    protected DataException(SerializationInfo info, StreamingContext context);
    public DataException(string s);
    public DataException(string s, Exception innerException);
}
internal class System.Data.DataExpression : object {
    
internal string _originalExpression;
    
private bool _parsed;
    
private bool _bound;
    
private ExpressionNode _expr;
    
private DataTable _table;
    
private StorageType _storageType;
    
private Type _dataType;
    
private DataColumn[] _dependency;
    
internal string Expression { get; }
    
internal ExpressionNode ExpressionNode { get; }
    
internal bool HasValue { get; }
    internal DataExpression(DataTable table, string expression);
    internal DataExpression(DataTable table, string expression, Type type);
    internal string get_Expression();
    internal ExpressionNode get_ExpressionNode();
    internal bool get_HasValue();
    internal void Bind(DataTable table);
    internal bool DependsOn(DataColumn column);
    internal object Evaluate();
    internal object Evaluate(DataRow row, DataRowVersion version);
    internal object Evaluate(DataRow[] rows);
    internal object Evaluate(DataRow[] rows, DataRowVersion version);
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal DataColumn[] GetDependency();
    internal bool IsTableAggregate();
    internal static bool IsUnknown(object value);
    internal bool HasLocalAggregate();
    internal bool HasRemoteAggregate();
    internal static bool ToBoolean(object value);
}
internal class System.Data.DataKey : ValueType {
    
private static int maxColumns;
    
private DataColumn[] _columns;
    
internal DataColumn[] ColumnsReference { get; }
    
internal bool HasValue { get; }
    
internal DataTable Table { get; }
    internal DataKey(DataColumn[] columns, bool copyColumns);
    internal DataColumn[] get_ColumnsReference();
    internal bool get_HasValue();
    internal DataTable get_Table();
    internal void CheckState();
    internal bool ColumnsEqual(DataKey key);
    internal static bool ColumnsEqual(DataColumn[] column1, DataColumn[] column2);
    internal bool ContainsColumn(DataColumn column);
    public virtual int GetHashCode();
    public virtual bool Equals(object value);
    internal bool Equals(DataKey value);
    internal String[] GetColumnNames();
    internal IndexField[] GetIndexDesc();
    internal Object[] GetKeyValues(int record);
    internal Index GetSortIndex();
    internal Index GetSortIndex(DataViewRowState recordStates);
    internal bool RecordsEqual(int record1, int record2);
    internal DataColumn[] ToArray();
}
[TypeConverterAttribute("System.Data.RelationshipConverter")]
[DefaultPropertyAttribute("RelationName")]
public class System.Data.DataRelation : object {
    
private DataSet _dataSet;
    
internal PropertyCollection _extendedProperties;
    
internal string _relationName;
    
private DataKey _childKey;
    
private DataKey _parentKey;
    
private UniqueConstraint _parentKeyConstraint;
    
private ForeignKeyConstraint _childKeyConstraint;
    
internal String[] _parentColumnNames;
    
internal String[] _childColumnNames;
    
internal string _parentTableName;
    
internal string _childTableName;
    
internal string _parentTableNamespace;
    
internal string _childTableNamespace;
    
internal bool _nested;
    
internal bool _createConstraints;
    
private bool _checkMultipleNested;
    
private static int s_objectTypeCount;
    
private int _objectID;
    [CompilerGeneratedAttribute]

private PropertyChangedEventHandler PropertyChanging;
    
public DataColumn[] ChildColumns { get; }
    
internal DataColumn[] ChildColumnsReference { get; }
    
internal DataKey ChildKey { get; }
    
public DataTable ChildTable { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DataSet DataSet { get; }
    
internal String[] ParentColumnNames { get; }
    
internal String[] ChildColumnNames { get; }
    
public DataColumn[] ParentColumns { get; }
    
internal DataColumn[] ParentColumnsReference { get; }
    
internal DataKey ParentKey { get; }
    
public DataTable ParentTable { get; }
    [DefaultValueAttribute("")]

public string RelationName { get; public set; }
    [DefaultValueAttribute("False")]

public bool Nested { get; public set; }
    
public UniqueConstraint ParentKeyConstraint { get; }
    
public ForeignKeyConstraint ChildKeyConstraint { get; }
    [BrowsableAttribute("False")]

public PropertyCollection ExtendedProperties { get; }
    
internal bool CheckMultipleNested { get; internal set; }
    
internal int ObjectID { get; }
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn);
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, String[] parentColumnNames, String[] childColumnNames, bool nested);
    public virtual DataColumn[] get_ChildColumns();
    internal DataColumn[] get_ChildColumnsReference();
    internal DataKey get_ChildKey();
    public virtual DataTable get_ChildTable();
    public virtual DataSet get_DataSet();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    private static bool IsKeyNull(Object[] values);
    internal static DataRow[] GetChildRows(DataKey parentKey, DataKey childKey, DataRow parentRow, DataRowVersion version);
    internal static DataRow[] GetParentRows(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal static DataRow GetParentRow(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal void SetDataSet(DataSet dataSet);
    internal void SetParentRowRecords(DataRow childRow, DataRow parentRow);
    public virtual DataColumn[] get_ParentColumns();
    internal DataColumn[] get_ParentColumnsReference();
    internal DataKey get_ParentKey();
    public virtual DataTable get_ParentTable();
    public virtual string get_RelationName();
    public virtual void set_RelationName(string value);
    internal void CheckNamespaceValidityForNestedRelations(string ns);
    internal void CheckNestedRelations();
    public virtual bool get_Nested();
    public virtual void set_Nested(bool value);
    public virtual UniqueConstraint get_ParentKeyConstraint();
    internal void SetParentKeyConstraint(UniqueConstraint value);
    public virtual ForeignKeyConstraint get_ChildKeyConstraint();
    public PropertyCollection get_ExtendedProperties();
    internal bool get_CheckMultipleNested();
    internal void set_CheckMultipleNested(bool value);
    internal void SetChildKeyConstraint(ForeignKeyConstraint value);
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckState();
    protected void CheckStateForProperty();
    private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    internal DataRelation Clone(DataSet destination);
    protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    public virtual string ToString();
    internal void ValidateMultipleNestedRelations();
    private bool IsAutoGenerated(DataColumn col);
    internal int get_ObjectID();
}
[DefaultPropertyAttribute("Table")]
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public abstract class System.Data.DataRelationCollection : InternalDataCollectionBase {
    
private DataRelation _inTransition;
    
private int _defaultNameIndex;
    
private CollectionChangeEventHandler _onCollectionChangedDelegate;
    
private CollectionChangeEventHandler _onCollectionChangingDelegate;
    
private static int s_objectTypeCount;
    
private int _objectID;
    
internal int ObjectID { get; }
    
public DataRelation Item { get; }
    
public DataRelation Item { get; }
    internal int get_ObjectID();
    public abstract virtual DataRelation get_Item(int index);
    public abstract virtual DataRelation get_Item(string name);
    public void Add(DataRelation relation);
    public virtual void AddRange(DataRelation[] relations);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    public virtual DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public virtual DataRelation Add(DataColumn parentColumn, DataColumn childColumn);
    protected virtual void AddCore(DataRelation relation);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal void add_CollectionChanging(CollectionChangeEventHandler value);
    internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    internal string AssignName();
    public virtual void Clear();
    public virtual bool Contains(string name);
    public void CopyTo(DataRelation[] array, int index);
    public virtual int IndexOf(DataRelation relation);
    public virtual int IndexOf(string relationName);
    internal int InternalIndexOf(string name);
    protected abstract virtual DataSet GetDataSet();
    private string MakeName(int index);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name);
    public virtual bool CanRemove(DataRelation relation);
    public void Remove(DataRelation relation);
    public void RemoveAt(int index);
    public void Remove(string name);
    protected virtual void RemoveCore(DataRelation relation);
    internal void UnregisterName(string name);
}
internal class System.Data.DataRelationPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]

private DataRelation <Relation>k__BackingField;
    
internal DataRelation Relation { get; }
    
public Type ComponentType { get; }
    
public bool IsReadOnly { get; }
    
public Type PropertyType { get; }
    internal DataRelationPropertyDescriptor(DataRelation dataRelation);
    [CompilerGeneratedAttribute]
internal DataRelation get_Relation();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRow : object {
    
private DataTable _table;
    
private DataColumnCollection _columns;
    
internal int _oldRecord;
    
internal int _newRecord;
    
internal int _tempRecord;
    
internal long _rowID;
    
internal DataRowAction _action;
    
internal bool _inChangingEvent;
    
internal bool _inDeletingEvent;
    
internal bool _inCascade;
    
private DataColumn _lastChangedColumn;
    
private int _countColumnChange;
    
private DataError _error;
    
private object _element;
    
private int _rbTreeNodeId;
    
private static int s_objectTypeCount;
    
internal int _objectID;
    
internal XmlBoundElement Element { get; internal set; }
    
internal DataColumn LastChangedColumn { get; internal set; }
    
internal bool HasPropertyChanged { get; }
    
internal int RBTreeNodeId { get; internal set; }
    
public string RowError { get; public set; }
    
internal long rowID { get; internal set; }
    
public DataRowState RowState { get; }
    
public DataTable Table { get; }
    
public object Item { get; public set; }
    
public object Item { get; public set; }
    
public object Item { get; public set; }
    
public object Item { get; }
    
public object Item { get; }
    
public object Item { get; }
    
public Object[] ItemArray { get; public set; }
    
public bool HasErrors { get; }
    protected internal DataRow(DataRowBuilder builder);
    internal XmlBoundElement get_Element();
    internal void set_Element(XmlBoundElement value);
    internal DataColumn get_LastChangedColumn();
    internal void set_LastChangedColumn(DataColumn value);
    internal bool get_HasPropertyChanged();
    internal int get_RBTreeNodeId();
    internal void set_RBTreeNodeId(int value);
    public string get_RowError();
    public void set_RowError(string value);
    private void RowErrorChanged();
    internal long get_rowID();
    internal void set_rowID(long value);
    public DataRowState get_RowState();
    public DataTable get_Table();
    public object get_Item(int columnIndex);
    public void set_Item(int columnIndex, object value);
    internal void CheckForLoops(DataRelation rel);
    internal int GetNestedParentCount();
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item(DataColumn column);
    public void set_Item(DataColumn column, object value);
    public object get_Item(int columnIndex, DataRowVersion version);
    public object get_Item(string columnName, DataRowVersion version);
    public object get_Item(DataColumn column, DataRowVersion version);
    public Object[] get_ItemArray();
    public void set_ItemArray(Object[] value);
    public void AcceptChanges();
    [EditorBrowsableAttribute("2")]
public void BeginEdit();
    private bool BeginEditInternal();
    [EditorBrowsableAttribute("2")]
public void CancelEdit();
    private void CheckColumn(DataColumn column);
    internal void CheckInTable();
    public void Delete();
    [EditorBrowsableAttribute("2")]
public void EndEdit();
    public void SetColumnError(int columnIndex, string error);
    public void SetColumnError(string columnName, string error);
    public void SetColumnError(DataColumn column, string error);
    public string GetColumnError(int columnIndex);
    public string GetColumnError(string columnName);
    public string GetColumnError(DataColumn column);
    public void ClearErrors();
    internal void ClearError(DataColumn column);
    public bool get_HasErrors();
    public DataColumn[] GetColumnsInError();
    public DataRow[] GetChildRows(string relationName);
    public DataRow[] GetChildRows(string relationName, DataRowVersion version);
    public DataRow[] GetChildRows(DataRelation relation);
    public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version);
    internal DataColumn GetDataColumn(string columnName);
    public DataRow GetParentRow(string relationName);
    public DataRow GetParentRow(string relationName, DataRowVersion version);
    public DataRow GetParentRow(DataRelation relation);
    public DataRow GetParentRow(DataRelation relation, DataRowVersion version);
    internal DataRow GetNestedParentRow(DataRowVersion version);
    public DataRow[] GetParentRows(string relationName);
    public DataRow[] GetParentRows(string relationName, DataRowVersion version);
    public DataRow[] GetParentRows(DataRelation relation);
    public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version);
    internal Object[] GetColumnValues(DataColumn[] columns);
    internal Object[] GetColumnValues(DataColumn[] columns, DataRowVersion version);
    internal Object[] GetKeyValues(DataKey key);
    internal Object[] GetKeyValues(DataKey key, DataRowVersion version);
    internal int GetCurrentRecordNo();
    internal int GetDefaultRecord();
    internal int GetOriginalRecordNo();
    private int GetProposedRecordNo();
    internal int GetRecordFromVersion(DataRowVersion version);
    internal DataRowVersion GetDefaultRowVersion(DataViewRowState viewState);
    internal DataViewRowState GetRecordState(int record);
    internal bool HasKeyChanged(DataKey key);
    internal bool HasKeyChanged(DataKey key, DataRowVersion version1, DataRowVersion version2);
    public bool HasVersion(DataRowVersion version);
    internal bool HasChanges();
    internal bool HaveValuesChanged(DataColumn[] columns);
    internal bool HaveValuesChanged(DataColumn[] columns, DataRowVersion version1, DataRowVersion version2);
    public bool IsNull(int columnIndex);
    public bool IsNull(string columnName);
    public bool IsNull(DataColumn column);
    public bool IsNull(DataColumn column, DataRowVersion version);
    public void RejectChanges();
    internal void ResetLastChangedColumn();
    internal void SetKeyValues(DataKey key, Object[] keyValues);
    protected void SetNull(DataColumn column);
    internal void SetNestedParentRow(DataRow parentRow, bool setNonNested);
    public void SetParentRow(DataRow parentRow);
    public void SetParentRow(DataRow parentRow, DataRelation relation);
    internal void SetParentRowToDBNull();
    internal void SetParentRowToDBNull(DataRelation relation);
    public void SetAdded();
    public void SetModified();
    internal int CopyValuesIntoStore(ArrayList storeList, ArrayList nullbitList, int storeIndex);
    [ConditionalAttribute("DEBUG")]
private void VerifyValueFromStorage(DataColumn column, DataRowVersion version, object valueFromStorage);
}
[FlagsAttribute]
public enum System.Data.DataRowAction : Enum {
    
public int value__;
    
public static DataRowAction Nothing;
    
public static DataRowAction Delete;
    
public static DataRowAction Change;
    
public static DataRowAction Rollback;
    
public static DataRowAction Commit;
    
public static DataRowAction Add;
    
public static DataRowAction ChangeOriginal;
    
public static DataRowAction ChangeCurrentAndOriginal;
}
public class System.Data.DataRowBuilder : object {
    
internal DataTable _table;
    
internal int _record;
    internal DataRowBuilder(DataTable table, int record);
}
public class System.Data.DataRowChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private DataRow <Row>k__BackingField;
    [CompilerGeneratedAttribute]

private DataRowAction <Action>k__BackingField;
    
public DataRow Row { get; }
    
public DataRowAction Action { get; }
    public DataRowChangeEventArgs(DataRow row, DataRowAction action);
    [CompilerGeneratedAttribute]
public DataRow get_Row();
    [CompilerGeneratedAttribute]
public DataRowAction get_Action();
}
public class System.Data.DataRowChangeEventHandler : MulticastDelegate {
    public DataRowChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRowChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowCollection : InternalDataCollectionBase {
    
private DataTable _table;
    
private DataRowTree _list;
    
internal int _nullInList;
    
public int Count { get; }
    
public DataRow Item { get; }
    internal DataRowCollection(DataTable table);
    public virtual int get_Count();
    public DataRow get_Item(int index);
    public void Add(DataRow row);
    public void InsertAt(DataRow row, int pos);
    internal void DiffInsertAt(DataRow row, int pos);
    public int IndexOf(DataRow row);
    internal DataRow AddWithColumnEvents(Object[] values);
    public DataRow Add(Object[] values);
    internal void ArrayAdd(DataRow row);
    internal void ArrayInsert(DataRow row, int pos);
    internal void ArrayClear();
    internal void ArrayRemove(DataRow row);
    public DataRow Find(object key);
    public DataRow Find(Object[] keys);
    public void Clear();
    public bool Contains(object key);
    public bool Contains(Object[] keys);
    public virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataRow[] array, int index);
    public virtual IEnumerator GetEnumerator();
    public void Remove(DataRow row);
    public void RemoveAt(int index);
}
internal class System.Data.DataRowCreatedEventHandler : MulticastDelegate {
    public DataRowCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRow r);
    public virtual IAsyncResult BeginInvoke(object sender, DataRow r, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[FlagsAttribute]
public enum System.Data.DataRowState : Enum {
    
public int value__;
    
public static DataRowState Detached;
    
public static DataRowState Unchanged;
    
public static DataRowState Added;
    
public static DataRowState Deleted;
    
public static DataRowState Modified;
}
public enum System.Data.DataRowVersion : Enum {
    
public int value__;
    
public static DataRowVersion Original;
    
public static DataRowVersion Current;
    
public static DataRowVersion Proposed;
    
public static DataRowVersion Default;
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowView : object {
    
private DataView _dataView;
    
private DataRow _row;
    
private bool _delayBeginEdit;
    
private static PropertyDescriptorCollection s_zeroPropertyDescriptorCollection;
    [CompilerGeneratedAttribute]

private PropertyChangedEventHandler PropertyChanged;
    
public DataView DataView { get; }
    
internal int ObjectID { get; }
    
public object Item { get; public set; }
    
public object Item { get; public set; }
    
private string System.ComponentModel.IDataErrorInfo.Item { get; }
    
private string System.ComponentModel.IDataErrorInfo.Error { get; }
    
public DataRowVersion RowVersion { get; }
    
private DataRowVersion RowVersionDefault { get; }
    
public DataRow Row { get; }
    
public bool IsNew { get; }
    
public bool IsEdit { get; }
    internal DataRowView(DataView dataView, DataRow row);
    private static DataRowView();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public DataView get_DataView();
    internal int get_ObjectID();
    public object get_Item(int ndx);
    public void set_Item(int ndx, object value);
    public object get_Item(string property);
    public void set_Item(string property, object value);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string colName);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    public DataRowVersion get_RowVersion();
    private DataRowVersion get_RowVersionDefault();
    internal int GetRecord();
    internal bool HasRecord();
    internal object GetColumnValue(DataColumn column);
    internal void SetColumnValue(DataColumn column, object value);
    public DataView CreateChildView(DataRelation relation, bool followParent);
    public DataView CreateChildView(DataRelation relation);
    public DataView CreateChildView(string relationName, bool followParent);
    public DataView CreateChildView(string relationName);
    public DataRow get_Row();
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public sealed virtual void EndEdit();
    public bool get_IsNew();
    public bool get_IsEdit();
    public void Delete();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void RaisePropertyChangedEvent(string propName);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[XmlSchemaProviderAttribute("GetDataSetSchema")]
[DefaultPropertyAttribute("DataSetName")]
[XmlRootAttribute("DataSet")]
public class System.Data.DataSet : MarshalByValueComponent {
    
private static string KEY_XMLSCHEMA;
    
private static string KEY_XMLDIFFGRAM;
    
private DataViewManager _defaultViewManager;
    
private DataTableCollection _tableCollection;
    
private DataRelationCollection _relationCollection;
    
internal PropertyCollection _extendedProperties;
    
private string _dataSetName;
    
private string _datasetPrefix;
    
internal string _namespaceURI;
    
private bool _enforceConstraints;
    
private bool _caseSensitive;
    
private CultureInfo _culture;
    
private bool _cultureUserSet;
    
internal bool _fInReadXml;
    
internal bool _fInLoadDiffgram;
    
internal bool _fTopLevelTable;
    
internal bool _fInitInProgress;
    
internal bool _fEnableCascading;
    
internal bool _fIsSchemaLoading;
    
private bool _fBoundToDocument;
    
internal string _mainTableName;
    
private SerializationFormat _remotingFormat;
    
private object _defaultViewManagerLock;
    
private static int s_objectTypeCount;
    
private int _objectID;
    
private static XmlSchemaComplexType s_schemaTypeForWSDL;
    
internal bool _useDataSetSchemaOnly;
    
internal bool _udtIsWrapped;
    [CompilerGeneratedAttribute]

private PropertyChangedEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]

private MergeFailedEventHandler MergeFailed;
    [CompilerGeneratedAttribute]

private DataRowCreatedEventHandler DataRowCreated;
    [CompilerGeneratedAttribute]

private DataSetClearEventhandler ClearFunctionCalled;
    [CompilerGeneratedAttribute]

private EventHandler Initialized;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public SerializationFormat RemotingFormat { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    [DefaultValueAttribute("False")]

public bool CaseSensitive { get; public set; }
    
private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [BrowsableAttribute("False")]

public DataViewManager DefaultViewManager { get; }
    [DefaultValueAttribute("True")]

public bool EnforceConstraints { get; public set; }
    [DefaultValueAttribute("")]

public string DataSetName { get; public set; }
    [DefaultValueAttribute("")]

public string Namespace { get; public set; }
    [DefaultValueAttribute("")]

public string Prefix { get; public set; }
    [BrowsableAttribute("False")]

public PropertyCollection ExtendedProperties { get; }
    [BrowsableAttribute("False")]

public bool HasErrors { get; }
    [BrowsableAttribute("False")]

public bool IsInitialized { get; }
    
public CultureInfo Locale { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public ISite Site { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataRelationCollection Relations { get; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataTableCollection Tables { get; }
    
internal bool FBoundToDocument { get; internal set; }
    
internal string MainTableName { get; internal set; }
    
internal int ObjectID { get; }
    public DataSet(string dataSetName);
    protected DataSet(SerializationInfo info, StreamingContext context);
    protected DataSet(SerializationInfo info, StreamingContext context, bool ConstructSchema);
    private static DataSet();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public virtual SchemaSerializationMode get_SchemaSerializationMode();
    public virtual void set_SchemaSerializationMode(SchemaSerializationMode value);
    protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader);
    protected void GetSerializationData(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void InitializeDerivedDataSet();
    private void SerializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat);
    internal void DeserializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode);
    private void DeserializeDataSetSchema(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode);
    private void DeserializeDataSetData(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat);
    private void SerializeDataSetProperties(SerializationInfo info, StreamingContext context);
    private void DeserializeDataSetProperties(SerializationInfo info, StreamingContext context);
    private void SerializeRelations(SerializationInfo info, StreamingContext context);
    private void DeserializeRelations(SerializationInfo info, StreamingContext context);
    internal void FailedEnableConstraints();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public DataViewManager get_DefaultViewManager();
    public bool get_EnforceConstraints();
    public void set_EnforceConstraints(bool value);
    internal void RestoreEnforceConstraints(bool value);
    internal void EnableConstraints();
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public PropertyCollection get_ExtendedProperties();
    public bool get_HasErrors();
    public sealed virtual bool get_IsInitialized();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal void SetLocaleValue(CultureInfo value, bool userSet);
    internal bool ShouldSerializeLocale();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public DataRelationCollection get_Relations();
    protected virtual bool ShouldSerializeRelations();
    private void ResetRelations();
    public DataTableCollection get_Tables();
    protected virtual bool ShouldSerializeTables();
    private void ResetTables();
    internal bool get_FBoundToDocument();
    internal void set_FBoundToDocument(bool value);
    public void AcceptChanges();
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MergeFailed(MergeFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MergeFailed(MergeFailedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DataRowCreated(DataRowCreatedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DataRowCreated(DataRowCreatedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ClearFunctionCalled(DataSetClearEventhandler value);
    [CompilerGeneratedAttribute]
internal void remove_ClearFunctionCalled(DataSetClearEventhandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Initialized(EventHandler value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void Clear();
    public virtual DataSet Clone();
    public DataSet Copy();
    internal int EstimatedXmlStringSize();
    public DataSet GetChanges();
    public DataSet GetChanges(DataRowState rowStates);
    private void MarkModifiedRows(TableChanges[] bitMatrix, DataRowState rowStates);
    private void MarkRelatedRowsAsModified(TableChanges[] bitMatrix, DataRow row);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal string GetRemotingDiffGram(DataTable table);
    public string GetXml();
    public string GetXmlSchema();
    internal string GetXmlSchemaForRemoting(DataTable table);
    public bool HasChanges();
    public bool HasChanges(DataRowState rowStates);
    public void InferXmlSchema(XmlReader reader, String[] nsArray);
    public void InferXmlSchema(Stream stream, String[] nsArray);
    public void InferXmlSchema(TextReader reader, String[] nsArray);
    public void InferXmlSchema(string fileName, String[] nsArray);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    internal bool MoveToElement(XmlReader reader, int depth);
    private static void MoveToElement(XmlReader reader);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    internal void ReadXDRSchema(XmlReader reader);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(string fileName, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(Stream stream, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(TextWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(XmlWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    public XmlReadMode ReadXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    internal void InferSchema(XmlDocument xdoc, String[] excludedNamespaces, XmlReadMode mode);
    private bool IsEmpty();
    private void ReadXmlDiffgram(XmlReader reader);
    public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream, XmlReadMode mode);
    public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode);
    public XmlReadMode ReadXml(string fileName, XmlReadMode mode);
    public void WriteXml(Stream stream);
    public void WriteXml(TextWriter writer);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(string fileName);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode);
    internal DataRelationCollection GetParentRelations(DataTable table);
    public void Merge(DataSet dataSet);
    public void Merge(DataSet dataSet, bool preserveChanges);
    public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataRow[] rows);
    public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnMergeFailed(MergeFailedEventArgs mfevent);
    internal void RaiseMergeFailed(DataTable table, string conflict, MissingSchemaAction missingSchemaAction);
    internal void OnDataRowCreated(DataRow row);
    internal void OnClearFunctionCalled(DataTable table);
    private void OnInitialized();
    protected internal virtual void OnRemoveTable(DataTable table);
    internal void OnRemovedTable(DataTable table);
    protected virtual void OnRemoveRelation(DataRelation relation);
    internal void OnRemoveRelationHack(DataRelation relation);
    protected internal void RaisePropertyChanging(string name);
    internal DataTable[] TopLevelTables();
    internal DataTable[] TopLevelTables(bool forSchema);
    public virtual void RejectChanges();
    public virtual void Reset();
    internal bool ValidateCaseConstraint();
    internal bool ValidateLocaleConstraint();
    internal DataTable FindTable(DataTable baseTable, PropertyDescriptor[] props, int propStart);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    protected virtual XmlSchema GetSchemaSerializable();
    public static XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet);
    private static bool PublishLegacyWSDL();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, String[] tables);
    public DataTableReader CreateDataReader();
    public DataTableReader CreateDataReader(DataTable[] dataTables);
    internal string get_MainTableName();
    internal void set_MainTableName(string value);
    internal int get_ObjectID();
}
internal class System.Data.DataSetClearEventhandler : MulticastDelegate {
    public DataSetClearEventhandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTable table);
    public virtual IAsyncResult BeginInvoke(object sender, DataTable table, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.DataSetDateTime : Enum {
    
public int value__;
    
public static DataSetDateTime Local;
    
public static DataSetDateTime Unspecified;
    
public static DataSetDateTime UnspecifiedLocal;
    
public static DataSetDateTime Utc;
}
public class System.Data.DataSetSchemaImporterExtension : SchemaImporterExtension {
    
private Hashtable importedTypes;
    public virtual string ImportSchemaType(string name, string schemaNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    internal XmlSchemaElement FindDataSetElement(XmlSchema schema);
    internal string GenerateTypedDataSet(XmlSchemaElement element, XmlSchemas schemas, CodeNamespace codeNamespace, StringCollection references, CodeDomProvider codeProvider);
    internal static bool IsDataSet(XmlSchemaElement e);
}
[AttributeUsageAttribute("32767")]
[ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public class System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
    
private bool _replaced;
    
public string Description { get; }
    [ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public DataSysDescriptionAttribute(string description);
    public virtual string get_Description();
}
[ToolboxItemAttribute("False")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("TableName")]
[DefaultEventAttribute("RowChanging")]
[XmlSchemaProviderAttribute("GetDataTableSchema")]
public class System.Data.DataTable : MarshalByValueComponent {
    
private DataSet _dataSet;
    
private DataView _defaultView;
    
internal long _nextRowID;
    
internal DataRowCollection _rowCollection;
    
internal DataColumnCollection _columnCollection;
    
private ConstraintCollection _constraintCollection;
    
private int _elementColumnCount;
    
internal DataRelationCollection _parentRelationsCollection;
    
internal DataRelationCollection _childRelationsCollection;
    
internal RecordManager _recordManager;
    
internal List`1<Index> _indexes;
    
private List`1<Index> _shadowIndexes;
    
private int _shadowCount;
    
internal PropertyCollection _extendedProperties;
    
private string _tableName;
    
internal string _tableNamespace;
    
private string _tablePrefix;
    
internal DataExpression _displayExpression;
    
internal bool _fNestedInDataset;
    
private CultureInfo _culture;
    
private bool _cultureUserSet;
    
private CompareInfo _compareInfo;
    
private CompareOptions _compareFlags;
    
private IFormatProvider _formatProvider;
    
private StringComparer _hashCodeProvider;
    
private bool _caseSensitive;
    
private bool _caseSensitiveUserSet;
    
internal string _encodedTableName;
    
internal DataColumn _xmlText;
    
internal DataColumn _colUnique;
    
internal bool _textOnly;
    
internal decimal _minOccurs;
    
internal decimal _maxOccurs;
    
internal bool _repeatableElement;
    
private object _typeName;
    
internal UniqueConstraint _primaryKey;
    
internal IndexField[] _primaryIndex;
    
private DataColumn[] _delayedSetPrimaryKey;
    
private Index _loadIndex;
    
private Index _loadIndexwithOriginalAdded;
    
private Index _loadIndexwithCurrentDeleted;
    
private int _suspendIndexEvents;
    
private bool _savedEnforceConstraints;
    
private bool _inDataLoad;
    
private bool _initialLoad;
    
private bool _schemaLoading;
    
private bool _enforceConstraints;
    
internal bool _suspendEnforceConstraints;
    
protected internal bool fInitInProgress;
    
private bool _inLoad;
    
internal bool _fInLoadDiffgram;
    
private byte _isTypedDataTable;
    
private DataRow[] _emptyDataRowArray;
    
private PropertyDescriptorCollection _propertyDescriptorCollectionCache;
    
private DataRelation[] _nestedParentRelations;
    
internal List`1<DataColumn> _dependentColumns;
    
private bool _mergingData;
    
private DataRowChangeEventHandler _onRowChangedDelegate;
    
private DataRowChangeEventHandler _onRowChangingDelegate;
    
private DataRowChangeEventHandler _onRowDeletingDelegate;
    
private DataRowChangeEventHandler _onRowDeletedDelegate;
    
private DataColumnChangeEventHandler _onColumnChangedDelegate;
    
private DataColumnChangeEventHandler _onColumnChangingDelegate;
    
private DataTableClearEventHandler _onTableClearingDelegate;
    
private DataTableClearEventHandler _onTableClearedDelegate;
    
private DataTableNewRowEventHandler _onTableNewRowDelegate;
    
private PropertyChangedEventHandler _onPropertyChangingDelegate;
    
private EventHandler _onInitialized;
    
private DataRowBuilder _rowBuilder;
    
private static string KEY_XMLSCHEMA;
    
private static string KEY_XMLDIFFGRAM;
    
private static string KEY_NAME;
    
internal List`1<DataView> _delayedViews;
    
private List`1<DataViewListener> _dataViewListeners;
    
internal Hashtable _rowDiffId;
    
internal ReaderWriterLockSlim _indexesLock;
    
internal int _ukColumnPositionForInference;
    
private SerializationFormat _remotingFormat;
    
private static int s_objectTypeCount;
    
private int _objectID;
    
public bool CaseSensitive { get; public set; }
    
internal bool AreIndexEventsSuspended { get; }
    [BrowsableAttribute("False")]

public bool IsInitialized { get; }
    
private bool IsTypedDataTable { get; }
    
internal bool SelfNested { get; }
    [DebuggerBrowsableAttribute("0")]

internal List`1<Index> LiveIndexes { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public SerializationFormat RemotingFormat { get; public set; }
    
internal int UKColumnPositionForInference { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public DataRelationCollection ChildRelations { get; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataColumnCollection Columns { get; }
    
private CompareInfo CompareInfo { get; }
    [DesignerSerializationVisibilityAttribute("2")]

public ConstraintCollection Constraints { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DataSet DataSet { get; }
    [BrowsableAttribute("False")]

public DataView DefaultView { get; }
    [DefaultValueAttribute("")]

public string DisplayExpression { get; public set; }
    
internal string DisplayExpressionInternal { get; }
    
internal bool EnforceConstraints { get; internal set; }
    
internal bool SuspendEnforceConstraints { get; internal set; }
    [BrowsableAttribute("False")]

public PropertyCollection ExtendedProperties { get; }
    
internal IFormatProvider FormatProvider { get; }
    [BrowsableAttribute("False")]

public bool HasErrors { get; }
    
public CultureInfo Locale { get; public set; }
    [DefaultValueAttribute("50")]

public int MinimumCapacity { get; public set; }
    
internal int RecordCapacity { get; }
    
internal int ElementColumnCount { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public DataRelationCollection ParentRelations { get; }
    
internal bool MergingData { get; internal set; }
    
internal DataRelation[] NestedParentRelations { get; }
    
internal bool SchemaLoading { get; }
    
internal int NestedParentsCount { get; }
    [TypeConverterAttribute("System.Data.PrimaryKeyTypeConverter")]

public DataColumn[] PrimaryKey { get; public set; }
    [BrowsableAttribute("False")]

public DataRowCollection Rows { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]

public string TableName { get; public set; }
    
internal string EncodedTableName { get; }
    
public string Namespace { get; public set; }
    [DefaultValueAttribute("")]

public string Prefix { get; public set; }
    
internal DataColumn XmlText { get; internal set; }
    
internal decimal MaxOccurs { get; internal set; }
    
internal decimal MinOccurs { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public ISite Site { get; public set; }
    
private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    
internal bool NeedColumnChangeEvents { get; }
    
internal XmlQualifiedName TypeName { get; internal set; }
    
internal Hashtable RowDiffId { get; }
    
internal int ObjectID { get; }
    public DataTable(string tableName);
    public DataTable(string tableName, string tableNamespace);
    protected DataTable(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void SerializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat);
    internal void DeserializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat);
    internal void SerializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void DeserializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void SerializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void DeserializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void SerializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void SerializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    private DataRowState ConvertToRowState(BitArray bitStates, int bitIndex);
    internal void GetRowAndColumnErrors(int rowIndex, Hashtable rowErrors, Hashtable colErrors);
    private void ConvertToRowError(int rowIndex, Hashtable rowErrors, Hashtable colErrors);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    internal bool get_AreIndexEventsSuspended();
    internal void RestoreIndexEvents(bool forceReset);
    internal void SuspendIndexEvents();
    public sealed virtual bool get_IsInitialized();
    private bool get_IsTypedDataTable();
    internal bool SetCaseSensitiveValue(bool isCaseSensitive, bool userSet, bool resetIndexes);
    private void ResetCaseSensitive();
    internal bool ShouldSerializeCaseSensitive();
    internal bool get_SelfNested();
    internal List`1<Index> get_LiveIndexes();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    internal int get_UKColumnPositionForInference();
    internal void set_UKColumnPositionForInference(int value);
    public DataRelationCollection get_ChildRelations();
    public DataColumnCollection get_Columns();
    private void ResetColumns();
    private CompareInfo get_CompareInfo();
    public ConstraintCollection get_Constraints();
    private void ResetConstraints();
    public DataSet get_DataSet();
    internal void SetDataSet(DataSet dataSet);
    public DataView get_DefaultView();
    public string get_DisplayExpression();
    public void set_DisplayExpression(string value);
    internal string get_DisplayExpressionInternal();
    internal bool get_EnforceConstraints();
    internal void set_EnforceConstraints(bool value);
    internal bool get_SuspendEnforceConstraints();
    internal void set_SuspendEnforceConstraints(bool value);
    internal void EnableConstraints();
    public PropertyCollection get_ExtendedProperties();
    internal IFormatProvider get_FormatProvider();
    public bool get_HasErrors();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal bool SetLocaleValue(CultureInfo culture, bool userSet, bool resetIndexes);
    internal bool ShouldSerializeLocale();
    public int get_MinimumCapacity();
    public void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal int get_ElementColumnCount();
    internal void set_ElementColumnCount(int value);
    public DataRelationCollection get_ParentRelations();
    internal bool get_MergingData();
    internal void set_MergingData(bool value);
    internal DataRelation[] get_NestedParentRelations();
    internal bool get_SchemaLoading();
    internal void CacheNestedParent();
    private DataRelation[] FindNestedParentRelations();
    internal int get_NestedParentsCount();
    public DataColumn[] get_PrimaryKey();
    public void set_PrimaryKey(DataColumn[] value);
    private bool ShouldSerializePrimaryKey();
    private void ResetPrimaryKey();
    public DataRowCollection get_Rows();
    public string get_TableName();
    public void set_TableName(string value);
    internal string get_EncodedTableName();
    private string GetInheritedNamespace(List`1<DataTable> visitedTables);
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsNamespaceInherited();
    internal void CheckCascadingNamespaceConflict(string realNamespace);
    internal void CheckNamespaceValidityForNestedRelations(string realNamespace);
    internal void CheckNamespaceValidityForNestedParentRelations(string ns, DataTable parentTable);
    internal void DoRaiseNamespaceChange();
    private bool ShouldSerializeNamespace();
    private void ResetNamespace();
    public virtual void BeginInit();
    public virtual void EndInit();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal DataColumn get_XmlText();
    internal void set_XmlText(DataColumn value);
    internal decimal get_MaxOccurs();
    internal void set_MaxOccurs(decimal value);
    internal decimal get_MinOccurs();
    internal void set_MinOccurs(decimal value);
    internal void SetKeyValues(DataKey key, Object[] keyValues, int record);
    internal DataRow FindByIndex(Index ndx, Object[] key);
    internal DataRow FindMergeTarget(DataRow row, DataKey key, Index ndx);
    private void SetMergeRecords(DataRow row, int newRecord, int oldRecord, DataRowAction action);
    internal DataRow MergeRow(DataRow row, DataRow targetRow, bool preserveChanges, Index idxSearch);
    public void AcceptChanges();
    protected virtual DataTable CreateInstance();
    public virtual DataTable Clone();
    internal DataTable Clone(DataSet cloneDS);
    private DataTable IncrementalCloneTo(DataTable sourceTable, DataTable targetTable);
    private DataTable CloneHierarchy(DataTable sourceTable, DataSet ds, Hashtable visitedMap);
    private DataTable CloneTo(DataTable clone, DataSet cloneDS, bool skipExpressionColumns);
    public DataTable Copy();
    public void add_ColumnChanging(DataColumnChangeEventHandler value);
    public void remove_ColumnChanging(DataColumnChangeEventHandler value);
    public void add_ColumnChanged(DataColumnChangeEventHandler value);
    public void remove_ColumnChanged(DataColumnChangeEventHandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    public void add_RowChanged(DataRowChangeEventHandler value);
    public void remove_RowChanged(DataRowChangeEventHandler value);
    public void add_RowChanging(DataRowChangeEventHandler value);
    public void remove_RowChanging(DataRowChangeEventHandler value);
    public void add_RowDeleting(DataRowChangeEventHandler value);
    public void remove_RowDeleting(DataRowChangeEventHandler value);
    public void add_RowDeleted(DataRowChangeEventHandler value);
    public void remove_RowDeleted(DataRowChangeEventHandler value);
    public void add_TableClearing(DataTableClearEventHandler value);
    public void remove_TableClearing(DataTableClearEventHandler value);
    public void add_TableCleared(DataTableClearEventHandler value);
    public void remove_TableCleared(DataTableClearEventHandler value);
    public void add_TableNewRow(DataTableNewRowEventHandler value);
    public void remove_TableNewRow(DataTableNewRowEventHandler value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    internal DataRow AddRecords(int oldRecord, int newRecord);
    internal void AddRow(DataRow row);
    internal void AddRow(DataRow row, int proposedID);
    internal void InsertRow(DataRow row, int proposedID, int pos);
    internal void InsertRow(DataRow row, long proposedID, int pos, bool fireEvent);
    internal void CheckNotModifying(DataRow row);
    public void Clear();
    internal void Clear(bool clearAll);
    internal void CascadeAll(DataRow row, DataRowAction action);
    internal void CommitRow(DataRow row);
    internal int Compare(string s1, string s2);
    internal int Compare(string s1, string s2, CompareInfo comparer);
    internal int IndexOf(string s1, string s2);
    internal bool IsSuffix(string s1, string s2);
    public object Compute(string expression, string filter);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    internal void CopyRow(DataTable table, DataRow row);
    internal void DeleteRow(DataRow row);
    private void CheckPrimaryKey();
    internal DataRow FindByPrimaryKey(Object[] values);
    internal DataRow FindByPrimaryKey(object value);
    private DataRow FindRow(DataKey key, Object[] values);
    private DataRow FindRow(DataKey key, object value);
    internal string FormatSortString(IndexField[] indexDesc);
    internal void FreeRecord(Int32& record);
    public DataTable GetChanges();
    public DataTable GetChanges(DataRowState rowStates);
    public DataRow[] GetErrors();
    internal Index GetIndex(IndexField[] indexDesc);
    internal Index GetIndex(string sort, DataViewRowState recordStates, IFilter rowFilter);
    internal Index GetIndex(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal List`1<DataViewListener> GetListeners();
    internal int GetSpecialHashCode(string name);
    public void ImportRow(DataRow row);
    internal void InsertRow(DataRow row, long proposedID);
    private IndexField[] NewIndexDesc(DataKey key);
    internal int NewRecord();
    internal int NewUninitializedRecord();
    internal int NewRecordFromArray(Object[] value);
    internal int NewRecord(int sourceRecord);
    internal DataRow NewEmptyRow();
    private DataRow NewUninitializedRow();
    public DataRow NewRow();
    internal DataRow CreateEmptyRow();
    private void NewRowCreated(DataRow row);
    internal DataRow NewRow(int record);
    protected virtual DataRow NewRowFromBuilder(DataRowBuilder builder);
    protected virtual Type GetRowType();
    protected internal DataRow[] NewRowArray(int size);
    internal bool get_NeedColumnChangeEvents();
    protected internal virtual void OnColumnChanging(DataColumnChangeEventArgs e);
    protected internal virtual void OnColumnChanged(DataColumnChangeEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnRemoveColumnInternal(DataColumn column);
    protected virtual void OnRemoveColumn(DataColumn column);
    private DataRowChangeEventArgs OnRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs OnRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    protected virtual void OnTableCleared(DataTableClearEventArgs e);
    protected virtual void OnTableClearing(DataTableClearEventArgs e);
    protected virtual void OnTableNewRow(DataTableNewRowEventArgs e);
    private void OnInitialized();
    internal IndexField[] ParseSortString(string sortString);
    internal void RaisePropertyChanging(string name);
    internal void RecordChanged(int record);
    internal void RecordChanged(Int32[] oldIndex, Int32[] newIndex);
    internal void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    internal void RecordStateChanged(int record1, DataViewRowState oldState1, DataViewRowState newState1, int record2, DataViewRowState oldState2, DataViewRowState newState2);
    internal Int32[] RemoveRecordFromIndexes(DataRow row, DataRowVersion version);
    internal Int32[] InsertRecordToIndexes(DataRow row, DataRowVersion version);
    internal void SilentlySetValue(DataRow dr, DataColumn dc, DataRowVersion version, object newValue);
    public void RejectChanges();
    internal void RemoveRow(DataRow row, bool check);
    public virtual void Reset();
    internal void ResetIndexes();
    internal void ResetInternalIndexes(DataColumn column);
    internal void RollbackRow(DataRow row);
    private DataRowChangeEventArgs RaiseRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction, bool fireEvent);
    public DataRow[] Select();
    public DataRow[] Select(string filterExpression);
    public DataRow[] Select(string filterExpression, string sort);
    public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates);
    internal void SetNewRecord(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool fireEvent, bool suppressEnsurePropertyChanged);
    private void SetNewRecordWorker(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool suppressEnsurePropertyChanged, int position, bool fireEvent, Exception& deferredException);
    internal void SetOldRecord(DataRow row, int proposedRecord);
    private void RestoreShadowIndexes();
    private void SetShadowIndexes();
    internal void ShadowIndexCopy();
    public virtual string ToString();
    public void BeginLoadData();
    public void EndLoadData();
    public DataRow LoadDataRow(Object[] values, bool fAcceptChanges);
    public DataRow LoadDataRow(Object[] values, LoadOption loadOption);
    internal DataRow UpdatingAdd(Object[] values);
    internal bool UpdatingCurrent(DataRow row, DataRowAction action);
    internal DataColumn AddUniqueKey(int position);
    internal DataColumn AddUniqueKey();
    internal DataColumn AddForeignKey(DataColumn parentKey);
    internal void UpdatePropertyDescriptorCollectionCache();
    internal PropertyDescriptorCollection GetPropertyDescriptorCollection(Attribute[] attributes);
    internal XmlQualifiedName get_TypeName();
    internal void set_TypeName(XmlQualifiedName value);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Load(IDataReader reader);
    public void Load(IDataReader reader, LoadOption loadOption);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler);
    private DataRow LoadRow(Object[] values, LoadOption loadOption, Index searchIndex);
    private void SetDataRowWithLoadOption(DataRow dataRow, int recordNo, LoadOption loadOption, bool checkReadOnly);
    public DataTableReader CreateDataReader();
    public void WriteXml(Stream stream);
    public void WriteXml(Stream stream, bool writeHierarchy);
    public void WriteXml(TextWriter writer);
    public void WriteXml(TextWriter writer, bool writeHierarchy);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(XmlWriter writer, bool writeHierarchy);
    public void WriteXml(string fileName);
    public void WriteXml(string fileName, bool writeHierarchy);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, bool writeHierarchy);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, bool writeHierarchy);
    private bool CheckForClosureOnExpressions(DataTable dt, bool writeHierarchy);
    private bool CheckForClosureOnExpressionTables(List`1<DataTable> tableList);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, bool writeHierarchy);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(XmlReader reader);
    private void RestoreConstraint(bool originalEnforceConstraint);
    private bool IsEmptyXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXDRSchema(XmlReader reader);
    internal bool MoveToElement(XmlReader reader, int depth);
    private void ReadXmlDiffgram(XmlReader reader);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    private void CreateTableList(DataTable currentTable, List`1<DataTable> tableList);
    private void CreateRelationList(List`1<DataTable> tableList, List`1<DataRelation> relationList);
    public static XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    protected virtual XmlSchema GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    internal Hashtable get_RowDiffId();
    internal int get_ObjectID();
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void EvaluateExpressions();
    internal void EvaluateExpressions(DataRow row, DataRowAction action, List`1<DataRow> cachedRows);
    internal void EvaluateExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(List`1<DataColumn> columns, DataRow row, DataRowVersion version, List`1<DataRow> cachedRows);
}
public class System.Data.DataTableClearEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private DataTable <Table>k__BackingField;
    
public DataTable Table { get; }
    
public string TableName { get; }
    
public string TableNamespace { get; }
    public DataTableClearEventArgs(DataTable dataTable);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    public string get_TableName();
    public string get_TableNamespace();
}
public class System.Data.DataTableClearEventHandler : MulticastDelegate {
    public DataTableClearEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableClearEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultEventAttribute("CollectionChanged")]
[ListBindableAttribute("False")]
[DefaultMemberAttribute("Item")]
public class System.Data.DataTableCollection : InternalDataCollectionBase {
    
private DataSet _dataSet;
    
private ArrayList _list;
    
private int _defaultNameIndex;
    
private DataTable[] _delayedAddRangeTables;
    
private CollectionChangeEventHandler _onCollectionChangedDelegate;
    
private CollectionChangeEventHandler _onCollectionChangingDelegate;
    
private static int s_objectTypeCount;
    
private int _objectID;
    
protected ArrayList List { get; }
    
internal int ObjectID { get; }
    
public DataTable Item { get; }
    
public DataTable Item { get; }
    
public DataTable Item { get; }
    internal DataTableCollection(DataSet dataSet);
    protected virtual ArrayList get_List();
    internal int get_ObjectID();
    public DataTable get_Item(int index);
    public DataTable get_Item(string name);
    public DataTable get_Item(string name, string tableNamespace);
    internal DataTable GetTable(string name, string ns);
    internal DataTable GetTableSmart(string name, string ns);
    public void Add(DataTable table);
    public void AddRange(DataTable[] tables);
    public DataTable Add(string name);
    public DataTable Add(string name, string tableNamespace);
    public DataTable Add();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void add_CollectionChanging(CollectionChangeEventHandler value);
    public void remove_CollectionChanging(CollectionChangeEventHandler value);
    private void ArrayAdd(DataTable table);
    internal string AssignName();
    private void BaseAdd(DataTable table);
    private void BaseGroupSwitch(DataTable[] oldArray, int oldLength, DataTable[] newArray, int newLength);
    private void BaseRemove(DataTable table);
    public bool CanRemove(DataTable table);
    internal bool CanRemove(DataTable table, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    public bool Contains(string name, string tableNamespace);
    internal bool Contains(string name, string tableNamespace, bool checkProperty, bool caseSensitive);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataTable[] array, int index);
    public int IndexOf(DataTable table);
    public int IndexOf(string tableName);
    public int IndexOf(string tableName, string tableNamespace);
    internal int IndexOf(string tableName, string tableNamespace, bool chekforNull);
    internal void ReplaceFromInference(List`1<DataTable> tableList);
    internal int InternalIndexOf(string tableName);
    internal int InternalIndexOf(string tableName, string tableNamespace);
    internal void FinishInitCollection();
    private string MakeName(int index);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    private void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name, string tbNamespace);
    public void Remove(DataTable table);
    public void RemoveAt(int index);
    public void Remove(string name);
    public void Remove(string name, string tableNamespace);
    internal void UnregisterName(string name);
}
public class System.Data.DataTableNewRowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private DataRow <Row>k__BackingField;
    
public DataRow Row { get; }
    public DataTableNewRowEventArgs(DataRow dataRow);
    [CompilerGeneratedAttribute]
public DataRow get_Row();
}
public class System.Data.DataTableNewRowEventHandler : MulticastDelegate {
    public DataTableNewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableNewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.DataTablePropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]

private DataTable <Table>k__BackingField;
    
public DataTable Table { get; }
    
public Type ComponentType { get; }
    
public bool IsReadOnly { get; }
    
public Type PropertyType { get; }
    internal DataTablePropertyDescriptor(DataTable dataTable);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataTableReader : DbDataReader {
    
private DataTable[] _tables;
    
private bool _isOpen;
    
private DataTable _schemaTable;
    
private int _tableCounter;
    
private int _rowCounter;
    
private DataTable _currentDataTable;
    
private DataRow _currentDataRow;
    
private bool _hasRows;
    
private bool _reachEORows;
    
private bool _currentRowRemoved;
    
private bool _schemaIsChanged;
    
private bool _started;
    
private bool _readerIsInvalid;
    
private DataTableReaderListener _listener;
    
private bool _tableCleared;
    
private bool ReaderIsInvalid { get; private set; }
    
private bool IsSchemaChanged { get; private set; }
    
internal DataTable CurrentDataTable { get; }
    
public int Depth { get; }
    
public bool IsClosed { get; }
    
public int RecordsAffected { get; }
    
public bool HasRows { get; }
    
public object Item { get; }
    
public object Item { get; }
    
public int FieldCount { get; }
    public DataTableReader(DataTable dataTable);
    public DataTableReader(DataTable[] dataTables);
    private bool get_ReaderIsInvalid();
    private void set_ReaderIsInvalid(bool value);
    private bool get_IsSchemaChanged();
    private void set_IsSchemaChanged(bool value);
    internal DataTable get_CurrentDataTable();
    private void Init();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual bool get_HasRows();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_FieldCount();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual IEnumerator GetEnumerator();
    internal static DataTable GetSchemaTableFromDataTable(DataTable table);
    private void ValidateOpen(string caller);
    private void ValidateReader();
    private void ValidateState(string caller);
    private void ValidateRow(int rowPosition);
    internal void SchemaChanged();
    internal void DataTableCleared();
    internal void DataChanged(DataRowChangeEventArgs args);
}
internal class System.Data.DataTableReaderListener : object {
    
private DataTable _currentDataTable;
    
private bool _isSubscribed;
    
private WeakReference _readerWeak;
    internal DataTableReaderListener(DataTableReader reader);
    internal void CleanUp();
    internal void UpdataTable(DataTable datatable);
    private void SubscribeEvents();
    private void UnSubscribeEvents();
    private void DataTableCleared(object sender, DataTableClearEventArgs e);
    private void SchemaChanged(object sender, CollectionChangeEventArgs e);
    private void DataChanged(object sender, DataRowChangeEventArgs args);
}
internal class System.Data.DataTableTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Data.DataTextReader : XmlReader {
    
private XmlReader _xmlreader;
    
public XmlReaderSettings Settings { get; }
    
public XmlNodeType NodeType { get; }
    
public string Name { get; }
    
public string LocalName { get; }
    
public string NamespaceURI { get; }
    
public string Prefix { get; }
    
public bool HasValue { get; }
    
public string Value { get; }
    
public int Depth { get; }
    
public string BaseURI { get; }
    
public bool IsEmptyElement { get; }
    
public bool IsDefault { get; }
    
public char QuoteChar { get; }
    
public XmlSpace XmlSpace { get; }
    
public string XmlLang { get; }
    
public int AttributeCount { get; }
    
public bool EOF { get; }
    
public ReadState ReadState { get; }
    
public XmlNameTable NameTable { get; }
    
public bool CanResolveEntity { get; }
    
public bool CanReadBinaryContent { get; }
    
public bool CanReadValueChunk { get; }
    private DataTextReader(XmlReader input);
    internal static XmlReader CreateReader(XmlReader xr);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual string ReadString();
}
internal class System.Data.DataTextWriter : XmlWriter {
    
private XmlWriter _xmltextWriter;
    
internal Stream BaseStream { get; }
    
public WriteState WriteState { get; }
    
public XmlSpace XmlSpace { get; }
    
public string XmlLang { get; }
    private DataTextWriter(XmlWriter w);
    internal static XmlWriter CreateWriter(XmlWriter xw);
    internal Stream get_BaseStream();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
}
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("Table")]
[DefaultEventAttribute("PositionChanged")]
public class System.Data.DataView : MarshalByValueComponent {
    
private DataViewManager _dataViewManager;
    
private DataTable _table;
    
private bool _locked;
    
private Index _index;
    
private Dictionary`2<string, Index> _findIndexes;
    
private string _sort;
    
private Comparison`1<DataRow> _comparison;
    
private IFilter _rowFilter;
    
private DataViewRowState _recordStates;
    
private bool _shouldOpen;
    
private bool _open;
    
private bool _allowNew;
    
private bool _allowEdit;
    
private bool _allowDelete;
    
private bool _applyDefaultSort;
    
internal DataRow _addNewRow;
    
private ListChangedEventArgs _addNewMoved;
    
private ListChangedEventHandler _onListChanged;
    
internal static ListChangedEventArgs s_resetEventArgs;
    
private DataTable _delayedTable;
    
private string _delayedRowFilter;
    
private string _delayedSort;
    
private DataViewRowState _delayedRecordStates;
    
private bool _fInitInProgress;
    
private bool _fEndInitInProgress;
    
private Dictionary`2<DataRow, DataRowView> _rowViewCache;
    
private Dictionary`2<DataRow, DataRowView> _rowViewBuffer;
    
private DataViewListener _dvListener;
    
private static int s_objectTypeCount;
    
private int _objectID;
    [CompilerGeneratedAttribute]

private EventHandler Initialized;
    [DefaultValueAttribute("True")]

public bool AllowDelete { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]

public bool ApplyDefaultSort { get; public set; }
    [DefaultValueAttribute("True")]

public bool AllowEdit { get; public set; }
    [DefaultValueAttribute("True")]

public bool AllowNew { get; public set; }
    [BrowsableAttribute("False")]

public int Count { get; }
    
private int CountFromIndex { get; }
    [BrowsableAttribute("False")]

public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]

public bool IsInitialized { get; }
    [BrowsableAttribute("False")]

protected bool IsOpen { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    [DefaultValueAttribute("")]

public string RowFilter { get; public set; }
    
internal Predicate`1<DataRow> RowPredicate { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public DataViewRowState RowStateFilter { get; public set; }
    [DefaultValueAttribute("")]

public string Sort { get; public set; }
    
internal Comparison`1<DataRow> SortComparison { get; internal set; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    [TypeConverterAttribute("System.Data.DataTableTypeConverter")]
[DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]

public DataTable Table { get; public set; }
    
private object System.Collections.IList.Item { get; private set; }
    
public DataRowView Item { get; }
    
private bool System.Collections.IList.IsReadOnly { get; }
    
private bool System.Collections.IList.IsFixedSize { get; }
    
private bool System.ComponentModel.IBindingList.AllowNew { get; }
    
private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    
private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    
private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    
private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    
private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    
private bool System.ComponentModel.IBindingList.IsSorted { get; }
    
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    
private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    
private string System.ComponentModel.IBindingListView.Filter { get; private set; }
    
private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    
private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting { get; }
    
private bool System.ComponentModel.IBindingListView.SupportsFiltering { get; }
    
internal int ObjectID { get; }
    internal DataView(DataTable table, bool locked);
    public DataView(DataTable table);
    public DataView(DataTable table, string RowFilter, string Sort, DataViewRowState RowState);
    private static DataView();
    public bool get_AllowDelete();
    public void set_AllowDelete(bool value);
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    public sealed virtual int get_Count();
    private int get_CountFromIndex();
    public DataViewManager get_DataViewManager();
    public sealed virtual bool get_IsInitialized();
    protected bool get_IsOpen();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual string get_RowFilter();
    public virtual void set_RowFilter(string value);
    internal Predicate`1<DataRow> get_RowPredicate();
    internal void set_RowPredicate(Predicate`1<DataRow> value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
    internal Comparison`1<DataRow> get_SortComparison();
    internal void set_SortComparison(Comparison`1<DataRow> value);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public DataTable get_Table();
    public void set_Table(DataTable value);
    private sealed virtual override object System.Collections.IList.get_Item(int recordIndex);
    private sealed virtual override void System.Collections.IList.set_Item(int recordIndex, object value);
    public DataRowView get_Item(int recordIndex);
    public virtual DataRowView AddNew();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private void CheckOpen();
    private void CheckSort(string sort);
    protected void Close();
    public sealed virtual void CopyTo(Array array, int index);
    private void CopyTo(DataRowView[] array, int index);
    public void Delete(int index);
    internal void Delete(DataRow row);
    protected virtual void Dispose(bool disposing);
    public int Find(object key);
    internal virtual int FindByKey(object key);
    public int Find(Object[] key);
    internal virtual int FindByKey(Object[] key);
    public DataRowView[] FindRows(object key);
    public DataRowView[] FindRows(Object[] key);
    internal virtual DataRowView[] FindRowsByKey(Object[] key);
    internal DataRowView[] GetDataRowViewFromRange(Range range);
    internal void FinishAddNew(bool success);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    internal int IndexOf(DataRowView rowview);
    private int IndexOfDataRowView(DataRowView rowview);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    internal Index GetFindIndex(string column, bool keepIndex);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    internal PropertyDescriptor GetSortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts);
    private string CreateSortString(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override void System.ComponentModel.IBindingListView.RemoveFilter();
    private sealed virtual override string System.ComponentModel.IBindingListView.get_Filter();
    private sealed virtual override void System.ComponentModel.IBindingListView.set_Filter(string value);
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    internal ListSortDescriptionCollection GetSortDescriptions();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsFiltering();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    internal virtual IFilter GetFilter();
    private int GetRecord(int recordIndex);
    internal DataRow GetRow(int index);
    private DataRowView GetRowView(int record);
    private DataRowView GetRowView(DataRow dr);
    protected virtual void IndexListChanged(object sender, ListChangedEventArgs e);
    internal void IndexListChangedInternal(ListChangedEventArgs e);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    private void OnInitialized();
    protected void Open();
    protected void Reset();
    internal void ResetRowViewCache();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    internal void SetIndex2(string newSort, DataViewRowState newRowStates, IFilter newRowFilter, bool fireEvent);
    protected void UpdateIndex();
    protected virtual void UpdateIndex(bool force);
    internal void UpdateIndex(bool force, bool fireEvent);
    internal void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ColumnCollectionChangedInternal(object sender, CollectionChangeEventArgs e);
    public DataTable ToTable();
    public DataTable ToTable(string tableName);
    public DataTable ToTable(bool distinct, String[] columnNames);
    public DataTable ToTable(string tableName, bool distinct, String[] columnNames);
    private bool RowExist(List`1<Object[]> arraylist, Object[] objectArray);
    public virtual bool Equals(DataView view);
    internal int get_ObjectID();
}
internal class System.Data.DataViewListener : object {
    
private WeakReference _dvWeak;
    
private DataTable _table;
    
private Index _index;
    
internal int _objectID;
    internal DataViewListener(DataView dv);
    private void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    internal void IndexListChanged(ListChangedEventArgs e);
    internal void RegisterMetaDataEvents(DataTable table);
    internal void UnregisterMetaDataEvents();
    private void UnregisterMetaDataEvents(bool updateListeners);
    internal void RegisterListChangedEvent(Index index);
    internal void UnregisterListChangedEvent();
    private void CleanUp(bool updateListeners);
    private void RegisterListener(DataTable table);
}
public class System.Data.DataViewManager : MarshalByValueComponent {
    
private DataViewSettingCollection _dataViewSettingsCollection;
    
private DataSet _dataSet;
    
private DataViewManagerListItemTypeDescriptor _item;
    
private bool _locked;
    
internal int _nViews;
    
private static NotSupportedException s_notSupported;
    [CompilerGeneratedAttribute]

private ListChangedEventHandler ListChanged;
    [DefaultValueAttribute("")]

public DataSet DataSet { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]

public DataViewSettingCollection DataViewSettings { get; }
    
public string DataViewSettingCollectionString { get; public set; }
    
private int System.Collections.ICollection.Count { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
private bool System.Collections.IList.IsReadOnly { get; }
    
private bool System.Collections.IList.IsFixedSize { get; }
    
private object System.Collections.IList.Item { get; private set; }
    
private bool System.ComponentModel.IBindingList.AllowNew { get; }
    
private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    
private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    
private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    
private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    
private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    
private bool System.ComponentModel.IBindingList.IsSorted { get; }
    
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    
private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    public DataViewManager(DataSet dataSet);
    internal DataViewManager(DataSet dataSet, bool locked);
    private static DataViewManager();
    public DataSet get_DataSet();
    public void set_DataSet(DataSet value);
    public DataViewSettingCollection get_DataViewSettings();
    public string get_DataViewSettingCollectionString();
    public void set_DataViewSettingCollectionString(string value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    public DataView CreateDataView(DataTable table);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void TableCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void RelationCollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.DataViewManagerListItemTypeDescriptor : object {
    
private DataViewManager _dataViewManager;
    
private PropertyDescriptorCollection _propsCollection;
    internal DataViewManagerListItemTypeDescriptor(DataViewManager dataViewManager);
    internal void Reset();
    internal DataView GetDataView(DataTable table);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[FlagsAttribute]
public enum System.Data.DataViewRowState : Enum {
    
public int value__;
    
public static DataViewRowState None;
    
public static DataViewRowState Unchanged;
    
public static DataViewRowState Added;
    
public static DataViewRowState Deleted;
    
public static DataViewRowState ModifiedCurrent;
    
public static DataViewRowState ModifiedOriginal;
    
public static DataViewRowState OriginalRows;
    
public static DataViewRowState CurrentRows;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Data.DataViewSetting : object {
    
private DataViewManager _dataViewManager;
    
private DataTable _table;
    
private string _sort;
    
private string _rowFilter;
    
private DataViewRowState _rowStateFilter;
    
private bool _applyDefaultSort;
    
public bool ApplyDefaultSort { get; public set; }
    [BrowsableAttribute("False")]

public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]

public DataTable Table { get; }
    
public string RowFilter { get; public set; }
    
public DataViewRowState RowStateFilter { get; public set; }
    
public string Sort { get; public set; }
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public DataViewManager get_DataViewManager();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    public DataTable get_Table();
    internal void SetDataTable(DataTable table);
    public string get_RowFilter();
    public void set_RowFilter(string value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataViewSettingCollection : object {
    
private DataViewManager _dataViewManager;
    
private Hashtable _list;
    
public DataViewSetting Item { get; public set; }
    
public DataViewSetting Item { get; }
    
public DataViewSetting Item { get; public set; }
    [BrowsableAttribute("False")]

public int Count { get; }
    [BrowsableAttribute("False")]

public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]

public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]

public object SyncRoot { get; }
    internal DataViewSettingCollection(DataViewManager dataViewManager);
    public virtual DataViewSetting get_Item(DataTable table);
    public virtual void set_Item(DataTable table, DataViewSetting value);
    private DataTable GetTable(string tableName);
    private DataTable GetTable(int index);
    public virtual DataViewSetting get_Item(string tableName);
    public virtual DataViewSetting get_Item(int index);
    public virtual void set_Item(int index, DataViewSetting value);
    public sealed virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataViewSetting[] ar, int index);
    public virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Remove(DataTable table);
}
public class System.Data.DBConcurrencyException : SystemException {
    
private DataRow[] _dataRows;
    
public DataRow Row { get; public set; }
    
public int RowCount { get; }
    public DBConcurrencyException(string message);
    public DBConcurrencyException(string message, Exception inner);
    public DBConcurrencyException(string message, Exception inner, DataRow[] dataRows);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public DataRow get_Row();
    public void set_Row(DataRow value);
    public int get_RowCount();
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public enum System.Data.DbType : Enum {
    
public int value__;
    
public static DbType AnsiString;
    
public static DbType Binary;
    
public static DbType Byte;
    
public static DbType Boolean;
    
public static DbType Currency;
    
public static DbType Date;
    
public static DbType DateTime;
    
public static DbType Decimal;
    
public static DbType Double;
    
public static DbType Guid;
    
public static DbType Int16;
    
public static DbType Int32;
    
public static DbType Int64;
    
public static DbType Object;
    
public static DbType SByte;
    
public static DbType Single;
    
public static DbType String;
    
public static DbType Time;
    
public static DbType UInt16;
    
public static DbType UInt32;
    
public static DbType UInt64;
    
public static DbType VarNumeric;
    
public static DbType AnsiStringFixedLength;
    
public static DbType StringFixedLength;
    
public static DbType Xml;
    
public static DbType DateTime2;
    
public static DbType DateTimeOffset;
}
internal class System.Data.DefaultValueTypeConverter : StringConverter {
    
private static string NullString;
    
private static string DbNullString;
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public class System.Data.DeletedRowInaccessibleException : DataException {
    protected DeletedRowInaccessibleException(SerializationInfo info, StreamingContext context);
    public DeletedRowInaccessibleException(string s);
    public DeletedRowInaccessibleException(string message, Exception innerException);
}
public class System.Data.DuplicateNameException : DataException {
    protected DuplicateNameException(SerializationInfo info, StreamingContext context);
    public DuplicateNameException(string s);
    public DuplicateNameException(string message, Exception innerException);
}
public class System.Data.EvaluateException : InvalidExpressionException {
    protected EvaluateException(SerializationInfo info, StreamingContext context);
    public EvaluateException(string s);
    public EvaluateException(string message, Exception innerException);
}
internal static class System.Data.ExceptionBuilder : object {
    private static void TraceException(string trace, Exception e);
    internal static Exception TraceExceptionAsReturnValue(Exception e);
    internal static Exception TraceExceptionForCapture(Exception e);
    internal static Exception TraceExceptionWithoutRethrow(Exception e);
    internal static Exception _Argument(string error);
    internal static Exception _Argument(string paramName, string error);
    internal static Exception _Argument(string error, Exception innerException);
    private static Exception _ArgumentNull(string paramName, string msg);
    internal static Exception _ArgumentOutOfRange(string paramName, string msg);
    private static Exception _IndexOutOfRange(string error);
    private static Exception _InvalidOperation(string error);
    private static Exception _InvalidEnumArgumentException(string error);
    private static Exception _InvalidEnumArgumentException(T value);
    private static void ThrowDataException(string error, Exception innerException);
    private static Exception _Data(string error);
    private static Exception _Constraint(string error);
    private static Exception _InvalidConstraint(string error);
    private static Exception _DeletedRowInaccessible(string error);
    private static Exception _DuplicateName(string error);
    private static Exception _InRowChangingEvent(string error);
    private static Exception _MissingPrimaryKey(string error);
    private static Exception _NoNullAllowed(string error);
    private static Exception _ReadOnly(string error);
    private static Exception _RowNotInTable(string error);
    private static Exception _VersionNotFound(string error);
    public static Exception ArgumentNull(string paramName);
    public static Exception ArgumentOutOfRange(string paramName);
    public static Exception BadObjectPropertyAccess(string error);
    public static Exception ArgumentContainsNull(string paramName);
    public static Exception CannotModifyCollection();
    public static Exception CaseInsensitiveNameConflict(string name);
    public static Exception NamespaceNameConflict(string name);
    public static Exception InvalidOffsetLength();
    public static Exception ColumnNotInTheTable(string column, string table);
    public static Exception ColumnNotInAnyTable();
    public static Exception ColumnOutOfRange(int index);
    public static Exception ColumnOutOfRange(string column);
    public static Exception CannotAddColumn1(string column);
    public static Exception CannotAddColumn2(string column);
    public static Exception CannotAddColumn3();
    public static Exception CannotAddColumn4(string column);
    public static Exception CannotAddDuplicate(string column);
    public static Exception CannotAddDuplicate2(string table);
    public static Exception CannotAddDuplicate3(string table);
    public static Exception CannotRemoveColumn();
    public static Exception CannotRemovePrimaryKey();
    public static Exception CannotRemoveChildKey(string relation);
    public static Exception CannotRemoveConstraint(string constraint, string table);
    public static Exception CannotRemoveExpression(string column, string expression);
    public static Exception ColumnNotInTheUnderlyingTable(string column, string table);
    public static Exception InvalidOrdinal(string name, int ordinal);
    public static Exception AddPrimaryKeyConstraint();
    public static Exception NoConstraintName();
    public static Exception ConstraintViolation(string constraint);
    public static Exception ConstraintNotInTheTable(string constraint);
    public static string KeysToString(Object[] keys);
    public static string UniqueConstraintViolationText(DataColumn[] columns, Object[] values);
    public static Exception ConstraintViolation(DataColumn[] columns, Object[] values);
    public static Exception ConstraintOutOfRange(int index);
    public static Exception DuplicateConstraint(string constraint);
    public static Exception DuplicateConstraintName(string constraint);
    public static Exception NeededForForeignKeyConstraint(UniqueConstraint key, ForeignKeyConstraint fk);
    public static Exception UniqueConstraintViolation();
    public static Exception ConstraintForeignTable();
    public static Exception ConstraintParentValues();
    public static Exception ConstraintAddFailed(DataTable table);
    public static Exception ConstraintRemoveFailed();
    public static Exception FailedCascadeDelete(string constraint);
    public static Exception FailedCascadeUpdate(string constraint);
    public static Exception FailedClearParentTable(string table, string constraint, string childTable);
    public static Exception ForeignKeyViolation(string constraint, Object[] keys);
    public static Exception RemoveParentRow(ForeignKeyConstraint constraint);
    public static string MaxLengthViolationText(string columnName);
    public static string NotAllowDBNullViolationText(string columnName);
    public static Exception CantAddConstraintToMultipleNestedTable(string tableName);
    public static Exception AutoIncrementAndExpression();
    public static Exception AutoIncrementAndDefaultValue();
    public static Exception AutoIncrementSeed();
    public static Exception CantChangeDataType();
    public static Exception NullDataType();
    public static Exception ColumnNameRequired();
    public static Exception DefaultValueAndAutoIncrement();
    public static Exception DefaultValueDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception DefaultValueColumnDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception ExpressionAndUnique();
    public static Exception ExpressionAndReadOnly();
    public static Exception ExpressionAndConstraint(DataColumn column, Constraint constraint);
    public static Exception ExpressionInConstraint(DataColumn column);
    public static Exception ExpressionCircular();
    public static Exception NonUniqueValues(string column);
    public static Exception NullKeyValues(string column);
    public static Exception NullValues(string column);
    public static Exception ReadOnlyAndExpression();
    public static Exception ReadOnly(string column);
    public static Exception UniqueAndExpression();
    public static Exception SetFailed(object value, DataColumn column, Type type, Exception innerException);
    public static Exception CannotSetToNull(DataColumn column);
    public static Exception LongerThanMaxLength(DataColumn column);
    public static Exception CannotSetMaxLength(DataColumn column, int value);
    public static Exception CannotSetMaxLength2(DataColumn column);
    public static Exception CannotSetSimpleContentType(string columnName, Type type);
    public static Exception CannotSetSimpleContent(string columnName, Type type);
    public static Exception CannotChangeNamespace(string columnName);
    public static Exception HasToBeStringType(DataColumn column);
    public static Exception AutoIncrementCannotSetIfHasData(string typeName);
    public static Exception INullableUDTwithoutStaticNull(string typeName);
    public static Exception IComparableNotImplemented(string typeName);
    public static Exception UDTImplementsIChangeTrackingButnotIRevertible(string typeName);
    public static Exception SetAddedAndModifiedCalledOnnonUnchanged();
    public static Exception InvalidDataColumnMapping(Type type);
    public static Exception CannotSetDateTimeModeForNonDateTimeColumns();
    public static Exception InvalidDateTimeMode(DataSetDateTime mode);
    public static Exception CantChangeDateTimeMode(DataSetDateTime oldValue, DataSetDateTime newValue);
    public static Exception ColumnTypeNotSupported();
    public static Exception SetFailed(string name);
    public static Exception SetDataSetFailed();
    public static Exception SetRowStateFilter();
    public static Exception CanNotSetDataSet();
    public static Exception CanNotUseDataViewManager();
    public static Exception CanNotSetTable();
    public static Exception CanNotUse();
    public static Exception CanNotBindTable();
    public static Exception SetTable();
    public static Exception SetIListObject();
    public static Exception AddNewNotAllowNull();
    public static Exception NotOpen();
    public static Exception CreateChildView();
    public static Exception CanNotDelete();
    public static Exception CanNotEdit();
    public static Exception GetElementIndex(int index);
    public static Exception AddExternalObject();
    public static Exception CanNotClear();
    public static Exception InsertExternalObject();
    public static Exception RemoveExternalObject();
    public static Exception PropertyNotFound(string property, string table);
    public static Exception ColumnToSortIsOutOfRange(string column);
    public static Exception KeyTableMismatch();
    public static Exception KeyNoColumns();
    public static Exception KeyTooManyColumns(int cols);
    public static Exception KeyDuplicateColumns(string columnName);
    public static Exception RelationDataSetMismatch();
    public static Exception NoRelationName();
    public static Exception ColumnsTypeMismatch();
    public static Exception KeyLengthMismatch();
    public static Exception KeyLengthZero();
    public static Exception ForeignRelation();
    public static Exception KeyColumnsIdentical();
    public static Exception RelationForeignTable(string t1, string t2);
    public static Exception GetParentRowTableMismatch(string t1, string t2);
    public static Exception SetParentRowTableMismatch(string t1, string t2);
    public static Exception RelationForeignRow();
    public static Exception RelationNestedReadOnly();
    public static Exception TableCantBeNestedInTwoTables(string tableName);
    public static Exception LoopInNestedRelations(string tableName);
    public static Exception RelationDoesNotExist();
    public static Exception ParentRowNotInTheDataSet();
    public static Exception ParentOrChildColumnsDoNotHaveDataSet();
    public static Exception InValidNestedRelation(string childTableName);
    public static Exception InvalidParentNamespaceinNestedRelation(string childTableName);
    public static Exception RowNotInTheDataSet();
    public static Exception RowNotInTheTable();
    public static Exception EditInRowChanging();
    public static Exception EndEditInRowChanging();
    public static Exception BeginEditInRowChanging();
    public static Exception CancelEditInRowChanging();
    public static Exception DeleteInRowDeleting();
    public static Exception ValueArrayLength();
    public static Exception NoCurrentData();
    public static Exception NoOriginalData();
    public static Exception NoProposedData();
    public static Exception RowRemovedFromTheTable();
    public static Exception DeletedRowInaccessible();
    public static Exception RowAlreadyDeleted();
    public static Exception RowEmpty();
    public static Exception InvalidRowVersion();
    public static Exception RowOutOfRange();
    public static Exception RowOutOfRange(int index);
    public static Exception RowInsertOutOfRange(int index);
    public static Exception RowInsertTwice(int index, string tableName);
    public static Exception RowInsertMissing(string tableName);
    public static Exception RowAlreadyRemoved();
    public static Exception MultipleParents();
    public static Exception InvalidRowState(DataRowState state);
    public static Exception InvalidRowBitPattern();
    internal static Exception SetDataSetNameToEmpty();
    internal static Exception SetDataSetNameConflicting(string name);
    public static Exception DataSetUnsupportedSchema(string ns);
    public static Exception MergeMissingDefinition(string obj);
    public static Exception TablesInDifferentSets();
    public static Exception RelationAlreadyExists();
    public static Exception RowAlreadyInOtherCollection();
    public static Exception RowAlreadyInTheCollection();
    public static Exception TableMissingPrimaryKey();
    public static Exception RecordStateRange();
    public static Exception IndexKeyLength(int length, int keyLength);
    public static Exception RemovePrimaryKey(DataTable table);
    public static Exception RelationAlreadyInOtherDataSet();
    public static Exception RelationAlreadyInTheDataSet();
    public static Exception RelationNotInTheDataSet(string relation);
    public static Exception RelationOutOfRange(object index);
    public static Exception DuplicateRelation(string relation);
    public static Exception RelationTableNull();
    public static Exception RelationDataSetNull();
    public static Exception RelationTableWasRemoved();
    public static Exception ParentTableMismatch();
    public static Exception ChildTableMismatch();
    public static Exception EnforceConstraint();
    public static Exception CaseLocaleMismatch();
    public static Exception CannotChangeCaseLocale();
    public static Exception CannotChangeCaseLocale(Exception innerException);
    public static Exception CannotChangeSchemaSerializationMode();
    public static Exception InvalidSchemaSerializationMode(Type enumType, string mode);
    public static Exception InvalidRemotingFormat(SerializationFormat mode);
    public static Exception TableForeignPrimaryKey();
    public static Exception TableCannotAddToSimpleContent();
    public static Exception NoTableName();
    public static Exception MultipleTextOnlyColumns();
    public static Exception InvalidSortString(string sort);
    public static Exception DuplicateTableName(string table);
    public static Exception DuplicateTableName2(string table, string ns);
    public static Exception SelfnestedDatasetConflictingName(string table);
    public static Exception DatasetConflictingName(string table);
    public static Exception TableAlreadyInOtherDataSet();
    public static Exception TableAlreadyInTheDataSet();
    public static Exception TableOutOfRange(int index);
    public static Exception TableNotInTheDataSet(string table);
    public static Exception TableInRelation();
    public static Exception TableInConstraint(DataTable table, Constraint constraint);
    public static Exception CanNotSerializeDataTableHierarchy();
    public static Exception CanNotRemoteDataTable();
    public static Exception CanNotSetRemotingFormat();
    public static Exception CanNotSerializeDataTableWithEmptyName();
    public static Exception TableNotFound(string tableName);
    public static Exception AggregateException(AggregateType aggregateType, Type type);
    public static Exception InvalidStorageType(TypeCode typecode);
    public static Exception RangeArgument(int min, int max);
    public static Exception NullRange();
    public static Exception NegativeMinimumCapacity();
    public static Exception ProblematicChars(char charValue);
    public static Exception StorageSetFailed();
    public static Exception SimpleTypeNotSupported();
    public static Exception MissingAttribute(string attribute);
    public static Exception MissingAttribute(string element, string attribute);
    public static Exception InvalidAttributeValue(string name, string value);
    public static Exception AttributeValues(string name, string value1, string value2);
    public static Exception ElementTypeNotFound(string name);
    public static Exception RelationParentNameMissing(string rel);
    public static Exception RelationChildNameMissing(string rel);
    public static Exception RelationTableKeyMissing(string rel);
    public static Exception RelationChildKeyMissing(string rel);
    public static Exception UndefinedDatatype(string name);
    public static Exception DatatypeNotDefined();
    public static Exception MismatchKeyLength();
    public static Exception InvalidField(string name);
    public static Exception InvalidSelector(string name);
    public static Exception CircularComplexType(string name);
    public static Exception CannotInstantiateAbstract(string name);
    public static Exception InvalidKey(string name);
    public static Exception DiffgramMissingTable(string name);
    public static Exception DiffgramMissingSQL();
    public static Exception DuplicateConstraintRead(string str);
    public static Exception ColumnTypeConflict(string name);
    public static Exception CannotConvert(string name, string type);
    public static Exception MissingRefer(string name);
    public static Exception InvalidPrefix(string name);
    public static Exception CanNotDeserializeObjectType();
    public static Exception IsDataSetAttributeMissingInSchema();
    public static Exception TooManyIsDataSetAtributeInSchema();
    public static Exception NestedCircular(string name);
    public static Exception MultipleParentRows(string tableQName);
    public static Exception PolymorphismNotSupported(string typeName);
    public static Exception DataTableInferenceNotSupported();
    internal static void ThrowMultipleTargetConverter(Exception innerException);
    public static Exception DuplicateDeclaration(string name);
    public static Exception FoundEntity();
    public static Exception MergeFailed(string name);
    public static Exception ConvertFailed(Type type1, Type type2);
    public static Exception InvalidDataTableReader(string tableName);
    public static Exception DataTableReaderSchemaIsInvalid(string tableName);
    public static Exception CannotCreateDataReaderOnEmptyDataSet();
    public static Exception DataTableReaderArgumentIsEmpty();
    public static Exception ArgumentContainsNullValue();
    public static Exception InvalidCurrentRowInDataTableReader();
    public static Exception EmptyDataTableReader(string tableName);
    internal static Exception InvalidDuplicateNamedSimpleTypeDelaration(string stName, string errorStr);
    internal static Exception InternalRBTreeError(RBTreeError internalError);
    public static Exception EnumeratorModified();
}
internal abstract class System.Data.ExpressionNode : object {
    
private DataTable _table;
    
internal IFormatProvider FormatProvider { get; }
    
internal bool IsSqlColumn { get; }
    
protected DataTable table { get; }
    protected ExpressionNode(DataTable table);
    internal IFormatProvider get_FormatProvider();
    internal virtual bool get_IsSqlColumn();
    protected DataTable get_table();
    protected void BindTable(DataTable table);
    internal abstract virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal abstract virtual object Eval();
    internal abstract virtual object Eval(DataRow row, DataRowVersion version);
    internal abstract virtual object Eval(Int32[] recordNos);
    internal abstract virtual bool IsConstant();
    internal abstract virtual bool IsTableConstant();
    internal abstract virtual bool HasLocalAggregate();
    internal abstract virtual bool HasRemoteAggregate();
    internal abstract virtual ExpressionNode Optimize();
    internal virtual bool DependsOn(DataColumn column);
    internal static bool IsInteger(StorageType type);
    internal static bool IsIntegerSql(StorageType type);
    internal static bool IsSigned(StorageType type);
    internal static bool IsSignedSql(StorageType type);
    internal static bool IsUnsigned(StorageType type);
    internal static bool IsUnsignedSql(StorageType type);
    internal static bool IsNumeric(StorageType type);
    internal static bool IsNumericSql(StorageType type);
    internal static bool IsFloat(StorageType type);
    internal static bool IsFloatSql(StorageType type);
}
internal class System.Data.ExpressionParser : object {
    
private static int Empty;
    
private static int Scalar;
    
private static int Expr;
    
private static ReservedWords[] s_reservedwords;
    
private char _escape;
    
private char _decimalSeparator;
    
private char _listSeparator;
    
private char _exponentL;
    
private char _exponentU;
    
internal Char[] _text;
    
internal int _pos;
    
internal int _start;
    
internal Tokens _token;
    
internal int _op;
    
internal OperatorInfo[] _ops;
    
internal int _topOperator;
    
internal int _topNode;
    
private DataTable _table;
    
private static int MaxPredicates;
    
internal ExpressionNode[] _nodeStack;
    
internal int _prevOperand;
    
internal ExpressionNode _expression;
    internal ExpressionParser(DataTable table);
    private static ExpressionParser();
    internal void LoadExpression(string data);
    internal void StartScan();
    internal ExpressionNode Parse();
    private ExpressionNode ParseAggregateArgument(FunctionId aggregate);
    private ExpressionNode NodePop();
    private ExpressionNode NodePeek();
    private void NodePush(ExpressionNode node);
    private void BuildExpression(int pri);
    internal void CheckToken(Tokens token);
    internal Tokens Scan();
    private void ScanNumeric();
    private void ScanName();
    private void ScanName(char chEnd, char esc, string charsToEscape);
    private void ScanDate();
    private void ScanBinaryConstant();
    private void ScanReserved();
    private void ScanString(char escape);
    internal void ScanToken(Tokens token);
    private void ScanWhite();
    private bool IsWhiteSpace(char ch);
    private bool IsAlphaNumeric(char ch);
    private bool IsDigit(char ch);
    private bool IsAlpha(char ch);
}
internal class System.Data.ExprException : object {
    private static OverflowException _Overflow(string error);
    private static InvalidExpressionException _Expr(string error);
    private static SyntaxErrorException _Syntax(string error);
    private static EvaluateException _Eval(string error);
    private static EvaluateException _Eval(string error, Exception innerException);
    public static Exception InvokeArgument();
    public static Exception NYI(string moreinfo);
    public static Exception MissingOperand(OperatorInfo before);
    public static Exception MissingOperator(string token);
    public static Exception TypeMismatch(string expr);
    public static Exception FunctionArgumentOutOfRange(string arg, string func);
    public static Exception ExpressionTooComplex();
    public static Exception UnboundName(string name);
    public static Exception InvalidString(string str);
    public static Exception UndefinedFunction(string name);
    public static Exception SyntaxError();
    public static Exception FunctionArgumentCount(string name);
    public static Exception MissingRightParen();
    public static Exception UnknownToken(string token, int position);
    public static Exception UnknownToken(Tokens tokExpected, Tokens tokCurr, int position);
    public static Exception DatatypeConvertion(Type type1, Type type2);
    public static Exception DatavalueConvertion(object value, Type type, Exception innerException);
    public static Exception InvalidName(string name);
    public static Exception InvalidDate(string date);
    public static Exception NonConstantArgument();
    public static Exception InvalidPattern(string pat);
    public static Exception InWithoutParentheses();
    public static Exception InWithoutList();
    public static Exception InvalidIsSyntax();
    public static Exception Overflow(Type type);
    public static Exception ArgumentType(string function, int arg, Type type);
    public static Exception ArgumentTypeInteger(string function, int arg);
    public static Exception TypeMismatchInBinop(int op, Type type1, Type type2);
    public static Exception AmbiguousBinop(int op, Type type1, Type type2);
    public static Exception UnsupportedOperator(int op);
    public static Exception InvalidNameBracketing(string name);
    public static Exception MissingOperandBefore(string op);
    public static Exception TooManyRightParentheses();
    public static Exception UnresolvedRelation(string name, string expr);
    internal static EvaluateException BindFailure(string relationName);
    public static Exception AggregateArgument();
    public static Exception AggregateUnbound(string expr);
    public static Exception EvalNoContext();
    public static Exception ExpressionUnbound(string expr);
    public static Exception ComputeNotAggregate(string expr);
    public static Exception FilterConvertion(string expr);
    public static Exception LookupArgument();
    public static Exception InvalidType(string typeName);
    public static Exception InvalidHoursArgument();
    public static Exception InvalidMinutesArgument();
    public static Exception InvalidTimeZoneRange();
    public static Exception MismatchKindandTimeSpan();
    public static Exception UnsupportedDataType(Type type);
}
public class System.Data.FillErrorEventArgs : EventArgs {
    
private bool _continueFlag;
    
private DataTable _dataTable;
    
private Exception _errors;
    
private Object[] _values;
    
public bool Continue { get; public set; }
    
public DataTable DataTable { get; }
    
public Exception Errors { get; public set; }
    
public Object[] Values { get; }
    public FillErrorEventArgs(DataTable dataTable, Object[] values);
    public bool get_Continue();
    public void set_Continue(bool value);
    public DataTable get_DataTable();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public Object[] get_Values();
}
public class System.Data.FillErrorEventHandler : MulticastDelegate {
    public FillErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FillErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.ForeignKeyConstraint : Constraint {
    
internal static Rule Rule_Default;
    
internal static AcceptRejectRule AcceptRejectRule_Default;
    
internal Rule _deleteRule;
    
internal Rule _updateRule;
    
internal AcceptRejectRule _acceptRejectRule;
    
private DataKey _childKey;
    
private DataKey _parentKey;
    
internal string _constraintName;
    
internal String[] _parentColumnNames;
    
internal String[] _childColumnNames;
    
internal string _parentTableName;
    
internal string _parentTableNamespace;
    
internal DataKey ChildKey { get; }
    [ReadOnlyAttribute("True")]

public DataColumn[] Columns { get; }
    [ReadOnlyAttribute("True")]

public DataTable Table { get; }
    
internal String[] ParentColumnNames { get; }
    
internal String[] ChildColumnNames { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public AcceptRejectRule AcceptRejectRule { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public Rule DeleteRule { get; public set; }
    [ReadOnlyAttribute("True")]

public DataColumn[] RelatedColumns { get; }
    
internal DataColumn[] RelatedColumnsReference { get; }
    
internal DataKey ParentKey { get; }
    [ReadOnlyAttribute("True")]

public DataTable RelatedTable { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public Rule UpdateRule { get; public set; }
    public ForeignKeyConstraint(DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(string constraintName, DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    public ForeignKeyConstraint(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    internal DataKey get_ChildKey();
    public virtual DataColumn[] get_Columns();
    public virtual DataTable get_Table();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal bool IsKeyNull(Object[] values);
    internal virtual bool IsConstraintViolated();
    internal virtual bool CanEnableConstraint();
    internal void CascadeCommit(DataRow row);
    internal void CascadeDelete(DataRow row);
    internal void CascadeRollback(DataRow row);
    internal void CascadeUpdate(DataRow row);
    internal void CheckCanClearParentTable(DataTable table);
    internal void CheckCanRemoveParentRow(DataRow row);
    internal void CheckCascade(DataRow row, DataRowAction action);
    internal virtual void CheckConstraint(DataRow childRow, DataRowAction action);
    private void NonVirtualCheckState();
    internal virtual void CheckState();
    public virtual AcceptRejectRule get_AcceptRejectRule();
    public virtual void set_AcceptRejectRule(AcceptRejectRule value);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal ForeignKeyConstraint Clone(DataTable destination);
    private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual Rule get_DeleteRule();
    public virtual void set_DeleteRule(Rule value);
    public virtual bool Equals(object key);
    public virtual int GetHashCode();
    public virtual DataColumn[] get_RelatedColumns();
    internal DataColumn[] get_RelatedColumnsReference();
    internal DataKey get_ParentKey();
    internal DataRelation FindParentRelation();
    public virtual DataTable get_RelatedTable();
    public virtual Rule get_UpdateRule();
    public virtual void set_UpdateRule(Rule value);
}
internal class System.Data.ForeignKeyConstraintEnumerator : ConstraintEnumerator {
    public ForeignKeyConstraintEnumerator(DataSet dataSet);
    protected virtual bool IsValidCandidate(Constraint constraint);
    public ForeignKeyConstraint GetForeignKeyConstraint();
}
internal class System.Data.Function : object {
    
internal string _name;
    
internal FunctionId _id;
    
internal Type _result;
    
internal bool _isValidateArguments;
    
internal bool _isVariantArgumentList;
    
internal int _argumentCount;
    
internal Type[] _parameters;
    
internal static String[] s_functionName;
    internal Function(string name, FunctionId id, Type result, bool IsValidateArguments, bool IsVariantArgumentList, int argumentCount, Type a1, Type a2, Type a3);
    private static Function();
}
internal enum System.Data.FunctionId : Enum {
    
public int value__;
    
public static FunctionId none;
    
public static FunctionId Ascii;
    
public static FunctionId Char;
    
public static FunctionId Charindex;
    
public static FunctionId Difference;
    
public static FunctionId Len;
    
public static FunctionId Lower;
    
public static FunctionId LTrim;
    
public static FunctionId Patindex;
    
public static FunctionId Replicate;
    
public static FunctionId Reverse;
    
public static FunctionId Right;
    
public static FunctionId RTrim;
    
public static FunctionId Soundex;
    
public static FunctionId Space;
    
public static FunctionId Str;
    
public static FunctionId Stuff;
    
public static FunctionId Substring;
    
public static FunctionId Upper;
    
public static FunctionId IsNull;
    
public static FunctionId Iif;
    
public static FunctionId Convert;
    
public static FunctionId cInt;
    
public static FunctionId cBool;
    
public static FunctionId cDate;
    
public static FunctionId cDbl;
    
public static FunctionId cStr;
    
public static FunctionId Abs;
    
public static FunctionId Acos;
    
public static FunctionId In;
    
public static FunctionId Trim;
    
public static FunctionId Sum;
    
public static FunctionId Avg;
    
public static FunctionId Min;
    
public static FunctionId Max;
    
public static FunctionId Count;
    
public static FunctionId StDev;
    
public static FunctionId Var;
    
public static FunctionId DateTimeOffset;
}
internal class System.Data.FunctionNode : ExpressionNode {
    
internal string _name;
    
internal int _info;
    
internal int _argumentCount;
    
internal static int initialCapacity;
    
internal ExpressionNode[] _arguments;
    
private static Function[] s_funcs;
    
internal FunctionId Aggregate { get; }
    
internal bool IsAggregate { get; }
    internal FunctionNode(DataTable table, string name);
    private static FunctionNode();
    internal void AddArgument(ExpressionNode argument);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    private Type GetDataType(ExpressionNode node);
    private object EvalFunction(FunctionId id, Object[] argumentValues, DataRow row, DataRowVersion version);
    internal FunctionId get_Aggregate();
    internal bool get_IsAggregate();
    internal void Check();
}
public interface System.Data.IColumnMapping {
    
public string DataSetColumn { get; public set; }
    
public string SourceColumn { get; public set; }
    public abstract virtual string get_DataSetColumn();
    public abstract virtual void set_DataSetColumn(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IColumnMappingCollection {
    
public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual IColumnMapping Add(string sourceColumnName, string dataSetColumnName);
    public abstract virtual bool Contains(string sourceColumnName);
    public abstract virtual IColumnMapping GetByDataSetColumn(string dataSetColumnName);
    public abstract virtual int IndexOf(string sourceColumnName);
    public abstract virtual void RemoveAt(string sourceColumnName);
}
public interface System.Data.IDataAdapter {
    
public MissingMappingAction MissingMappingAction { get; public set; }
    
public MissingSchemaAction MissingSchemaAction { get; public set; }
    
public ITableMappingCollection TableMappings { get; }
    public abstract virtual MissingMappingAction get_MissingMappingAction();
    public abstract virtual void set_MissingMappingAction(MissingMappingAction value);
    public abstract virtual MissingSchemaAction get_MissingSchemaAction();
    public abstract virtual void set_MissingSchemaAction(MissingSchemaAction value);
    public abstract virtual ITableMappingCollection get_TableMappings();
    public abstract virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public abstract virtual int Fill(DataSet dataSet);
    public abstract virtual IDataParameter[] GetFillParameters();
    public abstract virtual int Update(DataSet dataSet);
}
public interface System.Data.IDataParameter {
    
public DbType DbType { get; public set; }
    
public ParameterDirection Direction { get; public set; }
    
public bool IsNullable { get; }
    
public string ParameterName { get; public set; }
    
public string SourceColumn { get; public set; }
    
public DataRowVersion SourceVersion { get; public set; }
    
public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual DataRowVersion get_SourceVersion();
    public abstract virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataParameterCollection {
    
public object Item { get; public set; }
    public abstract virtual object get_Item(string parameterName);
    public abstract virtual void set_Item(string parameterName, object value);
    public abstract virtual bool Contains(string parameterName);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void RemoveAt(string parameterName);
}
public interface System.Data.IDataReader {
    
public int Depth { get; }
    
public bool IsClosed { get; }
    
public int RecordsAffected { get; }
    public abstract virtual int get_Depth();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public abstract virtual void Close();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataRecord {
    
public int FieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual string GetName(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual string GetString(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual bool IsDBNull(int i);
}
public interface System.Data.IDbCommand {
    
public IDbConnection Connection { get; public set; }
    
public IDbTransaction Transaction { get; public set; }
    
public string CommandText { get; public set; }
    
public int CommandTimeout { get; public set; }
    
public CommandType CommandType { get; public set; }
    
public IDataParameterCollection Parameters { get; }
    
public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual void Prepare();
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    public abstract virtual IDbDataParameter CreateParameter();
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual IDataReader ExecuteReader();
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual object ExecuteScalar();
}
public interface System.Data.IDbConnection {
    
public string ConnectionString { get; public set; }
    
public int ConnectionTimeout { get; }
    
public string Database { get; }
    
public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual ConnectionState get_State();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public abstract virtual void Close();
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual void Open();
}
public interface System.Data.IDbDataAdapter {
    
public IDbCommand SelectCommand { get; public set; }
    
public IDbCommand InsertCommand { get; public set; }
    
public IDbCommand UpdateCommand { get; public set; }
    
public IDbCommand DeleteCommand { get; public set; }
    public abstract virtual IDbCommand get_SelectCommand();
    public abstract virtual void set_SelectCommand(IDbCommand value);
    public abstract virtual IDbCommand get_InsertCommand();
    public abstract virtual void set_InsertCommand(IDbCommand value);
    public abstract virtual IDbCommand get_UpdateCommand();
    public abstract virtual void set_UpdateCommand(IDbCommand value);
    public abstract virtual IDbCommand get_DeleteCommand();
    public abstract virtual void set_DeleteCommand(IDbCommand value);
}
public interface System.Data.IDbDataParameter {
    
public byte Precision { get; public set; }
    
public byte Scale { get; public set; }
    
public int Size { get; public set; }
    public abstract virtual byte get_Precision();
    public abstract virtual void set_Precision(byte value);
    public abstract virtual byte get_Scale();
    public abstract virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface System.Data.IDbTransaction {
    
public IDbConnection Connection { get; }
    
public IsolationLevel IsolationLevel { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
internal interface System.Data.IFilter {
    public abstract virtual bool Invoke(DataRow row, DataRowVersion version);
}
internal class System.Data.Index : object {
    
private static int DoNotReplaceCompareRecord;
    
private static int ReplaceNewRecordForCompare;
    
private static int ReplaceOldRecordForCompare;
    
private DataTable _table;
    
internal IndexField[] _indexFields;
    
private Comparison`1<DataRow> _comparison;
    
private DataViewRowState _recordStates;
    
private WeakReference _rowFilter;
    
private IndexTree _records;
    
private int _recordCount;
    
private int _refCount;
    
private Listeners`1<DataViewListener> _listeners;
    
private bool _suspendEvents;
    
private bool _isSharable;
    
private bool _hasRemoteAggregate;
    
internal static int MaskBits;
    
private static int s_objectTypeCount;
    
private int _objectID;
    
internal bool HasRemoteAggregate { get; }
    
internal int ObjectID { get; }
    
public DataViewRowState RecordStates { get; }
    
public IFilter RowFilter { get; }
    
public bool HasDuplicates { get; }
    
public int RecordCount { get; }
    
public bool IsSharable { get; }
    
public int RefCount { get; }
    
private bool DoListChanged { get; }
    
internal DataTable Table { get; }
    public Index(DataTable table, IndexField[] indexFields, DataViewRowState recordStates, IFilter rowFilter);
    public Index(DataTable table, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter);
    private Index(DataTable table, IndexField[] indexFields, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter);
    private static IndexField[] GetAllFields(DataColumnCollection columns);
    public bool Equal(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    internal bool get_HasRemoteAggregate();
    internal int get_ObjectID();
    public DataViewRowState get_RecordStates();
    public IFilter get_RowFilter();
    public int GetRecord(int recordIndex);
    public bool get_HasDuplicates();
    public int get_RecordCount();
    public bool get_IsSharable();
    private bool AcceptRecord(int record);
    private bool AcceptRecord(int record, IFilter filter);
    internal void ListChangedAdd(DataViewListener listener);
    internal void ListChangedRemove(DataViewListener listener);
    public int get_RefCount();
    public void AddRef();
    public int RemoveRef();
    private void ApplyChangeAction(int record, int action, int changeRecord);
    public bool CheckUnique();
    private int CompareRecords(int record1, int record2);
    private int CompareDataRows(int record1, int record2);
    private int CompareDuplicateRecords(int record1, int record2);
    private int CompareRecordToKey(int record1, Object[] vals);
    public void DeleteRecordFromIndex(int recordIndex);
    private void DeleteRecord(int recordIndex);
    private void DeleteRecord(int recordIndex, bool fireEvent);
    public RBTreeEnumerator<int> GetEnumerator(int startIndex);
    public int GetIndex(int record);
    private int GetIndex(int record, int changeRecord);
    public Object[] GetUniqueKeyValues();
    public int FindRecord(int record);
    public int FindRecordByKey(object key);
    public int FindRecordByKey(Object[] key);
    private int FindNodeByKey(object originalKey);
    private int FindNodeByKeys(Object[] originalKey);
    private int FindNodeByKeyRecord(int record);
    private Range GetRangeFromNode(int nodeId);
    public Range FindRecords(object key);
    public Range FindRecords(Object[] key);
    internal void FireResetEvent();
    private int GetChangeAction(DataViewRowState oldState, DataViewRowState newState);
    private static int GetReplaceAction(DataViewRowState oldState);
    public DataRow GetRow(int i);
    public DataRow[] GetRows(Object[] values);
    public DataRow[] GetRows(Range range);
    private void InitRecords(IFilter filter);
    public int InsertRecordToIndex(int record);
    private int InsertRecord(int record, bool fireEvent);
    public bool IsKeyInIndex(object key);
    public bool IsKeyInIndex(Object[] key);
    public bool IsKeyRecordInIndex(int record);
    private bool get_DoListChanged();
    private void OnListChanged(ListChangedType changedType, int newIndex, int oldIndex);
    private void OnListChanged(ListChangedType changedType, int index);
    private void OnListChanged(ListChangedEventArgs e);
    private void MaintainDataView(ListChangedType changedType, int record, bool trackAddRemove);
    public void Reset();
    public void RecordChanged(int record);
    public void RecordChanged(int oldIndex, int newIndex);
    public void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    public void RecordStateChanged(int oldRecord, DataViewRowState oldOldState, DataViewRowState oldNewState, int newRecord, DataViewRowState newOldState, DataViewRowState newNewState);
    internal DataTable get_Table();
    private void GetUniqueKeyValues(List`1<Object[]> list, int curNodeId);
    internal static int IndexOfReference(List`1<T> list, T item);
    internal static bool ContainsReference(List`1<T> list, T item);
}
internal class System.Data.IndexField : ValueType {
    
public DataColumn Column;
    
public bool IsDescending;
    internal IndexField(DataColumn column, bool isDescending);
    public static bool op_Equality(IndexField if1, IndexField if2);
    public static bool op_Inequality(IndexField if1, IndexField if2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.Data.InRowChangingEventException : DataException {
    protected InRowChangingEventException(SerializationInfo info, StreamingContext context);
    public InRowChangingEventException(string s);
    public InRowChangingEventException(string message, Exception innerException);
}
public class System.Data.InternalDataCollectionBase : object {
    
internal static CollectionChangeEventArgs s_refreshEventArgs;
    [BrowsableAttribute("False")]

public int Count { get; }
    [BrowsableAttribute("False")]

public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]

public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]

public object SyncRoot { get; }
    
protected ArrayList List { get; }
    private static InternalDataCollectionBase();
    public virtual int get_Count();
    public virtual void CopyTo(Array ar, int index);
    public virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    internal int NamesEqual(string s1, string s2, bool fCaseSensitive, CultureInfo locale);
    public sealed virtual object get_SyncRoot();
    protected virtual ArrayList get_List();
}
public class System.Data.InvalidConstraintException : DataException {
    protected InvalidConstraintException(SerializationInfo info, StreamingContext context);
    public InvalidConstraintException(string s);
    public InvalidConstraintException(string message, Exception innerException);
}
public class System.Data.InvalidExpressionException : DataException {
    protected InvalidExpressionException(SerializationInfo info, StreamingContext context);
    public InvalidExpressionException(string s);
    public InvalidExpressionException(string message, Exception innerException);
}
public enum System.Data.IsolationLevel : Enum {
    
public int value__;
    
public static IsolationLevel Unspecified;
    
public static IsolationLevel Chaos;
    
public static IsolationLevel ReadUncommitted;
    
public static IsolationLevel ReadCommitted;
    
public static IsolationLevel RepeatableRead;
    
public static IsolationLevel Serializable;
    
public static IsolationLevel Snapshot;
}
public interface System.Data.ITableMapping {
    
public IColumnMappingCollection ColumnMappings { get; }
    
public string DataSetTable { get; public set; }
    
public string SourceTable { get; public set; }
    public abstract virtual IColumnMappingCollection get_ColumnMappings();
    public abstract virtual string get_DataSetTable();
    public abstract virtual void set_DataSetTable(string value);
    public abstract virtual string get_SourceTable();
    public abstract virtual void set_SourceTable(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.ITableMappingCollection {
    
public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual ITableMapping Add(string sourceTableName, string dataSetTableName);
    public abstract virtual bool Contains(string sourceTableName);
    public abstract virtual ITableMapping GetByDataSetTable(string dataSetTableName);
    public abstract virtual int IndexOf(string sourceTableName);
    public abstract virtual void RemoveAt(string sourceTableName);
}
public enum System.Data.KeyRestrictionBehavior : Enum {
    
public int value__;
    
public static KeyRestrictionBehavior AllowOnly;
    
public static KeyRestrictionBehavior PreventUsage;
}
internal class System.Data.Keywords : object {
    
internal static string DFF;
    
internal static string DFFNS;
    
internal static string DIFFGRAM;
    
internal static string DIFFID;
    
internal static string DIFFPID;
    
internal static string HASCHANGES;
    
internal static string HASERRORS;
    
internal static string ROWORDER;
    
internal static string MSD_ERRORS;
    
internal static string CHANGES;
    
internal static string MODIFIED;
    
internal static string INSERTED;
    
internal static string MSD;
    
internal static string MSDNS;
    
internal static string MSD_ACCEPTREJECTRULE;
    
internal static string MSD_ALLOWDBNULL;
    
internal static string MSD_CHILD;
    
internal static string MSD_CHILDKEY;
    
internal static string MSD_CHILDTABLENS;
    
internal static string MSD_COLUMNNAME;
    
internal static string MSD_CONSTRAINTNAME;
    
internal static string MSD_CONSTRAINTONLY;
    
internal static string MSD_CASESENSITIVE;
    
internal static string MSD_DATASETNAME;
    
internal static string MSD_DATASETNAMESPACE;
    
internal static string MSD_DATATYPE;
    
internal static string MSD_DEFAULTVALUE;
    
internal static string MSD_DELETERULE;
    
internal static string MSD_ERROR;
    
internal static string MSD_ISDATASET;
    
internal static string MSD_ISNESTED;
    
internal static string MSD_LOCALE;
    
internal static string MSD_USECURRENTLOCALE;
    
internal static string MSD_ORDINAL;
    
internal static string MSD_PARENT;
    
internal static string MSD_PARENTKEY;
    
internal static string MSD_PRIMARYKEY;
    
internal static string MSD_RELATION;
    
internal static string MSD_RELATIONNAME;
    
internal static string MSD_UPDATERULE;
    
internal static char MSD_KEYFIELDSEP;
    
internal static char MSD_KEYFIELDOLDSEP;
    
internal static string MSD_REL_PREFIX;
    
internal static string MSD_FK_PREFIX;
    
internal static string MSD_MAINDATATABLE;
    
internal static string MSD_TABLENS;
    
internal static string MSD_PARENTTABLENS;
    
internal static string MSD_INSTANCETYPE;
    
internal static string MSD_EXCLUDESCHEMA;
    
internal static string MSD_INCLUDESCHEMA;
    
internal static string MSD_FRAGMENTCOUNT;
    
internal static string MSD_SCHEMASERIALIZATIONMODE;
    
internal static string DTNS;
    
internal static string DT_TYPE;
    
internal static string DT_VALUES;
    
internal static string XDRNS;
    
internal static string XDR_ATTRIBUTE;
    
internal static string XDR_ATTRIBUTETYPE;
    
internal static string XDR_DATATYPE;
    
internal static string XDR_DESCRIPTION;
    
internal static string XDR_ELEMENT;
    
internal static string XDR_ELEMENTTYPE;
    
internal static string XDR_GROUP;
    
internal static string XDR_SCHEMA;
    
internal static string XSDNS;
    
internal static string XSD_NS_START;
    
internal static string XSD_XMLNS_NS;
    
internal static string XSD_PREFIX;
    
internal static string XSD_PREFIXCOLON;
    
internal static string XSD_ANNOTATION;
    
internal static string XSD_APPINFO;
    
internal static string XSD_ATTRIBUTE;
    
internal static string XSD_SIMPLETYPE;
    
internal static string XSD_ELEMENT;
    
internal static string XSD_COMPLEXTYPE;
    
internal static string XSD_SCHEMA;
    
internal static string XSD_PATTERN;
    
internal static string XSD_LENGTH;
    
internal static string XSD_MAXLENGTH;
    
internal static string XSD_MINLENGTH;
    
internal static string XSD_ENUMERATION;
    
internal static string XSD_MININCLUSIVE;
    
internal static string XSD_MINEXCLUSIVE;
    
internal static string XSD_MAXINCLUSIVE;
    
internal static string XSD_MAXEXCLUSIVE;
    
internal static string XSD_NAMESPACE;
    
internal static string XSD_NILLABLE;
    
internal static string XSD_IMPORT;
    
internal static string XSD_SELECTOR;
    
internal static string XSD_FIELD;
    
internal static string XSD_UNIQUE;
    
internal static string XSD_KEY;
    
internal static string XSD_KEYREF;
    
internal static string XSD_DATATYPE;
    
internal static string XSD_ALL;
    
internal static string XSD_SEQUENCE;
    
internal static string XSD_ENCODING;
    
internal static string XSD_EXTENSION;
    
internal static string XSD_SIMPLECONTENT;
    
internal static string XSD_XPATH;
    
internal static string XSD_ATTRIBUTEFORMDEFAULT;
    
internal static string XSD_ELEMENTFORMDEFAULT;
    
internal static string XSD_SCHEMALOCATION;
    
internal static string XSD_CHOICE;
    
internal static string XSD_RESTRICTION;
    
internal static string XSD_ANYTYPE;
    
internal static string XSINS;
    
internal static string XSI_NIL;
    
internal static string XSI;
    
internal static string XML_XMLNS;
    
internal static string UPDGNS;
    
internal static string UPDG;
    
internal static string SQL_SYNC;
    
internal static string SQL_BEFORE;
    
internal static string SQL_AFTER;
    
internal static string SQL_ID;
    
internal static string SQL_UNCHANGED;
    
internal static string ATTRIBUTE;
    
internal static string CONTENT;
    
internal static string DEFAULT;
    
internal static string XSDID;
    
internal static string MINOCCURS;
    
internal static string MAXOCCURS;
    
internal static string MODEL;
    
internal static string NAME;
    
internal static string NULLABLE;
    
internal static string ORDER;
    
internal static string REQUIRED;
    
internal static string REF;
    
internal static string BASE;
    
internal static string TARGETNAMESPACE;
    
internal static string TYPE;
    
internal static string XMLNS;
    
internal static string XMLNS_XSD;
    
internal static string XMLNS_XSI;
    
internal static string XMLNS_MSDATA;
    
internal static string XMLNS_MSPROP;
    
internal static string XMLNS_MSTNS;
    
internal static string MSTNS_PREFIX;
    
internal static string SPACE;
    
internal static string PRESERVE;
    
internal static string VALUE;
    
internal static string REFER;
    
internal static string USE;
    
internal static string PROHIBITED;
    
internal static string POSITIVEINFINITY;
    
internal static string NEGATIVEINFINITY;
    
internal static string QUALIFIED;
    
internal static string UNQUALIFIED;
    
internal static string APP;
    
internal static string CLOSED;
    
internal static string CURRENT;
    
internal static string DOCUMENTELEMENT;
    
internal static string FALSE;
    
internal static string FIXED;
    
internal static string FORM;
    
internal static string ENCODING;
    
internal static string ELEMENTONLY;
    
internal static string ELTONLY;
    
internal static string EMPTY;
    
internal static string MANY;
    
internal static string MIXED;
    
internal static string NO;
    
internal static string NOTATION;
    
internal static string OCCURS;
    
internal static string ONE_OR_MORE;
    
internal static string ONE;
    
internal static string ONE_DIGIT;
    
internal static string ONCE;
    
internal static string OPTIONAL;
    
internal static string OPEN;
    
internal static string ORIGINAL;
    
internal static string RANGE;
    
internal static string SEQ;
    
internal static string STAR;
    
internal static string TRUE;
    
internal static string TEXTONLY;
    
internal static string VERSION;
    
internal static string XML;
    
internal static string X_SCHEMA;
    
internal static string YES;
    
internal static string ZERO_DIGIT;
    
internal static string ZERO_OR_MORE;
    
internal static string USEDATASETSCHEMAONLY;
    
internal static string UDTCOLUMNVALUEWRAPPED;
    
internal static string TYPEINSTANCE;
    
internal static string MSPROPNS;
    
internal static string WS_DATASETFULLQNAME;
    
internal static string WS_VERSION;
}
internal class System.Data.LikeNode : BinaryNode {
    
internal static int match_left;
    
internal static int match_right;
    
internal static int match_middle;
    
internal static int match_exact;
    
internal static int match_all;
    
private int _kind;
    
private string _pattern;
    internal LikeNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal string AnalyzePattern(string pat);
}
internal class System.Data.Listeners`1 : object {
    
private List`1<TElem> _listeners;
    
private Func`2<TElem, TElem, bool> _filter;
    
private int _objectID;
    
private int _listenerReaderCount;
    
internal bool HasListeners { get; }
    internal Listeners`1(int ObjectID, Func`2<TElem, TElem, bool> notifyFilter);
    internal bool get_HasListeners();
    internal void Add(TElem listener);
    internal int IndexOfReference(TElem listener);
    internal void Remove(TElem listener);
    internal void Notify(T1 arg1, T2 arg2, T3 arg3, Action`4<TElem, TElem, T1, T2, T3> action);
    private void RemoveNullListeners(int nullIndex);
}
public enum System.Data.LoadOption : Enum {
    
public int value__;
    
public static LoadOption OverwriteChanges;
    
public static LoadOption PreserveChanges;
    
public static LoadOption Upsert;
}
internal static class System.Data.LocalDBAPI : object {
    
private static string const_localDbPrefix;
    internal static string GetLocalDBMessage(int hrCode);
    internal static string GetLocalDbInstanceNameFromServerName(string serverName);
}
internal class System.Data.LookupNode : ExpressionNode {
    
private string _relationName;
    
private string _columnName;
    
private DataColumn _column;
    
private DataRelation _relation;
    internal LookupNode(DataTable table, string columnName, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
public enum System.Data.MappingType : Enum {
    
public int value__;
    
public static MappingType Element;
    
public static MappingType Attribute;
    
public static MappingType SimpleContent;
    
public static MappingType Hidden;
}
public class System.Data.MergeFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private DataTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Conflict>k__BackingField;
    
public DataTable Table { get; }
    
public string Conflict { get; }
    public MergeFailedEventArgs(DataTable table, string conflict);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    [CompilerGeneratedAttribute]
public string get_Conflict();
}
public class System.Data.MergeFailedEventHandler : MulticastDelegate {
    public MergeFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Merger : object {
    
private DataSet _dataSet;
    
private DataTable _dataTable;
    
private bool _preserveChanges;
    
private MissingSchemaAction _missingSchemaAction;
    
private bool _isStandAlonetable;
    
private bool _IgnoreNSforTableLookup;
    internal Merger(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal Merger(DataTable dataTable, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal void MergeDataSet(DataSet source);
    internal void MergeTable(DataTable src);
    private void MergeTable(DataTable src, DataTable dst);
    internal void MergeRows(DataRow[] rows);
    private DataTable MergeSchema(DataTable table);
    private void MergeTableData(DataTable src);
    private void MergeConstraints(DataSet source);
    private void MergeConstraints(DataTable table);
    private void MergeRelation(DataRelation relation);
    private void MergeExtendedProperties(PropertyCollection src, PropertyCollection dst);
    private DataKey GetSrcKey(DataTable src, DataTable dst);
}
public enum System.Data.MissingMappingAction : Enum {
    
public int value__;
    
public static MissingMappingAction Passthrough;
    
public static MissingMappingAction Ignore;
    
public static MissingMappingAction Error;
}
public class System.Data.MissingPrimaryKeyException : DataException {
    protected MissingPrimaryKeyException(SerializationInfo info, StreamingContext context);
    public MissingPrimaryKeyException(string s);
    public MissingPrimaryKeyException(string message, Exception innerException);
}
public enum System.Data.MissingSchemaAction : Enum {
    
public int value__;
    
public static MissingSchemaAction Add;
    
public static MissingSchemaAction Ignore;
    
public static MissingSchemaAction Error;
    
public static MissingSchemaAction AddWithKey;
}
internal class System.Data.NameNode : ExpressionNode {
    
internal char _open;
    
internal char _close;
    
internal string _name;
    
internal bool _found;
    
internal bool _type;
    
internal DataColumn _column;
    
internal bool IsSqlColumn { get; }
    internal NameNode(DataTable table, Char[] text, int start, int pos);
    internal NameNode(DataTable table, string name);
    internal virtual bool get_IsSqlColumn();
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal static string ParseName(Char[] text, int start, int pos);
}
internal class System.Data.NewDiffgramGen : object {
    
internal XmlDocument _doc;
    
internal DataSet _ds;
    
internal DataTable _dt;
    
internal XmlWriter _xmlw;
    
private bool _fBefore;
    
private bool _fErrors;
    
internal Hashtable _rowsOrder;
    
private ArrayList _tables;
    
private bool _writeHierarchy;
    internal NewDiffgramGen(DataSet ds);
    internal NewDiffgramGen(DataTable dt, bool writeHierarchy);
    private void CreateTableHierarchy(DataTable dt);
    private void DoAssignments(ArrayList tables);
    private bool EmptyData();
    internal void Save(XmlWriter xmlw);
    internal void Save(XmlWriter xmlw, DataTable table);
    private void GenerateTable(DataTable table);
    private void GenerateTableErrors(DataTable table);
    private void GenerateRow(DataRow row);
    private void GenerateColumn(DataRow row, DataColumn col, DataRowVersion version);
    internal static string QualifiedName(string prefix, string name);
}
internal enum System.Data.Nodes : Enum {
    
public int value__;
    
public static Nodes Noop;
    
public static Nodes Unop;
    
public static Nodes UnopSpec;
    
public static Nodes Binop;
    
public static Nodes BinopSpec;
    
public static Nodes Zop;
    
public static Nodes Call;
    
public static Nodes Const;
    
public static Nodes Name;
    
public static Nodes Paren;
    
public static Nodes Conv;
}
public class System.Data.NoNullAllowedException : DataException {
    protected NoNullAllowedException(SerializationInfo info, StreamingContext context);
    public NoNullAllowedException(string s);
    public NoNullAllowedException(string message, Exception innerException);
}
internal class System.Data.Odbc.CMDWrapper : object {
    
private OdbcStatementHandle _stmt;
    
private OdbcStatementHandle _keyinfostmt;
    
internal OdbcDescriptorHandle _hdesc;
    
internal CNativeBuffer _nativeParameterBuffer;
    
internal CNativeBuffer _dataReaderBuf;
    
private OdbcConnection _connection;
    
private bool _canceling;
    
internal bool _hasBoundColumns;
    
internal bool _ssKeyInfoModeOn;
    
internal bool _ssKeyInfoModeOff;
    
internal bool Canceling { get; internal set; }
    
internal OdbcConnection Connection { get; }
    
unknown bool HasBoundColumns {internal set; }
    
internal OdbcStatementHandle StatementHandle { get; }
    
internal OdbcStatementHandle KeyInfoStatement { get; }
    internal CMDWrapper(OdbcConnection connection);
    internal bool get_Canceling();
    internal void set_Canceling(bool value);
    internal OdbcConnection get_Connection();
    internal void set_HasBoundColumns(bool value);
    internal OdbcStatementHandle get_StatementHandle();
    internal OdbcStatementHandle get_KeyInfoStatement();
    internal void CreateKeyInfoStatementHandle();
    internal void CreateStatementHandle();
    internal void Dispose();
    private void DisposeDescriptorHandle();
    internal void DisposeStatementHandle();
    internal void DisposeKeyInfoStatementHandle();
    internal void FreeStatementHandle(STMT stmt);
    internal void FreeKeyInfoStatementHandle(STMT stmt);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal string GetDiagSqlState();
    internal void StatementErrorHandler(RetCode retcode);
    internal void UnbindStmtColumns();
}
internal class System.Data.Odbc.CNativeBuffer : DbBuffer {
    
internal short ShortLength { get; }
    internal CNativeBuffer(int initialSize);
    internal short get_ShortLength();
    internal object MarshalToManaged(int offset, SQL_C sqlctype, int cb);
    internal void MarshalToNative(int offset, object value, SQL_C sqlctype, int sizeorprecision, int valueOffset);
    internal HandleRef PtrOffset(int offset, int length);
    internal void WriteODBCDateTime(int offset, DateTime value);
}
internal class System.Data.Odbc.CStringTokenizer : object {
    
private StringBuilder _token;
    
private string _sqlstatement;
    
private char _quote;
    
private char _escape;
    
private int _len;
    
private int _idx;
    
internal int CurrentPosition { get; }
    internal CStringTokenizer(string text, char quote, char escape);
    internal int get_CurrentPosition();
    internal string NextToken();
    private int GetTokenFromBracket(int curidx);
    private int GetTokenFromQuote(int curidx);
    private bool IsValidNameChar(char ch);
    internal int FindTokenIndex(string tokenString);
    internal bool StartsWith(string tokenString);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Odbc.DbCache : object {
    
private Boolean[] _isBadValue;
    
private DbSchemaInfo[] _schema;
    
private Object[] _values;
    
private OdbcDataReader _record;
    
internal int _count;
    
internal bool _randomaccess;
    
internal object Item { get; internal set; }
    
internal int Count { get; }
    
internal Object[] Values { get; }
    internal DbCache(OdbcDataReader record, int count);
    internal object get_Item(int i);
    internal void set_Item(int i, object value);
    internal int get_Count();
    internal void InvalidateValue(int i);
    internal Object[] get_Values();
    internal object AccessIndex(int i);
    internal DbSchemaInfo GetSchema(int i);
    internal void FlushValues();
}
internal class System.Data.Odbc.DbSchemaInfo : object {
    
internal string _name;
    
internal string _typename;
    
internal Type _type;
    
internal Nullable`1<SQL_TYPE> _dbtype;
}
internal static class System.Data.Odbc.ODBC : object {
    
internal static string Pwd;
    internal static Exception ConnectionClosed();
    internal static Exception OpenConnectionNoOwner();
    internal static Exception UnknownSQLType(SQL_TYPE sqltype);
    internal static Exception ConnectionStringTooLong();
    internal static ArgumentException GetSchemaRestrictionRequired();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static InvalidOperationException NoMappingForSqlTransactionLevel(int value);
    internal static Exception NegativeArgument();
    internal static Exception CantSetPropertyOnOpenConnection();
    internal static Exception CantEnableConnectionpooling(RetCode retcode);
    internal static Exception CantAllocateEnvironmentHandle(RetCode retcode);
    internal static Exception FailedToGetDescriptorHandle(RetCode retcode);
    internal static Exception NotInTransaction();
    internal static Exception UnknownOdbcType(OdbcType odbctype);
    internal static void TraceODBC(int level, string method, RetCode retcode);
    internal static short ShortStringLength(string inputString);
}
internal static class System.Data.Odbc.ODBC32 : object {
    
internal static short SQL_COMMIT;
    
internal static short SQL_ROLLBACK;
    
internal static IntPtr SQL_AUTOCOMMIT_OFF;
    
internal static IntPtr SQL_AUTOCOMMIT_ON;
    
private static int SIGNED_OFFSET;
    
private static int UNSIGNED_OFFSET;
    
internal static short SQL_ALL_TYPES;
    
internal static IntPtr SQL_HANDLE_NULL;
    
internal static int SQL_NULL_DATA;
    
internal static int SQL_NO_TOTAL;
    
internal static int SQL_DEFAULT_PARAM;
    
internal static int COLUMN_NAME;
    
internal static int COLUMN_TYPE;
    
internal static int DATA_TYPE;
    
internal static int COLUMN_SIZE;
    
internal static int DECIMAL_DIGITS;
    
internal static int NUM_PREC_RADIX;
    
internal static IntPtr SQL_OV_ODBC3;
    
internal static int SQL_NTS;
    
internal static IntPtr SQL_CP_OFF;
    
internal static IntPtr SQL_CP_ONE_PER_DRIVER;
    
internal static IntPtr SQL_CP_ONE_PER_HENV;
    
internal static int SQL_CD_TRUE;
    
internal static int SQL_CD_FALSE;
    
internal static int SQL_DTC_DONE;
    
internal static int SQL_IS_POINTER;
    
internal static int SQL_IS_PTR;
    
internal static int MAX_CONNECTION_STRING_LENGTH;
    
internal static short SQL_DIAG_SQLSTATE;
    
internal static short SQL_RESULT_COL;
    private static ODBC32();
    internal static string RetcodeToString(RetCode retcode);
    internal static OdbcErrorCollection GetDiagErrors(string source, OdbcHandle hrHandle, RetCode retcode);
    internal static void GetDiagErrors(OdbcErrorCollection errors, string source, OdbcHandle hrHandle, RetCode retcode);
}
public class System.Data.Odbc.OdbcCommand : DbCommand {
    
private static int s_objectTypeCount;
    
internal int ObjectID;
    
private string _commandText;
    
private CommandType _commandType;
    
private int _commandTimeout;
    
private UpdateRowSource _updatedRowSource;
    
private bool _designTimeInvisible;
    
private bool _isPrepared;
    
private OdbcConnection _connection;
    
private OdbcTransaction _transaction;
    
private WeakReference _weakDataReaderReference;
    
private CMDWrapper _cmdWrapper;
    
private OdbcParameterCollection _parameterCollection;
    
private ConnectionState _cmdState;
    
internal bool Canceling { get; }
    
public string CommandText { get; public set; }
    
public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public CommandType CommandType { get; public set; }
    
public OdbcConnection Connection { get; public set; }
    
protected DbConnection DbConnection { get; protected set; }
    
protected DbParameterCollection DbParameterCollection { get; }
    
protected DbTransaction DbTransaction { get; protected set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]

public bool DesignTimeVisible { get; public set; }
    
internal bool HasParameters { get; }
    [DesignerSerializationVisibilityAttribute("2")]

public OdbcParameterCollection Parameters { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public OdbcTransaction Transaction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public UpdateRowSource UpdatedRowSource { get; public set; }
    public OdbcCommand(string cmdText);
    public OdbcCommand(string cmdText, OdbcConnection connection);
    public OdbcCommand(string cmdText, OdbcConnection connection, OdbcTransaction transaction);
    private void DisposeDeadDataReader();
    private void DisposeDataReader();
    internal void DisconnectFromDataReaderAndConnection();
    protected virtual void Dispose(bool disposing);
    internal bool get_Canceling();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    private bool ShouldSerializeCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OdbcConnection get_Connection();
    public void set_Connection(OdbcConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    internal bool get_HasParameters();
    public OdbcParameterCollection get_Parameters();
    public OdbcTransaction get_Transaction();
    public void set_Transaction(OdbcTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute);
    internal CMDWrapper GetStatementHandle();
    public virtual void Cancel();
    private sealed virtual override object System.ICloneable.Clone();
    internal bool RecoverFromConnection();
    private void CloseCommandWrapper();
    internal void CloseFromConnection();
    internal void CloseFromDataReader();
    public OdbcParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public OdbcDataReader ExecuteReader();
    public OdbcDataReader ExecuteReader(CommandBehavior behavior);
    internal OdbcDataReader ExecuteReaderFromSQLMethod(Object[] methodArguments, SQL_API method);
    private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader);
    private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader, Object[] methodArguments, SQL_API odbcApiMethod);
    public virtual object ExecuteScalar();
    internal string GetDiagSqlState();
    private void PropertyChanging();
    public virtual void Prepare();
    private void TrySetStatementAttribute(OdbcStatementHandle stmt, SQL_ATTR stmtAttribute, IntPtr value);
    private void ValidateOpenConnection(string methodName);
    private void ValidateConnectionAndTransaction(string method);
}
public class System.Data.Odbc.OdbcCommandBuilder : DbCommandBuilder {
    
public OdbcDataAdapter DataAdapter { get; public set; }
    public OdbcCommandBuilder(OdbcDataAdapter adapter);
    public OdbcDataAdapter get_DataAdapter();
    public void set_DataAdapter(OdbcDataAdapter value);
    private void OdbcRowUpdatingHandler(object sender, OdbcRowUpdatingEventArgs ruevent);
    public OdbcCommand GetInsertCommand();
    public OdbcCommand GetInsertCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetUpdateCommand();
    public OdbcCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public OdbcCommand GetDeleteCommand();
    public OdbcCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OdbcCommand command);
    private static OdbcParameter[] DeriveParametersFromStoredProcedure(OdbcConnection connection, OdbcCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OdbcConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OdbcConnection connection);
}
public class System.Data.Odbc.OdbcConnection : DbConnection {
    
private int _connectionTimeout;
    
private OdbcInfoMessageEventHandler _infoMessageEventHandler;
    
private WeakReference _weakTransaction;
    
private OdbcConnectionHandle _connectionHandle;
    
private ConnectionState _extraState;
    
private static DbConnectionFactory s_connectionFactory;
    
private DbConnectionOptions _userConnectionOptions;
    
private DbConnectionPoolGroup _poolGroup;
    
private DbConnectionInternal _innerConnection;
    
private int _closeCount;
    
internal OdbcConnectionHandle ConnectionHandle { get; internal set; }
    
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("15")]

public int ConnectionTimeout { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]

public string Database { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public string DataSource { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public string ServerVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public ConnectionState State { get; }
    
internal OdbcConnectionPoolGroupProviderInfo ProviderInfo { get; }
    
internal ConnectionState InternalState { get; }
    
internal bool IsOpen { get; }
    
internal OdbcTransaction LocalTransaction { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]

public string Driver { get; }
    
internal bool IsV3Driver { get; }
    
internal int CloseCount { get; }
    
internal DbConnectionFactory ConnectionFactory { get; }
    
internal DbConnectionOptions ConnectionOptions { get; }
    
internal DbConnectionInternal InnerConnection { get; }
    
internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    
internal DbConnectionOptions UserConnectionOptions { get; }
    public OdbcConnection(string connectionString);
    private OdbcConnection(OdbcConnection connection);
    private static OdbcConnection();
    internal OdbcConnectionHandle get_ConnectionHandle();
    internal void set_ConnectionHandle(OdbcConnectionHandle value);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public int get_ConnectionTimeout();
    public void set_ConnectionTimeout(int value);
    public virtual string get_Database();
    public virtual string get_DataSource();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal OdbcConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal ConnectionState get_InternalState();
    internal bool get_IsOpen();
    internal OdbcTransaction get_LocalTransaction();
    internal void set_LocalTransaction(OdbcTransaction value);
    public string get_Driver();
    internal bool get_IsV3Driver();
    public void add_InfoMessage(OdbcInfoMessageEventHandler value);
    public void remove_InfoMessage(OdbcInfoMessageEventHandler value);
    internal char EscapeChar(string method);
    internal string QuoteChar(string method);
    public OdbcTransaction BeginTransaction();
    public OdbcTransaction BeginTransaction(IsolationLevel isolevel);
    private void RollbackDeadTransaction();
    public virtual void ChangeDatabase(string value);
    internal void CheckState(string method);
    private sealed virtual override object System.ICloneable.Clone();
    internal bool ConnectionIsAlive(Exception innerException);
    public OdbcCommand CreateCommand();
    internal OdbcStatementHandle CreateStatementHandle();
    public virtual void Close();
    private void DisposeMe(bool disposing);
    internal string GetConnectAttrString(SQL_ATTR attribute);
    internal int GetConnectAttr(SQL_ATTR attribute, HANDLER handler);
    private string GetDiagSqlState();
    internal RetCode GetInfoInt16Unhandled(SQL_INFO info, Int16& resultValue);
    internal RetCode GetInfoInt32Unhandled(SQL_INFO info, Int32& resultValue);
    private int GetInfoInt32Unhandled(SQL_INFO infotype);
    internal string GetInfoStringUnhandled(SQL_INFO info);
    private string GetInfoStringUnhandled(SQL_INFO info, bool handleError);
    internal Exception HandleErrorNoThrow(OdbcHandle hrHandle, RetCode retcode);
    internal void HandleError(OdbcHandle hrHandle, RetCode retcode);
    public virtual void Open();
    private void OnInfoMessage(OdbcInfoMessageEventArgs args);
    public static void ReleaseObjectPool();
    internal OdbcTransaction SetStateExecuting(string method, OdbcTransaction transaction);
    internal void SetSupportedType(SQL_TYPE sqltype);
    internal void FlagRestrictedSqlBindType(SQL_TYPE sqltype);
    internal void FlagUnsupportedConnectAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedStmtAttr(SQL_ATTR Attribute);
    internal void FlagUnsupportedColAttr(SQL_DESC v3FieldId, SQL_COLUMN v2FieldId);
    internal bool SQLGetFunctions(SQL_API odbcFunction);
    internal bool TestTypeSupport(SQL_TYPE sqltype);
    internal bool TestRestrictedSqlBindType(SQL_TYPE sqltype);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    internal OdbcTransaction Open_BeginTransaction(IsolationLevel isolevel);
    internal void Open_ChangeDatabase(string value);
    internal string Open_GetServerVersion();
    private void CopyFrom(OdbcConnection connection);
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(string value);
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    public void EnlistDistributedTransaction(ITransaction transaction);
}
internal class System.Data.Odbc.OdbcConnectionFactory : DbConnectionFactory {
    
public static OdbcConnectionFactory SingletonInstance;
    
public DbProviderFactory ProviderFactory { get; }
    private static OdbcConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal class System.Data.Odbc.OdbcConnectionHandle : OdbcHandle {
    
private HandleState _handleState;
    internal OdbcConnectionHandle(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle);
    private RetCode AutoCommitOff();
    internal RetCode BeginTransaction(IsolationLevel& isolevel);
    internal RetCode CompleteTransaction(short transactionOperation);
    [ReliabilityContractAttribute("3", "1")]
private RetCode CompleteTransaction(short transactionOperation, IntPtr handle);
    private RetCode Connect(string connectionString);
    protected virtual bool ReleaseHandle();
    internal RetCode GetConnectionAttribute(SQL_ATTR attribute, Byte[] buffer, Int32& cbActual);
    internal RetCode GetFunctions(SQL_API fFunction, Int16& fExists);
    internal RetCode GetInfo2(SQL_INFO info, Byte[] buffer, Int16& cbActual);
    internal RetCode GetInfo1(SQL_INFO info, Byte[] buffer);
    internal RetCode SetConnectionAttribute2(SQL_ATTR attribute, IntPtr value, int length);
    internal RetCode SetConnectionAttribute3(SQL_ATTR attribute, string buffer, int length);
    internal RetCode SetConnectionAttribute4(SQL_ATTR attribute, IDtcTransaction transaction, int length);
}
internal class System.Data.Odbc.OdbcConnectionOpen : DbConnectionInternal {
    
internal OdbcConnection OuterConnection { get; }
    
public string ServerVersion { get; }
    internal OdbcConnectionOpen(OdbcConnection outerConnection, OdbcConnectionString connectionOptions);
    internal OdbcConnection get_OuterConnection();
    public virtual string get_ServerVersion();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel isolevel);
    internal OdbcTransaction BeginOdbcTransaction(IsolationLevel isolevel);
    public virtual void ChangeDatabase(string value);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    public virtual void EnlistTransaction(Transaction transaction);
}
internal class System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    
private string _driverName;
    
private string _driverVersion;
    
private string _quoteChar;
    
private char _escapeChar;
    
private bool _hasQuoteChar;
    
private bool _hasEscapeChar;
    
private bool _isV3Driver;
    
private int _supportedSQLTypes;
    
private int _testedSQLTypes;
    
private int _restrictedSQLBindTypes;
    
private bool _noCurrentCatalog;
    
private bool _noConnectionDead;
    
private bool _noQueryTimeout;
    
private bool _noSqlSoptSSNoBrowseTable;
    
private bool _noSqlSoptSSHiddenColumns;
    
private bool _noSqlCASSColumnKey;
    
private bool _noSqlPrimaryKeys;
    
internal string DriverName { get; internal set; }
    
internal string DriverVersion { get; internal set; }
    
internal bool HasQuoteChar { get; }
    
internal bool HasEscapeChar { get; }
    
internal string QuoteChar { get; internal set; }
    
internal char EscapeChar { get; internal set; }
    
internal bool IsV3Driver { get; internal set; }
    
internal int SupportedSQLTypes { get; internal set; }
    
internal int TestedSQLTypes { get; internal set; }
    
internal int RestrictedSQLBindTypes { get; internal set; }
    
internal bool NoCurrentCatalog { get; internal set; }
    
internal bool NoConnectionDead { get; internal set; }
    
internal bool NoQueryTimeout { get; internal set; }
    
internal bool NoSqlSoptSSNoBrowseTable { get; internal set; }
    
internal bool NoSqlSoptSSHiddenColumns { get; internal set; }
    
internal bool NoSqlCASSColumnKey { get; internal set; }
    
internal bool NoSqlPrimaryKeys { get; internal set; }
    internal string get_DriverName();
    internal void set_DriverName(string value);
    internal string get_DriverVersion();
    internal void set_DriverVersion(string value);
    internal bool get_HasQuoteChar();
    internal bool get_HasEscapeChar();
    internal string get_QuoteChar();
    internal void set_QuoteChar(string value);
    internal char get_EscapeChar();
    internal void set_EscapeChar(char value);
    internal bool get_IsV3Driver();
    internal void set_IsV3Driver(bool value);
    internal int get_SupportedSQLTypes();
    internal void set_SupportedSQLTypes(int value);
    internal int get_TestedSQLTypes();
    internal void set_TestedSQLTypes(int value);
    internal int get_RestrictedSQLBindTypes();
    internal void set_RestrictedSQLBindTypes(int value);
    internal bool get_NoCurrentCatalog();
    internal void set_NoCurrentCatalog(bool value);
    internal bool get_NoConnectionDead();
    internal void set_NoConnectionDead(bool value);
    internal bool get_NoQueryTimeout();
    internal void set_NoQueryTimeout(bool value);
    internal bool get_NoSqlSoptSSNoBrowseTable();
    internal void set_NoSqlSoptSSNoBrowseTable(bool value);
    internal bool get_NoSqlSoptSSHiddenColumns();
    internal void set_NoSqlSoptSSHiddenColumns(bool value);
    internal bool get_NoSqlCASSColumnKey();
    internal void set_NoSqlCASSColumnKey(bool value);
    internal bool get_NoSqlPrimaryKeys();
    internal void set_NoSqlPrimaryKeys(bool value);
}
internal class System.Data.Odbc.OdbcConnectionString : DbConnectionOptions {
    
private string _expandedConnectionString;
    internal OdbcConnectionString(string connectionString, bool validate);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcConnectionStringBuilder : DbConnectionStringBuilder {
    
private static String[] s_validKeywords;
    
private static Dictionary`2<string, Keywords> s_keywords;
    
private String[] _knownKeywords;
    
private string _dsn;
    
private string _driver;
    
public object Item { get; public set; }
    [DisplayNameAttribute("Driver")]

public string Driver { get; public set; }
    [DisplayNameAttribute("Dsn")]

public string Dsn { get; public set; }
    
public ICollection Keys { get; }
    private static OdbcConnectionStringBuilder();
    public OdbcConnectionStringBuilder(string connectionString);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public string get_Driver();
    public void set_Driver(string value);
    public string get_Dsn();
    public void set_Dsn(string value);
    public virtual ICollection get_Keys();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    private static string ConvertToString(object value);
    private object GetAt(Keywords index);
    public virtual bool Remove(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, string value);
    public virtual bool TryGetValue(string keyword, Object& value);
}
public class System.Data.Odbc.OdbcDataAdapter : DbDataAdapter {
    
private static object s_eventRowUpdated;
    
private static object s_eventRowUpdating;
    
private OdbcCommand _deleteCommand;
    
private OdbcCommand _insertCommand;
    
private OdbcCommand _selectCommand;
    
private OdbcCommand _updateCommand;
    
public OdbcCommand DeleteCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    
public OdbcCommand InsertCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    
public OdbcCommand SelectCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    
public OdbcCommand UpdateCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    public OdbcDataAdapter(OdbcCommand selectCommand);
    public OdbcDataAdapter(string selectCommandText, OdbcConnection selectConnection);
    public OdbcDataAdapter(string selectCommandText, string selectConnectionString);
    private OdbcDataAdapter(OdbcDataAdapter from);
    private static OdbcDataAdapter();
    public OdbcCommand get_DeleteCommand();
    public void set_DeleteCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public OdbcCommand get_InsertCommand();
    public void set_InsertCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public OdbcCommand get_SelectCommand();
    public void set_SelectCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public OdbcCommand get_UpdateCommand();
    public void set_UpdateCommand(OdbcCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public void add_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void remove_RowUpdated(OdbcRowUpdatedEventHandler value);
    public void add_RowUpdating(OdbcRowUpdatingEventHandler value);
    public void remove_RowUpdating(OdbcRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcDataReader : DbDataReader {
    
private OdbcCommand _command;
    
private int _recordAffected;
    
private FieldNameLookup _fieldNameLookup;
    
private DbCache _dataCache;
    
private HasRowsStatus _hasRows;
    
private bool _isClosed;
    
private bool _isRead;
    
private bool _isValidResult;
    
private bool _noMoreResults;
    
private bool _noMoreRows;
    
private bool _skipReadOnce;
    
private int _hiddenColumns;
    
private CommandBehavior _commandBehavior;
    
private int _row;
    
private int _column;
    
private long _sequentialBytesRead;
    
private static int s_objectTypeCount;
    
internal int ObjectID;
    
private MetaData[] _metadata;
    
private DataTable _schemaTable;
    
private string _cmdText;
    
private CMDWrapper _cmdWrapper;
    
private CNativeBuffer Buffer { get; }
    
private OdbcConnection Connection { get; }
    
internal OdbcCommand Command { get; internal set; }
    
private OdbcStatementHandle StatementHandle { get; }
    
private OdbcStatementHandle KeyInfoStatementHandle { get; }
    
internal bool IsCancelingCommand { get; }
    
internal bool IsNonCancelingCommand { get; }
    
public int Depth { get; }
    
public int FieldCount { get; }
    
public bool HasRows { get; }
    
public bool IsClosed { get; }
    
public int RecordsAffected { get; }
    
public object Item { get; }
    
public object Item { get; }
    internal OdbcDataReader(OdbcCommand command, CMDWrapper cmdWrapper, CommandBehavior commandbehavior);
    private CNativeBuffer get_Buffer();
    private OdbcConnection get_Connection();
    internal OdbcCommand get_Command();
    internal void set_Command(OdbcCommand value);
    private OdbcStatementHandle get_StatementHandle();
    private OdbcStatementHandle get_KeyInfoStatementHandle();
    internal bool IsBehavior(CommandBehavior behavior);
    internal bool get_IsCancelingCommand();
    internal bool get_IsNonCancelingCommand();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    internal RetCode FieldCountNoThrow(Int16& cColsAffected);
    public virtual bool get_IsClosed();
    private SQLLEN GetRowCount();
    internal int CalculateRecordsAffected(int cRowsAffected);
    public virtual int get_RecordsAffected();
    public virtual object get_Item(int i);
    public virtual object get_Item(string value);
    public virtual void Close();
    private void Close(bool disposing);
    protected virtual void Dispose(bool disposing);
    public virtual string GetDataTypeName(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string value);
    private int IndexOf(string value);
    private bool IsCommandBehavior(CommandBehavior condition);
    internal object GetValue(int i, TypeMap typemap);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    private TypeMap GetSqlType(int i);
    public virtual bool IsDBNull(int i);
    public virtual byte GetByte(int i);
    private object internalGetByte(int i);
    public virtual char GetChar(int i);
    private object internalGetChar(int i);
    public virtual short GetInt16(int i);
    private object internalGetInt16(int i);
    public virtual int GetInt32(int i);
    private object internalGetInt32(int i);
    public virtual long GetInt64(int i);
    private object internalGetInt64(int i);
    public virtual bool GetBoolean(int i);
    private object internalGetBoolean(int i);
    public virtual float GetFloat(int i);
    private object internalGetFloat(int i);
    public DateTime GetDate(int i);
    private object internalGetDate(int i);
    public virtual DateTime GetDateTime(int i);
    private object internalGetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    private object internalGetDecimal(int i);
    public virtual double GetDouble(int i);
    private object internalGetDouble(int i);
    public virtual Guid GetGuid(int i);
    private object internalGetGuid(int i);
    public virtual string GetString(int i);
    private object internalGetString(int i);
    public TimeSpan GetTime(int i);
    private object internalGetTime(int i);
    private void SetCurrentRowColumnInfo(int row, int column);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private long GetBytesOrChars(int i, long dataIndex, Array buffer, bool isCharsBuffer, int bufferIndex, int length);
    private int readBytesOrCharsSequentialAccess(int i, Array buffer, bool isCharsBuffer, int bufferIndex, long bytesOrCharsLength);
    private object internalGetBytes(int i);
    private SQLLEN GetColAttribute(int iColumn, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler);
    private string GetColAttributeStr(int i, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler);
    private string GetDescFieldStr(int i, SQL_DESC attribute, HANDLER handler);
    private bool QueryFieldInfo(int i, SQL_C sqlctype, Int32& cbLengthOrIndicator);
    private bool GetData(int i, SQL_C sqlctype);
    private bool GetData(int i, SQL_C sqlctype, int cb, Int32& cbLengthOrIndicator);
    public virtual bool Read();
    internal void FirstResult();
    public virtual bool NextResult();
    private bool NextResult(bool disposing, bool allresults);
    private void BuildMetaDataInfo();
    private DataTable NewSchemaTable();
    public virtual DataTable GetSchemaTable();
    internal int RetrieveKeyInfo(bool needkeyinfo, QualifiedTableName qualifiedTableName, bool quoted);
    private int RetrieveKeyInfoFromStatistics(QualifiedTableName qualifiedTableName, bool quoted);
    internal bool SameIndexColumn(string currentindexname, string indexname, int ordinal, int ncols);
    internal int GetOrdinalFromBaseColName(string columnname);
    internal int GetOrdinalFromBaseColName(string columnname, string tablename);
    internal string GetTableNameFromCommandText();
    internal void SetBaseTableNames(QualifiedTableName qualifiedTableName);
}
internal class System.Data.Odbc.OdbcDescriptorHandle : OdbcHandle {
    internal OdbcDescriptorHandle(OdbcStatementHandle statementHandle, SQL_ATTR attribute);
    internal RetCode GetDescriptionField(int i, SQL_DESC attribute, CNativeBuffer buffer, Int32& numericAttribute);
    internal RetCode SetDescriptionField1(short ordinal, SQL_DESC type, IntPtr value);
    internal RetCode SetDescriptionField2(short ordinal, SQL_DESC type, HandleRef value);
}
internal class System.Data.Odbc.OdbcEnvironment : object {
    
private static object s_globalEnvironmentHandle;
    
private static object s_globalEnvironmentHandleLock;
    private static OdbcEnvironment();
    internal static OdbcEnvironmentHandle GetGlobalEnvironmentHandle();
    internal static void ReleaseObjectPool();
}
internal class System.Data.Odbc.OdbcEnvironmentHandle : OdbcHandle {
}
public class System.Data.Odbc.OdbcError : object {
    
internal string _message;
    
internal string _state;
    
internal int _nativeerror;
    
internal string _source;
    
public string Message { get; }
    
public string SQLState { get; }
    
public int NativeError { get; }
    
public string Source { get; }
    internal OdbcError(string source, string message, string state, int nativeerror);
    public string get_Message();
    public string get_SQLState();
    public int get_NativeError();
    public string get_Source();
    internal void SetSource(string Source);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcErrorCollection : object {
    
private ArrayList _items;
    
private object System.Collections.ICollection.SyncRoot { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
public int Count { get; }
    
public OdbcError Item { get; }
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public sealed virtual int get_Count();
    public OdbcError get_Item(int i);
    internal void Add(OdbcError error);
    public sealed virtual void CopyTo(Array array, int i);
    public void CopyTo(OdbcError[] array, int i);
    public sealed virtual IEnumerator GetEnumerator();
    internal void SetSource(string Source);
}
public class System.Data.Odbc.OdbcException : DbException {
    
private OdbcErrorCollection _odbcErrors;
    
public OdbcErrorCollection Errors { get; }
    
public string Source { get; }
    internal OdbcException(string message, OdbcErrorCollection errors);
    internal static OdbcException CreateException(OdbcErrorCollection errors, RetCode retcode);
    public OdbcErrorCollection get_Errors();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public virtual string get_Source();
}
public class System.Data.Odbc.OdbcFactory : DbProviderFactory {
    
public static OdbcFactory Instance;
    private static OdbcFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
}
internal abstract class System.Data.Odbc.OdbcHandle : SafeHandle {
    
private SQL_HANDLE _handleType;
    
private OdbcHandle _parentHandle;
    
internal SQL_HANDLE HandleType { get; }
    
public bool IsInvalid { get; }
    protected OdbcHandle(SQL_HANDLE handleType, OdbcHandle parentHandle);
    internal OdbcHandle(OdbcStatementHandle parentHandle, SQL_ATTR attribute);
    internal SQL_HANDLE get_HandleType();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
    internal RetCode GetDiagnosticField(String& sqlState);
    internal RetCode GetDiagnosticRecord(short record, String& sqlState, StringBuilder message, Int32& nativeError, Int16& cchActual);
}
public class System.Data.Odbc.OdbcInfoMessageEventArgs : EventArgs {
    
private OdbcErrorCollection _errors;
    
public OdbcErrorCollection Errors { get; }
    
public string Message { get; }
    internal OdbcInfoMessageEventArgs(OdbcErrorCollection errors);
    public OdbcErrorCollection get_Errors();
    public string get_Message();
    public virtual string ToString();
}
public class System.Data.Odbc.OdbcInfoMessageEventHandler : MulticastDelegate {
    public OdbcInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public static class System.Data.Odbc.OdbcMetaDataCollectionNames : object {
    
public static string Columns;
    
public static string Indexes;
    
public static string Procedures;
    
public static string ProcedureColumns;
    
public static string ProcedureParameters;
    
public static string Tables;
    
public static string Views;
    private static OdbcMetaDataCollectionNames();
}
public static class System.Data.Odbc.OdbcMetaDataColumnNames : object {
    
public static string BooleanFalseLiteral;
    
public static string BooleanTrueLiteral;
    
public static string SQLType;
    private static OdbcMetaDataColumnNames();
}
internal class System.Data.Odbc.OdbcMetaDataFactory : DbMetaDataFactory {
    
private static string _collectionName;
    
private static string _populationMechanism;
    
private static string _prepareCollection;
    
private SchemaFunctionName[] _schemaMapping;
    
internal static Char[] KeywordSeparatorChar;
    internal OdbcMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized, OdbcConnection connection);
    private static OdbcMetaDataFactory();
    private object BooleanFromODBC(object odbcSource);
    private OdbcCommand GetCommand(OdbcConnection connection);
    private DataTable DataTableFromDataReader(IDataReader reader, string tableName);
    private void DataTableFromDataReaderDataTypes(DataTable dataTypesTable, OdbcDataReader dataReader, OdbcConnection connection);
    private DataTable DataTableFromDataReaderIndex(IDataReader reader, string tableName, string restrictionIndexName);
    private DataTable DataTableFromDataReaderProcedureColumns(IDataReader reader, string tableName, bool isColumn);
    private DataTable DataTableFromDataReaderProcedures(IDataReader reader, string tableName, short procedureType);
    private void FillOutRestrictions(int restrictionsCount, String[] restrictions, Object[] allRestrictions, string collectionName);
    private DataTable GetColumnsCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetDataSourceInformationCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetDataTypesCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetIndexCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetProcedureColumnsCollection(String[] restrictions, OdbcConnection connection, bool isColumns);
    private DataTable GetProceduresCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetReservedWordsCollection(String[] restrictions, OdbcConnection connection);
    private DataTable GetTablesCollection(String[] restrictions, OdbcConnection connection, bool isTables);
    private bool IncludeIndexRow(object rowIndexName, string restrictionIndexName, short rowIndexType);
    private DataTable NewDataTableFromReader(IDataReader reader, Object[]& values, string tableName);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
public class System.Data.Odbc.OdbcParameter : DbParameter {
    
private bool _hasChanged;
    
private bool _userSpecifiedType;
    
private TypeMap _typemap;
    
private TypeMap _bindtype;
    
private string _parameterName;
    
private byte _precision;
    
private byte _scale;
    
private bool _hasScale;
    
private SQL_C _boundSqlCType;
    
private SQL_TYPE _boundParameterType;
    
private int _boundSize;
    
private int _boundScale;
    
private IntPtr _boundBuffer;
    
private IntPtr _boundIntbuffer;
    
private TypeMap _originalbindtype;
    
private byte _internalPrecision;
    
private bool _internalShouldSerializeSize;
    
private int _internalSize;
    
private ParameterDirection _internalDirection;
    
private byte _internalScale;
    
private int _internalOffset;
    
internal bool _internalUserSpecifiedType;
    
private object _internalValue;
    
private int _preparedOffset;
    
private int _preparedSize;
    
private int _preparedBufferSize;
    
private object _preparedValue;
    
private int _preparedIntOffset;
    
private int _preparedValueOffset;
    
private SQL_C _prepared_Sql_C_Type;
    
private object _value;
    
private object _parent;
    
private ParameterDirection _direction;
    
private int _size;
    
private int _offset;
    
private string _sourceColumn;
    
private DataRowVersion _sourceVersion;
    
private bool _sourceColumnNullMapping;
    
private bool _isNullable;
    
private object _coercedValue;
    
public DbType DbType { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]

public OdbcType OdbcType { get; public set; }
    
unknown bool HasChanged {internal set; }
    
internal bool UserSpecifiedType { get; }
    
public string ParameterName { get; public set; }
    
public byte Precision { get; public set; }
    
internal byte PrecisionInternal { get; internal set; }
    
public byte Scale { get; public set; }
    
internal byte ScaleInternal { get; internal set; }
    
public object Value { get; public set; }
    
private object CoercedValue { get; private set; }
    
public ParameterDirection Direction { get; public set; }
    
public bool IsNullable { get; public set; }
    
public int Offset { get; public set; }
    
public int Size { get; public set; }
    
public string SourceColumn { get; public set; }
    
public bool SourceColumnNullMapping { get; public set; }
    
public DataRowVersion SourceVersion { get; public set; }
    public OdbcParameter(string name, object value);
    public OdbcParameter(string name, OdbcType type);
    public OdbcParameter(string name, OdbcType type, int size);
    public OdbcParameter(string name, OdbcType type, int size, string sourcecolumn);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    [EditorBrowsableAttribute("2")]
public OdbcParameter(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    private OdbcParameter(OdbcParameter source);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    public OdbcType get_OdbcType();
    public void set_OdbcType(OdbcType value);
    public void ResetOdbcType();
    internal void set_HasChanged(bool value);
    internal bool get_UserSpecifiedType();
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    private bool ShouldSerializePrecision();
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    private bool ShouldSerializeScale(byte scale);
    private int GetColumnSize(object value, int offset, int ordinal);
    private int GetValueSize(object value, int offset);
    private int GetParameterSize(object value, int offset, int ordinal);
    private byte GetParameterPrecision(object value);
    private byte GetParameterScale(object value);
    private sealed virtual override object System.ICloneable.Clone();
    private void CopyParameterInternal();
    private void CloneHelper(OdbcParameter destination);
    internal void ClearBinding();
    internal void PrepareForBind(OdbcCommand command, short ordinal, Int32& parameterBufferSize);
    internal void Bind(OdbcStatementHandle hstmt, OdbcCommand command, short ordinal, CNativeBuffer parameterBuffer, bool allowReentrance);
    internal void GetOutputValue(CNativeBuffer parameterBuffer);
    private object ProcessAndGetParameterValue();
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal void SetInputValue(object value, SQL_C sql_c_type, int cbsize, int sizeorprecision, int offset, CNativeBuffer parameterBuffer);
    private SQL_PARAM SqlDirectionFromParameterDirection();
    public virtual object get_Value();
    public virtual void set_Value(object value);
    private byte ValuePrecision(object value);
    private byte ValueScale(object value);
    private int ValueSize(object value);
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private bool ShouldSerializeSize();
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private void CloneHelperCore(OdbcParameter destination);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
    private byte ValuePrecisionCore(object value);
    private byte ValueScaleCore(object value);
    private int ValueSizeCore(object value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Odbc.OdbcParameterCollection : DbParameterCollection {
    
private bool _rebindCollection;
    
private static Type s_itemType;
    
private List`1<OdbcParameter> _items;
    
internal bool RebindCollection { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public OdbcParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]

public OdbcParameter Item { get; public set; }
    
public int Count { get; }
    
private List`1<OdbcParameter> InnerList { get; }
    
public bool IsFixedSize { get; }
    
public bool IsReadOnly { get; }
    
public bool IsSynchronized { get; }
    
public object SyncRoot { get; }
    private static OdbcParameterCollection();
    internal bool get_RebindCollection();
    internal void set_RebindCollection(bool value);
    public OdbcParameter get_Item(int index);
    public void set_Item(int index, OdbcParameter value);
    public OdbcParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OdbcParameter value);
    public OdbcParameter Add(OdbcParameter value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Add(String parameterName, Object value) has been deprecated.  Use AddWithValue(String parameterName, Object value).  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public OdbcParameter Add(string parameterName, object value);
    public OdbcParameter AddWithValue(string parameterName, object value);
    public OdbcParameter Add(string parameterName, OdbcType odbcType);
    public OdbcParameter Add(string parameterName, OdbcType odbcType, int size);
    public OdbcParameter Add(string parameterName, OdbcType odbcType, int size, string sourceColumn);
    public void AddRange(OdbcParameter[] values);
    internal void Bind(OdbcCommand command, CMDWrapper cmdWrapper, CNativeBuffer parameterBuffer);
    internal int CalcParameterBufferSize(OdbcCommand command);
    internal void ClearBindings();
    public virtual bool Contains(string value);
    public bool Contains(OdbcParameter value);
    public void CopyTo(OdbcParameter[] array, int index);
    private void OnChange();
    internal void GetOutputValues(CMDWrapper cmdWrapper);
    public int IndexOf(OdbcParameter value);
    public void Insert(int index, OdbcParameter value);
    public void Remove(OdbcParameter value);
    public virtual int get_Count();
    private List`1<OdbcParameter> get_InnerList();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(IEnumerable items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private void ValidateType(object value);
}
public class System.Data.Odbc.OdbcPermission : DBDataPermission {
    public OdbcPermission(PermissionState state);
    [ObsoleteAttribute("OdbcPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OdbcPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public OdbcPermission(PermissionState state, bool allowBlankPassword);
    private OdbcPermission(OdbcPermission permission);
    internal OdbcPermission(OdbcPermissionAttribute permissionAttribute);
    internal OdbcPermission(OdbcConnectionString constr);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.Odbc.OdbcPermissionAttribute : DBDataPermissionAttribute {
    public OdbcPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
internal class System.Data.Odbc.OdbcReferenceCollection : DbReferenceCollection {
    
internal static int Closing;
    
internal static int Recover;
    
internal static int CommandTag;
    public virtual void Add(object value, int tag);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
public class System.Data.Odbc.OdbcRowUpdatedEventArgs : RowUpdatedEventArgs {
    
public OdbcCommand Command { get; }
    public OdbcRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
}
public class System.Data.Odbc.OdbcRowUpdatedEventHandler : MulticastDelegate {
    public OdbcRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.Odbc.OdbcRowUpdatingEventArgs : RowUpdatingEventArgs {
    
public OdbcCommand Command { get; public set; }
    
protected IDbCommand BaseCommand { get; protected set; }
    public OdbcRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OdbcCommand get_Command();
    public void set_Command(OdbcCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.Odbc.OdbcRowUpdatingEventHandler : MulticastDelegate {
    public OdbcRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OdbcRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OdbcRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Odbc.OdbcStatementHandle : OdbcHandle {
    internal OdbcStatementHandle(OdbcConnectionHandle connectionHandle);
    internal RetCode BindColumn2(int columnNumber, SQL_C targetType, HandleRef buffer, IntPtr length, IntPtr srLen_or_Ind);
    internal RetCode BindColumn3(int columnNumber, SQL_C targetType, IntPtr srLen_or_Ind);
    internal RetCode BindParameter(short ordinal, short parameterDirection, SQL_C sqlctype, SQL_TYPE sqltype, IntPtr cchSize, IntPtr scale, HandleRef buffer, IntPtr bufferLength, HandleRef intbuffer);
    internal RetCode Cancel();
    internal RetCode CloseCursor();
    internal RetCode ColumnAttribute(int columnNumber, short fieldIdentifier, CNativeBuffer characterAttribute, Int16& stringLength, SQLLEN& numericAttribute);
    internal RetCode Columns(string tableCatalog, string tableSchema, string tableName, string columnName);
    internal RetCode Execute();
    internal RetCode ExecuteDirect(string commandText);
    internal RetCode Fetch();
    internal RetCode FreeStatement(STMT stmt);
    internal RetCode GetData(int index, SQL_C sqlctype, CNativeBuffer buffer, int cb, IntPtr& cbActual);
    internal RetCode GetStatementAttribute(SQL_ATTR attribute, IntPtr& value, Int32& stringLength);
    internal RetCode GetTypeInfo(short fSqlType);
    internal RetCode MoreResults();
    internal RetCode NumberOfResultColumns(Int16& columnsAffected);
    internal RetCode Prepare(string commandText);
    internal RetCode PrimaryKeys(string catalogName, string schemaName, string tableName);
    internal RetCode Procedures(string procedureCatalog, string procedureSchema, string procedureName);
    internal RetCode ProcedureColumns(string procedureCatalog, string procedureSchema, string procedureName, string columnName);
    internal RetCode RowCount(SQLLEN& rowCount);
    internal RetCode SetStatementAttribute(SQL_ATTR attribute, IntPtr value, SQL_IS stringLength);
    internal RetCode SpecialColumns(string quotedTable);
    internal RetCode Statistics(string tableCatalog, string tableSchema, string tableName, short unique, short accuracy);
    internal RetCode Statistics(string tableName);
    internal RetCode Tables(string tableCatalog, string tableSchema, string tableName, string tableType);
}
public class System.Data.Odbc.OdbcTransaction : DbTransaction {
    
private OdbcConnection _connection;
    
private IsolationLevel _isolevel;
    
private OdbcConnectionHandle _handle;
    
public OdbcConnection Connection { get; }
    
protected DbConnection DbConnection { get; }
    
public IsolationLevel IsolationLevel { get; }
    internal OdbcTransaction(OdbcConnection connection, IsolationLevel isolevel, OdbcConnectionHandle handle);
    public OdbcConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
}
public enum System.Data.Odbc.OdbcType : Enum {
    
public int value__;
    
public static OdbcType BigInt;
    
public static OdbcType Binary;
    
public static OdbcType Bit;
    
public static OdbcType Char;
    
public static OdbcType DateTime;
    
public static OdbcType Decimal;
    
public static OdbcType Numeric;
    
public static OdbcType Double;
    
public static OdbcType Image;
    
public static OdbcType Int;
    
public static OdbcType NChar;
    
public static OdbcType NText;
    
public static OdbcType NVarChar;
    
public static OdbcType Real;
    
public static OdbcType UniqueIdentifier;
    
public static OdbcType SmallDateTime;
    
public static OdbcType SmallInt;
    
public static OdbcType Text;
    
public static OdbcType Timestamp;
    
public static OdbcType TinyInt;
    
public static OdbcType VarBinary;
    
public static OdbcType VarChar;
    
public static OdbcType Date;
    
public static OdbcType Time;
}
internal class System.Data.Odbc.SQLLEN : ValueType {
    
private IntPtr _value;
    internal SQLLEN(int value);
    internal SQLLEN(long value);
    internal SQLLEN(IntPtr value);
    public static SQLLEN op_Implicit(int value);
    public static SQLLEN op_Explicit(long value);
    public static int op_Implicit(SQLLEN value);
    public static long op_Explicit(SQLLEN value);
    public long ToInt64();
}
internal class System.Data.Odbc.TypeMap : object {
    
private static TypeMap s_bigInt;
    
private static TypeMap s_binary;
    
private static TypeMap s_bit;
    
internal static TypeMap _Char;
    
private static TypeMap s_dateTime;
    
private static TypeMap s_date;
    
private static TypeMap s_time;
    
private static TypeMap s_decimal;
    
private static TypeMap s_double;
    
internal static TypeMap _Image;
    
private static TypeMap s_int;
    
private static TypeMap s_NChar;
    
internal static TypeMap _NText;
    
private static TypeMap s_numeric;
    
internal static TypeMap _NVarChar;
    
private static TypeMap s_real;
    
private static TypeMap s_uniqueId;
    
private static TypeMap s_smallDT;
    
private static TypeMap s_smallInt;
    
internal static TypeMap _Text;
    
private static TypeMap s_timestamp;
    
private static TypeMap s_tinyInt;
    
private static TypeMap s_varBinary;
    
internal static TypeMap _VarChar;
    
private static TypeMap s_variant;
    
private static TypeMap s_UDT;
    
private static TypeMap s_XML;
    
internal OdbcType _odbcType;
    
internal DbType _dbType;
    
internal Type _type;
    
internal SQL_TYPE _sql_type;
    
internal SQL_C _sql_c;
    
internal SQL_C _param_sql_c;
    
internal int _bufferSize;
    
internal int _columnSize;
    
internal bool _signType;
    private TypeMap(OdbcType odbcType, DbType dbType, Type type, SQL_TYPE sql_type, SQL_C sql_c, SQL_C param_sql_c, int bsize, int csize, bool signType);
    private static TypeMap();
    internal static TypeMap FromOdbcType(OdbcType odbcType);
    internal static TypeMap FromDbType(DbType dbType);
    internal static TypeMap FromSystemType(Type dataType);
    internal static TypeMap FromSqlType(SQL_TYPE sqltype);
    internal static TypeMap UpgradeSignedType(TypeMap typeMap, bool unsigned);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbCommand : DbCommand {
    
public string CommandText { get; public set; }
    
public int CommandTimeout { get; public set; }
    
public CommandType CommandType { get; public set; }
    
public OleDbConnection Connection { get; public set; }
    
protected DbConnection DbConnection { get; protected set; }
    
protected DbParameterCollection DbParameterCollection { get; }
    
protected DbTransaction DbTransaction { get; protected set; }
    
public bool DesignTimeVisible { get; public set; }
    
public OleDbParameterCollection Parameters { get; }
    
public OleDbTransaction Transaction { get; public set; }
    
public UpdateRowSource UpdatedRowSource { get; public set; }
    public OleDbCommand(string cmdText);
    public OleDbCommand(string cmdText, OleDbConnection connection);
    public OleDbCommand(string cmdText, OleDbConnection connection, OleDbTransaction transaction);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public OleDbConnection get_Connection();
    public void set_Connection(OleDbConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    protected virtual DbParameterCollection get_DbParameterCollection();
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public OleDbParameterCollection get_Parameters();
    public OleDbTransaction get_Transaction();
    public void set_Transaction(OleDbTransaction value);
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public virtual void Cancel();
    public OleDbCommand Clone();
    protected virtual DbParameter CreateDbParameter();
    public OleDbParameter CreateParameter();
    protected virtual void Dispose(bool disposing);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public virtual int ExecuteNonQuery();
    public OleDbDataReader ExecuteReader();
    public OleDbDataReader ExecuteReader(CommandBehavior behavior);
    public virtual object ExecuteScalar();
    public virtual void Prepare();
    public void ResetCommandTimeout();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    private sealed virtual override object System.ICloneable.Clone();
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbCommandBuilder : DbCommandBuilder {
    
public OleDbDataAdapter DataAdapter { get; public set; }
    public OleDbCommandBuilder(OleDbDataAdapter adapter);
    public OleDbDataAdapter get_DataAdapter();
    public void set_DataAdapter(OleDbDataAdapter value);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    public static void DeriveParameters(OleDbCommand command);
    public OleDbCommand GetDeleteCommand();
    public OleDbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public OleDbCommand GetInsertCommand();
    public OleDbCommand GetInsertCommand(bool useColumnsForParameterNames);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    public OleDbCommand GetUpdateCommand();
    public OleDbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public string QuoteIdentifier(string unquotedIdentifier, OleDbConnection connection);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public string UnquoteIdentifier(string quotedIdentifier, OleDbConnection connection);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbConnection : DbConnection {
    [CompilerGeneratedAttribute]

private OleDbInfoMessageEventHandler InfoMessage;
    
public string ConnectionString { get; public set; }
    
public int ConnectionTimeout { get; }
    
public string Database { get; }
    
public string DataSource { get; }
    
public string Provider { get; }
    
public string ServerVersion { get; }
    
public ConnectionState State { get; }
    public OleDbConnection(string connectionString);
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public string get_Provider();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public OleDbTransaction BeginTransaction();
    public OleDbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string value);
    public virtual void Close();
    public OleDbCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    public void EnlistDistributedTransaction(ITransaction transaction);
    public virtual void EnlistTransaction(Transaction transaction);
    public DataTable GetOleDbSchemaTable(Guid schema, Object[] restrictions);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    public virtual void Open();
    public static void ReleaseObjectPool();
    public void ResetState();
    [CompilerGeneratedAttribute]
public void add_InfoMessage(OleDbInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(OleDbInfoMessageEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
}
[MonoTODOAttribute("OleDb is not implemented.")]
internal class System.Data.OleDb.OleDbConnectionString : DbConnectionOptions {
    internal OleDbConnectionString(string connectionString, bool validate);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbConnectionStringBuilder : DbConnectionStringBuilder {
    
public string DataSource { get; public set; }
    
public string FileName { get; public set; }
    
public object Item { get; public set; }
    
public ICollection Keys { get; public set; }
    
public int OleDbServices { get; public set; }
    
public bool PersistSecurityInfo { get; public set; }
    
public string Provider { get; public set; }
    public OleDbConnectionStringBuilder(string connectionString);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public object get_Item();
    public void set_Item(object value);
    public virtual ICollection get_Keys();
    public void set_Keys(ICollection value);
    public int get_OleDbServices();
    public void set_OleDbServices(int value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    public virtual bool Remove(string keyword);
    public bool TryGetValue(string keyword, object value);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbDataAdapter : DbDataAdapter {
    [CompilerGeneratedAttribute]

private OleDbRowUpdatedEventHandler RowUpdated;
    [CompilerGeneratedAttribute]

private OleDbRowUpdatingEventHandler RowUpdating;
    
public OleDbCommand DeleteCommand { get; public set; }
    
public OleDbCommand InsertCommand { get; public set; }
    
public OleDbCommand SelectCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    
private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    
private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    
public OleDbCommand UpdateCommand { get; public set; }
    public OleDbDataAdapter(OleDbCommand selectCommand);
    public OleDbDataAdapter(string selectCommandText, OleDbConnection selectConnection);
    public OleDbDataAdapter(string selectCommandText, string selectConnectionString);
    public OleDbCommand get_DeleteCommand();
    public void set_DeleteCommand(OleDbCommand value);
    public OleDbCommand get_InsertCommand();
    public void set_InsertCommand(OleDbCommand value);
    public OleDbCommand get_SelectCommand();
    public void set_SelectCommand(OleDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public OleDbCommand get_UpdateCommand();
    public void set_UpdateCommand(OleDbCommand value);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public int Fill(DataSet dataSet, object ADODBRecordSet, string srcTable);
    public int Fill(DataTable dataTable, object ADODBRecordSet);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    [CompilerGeneratedAttribute]
public void add_RowUpdated(OleDbRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdated(OleDbRowUpdatedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_RowUpdating(OleDbRowUpdatingEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_RowUpdating(OleDbRowUpdatingEventHandler value);
    private sealed virtual override object System.ICloneable.Clone();
}
[MonoTODOAttribute("OleDb is not implemented.")]
[DefaultMemberAttribute("Item")]
public class System.Data.OleDb.OleDbDataReader : DbDataReader {
    
public int Depth { get; }
    
public int FieldCount { get; }
    
public bool HasRows { get; }
    
public bool IsClosed { get; }
    
public int RecordsAffected { get; }
    
public int VisibleFieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public virtual void Close();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public OleDbDataReader GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public virtual string GetDataTypeName(int index);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int index);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int index);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int ordinal);
    public TimeSpan GetTimeSpan(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual object get_Item(int index);
    public virtual object get_Item(string name);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbEnumerator : object {
    public DataTable GetElements();
    public static OleDbDataReader GetEnumerator(Type type);
    public static OleDbDataReader GetRootEnumerator();
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbError : object {
    
public string Message { get; }
    
public int NativeError { get; }
    
public string Source { get; }
    
public string SQLState { get; }
    public string get_Message();
    public int get_NativeError();
    public string get_Source();
    public string get_SQLState();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbErrorCollection : object {
    
public int Count { get; }
    
public OleDbError Item { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    public sealed virtual int get_Count();
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(OleDbError[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public OleDbError get_Item(int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbException : DbException {
    
public int ErrorCode { get; }
    
public OleDbErrorCollection Errors { get; }
    public virtual int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbFactory : DbProviderFactory {
    
public static OleDbFactory Instance;
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbInfoMessageEventArgs : EventArgs {
    
public int ErrorCode { get; }
    
public OleDbErrorCollection Errors { get; }
    
public string Message { get; }
    
public string Source { get; }
    public int get_ErrorCode();
    public OleDbErrorCollection get_Errors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class System.Data.OleDb.OleDbInfoMessageEventHandler : MulticastDelegate {
    public OleDbInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public enum System.Data.OleDb.OleDbLiteral : Enum {
    
public int value__;
    
public static OleDbLiteral Binary_Literal;
    
public static OleDbLiteral Catalog_Name;
    
public static OleDbLiteral Catalog_Separator;
    
public static OleDbLiteral Char_Literal;
    
public static OleDbLiteral Column_Alias;
    
public static OleDbLiteral Column_Name;
    
public static OleDbLiteral Correlation_Name;
    
public static OleDbLiteral Cube_Name;
    
public static OleDbLiteral Cursor_Name;
    
public static OleDbLiteral Dimension_Name;
    
public static OleDbLiteral Escape_Percent_Prefix;
    
public static OleDbLiteral Escape_Percent_Suffix;
    
public static OleDbLiteral Escape_Underscore_Prefix;
    
public static OleDbLiteral Escape_Underscore_Suffix;
    
public static OleDbLiteral Hierarchy_Name;
    
public static OleDbLiteral Index_Name;
    
public static OleDbLiteral Invalid;
    
public static OleDbLiteral Level_Name;
    
public static OleDbLiteral Like_Percent;
    
public static OleDbLiteral Like_Underscore;
    
public static OleDbLiteral Member_Name;
    
public static OleDbLiteral Procedure_Name;
    
public static OleDbLiteral Property_Name;
    
public static OleDbLiteral Quote_Prefix;
    
public static OleDbLiteral Quote_Suffix;
    
public static OleDbLiteral Schema_Name;
    
public static OleDbLiteral Schema_Separator;
    
public static OleDbLiteral Table_Name;
    
public static OleDbLiteral Text_Command;
    
public static OleDbLiteral User_Name;
    
public static OleDbLiteral View_Name;
}
[MonoTODOAttribute("OleDb is not implemented.")]
public static class System.Data.OleDb.OleDbMetaDataCollectionNames : object {
    
public static string Catalogs;
    
public static string Collations;
    
public static string Columns;
    
public static string Indexes;
    
public static string ProcedureColumns;
    
public static string ProcedureParameters;
    
public static string Procedures;
    
public static string Tables;
    
public static string Views;
}
[MonoTODOAttribute("OleDb is not implemented.")]
public static class System.Data.OleDb.OleDbMetaDataColumnNames : object {
    
public static string BooleanFalseLiteral;
    
public static string BooleanTrueLiteral;
    
public static string DateTimeDigits;
    
public static string NativeDataType;
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbParameter : DbParameter {
    
public DbType DbType { get; public set; }
    
public ParameterDirection Direction { get; public set; }
    
public bool IsNullable { get; public set; }
    
public int Offset { get; public set; }
    
public OleDbType OleDbType { get; public set; }
    
public string ParameterName { get; public set; }
    
public byte Precision { get; public set; }
    
public byte Scale { get; public set; }
    
public int Size { get; public set; }
    
public string SourceColumn { get; public set; }
    
public bool SourceColumnNullMapping { get; public set; }
    
public DataRowVersion SourceVersion { get; public set; }
    
public object Value { get; public set; }
    public OleDbParameter(string name, OleDbType dataType);
    public OleDbParameter(string name, OleDbType dataType, int size);
    public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value);
    public OleDbParameter(string parameterName, OleDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    public OleDbParameter(string name, OleDbType dataType, int size, string srcColumn);
    public OleDbParameter(string name, object value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public OleDbType get_OleDbType();
    public void set_OleDbType(OleDbType value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public sealed virtual byte get_Precision();
    public sealed virtual void set_Precision(byte value);
    public sealed virtual byte get_Scale();
    public sealed virtual void set_Scale(byte value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public virtual void ResetDbType();
    public virtual string ToString();
    private sealed virtual override object System.ICloneable.Clone();
    public void ResetOleDbType();
}
[DefaultMemberAttribute("Item")]
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbParameterCollection : DbParameterCollection {
    
public int Count { get; }
    
public bool IsFixedSize { get; }
    
public bool IsReadOnly { get; }
    
public bool IsSynchronized { get; }
    
public OleDbParameter Item { get; public set; }
    
public OleDbParameter Item { get; public set; }
    
public object SyncRoot { get; }
    public OleDbParameter Add(OleDbParameter value);
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size);
    public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size, string sourceColumn);
    public OleDbParameter Add(string parameterName, object value);
    public virtual void AddRange(Array values);
    public void AddRange(OleDbParameter[] values);
    public OleDbParameter AddWithValue(string parameterName, object value);
    public virtual void Clear();
    public bool Contains(OleDbParameter value);
    public virtual bool Contains(object value);
    public virtual bool Contains(string value);
    public virtual void CopyTo(Array array, int index);
    public void CopyTo(OleDbParameter[] array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    public int IndexOf(OleDbParameter value);
    public virtual int IndexOf(object value);
    public virtual int IndexOf(string parameterName);
    public void Insert(int index, OleDbParameter value);
    public virtual void Insert(int index, object value);
    public void Remove(OleDbParameter value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public OleDbParameter get_Item(int index);
    public void set_Item(int index, OleDbParameter value);
    public OleDbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, OleDbParameter value);
    public virtual object get_SyncRoot();
}
public class System.Data.OleDb.OleDbPermission : DBDataPermission {
    
private String[] _providerRestriction;
    
private string _providers;
    [ObsoleteAttribute("Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]

public string Provider { get; public set; }
    public OleDbPermission(PermissionState state);
    [ObsoleteAttribute("OleDbPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the OleDbPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public OleDbPermission(PermissionState state, bool allowBlankPassword);
    private OleDbPermission(OleDbPermission permission);
    internal OleDbPermission(OleDbPermissionAttribute permissionAttribute);
    internal OleDbPermission(OleDbConnectionString constr);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.OleDb.OleDbPermissionAttribute : DBDataPermissionAttribute {
    
private string _providers;
    [ObsoleteAttribute("Provider property has been deprecated.  Use the Add method.  http://go.microsoft.com/fwlink/?linkid=14202")]
[BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]

public string Provider { get; public set; }
    public OleDbPermissionAttribute(SecurityAction action);
    public string get_Provider();
    public void set_Provider(string value);
    public virtual IPermission CreatePermission();
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbRowUpdatedEventArgs : RowUpdatedEventArgs {
    
public OleDbCommand Command { get; }
    public OleDbRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public OleDbCommand get_Command();
}
public class System.Data.OleDb.OleDbRowUpdatedEventHandler : MulticastDelegate {
    public OleDbRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbRowUpdatingEventArgs : RowUpdatingEventArgs {
    
protected IDbCommand BaseCommand { get; protected set; }
    
public OleDbCommand Command { get; public set; }
    public OleDbRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public OleDbCommand get_Command();
    public void set_Command(OleDbCommand value);
}
public class System.Data.OleDb.OleDbRowUpdatingEventHandler : MulticastDelegate {
    public OleDbRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, OleDbRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, OleDbRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbSchemaGuid : object {
    
public static Guid Assertions;
    
public static Guid Catalogs;
    
public static Guid Character_Sets;
    
public static Guid Check_Constraints;
    
public static Guid Check_Constraints_By_Table;
    
public static Guid Collations;
    
public static Guid Column_Domain_Usage;
    
public static Guid Column_Privileges;
    
public static Guid Columns;
    
public static Guid Constraint_Column_Usage;
    
public static Guid Constraint_Table_Usage;
    
public static Guid DbInfoKeywords;
    
public static Guid DbInfoLiterals;
    
public static Guid Foreign_Keys;
    
public static Guid Indexes;
    
public static Guid Key_Column_Usage;
    
public static Guid Primary_Keys;
    
public static Guid Procedure_Columns;
    
public static Guid Procedure_Parameters;
    
public static Guid Procedures;
    
public static Guid Provider_Types;
    
public static Guid Referential_Constraints;
    
public static Guid SchemaGuids;
    
public static Guid Schemata;
    
public static Guid Sql_Languages;
    
public static Guid Statistics;
    
public static Guid Table_Constraints;
    
public static Guid Table_Privileges;
    
public static Guid Table_Statistics;
    
public static Guid Tables;
    
public static Guid Tables_Info;
    
public static Guid Translations;
    
public static Guid Trustee;
    
public static Guid Usage_Privileges;
    
public static Guid View_Column_Usage;
    
public static Guid View_Table_Usage;
    
public static Guid Views;
}
[MonoTODOAttribute("OleDb is not implemented.")]
public class System.Data.OleDb.OleDbTransaction : DbTransaction {
    
public OleDbConnection Connection { get; }
    
protected DbConnection DbConnection { get; }
    
public IsolationLevel IsolationLevel { get; }
    public OleDbConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    public virtual IsolationLevel get_IsolationLevel();
    public OleDbTransaction Begin();
    public OleDbTransaction Begin(IsolationLevel isolevel);
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
}
public enum System.Data.OleDb.OleDbType : Enum {
    
public int value__;
    
public static OleDbType BigInt;
    
public static OleDbType Binary;
    
public static OleDbType Boolean;
    
public static OleDbType BSTR;
    
public static OleDbType Char;
    
public static OleDbType Currency;
    
public static OleDbType Date;
    
public static OleDbType DBDate;
    
public static OleDbType DBTime;
    
public static OleDbType DBTimeStamp;
    
public static OleDbType Decimal;
    
public static OleDbType Double;
    
public static OleDbType Empty;
    
public static OleDbType Error;
    
public static OleDbType Filetime;
    
public static OleDbType Guid;
    
public static OleDbType IDispatch;
    
public static OleDbType Integer;
    
public static OleDbType IUnknown;
    
public static OleDbType LongVarBinary;
    
public static OleDbType LongVarChar;
    
public static OleDbType LongVarWChar;
    
public static OleDbType Numeric;
    
public static OleDbType PropVariant;
    
public static OleDbType Single;
    
public static OleDbType SmallInt;
    
public static OleDbType TinyInt;
    
public static OleDbType UnsignedBigInt;
    
public static OleDbType UnsignedInt;
    
public static OleDbType UnsignedSmallInt;
    
public static OleDbType UnsignedTinyInt;
    
public static OleDbType VarBinary;
    
public static OleDbType VarChar;
    
public static OleDbType Variant;
    
public static OleDbType VarNumeric;
    
public static OleDbType VarWChar;
    
public static OleDbType WChar;
}
public class System.Data.OperationAbortedException : SystemException {
    private OperationAbortedException(string message, Exception innerException);
    internal static OperationAbortedException Aborted(Exception inner);
}
internal class System.Data.OperatorInfo : object {
    
internal Nodes _type;
    
internal int _op;
    
internal int _priority;
    internal OperatorInfo(Nodes type, int op, int pri);
}
internal class System.Data.Operators : object {
    
internal static int Noop;
    
internal static int Negative;
    
internal static int UnaryPlus;
    
internal static int Not;
    
internal static int BetweenAnd;
    
internal static int In;
    
internal static int Between;
    
internal static int EqualTo;
    
internal static int GreaterThen;
    
internal static int LessThen;
    
internal static int GreaterOrEqual;
    
internal static int LessOrEqual;
    
internal static int NotEqual;
    
internal static int Is;
    
internal static int Like;
    
internal static int Plus;
    
internal static int Minus;
    
internal static int Multiply;
    
internal static int Divide;
    
internal static int Modulo;
    
internal static int BitwiseAnd;
    
internal static int BitwiseOr;
    
internal static int BitwiseXor;
    
internal static int BitwiseNot;
    
internal static int And;
    
internal static int Or;
    
internal static int Proc;
    
internal static int Iff;
    
internal static int Qual;
    
internal static int Dot;
    
internal static int Null;
    
internal static int True;
    
internal static int False;
    
internal static int Date;
    
internal static int GenUniqueId;
    
internal static int GenGUID;
    
internal static int GUID;
    
internal static int IsNot;
    
internal static int priStart;
    
internal static int priSubstr;
    
internal static int priParen;
    
internal static int priLow;
    
internal static int priImp;
    
internal static int priEqv;
    
internal static int priXor;
    
internal static int priOr;
    
internal static int priAnd;
    
internal static int priNot;
    
internal static int priIs;
    
internal static int priBetweenInLike;
    
internal static int priBetweenAnd;
    
internal static int priRelOp;
    
internal static int priConcat;
    
internal static int priContains;
    
internal static int priPlusMinus;
    
internal static int priMod;
    
internal static int priIDiv;
    
internal static int priMulDiv;
    
internal static int priNeg;
    
internal static int priExp;
    
internal static int priProc;
    
internal static int priDot;
    
internal static int priMax;
    
private static Int32[] s_priority;
    
private static String[] s_looks;
    private static Operators();
    internal static bool IsArithmetical(int op);
    internal static bool IsLogical(int op);
    internal static bool IsRelational(int op);
    internal static int Priority(int op);
    internal static string ToString(int op);
}
public enum System.Data.ParameterDirection : Enum {
    
public int value__;
    
public static ParameterDirection Input;
    
public static ParameterDirection Output;
    
public static ParameterDirection InputOutput;
    
public static ParameterDirection ReturnValue;
}
internal class System.Data.ParentForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    
private DataTable _table;
    public ParentForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.PrimaryKeyTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[FlagsAttribute]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("PropertyAttributes has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202")]
public enum System.Data.PropertyAttributes : Enum {
    
public int value__;
    
public static PropertyAttributes NotSupported;
    
public static PropertyAttributes Required;
    
public static PropertyAttributes Optional;
    
public static PropertyAttributes Read;
    
public static PropertyAttributes Write;
}
public class System.Data.PropertyCollection : Hashtable {
    protected PropertyCollection(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
}
internal class System.Data.ProviderBase.BasicFieldNameLookup : object {
    
private Dictionary`2<string, int> _fieldNameLookup;
    
private String[] _fieldNames;
    
private CompareInfo _compareInfo;
    public BasicFieldNameLookup(String[] fieldNames);
    public BasicFieldNameLookup(ReadOnlyCollection`1<string> columnNames);
    public BasicFieldNameLookup(IDataReader reader);
    public int GetOrdinal(string fieldName);
    public int IndexOfName(string fieldName);
    public int IndexOf(string fieldName);
    protected virtual CompareInfo GetCompareInfo();
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal abstract class System.Data.ProviderBase.DataReaderContainer : object {
    
protected IDataReader _dataReader;
    
protected int _fieldCount;
    
internal int FieldCount { get; }
    
internal bool ReturnProviderSpecificTypes { get; }
    
protected int VisibleFieldCount { get; }
    protected DataReaderContainer(IDataReader dataReader);
    internal static DataReaderContainer Create(IDataReader dataReader, bool returnProviderSpecificTypes);
    internal int get_FieldCount();
    internal abstract virtual bool get_ReturnProviderSpecificTypes();
    protected abstract virtual int get_VisibleFieldCount();
    internal abstract virtual Type GetFieldType(int ordinal);
    internal abstract virtual object GetValue(int ordinal);
    internal abstract virtual int GetValues(Object[] values);
    internal string GetName(int ordinal);
    internal DataTable GetSchemaTable();
    internal bool NextResult();
    internal bool Read();
}
internal abstract class System.Data.ProviderBase.DbBuffer : SafeHandle {
    
private int _bufferLength;
    
private int BaseOffset { get; }
    
public bool IsInvalid { get; }
    
internal int Length { get; }
    protected DbBuffer(int initialSize);
    protected DbBuffer(IntPtr invalidHandleValue, bool ownsHandle);
    private int get_BaseOffset();
    public virtual bool get_IsInvalid();
    internal int get_Length();
    internal string PtrToStringUni(int offset);
    internal string PtrToStringUni(int offset, int length);
    internal byte ReadByte(int offset);
    internal Byte[] ReadBytes(int offset, int length);
    internal Byte[] ReadBytes(int offset, Byte[] destination, int startIndex, int length);
    internal char ReadChar(int offset);
    internal Char[] ReadChars(int offset, Char[] destination, int startIndex, int length);
    internal double ReadDouble(int offset);
    internal short ReadInt16(int offset);
    internal void ReadInt16Array(int offset, Int16[] destination, int startIndex, int length);
    internal int ReadInt32(int offset);
    internal void ReadInt32Array(int offset, Int32[] destination, int startIndex, int length);
    internal long ReadInt64(int offset);
    internal IntPtr ReadIntPtr(int offset);
    internal float ReadSingle(int offset);
    protected virtual bool ReleaseHandle();
    private void StructureToPtr(int offset, object structure);
    internal void WriteByte(int offset, byte value);
    internal void WriteBytes(int offset, Byte[] source, int startIndex, int length);
    internal void WriteCharArray(int offset, Char[] source, int startIndex, int length);
    internal void WriteDouble(int offset, double value);
    internal void WriteInt16(int offset, short value);
    internal void WriteInt16Array(int offset, Int16[] source, int startIndex, int length);
    internal void WriteInt32(int offset, int value);
    internal void WriteInt32Array(int offset, Int32[] source, int startIndex, int length);
    internal void WriteInt64(int offset, long value);
    internal void WriteIntPtr(int offset, IntPtr value);
    internal void WriteSingle(int offset, float value);
    internal void ZeroMemory();
    internal Guid ReadGuid(int offset);
    internal void WriteGuid(int offset, Guid value);
    internal DateTime ReadDate(int offset);
    internal void WriteDate(int offset, DateTime value);
    internal TimeSpan ReadTime(int offset);
    internal void WriteTime(int offset, TimeSpan value);
    internal DateTime ReadDateTime(int offset);
    internal void WriteDateTime(int offset, DateTime value);
    internal decimal ReadNumeric(int offset);
    internal void WriteNumeric(int offset, decimal value, byte precision);
    [ConditionalAttribute("DEBUG")]
protected void ValidateCheck(int offset, int count);
    protected void Validate(int offset, int count);
}
internal abstract class System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
    protected DbConnectionBusy(ConnectionState state);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
    
public string ServerVersion { get; }
    protected DbConnectionClosed(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    public virtual string get_ServerVersion();
    protected virtual void Activate(Transaction transaction);
    public virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string database);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    protected virtual void Deactivate();
    public virtual void EnlistTransaction(Transaction transaction);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
    
internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedBusy();
}
internal class System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
    
internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedConnecting();
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
    
internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedNeverOpened();
}
internal class System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
    
internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionClosedPreviouslyOpened();
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal abstract class System.Data.ProviderBase.DbConnectionFactory : object {
    
private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups;
    
private List`1<DbConnectionPool> _poolsToRelease;
    
private List`1<DbConnectionPoolGroup> _poolGroupsToRelease;
    
private Timer _pruningTimer;
    
private static int PruningDueTime;
    
private static int PruningPeriod;
    
private static UInt32 s_pendingOpenNonPooledNext;
    
private static Task`1[] s_pendingOpenNonPooled;
    
private static Task`1<DbConnectionInternal> s_completedTask;
    
public DbProviderFactory ProviderFactory { get; }
    private static DbConnectionFactory();
    public abstract virtual DbProviderFactory get_ProviderFactory();
    public void ClearAllPools();
    public void ClearPool(DbConnection connection);
    public void ClearPool(DbConnectionPoolKey key);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions);
    internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    private Timer CreatePruningTimer();
    protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key);
    private static Task`1<DbConnectionInternal> GetCompletedTask();
    internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection);
    private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup);
    internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions);
    private void PruneConnectionPoolGroups(object state);
    internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing);
    internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
    protected abstract virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected abstract virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    protected abstract virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options);
    internal abstract virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal abstract virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal abstract virtual void PermissionDemand(DbConnection outerConnection);
    internal abstract virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal abstract virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal abstract virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal abstract virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
}
internal abstract class System.Data.ProviderBase.DbConnectionInternal : object {
    
internal static StateChangeEventArgs StateChangeClosed;
    
internal static StateChangeEventArgs StateChangeOpen;
    
private bool _allowSetConnectionString;
    
private bool _hidePassword;
    
private ConnectionState _state;
    
private WeakReference _owningObject;
    
private DbConnectionPool _connectionPool;
    
private DbReferenceCollection _referenceCollection;
    
private int _pooledCount;
    
private bool _connectionIsDoomed;
    
private bool _cannotBePooled;
    
private bool _isInStasis;
    
private DateTime _createTime;
    
private Transaction _enlistedTransaction;
    
private Transaction _enlistedTransactionOriginal;
    
internal bool AllowSetConnectionString { get; }
    
internal bool CanBePooled { get; }
    
protected internal Transaction EnlistedTransaction { get; protected internal set; }
    
protected bool EnlistedTransactionDisposed { get; }
    
internal bool IsTxRootWaitingForTxEnd { get; }
    
protected bool UnbindOnTransactionCompletion { get; }
    
protected internal bool IsNonPoolableTransactionRoot { get; }
    
internal bool IsTransactionRoot { get; }
    
protected internal bool IsConnectionDoomed { get; }
    
internal bool IsEmancipated { get; }
    
internal bool IsInPool { get; }
    
protected internal object Owner { get; }
    
internal DbConnectionPool Pool { get; }
    
protected bool ReadyToPrepareTransaction { get; }
    
protected internal DbReferenceCollection ReferenceCollection { get; }
    
public string ServerVersion { get; }
    
public string ServerVersionNormalized { get; }
    
public bool ShouldHidePassword { get; }
    
public ConnectionState State { get; }
    internal DbConnectionInternal(ConnectionState state, bool hidePassword, bool allowSetConnectionString);
    private static DbConnectionInternal();
    internal bool get_AllowSetConnectionString();
    internal bool get_CanBePooled();
    protected internal Transaction get_EnlistedTransaction();
    protected internal void set_EnlistedTransaction(Transaction value);
    protected bool get_EnlistedTransactionDisposed();
    internal bool get_IsTxRootWaitingForTxEnd();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    protected internal bool get_IsConnectionDoomed();
    internal bool get_IsEmancipated();
    internal bool get_IsInPool();
    protected internal object get_Owner();
    internal DbConnectionPool get_Pool();
    protected virtual bool get_ReadyToPrepareTransaction();
    protected internal DbReferenceCollection get_ReferenceCollection();
    public abstract virtual string get_ServerVersion();
    public virtual string get_ServerVersionNormalized();
    public bool get_ShouldHidePassword();
    public ConnectionState get_State();
    protected abstract virtual void Activate(Transaction transaction);
    internal void ActivateConnection(Transaction transaction);
    internal void AddWeakReference(object value, int tag);
    public abstract virtual DbTransaction BeginTransaction(IsolationLevel il);
    public virtual void ChangeDatabase(string value);
    internal virtual void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory);
    internal virtual void PrepareForReplaceConnection();
    protected virtual void PrepareForCloseConnection();
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected abstract virtual void Deactivate();
    internal void DeactivateConnection();
    internal virtual void DelegatedTransactionEnded();
    public virtual void Dispose();
    protected internal void DoNotPoolThisConnection();
    protected internal void DoomThisConnection();
    public abstract virtual void EnlistTransaction(Transaction transaction);
    protected internal virtual DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions);
    internal void MakeNonPooledObject(object owningObject);
    internal void MakePooledConnection(DbConnectionPool connectionPool);
    internal void NotifyWeakReference(int message);
    internal virtual void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory);
    internal virtual bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
    internal void PrePush(object expectedOwner);
    internal void PostPop(object newOwner);
    internal void RemoveWeakReference(object value);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    internal void DetachCurrentTransactionIfEnded();
    internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing);
    internal void CleanupConnectionOnTransactionCompletion(Transaction transaction);
    private void TransactionCompletedEvent(object sender, TransactionEventArgs e);
    private void TransactionOutcomeEnlist(Transaction transaction);
    internal void SetInStasis();
    private void TerminateStasis(bool returningToPool);
    internal virtual bool IsConnectionAlive(bool throwOnException);
}
internal class System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
    
internal static DbConnectionInternal SingletonInstance;
    private static DbConnectionOpenBusy();
}
internal class System.Data.ProviderBase.DbConnectionPool : object {
    
private static int MAX_Q_SIZE;
    
private static int SEMAPHORE_HANDLE;
    
private static int ERROR_HANDLE;
    
private static int CREATION_HANDLE;
    
private static int BOGUS_HANDLE;
    
private static int ERROR_WAIT_DEFAULT;
    
private static Random s_random;
    
private int _cleanupWait;
    
private DbConnectionPoolIdentity _identity;
    
private DbConnectionFactory _connectionFactory;
    
private DbConnectionPoolGroup _connectionPoolGroup;
    
private DbConnectionPoolGroupOptions _connectionPoolGroupOptions;
    
private DbConnectionPoolProviderInfo _connectionPoolProviderInfo;
    
private State _state;
    
private ConcurrentStack`1<DbConnectionInternal> _stackOld;
    
private ConcurrentStack`1<DbConnectionInternal> _stackNew;
    
private ConcurrentQueue`1<PendingGetConnection> _pendingOpens;
    
private int _pendingOpensWaiting;
    
private WaitCallback _poolCreateRequest;
    
private int _waitCount;
    
private PoolWaitHandles _waitHandles;
    
private Exception _resError;
    
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred;
    
private int _errorWait;
    
private Timer _errorTimer;
    
private Timer _cleanupTimer;
    
private TransactedConnectionPool _transactedConnectionPool;
    
private List`1<DbConnectionInternal> _objectList;
    
private int _totalObjects;
    
private int CreationTimeout { get; }
    
internal int Count { get; }
    
internal DbConnectionFactory ConnectionFactory { get; }
    
internal bool ErrorOccurred { get; }
    
private bool HasTransactionAffinity { get; }
    
internal TimeSpan LoadBalanceTimeout { get; }
    
private bool NeedToReplenish { get; }
    
internal DbConnectionPoolIdentity Identity { get; }
    
internal bool IsRunning { get; }
    
private int MaxPoolSize { get; }
    
private int MinPoolSize { get; }
    
internal DbConnectionPoolGroup PoolGroup { get; }
    
internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    
internal DbConnectionPoolProviderInfo ProviderInfo { get; }
    
internal bool UseLoadBalancing { get; }
    
private bool UsingIntegrateSecurity { get; }
    internal DbConnectionPool(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo);
    private static DbConnectionPool();
    private int get_CreationTimeout();
    internal int get_Count();
    internal DbConnectionFactory get_ConnectionFactory();
    internal bool get_ErrorOccurred();
    private bool get_HasTransactionAffinity();
    internal TimeSpan get_LoadBalanceTimeout();
    private bool get_NeedToReplenish();
    internal DbConnectionPoolIdentity get_Identity();
    internal bool get_IsRunning();
    private int get_MaxPoolSize();
    private int get_MinPoolSize();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbConnectionPoolProviderInfo get_ProviderInfo();
    internal bool get_UseLoadBalancing();
    private bool get_UsingIntegrateSecurity();
    private void CleanupCallback(object state);
    internal void Clear();
    private Timer CreateCleanupTimer();
    private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private void DeactivateObject(DbConnectionInternal obj);
    internal void DestroyObject(DbConnectionInternal obj);
    private void ErrorCallback(object state);
    private Exception TryCloneCachedException();
    private void WaitForPendingOpen();
    internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection);
    private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction);
    internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
    private DbConnectionInternal GetFromGeneralPool();
    private DbConnectionInternal GetFromTransactedPool(Transaction& transaction);
    private void PoolCreateRequest(object state);
    internal void PutNewObject(DbConnectionInternal obj);
    internal void PutObject(DbConnectionInternal obj, object owningObject);
    internal void PutObjectFromTransactedPool(DbConnectionInternal obj);
    private void QueuePoolCreateRequest();
    private bool ReclaimEmancipatedObjects();
    internal void Startup();
    internal void Shutdown();
    internal void TransactionEnded(Transaction transaction, DbConnectionInternal transactedObject);
    private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection);
}
internal class System.Data.ProviderBase.DbConnectionPoolGroup : object {
    
private DbConnectionOptions _connectionOptions;
    
private DbConnectionPoolKey _poolKey;
    
private DbConnectionPoolGroupOptions _poolGroupOptions;
    
private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection;
    
private int _state;
    
private DbConnectionPoolGroupProviderInfo _providerInfo;
    
private DbMetaDataFactory _metaDataFactory;
    
private static int PoolGroupStateActive;
    
private static int PoolGroupStateIdle;
    
private static int PoolGroupStateDisabled;
    
internal DbConnectionOptions ConnectionOptions { get; }
    
internal DbConnectionPoolKey PoolKey { get; }
    
internal DbConnectionPoolGroupProviderInfo ProviderInfo { get; internal set; }
    
internal bool IsDisabled { get; }
    
internal DbConnectionPoolGroupOptions PoolGroupOptions { get; }
    
internal DbMetaDataFactory MetaDataFactory { get; internal set; }
    internal DbConnectionPoolGroup(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions);
    internal DbConnectionOptions get_ConnectionOptions();
    internal DbConnectionPoolKey get_PoolKey();
    internal DbConnectionPoolGroupProviderInfo get_ProviderInfo();
    internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value);
    internal bool get_IsDisabled();
    internal DbConnectionPoolGroupOptions get_PoolGroupOptions();
    internal DbMetaDataFactory get_MetaDataFactory();
    internal void set_MetaDataFactory(DbMetaDataFactory value);
    internal int Clear();
    internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory);
    private bool MarkPoolGroupAsActive();
    internal bool Prune();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
    
private bool _poolByIdentity;
    
private int _minPoolSize;
    
private int _maxPoolSize;
    
private int _creationTimeout;
    
private TimeSpan _loadBalanceTimeout;
    
private bool _hasTransactionAffinity;
    
private bool _useLoadBalancing;
    
public int CreationTimeout { get; }
    
public bool HasTransactionAffinity { get; }
    
public TimeSpan LoadBalanceTimeout { get; }
    
public int MaxPoolSize { get; }
    
public int MinPoolSize { get; }
    
public bool PoolByIdentity { get; }
    
public bool UseLoadBalancing { get; }
    public DbConnectionPoolGroupOptions(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity);
    public int get_CreationTimeout();
    public bool get_HasTransactionAffinity();
    public TimeSpan get_LoadBalanceTimeout();
    public int get_MaxPoolSize();
    public int get_MinPoolSize();
    public bool get_PoolByIdentity();
    public bool get_UseLoadBalancing();
}
internal class System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
    
private DbConnectionPoolGroup _poolGroup;
    
internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
}
internal class System.Data.ProviderBase.DbConnectionPoolIdentity : object {
    
public static DbConnectionPoolIdentity NoIdentity;
    
private string _sidString;
    
private bool _isRestricted;
    
private bool _isNetwork;
    
private int _hashCode;
    
internal bool IsRestricted { get; }
    private DbConnectionPoolIdentity(string sidString, bool isRestricted, bool isNetwork);
    private static DbConnectionPoolIdentity();
    internal static DbConnectionPoolIdentity GetCurrent();
    internal bool get_IsRestricted();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    internal static DbConnectionPoolIdentity GetCurrentManaged();
}
internal class System.Data.ProviderBase.DbConnectionPoolProviderInfo : object {
}
internal class System.Data.ProviderBase.DbMetaDataFactory : object {
    
private DataSet _metaDataCollectionsDataSet;
    
private string _normalizedServerVersion;
    
private string _serverVersionString;
    
private static string _collectionName;
    
private static string _populationMechanism;
    
private static string _populationString;
    
private static string _maximumVersion;
    
private static string _minimumVersion;
    
private static string _dataSourceProductVersionNormalized;
    
private static string _dataSourceProductVersion;
    
private static string _restrictionDefault;
    
private static string _restrictionNumber;
    
private static string _numberOfRestrictions;
    
private static string _restrictionName;
    
private static string _parameterName;
    
private static string _dataTable;
    
private static string _sqlCommand;
    
private static string _prepareCollection;
    
protected DataSet CollectionDataSet { get; }
    
protected string ServerVersion { get; }
    
protected string ServerVersionNormalized { get; }
    public DbMetaDataFactory(Stream xmlStream, string serverVersion, string normalizedServerVersion);
    protected DataSet get_CollectionDataSet();
    protected string get_ServerVersion();
    protected string get_ServerVersionNormalized();
    protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames);
    public void Dispose();
    protected virtual void Dispose(bool disposing);
    private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection);
    private DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns);
    internal DataRow FindMetaDataCollectionRow(string collectionName);
    private void FixUpVersion(DataTable dataSourceInfoTable);
    private string GetParameterName(string neededCollectionName, int neededRestrictionNumber);
    public virtual DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions);
    private bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames);
    private void LoadDataSetFromXml(Stream XmlStream);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
    private bool SupportedByCurrentVersion(DataRow requestedCollectionRow);
}
internal abstract class System.Data.ProviderBase.DbReferenceCollection : object {
    
private static int LockPollTime;
    
private static int DefaultCollectionSize;
    
private CollectionEntry[] _items;
    
private object _itemLock;
    
private int _optimisticCount;
    
private int _lastItemIndex;
    
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying;
    public abstract virtual void Add(object value, int tag);
    protected void AddItem(object value, int tag);
    internal T FindItem(int tag, Func`2<T, bool> filterMethod);
    public void Notify(int message);
    protected abstract virtual void NotifyItem(int message, int tag, object value);
    public abstract virtual void Remove(object value);
    protected void RemoveItem(object value);
    private void TryEnterItemLock(Boolean& lockObtained);
    private void ExitItemLockIfNeeded(bool lockObtained);
}
internal class System.Data.ProviderBase.FieldNameLookup : BasicFieldNameLookup {
    
private int _defaultLocaleID;
    public FieldNameLookup(String[] fieldNames, int defaultLocaleID);
    public FieldNameLookup(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID);
    public FieldNameLookup(IDataReader reader, int defaultLocaleID);
    protected virtual CompareInfo GetCompareInfo();
}
internal class System.Data.ProviderBase.SchemaMapping : object {
    
private static int MapExactMatch;
    
private static int MapDifferentSize;
    
private static int MapReorderedValues;
    
private static int MapChapters;
    
private static int MapChaptersReordered;
    
private static int SqlXml;
    
private static int XmlDocument;
    
private DataSet _dataSet;
    
private DataTable _dataTable;
    
private DataAdapter _adapter;
    
private DataReaderContainer _dataReader;
    
private DataTable _schemaTable;
    
private DataTableMapping _tableMapping;
    
private String[] _fieldNames;
    
private Object[] _readerDataValues;
    
private Object[] _mappedDataValues;
    
private Int32[] _indexMap;
    
private Boolean[] _chapterMap;
    
private Int32[] _xmlMap;
    
private int _mappedMode;
    
private int _mappedLength;
    
private LoadOption _loadOption;
    
internal DataReaderContainer DataReader { get; }
    
internal DataTable DataTable { get; }
    
internal Object[] DataValues { get; }
    internal SchemaMapping(DataAdapter adapter, DataSet dataset, DataTable datatable, DataReaderContainer dataReader, bool keyInfo, SchemaType schemaType, string sourceTableName, bool gettingData, DataColumn parentChapterColumn, object parentChapterValue);
    internal DataReaderContainer get_DataReader();
    internal DataTable get_DataTable();
    internal Object[] get_DataValues();
    internal void ApplyToDataRow(DataRow dataRow);
    private void MappedChapterIndex();
    private void MappedChapter();
    private void MappedIndex();
    private void MappedValues();
    private Object[] GetMappedValues();
    internal void LoadDataRowWithClear();
    internal void LoadDataRow();
    private void FreeDataRowChapters();
    internal int LoadDataRowChapters(DataRow dataRow);
    private Int32[] CreateIndexMap(int count, int index);
    private static String[] GenerateFieldNames(DataReaderContainer dataReader);
    private DataColumn[] ResizeColumnArray(DataColumn[] rgcol, int len);
    private void AddItemToAllowRollback(List`1& items, object value);
    private void RollbackAddedItems(List`1<object> items);
    private Object[] SetupSchemaWithoutKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue);
    private Object[] SetupSchemaWithKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue);
    private void AddAdditionalProperties(DataColumn targetColumn, DataRow schemaRow);
    private void AddRelation(DataColumn parentChapterColumn, DataColumn chapterColumn);
    private Object[] SetupMapping(int count, DataColumnCollection columnCollection, DataColumn chapterColumn, object chapterValue);
}
internal class System.Data.ProviderBase.TimeoutTimer : object {
    
private long _timerExpire;
    
private bool _isInfiniteTimeout;
    
internal static long InfiniteTimeout;
    
internal bool IsExpired { get; }
    
internal bool IsInfinite { get; }
    
internal long LegacyTimerExpire { get; }
    
internal long MillisecondsRemaining { get; }
    private static TimeoutTimer();
    internal static TimeoutTimer StartSecondsTimeout(int seconds);
    internal static TimeoutTimer StartMillisecondsTimeout(long milliseconds);
    internal void SetTimeoutSeconds(int seconds);
    internal bool get_IsExpired();
    internal bool get_IsInfinite();
    internal long get_LegacyTimerExpire();
    internal long get_MillisecondsRemaining();
}
internal class System.Data.Range : ValueType {
    
private int _min;
    
private int _max;
    
private bool _isNotNull;
    
public int Count { get; }
    
public bool IsNull { get; }
    
public int Max { get; }
    
public int Min { get; }
    public Range(int min, int max);
    public int get_Count();
    public bool get_IsNull();
    public int get_Max();
    public int get_Min();
    internal void CheckNull();
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Data.RBTree`1 : object {
    
internal static int DefaultPageSize;
    
internal static int NIL;
    
private TreePage[] _pageTable;
    
private Int32[] _pageTableMap;
    
private int _inUsePageCount;
    
private int _nextFreePageLine;
    
public int root;
    
private int _version;
    
private int _inUseNodeCount;
    
private int _inUseSatelliteTreeCount;
    
private TreeAccessMethod _accessMethod;
    
public int Count { get; }
    
public bool HasDuplicates { get; }
    
public K Item { get; }
    protected RBTree`1(TreeAccessMethod accessMethod);
    protected abstract virtual int CompareNode(K record1, K record2);
    protected abstract virtual int CompareSateliteTreeNode(K record1, K record2);
    private void InitTree();
    private void FreePage(TreePage<K> page);
    private TreePage<K> AllocPage(int size);
    private void MarkPageFull(TreePage<K> page);
    private void MarkPageFree(TreePage<K> page);
    private static int GetIntValueFromBitMap(UInt32 bitMap);
    private void FreeNode(int nodeId);
    private int GetIndexOfPageWithFreeSlot(bool allocatedPage);
    public int get_Count();
    public bool get_HasDuplicates();
    private int GetNewNode(K key);
    private int Successor(int x_id);
    private bool Successor(Int32& nodeId, Int32& mainTreeNodeId);
    private int Minimum(int x_id);
    private int LeftRotate(int root_id, int x_id, int mainTreeNode);
    private int RightRotate(int root_id, int x_id, int mainTreeNode);
    private int RBInsert(int root_id, int x_id, int mainTreeNodeID, int position, bool append);
    public void UpdateNodeKey(K currentKey, K newKey);
    public K DeleteByIndex(int i);
    public int RBDelete(int z_id);
    private int RBDeleteX(int root_id, int z_id, int mainTreeNodeID);
    private int RBDeleteFixup(int root_id, int x_id, int px_id, int mainTreeNodeID);
    private int SearchSubTree(int root_id, K key);
    public int Search(K key);
    public K get_Item(int index);
    private NodePath<K> GetNodeByKey(K key);
    public int GetIndexByKey(K key);
    public int GetIndexByNode(int node);
    private int GetIndexByNodePath(NodePath<K> path);
    private int ComputeIndexByNode(int nodeId);
    private int ComputeIndexWithSatelliteByNode(int nodeId);
    private NodePath<K> GetNodeByIndex(int userIndex);
    private int ComputeNodeByIndex(int index, Int32& satelliteRootId);
    private int ComputeNodeByIndex(int x_id, int index);
    public int Insert(K item);
    public int Add(K item);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(int nodeId, K item);
    public int Insert(int position, K item);
    public int InsertAt(int position, K item, bool append);
    public void RemoveAt(int position);
    public void Clear();
    public void CopyTo(Array array, int index);
    public void CopyTo(K[] array, int index);
    private void SetRight(int nodeId, int rightNodeId);
    private void SetLeft(int nodeId, int leftNodeId);
    private void SetParent(int nodeId, int parentNodeId);
    private void SetColor(int nodeId, NodeColor<K> color);
    private void SetKey(int nodeId, K key);
    private void SetNext(int nodeId, int nextNodeId);
    private void SetSubTreeSize(int nodeId, int size);
    private void IncreaseSize(int nodeId);
    private void RecomputeSize(int nodeId);
    private void DecreaseSize(int nodeId);
    [ConditionalAttribute("DEBUG")]
private void VerifySize(int nodeId, int size);
    public int Right(int nodeId);
    public int Left(int nodeId);
    public int Parent(int nodeId);
    private NodeColor<K> color(int nodeId);
    public int Next(int nodeId);
    public int SubTreeSize(int nodeId);
    public K Key(int nodeId);
}
internal enum System.Data.RBTreeError : Enum {
    
public int value__;
    
public static RBTreeError InvalidPageSize;
    
public static RBTreeError PagePositionInSlotInUse;
    
public static RBTreeError NoFreeSlots;
    
public static RBTreeError InvalidStateinInsert;
    
public static RBTreeError InvalidNextSizeInDelete;
    
public static RBTreeError InvalidStateinDelete;
    
public static RBTreeError InvalidNodeSizeinDelete;
    
public static RBTreeError InvalidStateinEndDelete;
    
public static RBTreeError CannotRotateInvalidsuccessorNodeinDelete;
    
public static RBTreeError IndexOutOFRangeinGetNodeByIndex;
    
public static RBTreeError RBDeleteFixup;
    
public static RBTreeError UnsupportedAccessMethod1;
    
public static RBTreeError UnsupportedAccessMethod2;
    
public static RBTreeError UnsupportedAccessMethodInNonNillRootSubtree;
    
public static RBTreeError AttachedNodeWithZerorbTreeNodeId;
    
public static RBTreeError CompareNodeInDataRowTree;
    
public static RBTreeError CompareSateliteTreeNodeInDataRowTree;
    
public static RBTreeError NestedSatelliteTreeEnumerator;
}
public class System.Data.ReadOnlyException : DataException {
    protected ReadOnlyException(SerializationInfo info, StreamingContext context);
    public ReadOnlyException(string s);
    public ReadOnlyException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.RecordManager : object {
    
private DataTable _table;
    
private int _lastFreeRecord;
    
private int _minimumCapacity;
    
private int _recordCapacity;
    
private List`1<int> _freeRecordList;
    
private DataRow[] _rows;
    
internal int LastFreeRecord { get; }
    
internal int MinimumCapacity { get; internal set; }
    
internal int RecordCapacity { get; internal set; }
    
internal DataRow Item { get; internal set; }
    internal RecordManager(DataTable table);
    private void GrowRecordCapacity();
    internal int get_LastFreeRecord();
    internal int get_MinimumCapacity();
    internal void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal void set_RecordCapacity(int value);
    internal static int NewCapacity(int capacity);
    private int NormalizedMinimumCapacity(int capacity);
    internal int NewRecordBase();
    internal void FreeRecord(Int32& record);
    internal void Clear(bool clearAll);
    internal DataRow get_Item(int record);
    internal void set_Item(int record, DataRow value);
    internal void SetKeyValues(int record, DataKey key, Object[] keyValues);
    internal int ImportRecord(DataTable src, int record);
    internal int CopyRecord(DataTable src, int record, int copy);
    internal void SetRowCache(DataRow[] newRows);
    [ConditionalAttribute("DEBUG")]
internal void VerifyRecord(int record);
    [ConditionalAttribute("DEBUG")]
internal void VerifyRecord(int record, DataRow row);
}
internal class System.Data.RelatedView : DataView {
    
private Nullable`1<DataKey> _parentKey;
    
private DataKey _childKey;
    
private DataRowView _parentRowView;
    
private Object[] _filterValues;
    public RelatedView(DataColumn[] columns, Object[] values);
    public RelatedView(DataRowView parentRowView, DataKey parentKey, DataColumn[] childKeyColumns);
    private Object[] GetParentValues();
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal virtual IFilter GetFilter();
    public virtual DataRowView AddNew();
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    public virtual bool Equals(DataView dv);
    private bool CompareArray(Object[] value1, Object[] value2);
}
internal class System.Data.RelationshipConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.Data.RowNotInTableException : DataException {
    protected RowNotInTableException(SerializationInfo info, StreamingContext context);
    public RowNotInTableException(string s);
    public RowNotInTableException(string message, Exception innerException);
}
public enum System.Data.Rule : Enum {
    
public int value__;
    
public static Rule None;
    
public static Rule Cascade;
    
public static Rule SetNull;
    
public static Rule SetDefault;
}
internal static class System.Data.SafeNativeMethods : object {
    internal static IntPtr LocalAlloc(IntPtr initialSize);
    internal static void LocalFree(IntPtr ptr);
    internal static void ZeroMemory(IntPtr ptr, int length);
    internal static IntPtr GetProcAddress(IntPtr HModule, string funcName);
}
internal enum System.Data.SchemaFormat : Enum {
    
public int value__;
    
public static SchemaFormat Public;
    
public static SchemaFormat Remoting;
    
public static SchemaFormat WebService;
    
public static SchemaFormat RemotingSkipSchema;
    
public static SchemaFormat WebServiceSkipSchema;
}
public enum System.Data.SchemaSerializationMode : Enum {
    
public int value__;
    
public static SchemaSerializationMode IncludeSchema;
    
public static SchemaSerializationMode ExcludeSchema;
}
public enum System.Data.SchemaType : Enum {
    
public int value__;
    
public static SchemaType Source;
    
public static SchemaType Mapped;
}
internal class System.Data.Select : object {
    
private DataTable _table;
    
private IndexField[] _indexFields;
    
private DataViewRowState _recordStates;
    
private DataExpression _rowFilter;
    
private ExpressionNode _expression;
    
private Index _index;
    
private Int32[] _records;
    
private int _recordCount;
    
private ExpressionNode _linearExpression;
    
private bool _candidatesForBinarySearch;
    
private ColumnInfo[] _candidateColumns;
    
private int _nCandidates;
    
private int _matchedCandidates;
    public Select(DataTable table, string filterExpression, string sort, DataViewRowState recordStates);
    private bool IsSupportedOperator(int op);
    private void AnalyzeExpression(BinaryNode expr);
    private bool CompareSortIndexDesc(IndexField[] fields);
    private bool FindSortIndex();
    private int CompareClosestCandidateIndexDesc(IndexField[] fields);
    private bool FindClosestCandidateIndex();
    private void InitCandidateColumns();
    private void CreateIndex();
    private bool IsOperatorIn(ExpressionNode enode);
    private void BuildLinearExpression();
    public DataRow[] SelectRows();
    public DataRow[] GetRows();
    private bool AcceptRecord(int record);
    private int Eval(BinaryNode expr, DataRow row, DataRowVersion version);
    private int Evaluate(int record);
    private int FindFirstMatchingRecord();
    private int FindLastMatchingRecord(int lo);
    private Range GetBinaryFilteredRecords();
    private Int32[] GetLinearFilteredRecords(Range range);
    private DataRow[] GetLinearFilteredRows(Range range);
    private int CompareRecords(int record1, int record2);
    private void Sort(int left, int right);
}
public enum System.Data.SerializationFormat : Enum {
    
public int value__;
    
public static SerializationFormat Xml;
    
public static SerializationFormat Binary;
}
internal class System.Data.SimpleType : object {
    
private string _baseType;
    
private SimpleType _baseSimpleType;
    
private XmlQualifiedName _xmlBaseType;
    
private string _name;
    
private int _length;
    
private int _minLength;
    
private int _maxLength;
    
private string _pattern;
    
private string _ns;
    
private string _maxExclusive;
    
private string _maxInclusive;
    
private string _minExclusive;
    
private string _minInclusive;
    
internal string _enumeration;
    
internal string BaseType { get; }
    
internal XmlQualifiedName XmlBaseType { get; }
    
internal string Name { get; }
    
internal string Namespace { get; }
    
internal int Length { get; }
    
internal int MaxLength { get; internal set; }
    
internal SimpleType BaseSimpleType { get; }
    
public string SimpleTypeQualifiedName { get; }
    internal SimpleType(string baseType);
    internal SimpleType(XmlSchemaSimpleType node);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal void LoadTypeValues(XmlSchemaSimpleType node);
    internal bool IsPlainString();
    internal string get_BaseType();
    internal XmlQualifiedName get_XmlBaseType();
    internal string get_Name();
    internal string get_Namespace();
    internal int get_Length();
    internal int get_MaxLength();
    internal void set_MaxLength(int value);
    internal SimpleType get_BaseSimpleType();
    public string get_SimpleTypeQualifiedName();
    internal string QualifiedName(string name);
    internal XmlNode ToNode(XmlDocument dc, Hashtable prefixes, bool inRemoting);
    internal static SimpleType CreateEnumeratedType(string values);
    internal static SimpleType CreateByteArrayType(string encoding);
    internal static SimpleType CreateLimitedStringType(int length);
    internal static SimpleType CreateSimpleType(StorageType typeCode, Type type);
    internal string HasConflictingDefinition(SimpleType otherSimpleType);
    internal bool CanHaveMaxLength();
    internal void ConvertToAnnonymousSimpleType();
}
public class System.Data.Sql.SqlDataSourceEnumerator : DbDataSourceEnumerator {
    
private static SqlDataSourceEnumerator SingletonInstance;
    
internal static string ServerName;
    
internal static string InstanceName;
    
internal static string IsClustered;
    
internal static string Version;
    
private long timeoutTime;
    
private static string _Version;
    
private static string _Cluster;
    
private static int _clusterLength;
    
private static int _versionLength;
    
public static SqlDataSourceEnumerator Instance { get; }
    private static SqlDataSourceEnumerator();
    public static SqlDataSourceEnumerator get_Instance();
    public virtual DataTable GetDataSources();
    private static DataTable ParseServerEnumString(string serverInstances);
}
internal class System.Data.Sql.SqlGenericUtil : object {
    internal static Exception NullCommandText();
    internal static Exception MismatchedMetaDataDirectionArrayLengths();
}
public class System.Data.Sql.SqlNotificationRequest : object {
    
private string _userData;
    
private string _options;
    
private int _timeout;
    
public string Options { get; public set; }
    
public int Timeout { get; public set; }
    
public string UserData { get; public set; }
    public SqlNotificationRequest(string userData, string options, int timeout);
    public string get_Options();
    public void set_Options(string value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public string get_UserData();
    public void set_UserData(string value);
}
internal class System.Data.SqlClient._ColumnMapping : object {
    
internal int _sourceColumnOrdinal;
    
internal _SqlMetaData _metadata;
    internal _ColumnMapping(int columnId, _SqlMetaData metadata);
}
internal class System.Data.SqlClient._SqlMetaData : SqlMetaDataPriv {
    
internal string column;
    
internal string baseColumn;
    
internal MultiPartTableName multiPartTableName;
    
internal int ordinal;
    
internal byte updatability;
    
internal byte tableNum;
    
internal bool isDifferentName;
    
internal bool isKey;
    
internal bool isHidden;
    
internal bool isExpression;
    
internal bool isIdentity;
    
internal bool isColumnSet;
    
internal byte op;
    
internal ushort operand;
    
internal string serverName { get; }
    
internal string catalogName { get; }
    
internal string schemaName { get; }
    
internal string tableName { get; }
    
internal bool IsNewKatmaiDateTimeType { get; }
    
internal bool IsLargeUdt { get; }
    internal _SqlMetaData(int ordinal);
    internal string get_serverName();
    internal string get_catalogName();
    internal string get_schemaName();
    internal string get_tableName();
    internal bool get_IsNewKatmaiDateTimeType();
    internal bool get_IsLargeUdt();
    public object Clone();
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient._SqlMetaDataSet : object {
    
internal ushort id;
    
internal Int32[] indexMap;
    
internal int visibleColumns;
    
internal DataTable schemaTable;
    
private _SqlMetaData[] _metaDataArray;
    
internal ReadOnlyCollection`1<DbColumn> dbColumnSchema;
    
internal int Length { get; }
    
internal _SqlMetaData Item { get; internal set; }
    internal _SqlMetaDataSet(int count);
    private _SqlMetaDataSet(_SqlMetaDataSet original);
    internal int get_Length();
    internal _SqlMetaData get_Item(int index);
    internal void set_Item(int index, _SqlMetaData value);
    public object Clone();
}
internal class System.Data.SqlClient._SqlMetaDataSetCollection : object {
    
private List`1<_SqlMetaDataSet> _altMetaDataSetArray;
    
internal _SqlMetaDataSet metaDataSet;
    internal void SetAltMetaData(_SqlMetaDataSet altMetaDataSet);
    internal _SqlMetaDataSet GetAltMetaData(int id);
    public object Clone();
}
internal class System.Data.SqlClient._SqlRPC : object {
    
internal string rpcName;
    
internal ushort ProcID;
    
internal ushort options;
    
internal SqlParameter[] parameters;
    
internal Byte[] paramoptions;
    
internal Nullable`1<int> recordsAffected;
    
internal int cumulativeRecordsAffected;
    
internal int errorsIndexStart;
    
internal int errorsIndexEnd;
    
internal SqlErrorCollection errors;
    
internal int warningsIndexStart;
    
internal int warningsIndexEnd;
    
internal SqlErrorCollection warnings;
    internal string GetCommandTextOrRpcName();
}
public enum System.Data.SqlClient.ApplicationIntent : Enum {
    
public int value__;
    
public static ApplicationIntent ReadWrite;
    
public static ApplicationIntent ReadOnly;
}
internal static class System.Data.SqlClient.AsyncHelper : object {
    internal static Task CreateContinuationTask(Task task, Action onSuccess, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure);
    internal static Task CreateContinuationTask(Task task, Action`2<T1, T2> onSuccess, T1 arg1, T2 arg2, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure);
    internal static void ContinueTask(Task task, TaskCompletionSource`1<object> completion, Action onSuccess, SqlInternalConnectionTds connectionToDoom, Action`1<Exception> onFailure, Action onCancellation, Func`2<Exception, Exception> exceptionConverter, SqlConnection connectionToAbort);
    internal static void WaitForCompletion(Task task, int timeout, Action onTimeout, bool rethrowExceptions);
    internal static void SetTimeoutException(TaskCompletionSource`1<object> completion, int timeout, Func`1<Exception> exc, CancellationToken ctoken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.BulkCopySimpleResultSet : object {
    
private List`1<Result> _results;
    
private Result _resultSet;
    
private Int32[] _indexmap;
    
internal Result Item { get; }
    internal Result get_Item(int idx);
    internal void SetMetaData(_SqlMetaDataSet metadata);
    internal Int32[] CreateIndexMap();
    internal Object[] CreateRowBuffer();
}
internal enum System.Data.SqlClient.CallbackType : Enum {
    
public int value__;
    
public static CallbackType Read;
    
public static CallbackType Write;
}
internal abstract class System.Data.SqlClient.DataFeed : object {
}
internal enum System.Data.SqlClient.EncryptionOptions : Enum {
    
public int value__;
    
public static EncryptionOptions OFF;
    
public static EncryptionOptions ON;
    
public static EncryptionOptions NOT_SUP;
    
public static EncryptionOptions REQ;
    
public static EncryptionOptions LOGIN;
}
internal class System.Data.SqlClient.LastIOTimer : object {
    
internal long _value;
}
internal class System.Data.SqlClient.MetaType : object {
    
internal Type ClassType;
    
internal Type SqlType;
    
internal int FixedLength;
    
internal bool IsFixed;
    
internal bool IsLong;
    
internal bool IsPlp;
    
internal byte Precision;
    
internal byte Scale;
    
internal byte TDSType;
    
internal byte NullableType;
    
internal string TypeName;
    
internal SqlDbType SqlDbType;
    
internal DbType DbType;
    
internal byte PropBytes;
    
internal bool IsAnsiType;
    
internal bool IsBinType;
    
internal bool IsCharType;
    
internal bool IsNCharType;
    
internal bool IsSizeInCharacters;
    
internal bool IsNewKatmaiType;
    
internal bool IsVarTime;
    
internal bool Is70Supported;
    
internal bool Is80Supported;
    
internal bool Is90Supported;
    
internal bool Is100Supported;
    
private static MetaType s_metaBigInt;
    
private static MetaType s_metaFloat;
    
private static MetaType s_metaReal;
    
private static MetaType s_metaBinary;
    
private static MetaType s_metaTimestamp;
    
internal static MetaType MetaVarBinary;
    
internal static MetaType MetaMaxVarBinary;
    
private static MetaType s_metaSmallVarBinary;
    
internal static MetaType MetaImage;
    
private static MetaType s_metaBit;
    
private static MetaType s_metaTinyInt;
    
private static MetaType s_metaSmallInt;
    
private static MetaType s_metaInt;
    
private static MetaType s_metaChar;
    
private static MetaType s_metaVarChar;
    
internal static MetaType MetaMaxVarChar;
    
internal static MetaType MetaText;
    
private static MetaType s_metaNChar;
    
internal static MetaType MetaNVarChar;
    
internal static MetaType MetaMaxNVarChar;
    
internal static MetaType MetaNText;
    
internal static MetaType MetaDecimal;
    
internal static MetaType MetaXml;
    
private static MetaType s_metaDateTime;
    
private static MetaType s_metaSmallDateTime;
    
private static MetaType s_metaMoney;
    
private static MetaType s_metaSmallMoney;
    
private static MetaType s_metaUniqueId;
    
private static MetaType s_metaVariant;
    
internal static MetaType MetaUdt;
    
private static MetaType s_metaMaxUdt;
    
private static MetaType s_metaTable;
    
private static MetaType s_metaSUDT;
    
private static MetaType s_metaDate;
    
internal static MetaType MetaTime;
    
private static MetaType s_metaDateTime2;
    
internal static MetaType MetaDateTimeOffset;
    
public int TypeId { get; }
    public MetaType(byte precision, byte scale, int fixedLength, bool isFixed, bool isLong, bool isPlp, byte tdsType, byte nullableTdsType, string typeName, Type classType, Type sqlType, SqlDbType sqldbType, DbType dbType, byte propBytes);
    private static MetaType();
    public int get_TypeId();
    private static bool _IsAnsiType(SqlDbType type);
    private static bool _IsSizeInCharacters(SqlDbType type);
    private static bool _IsCharType(SqlDbType type);
    private static bool _IsNCharType(SqlDbType type);
    private static bool _IsBinType(SqlDbType type);
    private static bool _Is70Supported(SqlDbType type);
    private static bool _Is80Supported(SqlDbType type);
    private static bool _Is90Supported(SqlDbType type);
    private static bool _Is100Supported(SqlDbType type);
    private static bool _IsNewKatmaiType(SqlDbType type);
    internal static bool _IsVarTime(SqlDbType type);
    internal static MetaType GetMetaTypeFromSqlDbType(SqlDbType target, bool isMultiValued);
    internal static MetaType GetMetaTypeFromDbType(DbType target);
    internal static MetaType GetMaxMetaTypeFromMetaType(MetaType mt);
    internal static MetaType GetMetaTypeFromType(Type dataType, bool streamAllowed);
    internal static MetaType GetMetaTypeFromValue(object value, bool inferLen, bool streamAllowed);
    internal static object GetNullSqlValue(Type sqlType);
    internal static MetaType PromoteStringType(string s);
    internal static object GetComValueFromSqlVariant(object sqlVal);
    internal static object GetSqlValueFromComVariant(object comVal);
    internal static SqlDbType GetSqlDbTypeFromOleDbType(short dbType, string typeName);
    internal static MetaType GetSqlDataType(int tdsType, UInt32 userType, int length);
    internal static MetaType GetDefaultMetaType();
    internal static string GetStringFromXml(XmlReader xmlreader);
    public static TdsDateTime FromDateTime(DateTime dateTime, byte cb);
    public static DateTime ToDateTime(int sqlDays, int sqlTime, int length);
    internal static int GetTimeSizeFromScale(byte scale);
}
internal class System.Data.SqlClient.MultiPartTableName : ValueType {
    
private string _multipartName;
    
private string _serverName;
    
private string _catalogName;
    
private string _schemaName;
    
private string _tableName;
    
internal static MultiPartTableName Null;
    
internal string ServerName { get; internal set; }
    
internal string CatalogName { get; internal set; }
    
internal string SchemaName { get; internal set; }
    
internal string TableName { get; internal set; }
    internal MultiPartTableName(String[] parts);
    internal MultiPartTableName(string multipartName);
    private static MultiPartTableName();
    internal string get_ServerName();
    internal void set_ServerName(string value);
    internal string get_CatalogName();
    internal void set_CatalogName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal string get_TableName();
    internal void set_TableName(string value);
    private void ParseMultipartName();
}
public class System.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
    public OnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlNotificationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.ParameterPeekAheadValue : object {
    
internal IEnumerator`1<SqlDataRecord> Enumerator;
    
internal SqlDataRecord FirstRecord;
}
public enum System.Data.SqlClient.PoolBlockingPeriod : Enum {
    
public int value__;
    
public static PoolBlockingPeriod Auto;
    
public static PoolBlockingPeriod AlwaysBlock;
    
public static PoolBlockingPeriod NeverBlock;
}
internal enum System.Data.SqlClient.PreLoginHandshakeStatus : Enum {
    
public int value__;
    
public static PreLoginHandshakeStatus Successful;
    
public static PreLoginHandshakeStatus InstanceFailure;
}
internal enum System.Data.SqlClient.PreLoginOptions : Enum {
    
public int value__;
    
public static PreLoginOptions VERSION;
    
public static PreLoginOptions ENCRYPT;
    
public static PreLoginOptions INSTANCE;
    
public static PreLoginOptions THREADID;
    
public static PreLoginOptions MARS;
    
public static PreLoginOptions TRACEID;
    
public static PreLoginOptions NUMOPT;
    
public static PreLoginOptions LASTOPT;
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Result : object {
    
private _SqlMetaDataSet _metadata;
    
private List`1<Row> _rowset;
    
internal int Count { get; }
    
internal _SqlMetaDataSet MetaData { get; }
    
internal Row Item { get; }
    internal Result(_SqlMetaDataSet metadata);
    internal int get_Count();
    internal _SqlMetaDataSet get_MetaData();
    internal Row get_Item(int index);
    internal void AddRow(Row row);
}
internal class System.Data.SqlClient.RoutingInfo : object {
    [CompilerGeneratedAttribute]

private byte <Protocol>k__BackingField;
    [CompilerGeneratedAttribute]

private ushort <Port>k__BackingField;
    [CompilerGeneratedAttribute]

private string <ServerName>k__BackingField;
    
internal byte Protocol { get; private set; }
    
internal ushort Port { get; private set; }
    
internal string ServerName { get; private set; }
    internal RoutingInfo(byte protocol, ushort port, string servername);
    [CompilerGeneratedAttribute]
internal byte get_Protocol();
    [CompilerGeneratedAttribute]
private void set_Protocol(byte value);
    [CompilerGeneratedAttribute]
internal ushort get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(ushort value);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.SqlClient.Row : object {
    
private Object[] _dataFields;
    
internal Object[] DataFields { get; }
    
internal object Item { get; }
    internal Row(int rowCount);
    internal Object[] get_DataFields();
    internal object get_Item(int index);
}
internal enum System.Data.SqlClient.RunBehavior : Enum {
    
public int value__;
    
public static RunBehavior UntilDone;
    
public static RunBehavior ReturnImmediately;
    
public static RunBehavior Clean;
    
public static RunBehavior Attention;
}
internal class System.Data.SqlClient.ServerInfo : object {
    [CompilerGeneratedAttribute]

private string <ExtendedServerName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <ResolvedServerName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <ResolvedDatabaseName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <UserProtocol>k__BackingField;
    
private string _userServerName;
    
internal string PreRoutingServerName;
    
internal string ExtendedServerName { get; private set; }
    
internal string ResolvedServerName { get; private set; }
    
internal string ResolvedDatabaseName { get; private set; }
    
internal string UserProtocol { get; private set; }
    
internal string UserServerName { get; private set; }
    internal ServerInfo(SqlConnectionString userOptions);
    internal ServerInfo(SqlConnectionString userOptions, string serverName);
    internal ServerInfo(SqlConnectionString userOptions, RoutingInfo routing, string preRoutingServerName);
    [CompilerGeneratedAttribute]
internal string get_ExtendedServerName();
    [CompilerGeneratedAttribute]
private void set_ExtendedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedServerName();
    [CompilerGeneratedAttribute]
private void set_ResolvedServerName(string value);
    [CompilerGeneratedAttribute]
internal string get_ResolvedDatabaseName();
    [CompilerGeneratedAttribute]
private void set_ResolvedDatabaseName(string value);
    [CompilerGeneratedAttribute]
internal string get_UserProtocol();
    [CompilerGeneratedAttribute]
private void set_UserProtocol(string value);
    internal string get_UserServerName();
    private void set_UserServerName(string value);
    internal void SetDerivedNames(string protocol, string serverName);
}
internal class System.Data.SqlClient.SessionData : object {
    
internal static int _maxNumberOfSessionStates;
    
internal UInt32 _tdsVersion;
    
internal bool _encrypted;
    
internal string _database;
    
internal SqlCollation _collation;
    
internal string _language;
    
internal string _initialDatabase;
    
internal SqlCollation _initialCollation;
    
internal string _initialLanguage;
    
internal byte _unrecoverableStatesCount;
    
internal Dictionary`2<string, Tuple`2<string, string>> _resolvedAliases;
    
internal SessionStateRecord[] _delta;
    
internal bool _deltaDirty;
    
internal Byte[][] _initialState;
    public SessionData(SessionData recoveryData);
    public void Reset();
    [ConditionalAttribute("DEBUG")]
public void AssertUnrecoverableStateCountIsCorrect();
}
internal class System.Data.SqlClient.SessionStateRecord : object {
    
internal bool _recoverable;
    
internal UInt32 _version;
    
internal int _dataLength;
    
internal Byte[] _data;
}
internal class System.Data.SqlClient.SNI.DataSource : object {
    
private static char CommaSeparator;
    
private static char BackSlashSeparator;
    
private static string DefaultHostName;
    
private static string DefaultSqlServerInstanceName;
    
private static string PipeBeginning;
    
private static string PipeToken;
    
private static string LocalDbHost;
    
private static string NamedPipeInstanceNameHeader;
    
private static string DefaultPipeName;
    
internal Protocol ConnectionProtocol;
    [CompilerGeneratedAttribute]

private string <ServerName>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Port>k__BackingField;
    [CompilerGeneratedAttribute]

private string <InstanceName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <PipeName>k__BackingField;
    [CompilerGeneratedAttribute]

private string <PipeHostName>k__BackingField;
    
private string _workingDataSource;
    
private string _dataSourceAfterTrimmingProtocol;
    [CompilerGeneratedAttribute]

private bool <IsBadDataSource>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <IsSsrpRequired>k__BackingField;
    
internal string ServerName { get; private set; }
    
internal int Port { get; private set; }
    
public string InstanceName { get; internal set; }
    
public string PipeName { get; internal set; }
    
public string PipeHostName { get; internal set; }
    
internal bool IsBadDataSource { get; private set; }
    
internal bool IsSsrpRequired { get; private set; }
    private DataSource(string dataSource);
    [CompilerGeneratedAttribute]
internal string get_ServerName();
    [CompilerGeneratedAttribute]
private void set_ServerName(string value);
    [CompilerGeneratedAttribute]
internal int get_Port();
    [CompilerGeneratedAttribute]
private void set_Port(int value);
    [CompilerGeneratedAttribute]
public string get_InstanceName();
    [CompilerGeneratedAttribute]
internal void set_InstanceName(string value);
    [CompilerGeneratedAttribute]
public string get_PipeName();
    [CompilerGeneratedAttribute]
internal void set_PipeName(string value);
    [CompilerGeneratedAttribute]
public string get_PipeHostName();
    [CompilerGeneratedAttribute]
internal void set_PipeHostName(string value);
    [CompilerGeneratedAttribute]
internal bool get_IsBadDataSource();
    [CompilerGeneratedAttribute]
private void set_IsBadDataSource(bool value);
    [CompilerGeneratedAttribute]
internal bool get_IsSsrpRequired();
    [CompilerGeneratedAttribute]
private void set_IsSsrpRequired(bool value);
    private void PopulateProtocol();
    public static string GetLocalDBInstance(string dataSource, Boolean& error);
    public static DataSource ParseServerName(string dataSource);
    private void InferLocalServerName();
    private bool InferConnectionDetails();
    private void ReportSNIError(SNIProviders provider);
    private bool InferNamedPipesInformation();
    private static bool IsLocalHost(string serverName);
}
internal class System.Data.SqlClient.SNI.LocalDB : object {
    internal static string GetLocalDBConnectionString(string localDbInstance);
}
internal class System.Data.SqlClient.SNI.SNIAsyncCallback : MulticastDelegate {
    public SNIAsyncCallback(object object, IntPtr method);
    public virtual void Invoke(SNIPacket packet, UInt32 sniErrorCode);
    public virtual IAsyncResult BeginInvoke(SNIPacket packet, UInt32 sniErrorCode, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.SNI.SNICommon : object {
    
internal static int ConnTerminatedError;
    
internal static int InvalidParameterError;
    
internal static int ProtocolNotSupportedError;
    
internal static int ConnTimeoutError;
    
internal static int ConnNotUsableError;
    
internal static int InvalidConnStringError;
    
internal static int HandshakeFailureError;
    
internal static int InternalExceptionError;
    
internal static int ConnOpenFailedError;
    
internal static int ErrorSpnLookup;
    
internal static int LocalDBErrorCode;
    
internal static int MultiSubnetFailoverWithMoreThan64IPs;
    
internal static int MultiSubnetFailoverWithInstanceSpecified;
    
internal static int MultiSubnetFailoverWithNonTcpProtocol;
    
internal static int MaxErrorValue;
    
internal static int LocalDBNoInstanceName;
    
internal static int LocalDBNoInstallation;
    
internal static int LocalDBInvalidConfig;
    
internal static int LocalDBNoSqlUserInstanceDllPath;
    
internal static int LocalDBInvalidSqlUserInstanceDllPath;
    
internal static int LocalDBFailedToLoadDll;
    
internal static int LocalDBBadRuntime;
    internal static bool ValidateSslServerCertificate(string targetServerName, object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniError, string errorMessage);
    internal static UInt32 ReportSNIError(SNIProviders provider, UInt32 sniError, Exception sniException);
    internal static UInt32 ReportSNIError(SNIError error);
}
internal class System.Data.SqlClient.SNI.SNIError : object {
    
public SNIProviders provider;
    
public string errorMessage;
    
public UInt32 nativeError;
    
public UInt32 sniError;
    
public string function;
    
public UInt32 lineNumber;
    
public Exception exception;
    public SNIError(SNIProviders provider, UInt32 nativeError, UInt32 sniErrorCode, string errorMessage);
    public SNIError(SNIProviders provider, UInt32 sniErrorCode, Exception sniException);
}
internal abstract class System.Data.SqlClient.SNI.SNIHandle : object {
    
public UInt32 Status { get; }
    
public Guid ConnectionId { get; }
    public abstract virtual void Dispose();
    public abstract virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public abstract virtual void SetBufferSize(int bufferSize);
    public abstract virtual UInt32 Send(SNIPacket packet);
    public abstract virtual UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public abstract virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public abstract virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public abstract virtual UInt32 EnableSsl(UInt32 options);
    public abstract virtual void DisableSsl();
    public abstract virtual UInt32 CheckConnection();
    public abstract virtual UInt32 get_Status();
    public abstract virtual Guid get_ConnectionId();
}
internal class System.Data.SqlClient.SNI.SNILoadHandle : object {
    
public static SNILoadHandle SingletonInstance;
    
public EncryptionOptions _encryptionOption;
    
public ThreadLocal`1<SNIError> _lastError;
    
private UInt32 _status;
    
public SNIError LastError { get; public set; }
    
public UInt32 Status { get; }
    
public EncryptionOptions Options { get; }
    private static SNILoadHandle();
    public SNIError get_LastError();
    public void set_LastError(SNIError value);
    public UInt32 get_Status();
    public EncryptionOptions get_Options();
}
internal class System.Data.SqlClient.SNI.SNIMarsConnection : object {
    
private Guid _connectionId;
    
private Dictionary`2<int, SNIMarsHandle> _sessions;
    
private Byte[] _headerBytes;
    
private SNIHandle _lowerHandle;
    
private ushort _nextSessionId;
    
private int _currentHeaderByteCount;
    
private int _dataBytesLeft;
    
private SNISMUXHeader _currentHeader;
    
private SNIPacket _currentPacket;
    
public Guid ConnectionId { get; }
    public SNIMarsConnection(SNIHandle lowerHandle);
    public Guid get_ConnectionId();
    public SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    public UInt32 StartReceive();
    public UInt32 Send(SNIPacket packet);
    public UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public UInt32 ReceiveAsync(SNIPacket& packet);
    public UInt32 CheckConnection();
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleReceiveComplete(SNIPacket packet, UInt32 sniErrorCode);
    public UInt32 EnableSsl(UInt32 options);
    public void DisableSsl();
}
internal class System.Data.SqlClient.SNI.SNIMarsHandle : SNIHandle {
    
private static UInt32 ACK_THRESHOLD;
    
private SNIMarsConnection _connection;
    
private UInt32 _status;
    
private Queue`1<SNIPacket> _receivedPacketQueue;
    
private Queue`1<SNIMarsQueuedPacket> _sendPacketQueue;
    
private object _callbackObject;
    
private Guid _connectionId;
    
private ushort _sessionId;
    
private ManualResetEventSlim _packetEvent;
    
private ManualResetEventSlim _ackEvent;
    
private SNISMUXHeader _currentHeader;
    
private UInt32 _sendHighwater;
    
private int _asyncReceives;
    
private UInt32 _receiveHighwater;
    
private UInt32 _receiveHighwaterLastAck;
    
private UInt32 _sequenceNumber;
    
private SNIError _connectionError;
    
public Guid ConnectionId { get; }
    
public UInt32 Status { get; }
    public SNIMarsHandle(SNIMarsConnection connection, ushort sessionId, object callbackObject, bool async);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual void Dispose();
    private void SendControlPacket(SNISMUXFlags flags);
    private void GetSMUXHeaderBytes(int length, byte flags, Byte[]& headerBytes);
    private SNIPacket GetSMUXEncapsulatedPacket(SNIPacket packet);
    public virtual UInt32 Send(SNIPacket packet);
    private UInt32 InternalSendAsync(SNIPacket packet, SNIAsyncCallback callback);
    private UInt32 SendPendingPackets();
    public virtual UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public void HandleReceiveError(SNIPacket packet);
    public void HandleSendComplete(SNIPacket packet, UInt32 sniErrorCode);
    public void HandleAck(UInt32 highwater);
    public void HandleReceiveComplete(SNIPacket packet, SNISMUXHeader header);
    private void SendAckIfNecessary();
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual UInt32 CheckConnection();
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
}
internal class System.Data.SqlClient.SNI.SNIMarsQueuedPacket : object {
    
private SNIPacket _packet;
    
private SNIAsyncCallback _callback;
    
public SNIPacket Packet { get; public set; }
    
public SNIAsyncCallback Callback { get; public set; }
    public SNIMarsQueuedPacket(SNIPacket packet, SNIAsyncCallback callback);
    public SNIPacket get_Packet();
    public void set_Packet(SNIPacket value);
    public SNIAsyncCallback get_Callback();
    public void set_Callback(SNIAsyncCallback value);
}
internal class System.Data.SqlClient.SNI.SNINpHandle : SNIHandle {
    
internal static string DefaultPipePath;
    
private static int MAX_PIPE_INSTANCES;
    
private string _targetServer;
    
private object _callbackObject;
    
private TaskScheduler _writeScheduler;
    
private TaskFactory _writeTaskFactory;
    
private Stream _stream;
    
private NamedPipeClientStream _pipeStream;
    
private SslOverTdsStream _sslOverTdsStream;
    
private SslStream _sslStream;
    
private SNIAsyncCallback _receiveCallback;
    
private SNIAsyncCallback _sendCallback;
    
private bool _validateCert;
    
private UInt32 _status;
    
private int _bufferSize;
    
private Guid _connectionId;
    
public Guid ConnectionId { get; }
    
public UInt32 Status { get; }
    public SNINpHandle(string serverName, string pipeName, long timerExpire, object callbackObject);
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    public virtual UInt32 CheckConnection();
    public virtual void Dispose();
    public virtual UInt32 Receive(SNIPacket& packet, int timeout);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
}
internal class System.Data.SqlClient.SNI.SNIPacket : object {
    
private Byte[] _data;
    
private int _length;
    
private int _capacity;
    
private int _offset;
    
private string _description;
    
private SNIAsyncCallback _completionCallback;
    
public string Description { get; public set; }
    
public int DataLeft { get; }
    
public int Length { get; }
    
public bool IsInvalid { get; }
    public SNIPacket(SNIHandle handle);
    public string get_Description();
    public void set_Description(string value);
    public int get_DataLeft();
    public int get_Length();
    public bool get_IsInvalid();
    public sealed virtual void Dispose();
    public void SetCompletionCallback(SNIAsyncCallback completionCallback);
    public void InvokeCompletionCallback(UInt32 sniErrorCode);
    public void Allocate(int capacity);
    public SNIPacket Clone();
    public void GetData(Byte[] buffer, Int32& dataSize);
    public void SetData(Byte[] data, int length);
    public int TakeData(SNIPacket packet, int size);
    public void AppendData(Byte[] data, int size);
    public void AppendPacket(SNIPacket packet);
    public int TakeData(Byte[] buffer, int dataOffset, int size);
    public void Release();
    public void Reset();
    public void ReadFromStreamAsync(Stream stream, SNIAsyncCallback callback);
    public void ReadFromStream(Stream stream);
    public void WriteToStream(Stream stream);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SNIPacket packet);
}
internal enum System.Data.SqlClient.SNI.SNIProviders : Enum {
    
public int value__;
    
public static SNIProviders HTTP_PROV;
    
public static SNIProviders NP_PROV;
    
public static SNIProviders SESSION_PROV;
    
public static SNIProviders SIGN_PROV;
    
public static SNIProviders SM_PROV;
    
public static SNIProviders SMUX_PROV;
    
public static SNIProviders SSL_PROV;
    
public static SNIProviders TCP_PROV;
    
public static SNIProviders MAX_PROVS;
    
public static SNIProviders INVALID_PROV;
}
internal class System.Data.SqlClient.SNI.SNIProxy : object {
    
private static int DefaultSqlServerPort;
    
private static int DefaultSqlServerDacPort;
    
private static string SqlServerSpnHeader;
    
public static SNIProxy Singleton;
    private static SNIProxy();
    public void Terminate();
    public UInt32 EnableSsl(SNIHandle handle, UInt32 options);
    public UInt32 DisableSsl(SNIHandle handle);
    public void GenSspiClientContext(SspiClientContextStatus sspiClientContextStatus, Byte[] receivedBuff, Byte[]& sendBuff, Byte[] serverName);
    private static bool IsErrorStatus(SecurityStatusPalErrorCode errorCode);
    public UInt32 InitializeSspiPackage(UInt32& maxLength);
    public UInt32 SetConnectionBufferSize(SNIHandle handle, UInt32 bufferSize);
    public UInt32 PacketGetData(SNIPacket packet, Byte[] inBuff, UInt32& dataSize);
    public UInt32 ReadSyncOverAsync(SNIHandle handle, SNIPacket& packet, int timeout);
    public UInt32 GetConnectionId(SNIHandle handle, Guid& clientConnectionId);
    public UInt32 WritePacket(SNIHandle handle, SNIPacket packet, bool sync);
    public SNIHandle CreateConnectionHandle(object callbackObject, string fullServerName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool parallel, bool isIntegratedSecurity);
    private static Byte[] GetSqlServerSPN(DataSource dataSource);
    private static Byte[] GetSqlServerSPN(string hostNameOrAddress, string portOrInstanceName);
    private SNITCPHandle CreateTcpHandle(DataSource details, long timerExpire, object callbackObject, bool parallel);
    private SNINpHandle CreateNpHandle(DataSource details, long timerExpire, object callbackObject, bool parallel);
    public UInt32 ReadAsync(SNIHandle handle, SNIPacket& packet);
    public void PacketSetData(SNIPacket packet, Byte[] data, int length);
    public void PacketRelease(SNIPacket packet);
    public UInt32 CheckConnection(SNIHandle handle);
    public SNIError GetLastError();
    private string GetLocalDBDataSource(string fullServerName, Boolean& error);
}
[FlagsAttribute]
internal enum System.Data.SqlClient.SNI.SNISMUXFlags : Enum {
    
public int value__;
    
public static SNISMUXFlags SMUX_SYN;
    
public static SNISMUXFlags SMUX_ACK;
    
public static SNISMUXFlags SMUX_FIN;
    
public static SNISMUXFlags SMUX_DATA;
}
internal class System.Data.SqlClient.SNI.SNISMUXHeader : object {
    
public static int HEADER_LENGTH;
    
public byte SMID;
    
public byte flags;
    
public ushort sessionId;
    
public UInt32 length;
    
public UInt32 sequenceNumber;
    
public UInt32 highwater;
}
internal class System.Data.SqlClient.SNI.SNITCPHandle : SNIHandle {
    
private string _targetServer;
    
private object _callbackObject;
    
private Socket _socket;
    
private NetworkStream _tcpStream;
    
private TaskScheduler _writeScheduler;
    
private TaskFactory _writeTaskFactory;
    
private Stream _stream;
    
private SslStream _sslStream;
    
private SslOverTdsStream _sslOverTdsStream;
    
private SNIAsyncCallback _receiveCallback;
    
private SNIAsyncCallback _sendCallback;
    
private bool _validateCert;
    
private int _bufferSize;
    
private UInt32 _status;
    
private Guid _connectionId;
    
private static int MaxParallelIpAddresses;
    
public Guid ConnectionId { get; }
    
public UInt32 Status { get; }
    public SNITCPHandle(string serverName, int port, long timerExpire, object callbackObject, bool parallel);
    public virtual void Dispose();
    public virtual Guid get_ConnectionId();
    public virtual UInt32 get_Status();
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SNITCPHandle/<ConnectAsync>d__22")]
private static Task`1<Socket> ConnectAsync(string serverName, int port);
    private static Task`1<Socket> ParallelConnectAsync(IPAddress[] serverAddresses, int port);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SNI.SNITCPHandle/<ParallelConnectHelper>d__24")]
private static void ParallelConnectHelper(Socket socket, Task connectTask, TaskCompletionSource`1<Socket> tcs, StrongBox`1<int> pendingCompleteCount, StrongBox`1<Exception> lastError, List`1<Socket> sockets);
    public virtual UInt32 EnableSsl(UInt32 options);
    public virtual void DisableSsl();
    private bool ValidateServerCertificate(object sender, X509Certificate cert, X509Chain chain, SslPolicyErrors policyErrors);
    public virtual void SetBufferSize(int bufferSize);
    public virtual UInt32 Send(SNIPacket packet);
    public virtual UInt32 Receive(SNIPacket& packet, int timeoutInMilliseconds);
    public virtual void SetAsyncCallbacks(SNIAsyncCallback receiveCallback, SNIAsyncCallback sendCallback);
    public virtual UInt32 SendAsync(SNIPacket packet, SNIAsyncCallback callback);
    public virtual UInt32 ReceiveAsync(SNIPacket& packet);
    public virtual UInt32 CheckConnection();
    private UInt32 ReportTcpSNIError(Exception sniException);
    private UInt32 ReportTcpSNIError(UInt32 nativeError, UInt32 sniError, string errorMessage);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, Exception sniException);
    private UInt32 ReportErrorAndReleasePacket(SNIPacket packet, UInt32 nativeError, UInt32 sniError, string errorMessage);
}
internal class System.Data.SqlClient.SNI.SslOverTdsStream : Stream {
    
private Stream _stream;
    
private int _packetBytes;
    
private bool _encapsulate;
    
private static int PACKET_SIZE_WITHOUT_HEADER;
    
private static int PRELOGIN_PACKET_TYPE;
    
public long Position { get; public set; }
    
public bool CanRead { get; }
    
public bool CanWrite { get; }
    
public bool CanSeek { get; }
    
public long Length { get; }
    public SslOverTdsStream(Stream stream);
    public void FinishHandshake();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    public virtual void Flush();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
}
internal class System.Data.SqlClient.SNI.SspiClientContextStatus : object {
    [CompilerGeneratedAttribute]

private SafeFreeCredentials <CredentialsHandle>k__BackingField;
    [CompilerGeneratedAttribute]

private SafeDeleteContext <SecurityContext>k__BackingField;
    [CompilerGeneratedAttribute]

private ContextFlagsPal <ContextFlags>k__BackingField;
    
public SafeFreeCredentials CredentialsHandle { get; public set; }
    
public SafeDeleteContext SecurityContext { get; public set; }
    
public ContextFlagsPal ContextFlags { get; public set; }
    [CompilerGeneratedAttribute]
public SafeFreeCredentials get_CredentialsHandle();
    [CompilerGeneratedAttribute]
public void set_CredentialsHandle(SafeFreeCredentials value);
    [CompilerGeneratedAttribute]
public SafeDeleteContext get_SecurityContext();
    [CompilerGeneratedAttribute]
public void set_SecurityContext(SafeDeleteContext value);
    [CompilerGeneratedAttribute]
public ContextFlagsPal get_ContextFlags();
    [CompilerGeneratedAttribute]
public void set_ContextFlags(ContextFlagsPal value);
}
internal class System.Data.SqlClient.SNI.SSRP : object {
    
private static char SemicolonSeparator;
    
private static int SqlServerBrowserPort;
    internal static int GetPortByInstanceName(string browserHostName, string instanceName);
    private static Byte[] CreateInstanceInfoRequest(string instanceName);
    internal static int GetDacPortByInstanceName(string browserHostName, string instanceName);
    private static Byte[] CreateDacPortInfoRequest(string instanceName);
    private static Byte[] SendUDPRequest(string browserHostname, int port, Byte[] requestPacket);
}
internal class System.Data.SqlClient.SNI.TdsParserStateObjectManaged : TdsParserStateObject {
    
private SNIMarsConnection _marsConnection;
    
private SNIHandle _sessionHandle;
    
private SNIPacket _sniPacket;
    
internal SNIPacket _sniAsyncAttnPacket;
    
private Dictionary`2<SNIPacket, SNIPacket> _pendingWritePackets;
    
private WritePacketCache _writePacketCache;
    
internal SspiClientContextStatus sspiClientContextStatus;
    
internal SNIHandle Handle { get; }
    
internal UInt32 Status { get; }
    
internal object SessionHandle { get; }
    
protected object EmptyReadPacket { get; }
    public TdsParserStateObjectManaged(TdsParser parser);
    internal TdsParserStateObjectManaged(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal SNIHandle get_Handle();
    internal virtual UInt32 get_Status();
    internal virtual object get_SessionHandle();
    protected virtual object get_EmptyReadPacket();
    protected virtual bool CheckPacket(object packet, TaskCompletionSource`1<object> source);
    protected virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    internal SNIMarsHandle CreateMarsSession(object callbackObject, bool async);
    protected virtual UInt32 SNIPacketGetData(object packet, Byte[] _inBuff, UInt32& dataSize);
    internal virtual void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool parallel, bool isIntegratedSecurity);
    internal void ReadAsyncCallback(SNIPacket packet, UInt32 error);
    internal void WriteAsyncCallback(SNIPacket packet, UInt32 sniError);
    protected virtual void RemovePacketFromPendingList(object packet);
    internal virtual void Dispose();
    internal virtual void DisposePacketCache();
    protected virtual void FreeGcHandle(int remaining, bool release);
    internal virtual bool IsFailedHandle();
    internal virtual object ReadSyncOverAsync(int timeoutRemaining, bool isMarsOn, UInt32& error);
    internal virtual bool IsPacketEmpty(object packet);
    internal virtual void ReleasePacket(object syncReadPacket);
    internal virtual UInt32 CheckConnection();
    internal virtual object ReadAsync(UInt32& error, Object& handle);
    internal virtual object CreateAndSetAttentionPacket();
    internal virtual UInt32 WritePacket(object packet, bool sync);
    internal virtual object AddPacketToPendingList(object packet);
    internal virtual bool IsValidPacket(object packetPointer);
    internal virtual object GetResetWritePacket();
    internal virtual void ClearAllWritePackets();
    internal virtual void SetPacketData(object packet, Byte[] buffer, int bytesUsed);
    internal virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal virtual UInt32 DisabeSsl();
    internal virtual UInt32 EnableMars(UInt32& info);
    internal virtual UInt32 EnableSsl(UInt32& info);
    internal virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer);
    internal virtual UInt32 WaitForSSLHandShakeToComplete();
}
internal enum System.Data.SqlClient.SniContext : Enum {
    
public int value__;
    
public static SniContext Undefined;
    
public static SniContext Snix_Connect;
    
public static SniContext Snix_PreLoginBeforeSuccessfulWrite;
    
public static SniContext Snix_PreLogin;
    
public static SniContext Snix_LoginSspi;
    
public static SniContext Snix_ProcessSspi;
    
public static SniContext Snix_Login;
    
public static SniContext Snix_EnableMars;
    
public static SniContext Snix_AutoEnlist;
    
public static SniContext Snix_GetMarsSession;
    
public static SniContext Snix_Execute;
    
public static SniContext Snix_Read;
    
public static SniContext Snix_Close;
    
public static SniContext Snix_SendRows;
}
internal class System.Data.SqlClient.SNIErrorDetails : ValueType {
    
public string errorMessage;
    
public UInt32 nativeError;
    
public UInt32 sniErrorNumber;
    
public int provider;
    
public UInt32 lineNumber;
    
public string function;
    
public Exception exception;
}
internal static class System.Data.SqlClient.SNINativeMethodWrapper : object {
}
public enum System.Data.SqlClient.SortOrder : Enum {
    
public int value__;
    
public static SortOrder Unspecified;
    
public static SortOrder Ascending;
    
public static SortOrder Descending;
}
internal static class System.Data.SqlClient.SQL : object {
    
internal static Byte[] AttentionHeader;
    
internal static int SqlDependencyTimeoutDefault;
    
internal static int SqlDependencyServerTimeout;
    
internal static string SqlNotificationServiceDefault;
    
internal static string SqlNotificationStoredProcedureDefault;
    private static SQL();
    internal static Exception CannotGetDTCAddress();
    internal static Exception InvalidInternalPacketSize(string str);
    internal static Exception InvalidPacketSize();
    internal static Exception InvalidPacketSizeValue();
    internal static Exception InvalidSSPIPacketSize();
    internal static Exception NullEmptyTransactionName();
    internal static Exception UserInstanceFailoverNotCompatible();
    internal static Exception InvalidSQLServerVersionUnknown();
    internal static Exception SynchronousCallMayNotPend();
    internal static Exception ConnectionLockedForBcpEvent();
    internal static Exception InstanceFailure();
    internal static Exception GlobalTransactionsNotEnabled();
    internal static Exception UnknownSysTxIsolationLevel(IsolationLevel isolationLevel);
    internal static Exception InvalidPartnerConfiguration(string server, string database);
    internal static Exception MARSUnspportedOnConnection();
    internal static Exception CannotModifyPropertyAsyncOperationInProgress(string property);
    internal static Exception NonLocalSSEInstance();
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException NotSupportedCommandType(CommandType value);
    internal static ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value);
    internal static Exception OperationCancelled();
    internal static Exception PendingBeginXXXExists();
    internal static ArgumentOutOfRangeException InvalidSqlDependencyTimeout(string param);
    internal static Exception NonXmlResult();
    internal static Exception InvalidParameterTypeNameFormat();
    internal static Exception InvalidParameterNameLength(string value);
    internal static Exception PrecisionValueOutOfRange(byte precision);
    internal static Exception ScaleValueOutOfRange(byte scale);
    internal static Exception TimeScaleValueOutOfRange(byte scale);
    internal static Exception InvalidSqlDbType(SqlDbType value);
    internal static Exception UnsupportedTVPOutputParameter(ParameterDirection direction, string paramName);
    internal static Exception DBNullNotSupportedForTVPValues(string paramName);
    internal static Exception UnexpectedTypeNameForNonStructParams(string paramName);
    internal static Exception ParameterInvalidVariant(string paramName);
    internal static Exception MustSetTypeNameForParam(string paramType, string paramName);
    internal static Exception NullSchemaTableDataTypeNotSupported(string columnName);
    internal static Exception InvalidSchemaTableOrdinals();
    internal static Exception EnumeratedRecordMetaDataChanged(string fieldName, int recordNumber);
    internal static Exception EnumeratedRecordFieldCountChanged(int recordNumber);
    internal static Exception InvalidTDSVersion();
    internal static Exception ParsingError();
    internal static Exception MoneyOverflow(string moneyValue);
    internal static Exception SmallDateTimeOverflow(string datetime);
    internal static Exception SNIPacketAllocationFailure();
    internal static Exception TimeOverflow(string time);
    internal static Exception InvalidRead();
    internal static Exception NonBlobColumn(string columnName);
    internal static Exception NonCharColumn(string columnName);
    internal static Exception StreamNotSupportOnColumnType(string columnName);
    internal static Exception TextReaderNotSupportOnColumnType(string columnName);
    internal static Exception XmlReaderNotSupportOnColumnType(string columnName);
    internal static Exception SqlCommandHasExistingSqlNotificationRequest();
    internal static Exception SqlDepDefaultOptionsButNoStart();
    internal static Exception SqlDependencyDatabaseBrokerDisabled();
    internal static Exception SqlDependencyEventNoDuplicate();
    internal static Exception SqlDependencyDuplicateStart();
    internal static Exception SqlDependencyIdMismatch();
    internal static Exception SqlDependencyNoMatchingServerStart();
    internal static Exception SqlDependencyNoMatchingServerDatabaseStart();
    internal static TransactionPromotionException PromotionFailed(Exception inner);
    internal static Exception InvalidSqlDbTypeForConstructor(SqlDbType type);
    internal static Exception NameTooLong(string parameterName);
    internal static Exception InvalidSortOrder(SortOrder order);
    internal static Exception MustSpecifyBothSortOrderAndOrdinal(SortOrder order, int ordinal);
    internal static Exception UnsupportedColumnTypeForSqlProvider(string columnName, string typeName);
    internal static Exception InvalidColumnMaxLength(string columnName, long maxLength);
    internal static Exception InvalidColumnPrecScale();
    internal static Exception NotEnoughColumnsInStructuredType();
    internal static Exception DuplicateSortOrdinal(int sortOrdinal);
    internal static Exception MissingSortOrdinal(int sortOrdinal);
    internal static Exception SortOrdinalGreaterThanFieldCount(int columnOrdinal, int sortOrdinal);
    internal static Exception IEnumerableOfSqlDataRecordHasNoRows();
    internal static Exception BulkLoadMappingInaccessible();
    internal static Exception BulkLoadMappingsNamesOrOrdinalsOnly();
    internal static Exception BulkLoadCannotConvertValue(Type sourcetype, MetaType metatype, Exception e);
    internal static Exception BulkLoadNonMatchingColumnMapping();
    internal static Exception BulkLoadNonMatchingColumnName(string columnName);
    internal static Exception BulkLoadNonMatchingColumnName(string columnName, Exception e);
    internal static Exception BulkLoadStringTooLong();
    internal static Exception BulkLoadInvalidVariantValue();
    internal static Exception BulkLoadInvalidTimeout(int timeout);
    internal static Exception BulkLoadExistingTransaction();
    internal static Exception BulkLoadNoCollation();
    internal static Exception BulkLoadConflictingTransactionOption();
    internal static Exception BulkLoadLcidMismatch(int sourceLcid, string sourceColumnName, int destinationLcid, string destinationColumnName);
    internal static Exception InvalidOperationInsideEvent();
    internal static Exception BulkLoadMissingDestinationTable();
    internal static Exception BulkLoadInvalidDestinationTable(string tableName, Exception inner);
    internal static Exception BulkLoadBulkLoadNotAllowDBNull(string columnName);
    internal static Exception BulkLoadPendingOperation();
    internal static Exception InvalidTableDerivedPrecisionForTvp(string columnName, byte precision);
    internal static Exception ConnectionDoomed();
    internal static Exception OpenResultCountExceeded();
    internal static Exception UnsupportedSysTxForGlobalTransactions();
    internal static Exception MultiSubnetFailoverWithFailoverPartner(bool serverProvidedFailoverPartner, SqlInternalConnectionTds internalConnection);
    internal static Exception MultiSubnetFailoverWithMoreThan64IPs();
    internal static Exception MultiSubnetFailoverWithInstanceSpecified();
    internal static Exception MultiSubnetFailoverWithNonTcpProtocol();
    internal static Exception ROR_FailoverNotSupportedConnString();
    internal static Exception ROR_FailoverNotSupportedServer(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_RecursiveRoutingNotSupported(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_UnexpectedRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_InvalidRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static Exception ROR_TimeoutAfterRoutingInfo(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_ReconnectTimeout();
    internal static SqlException CR_ReconnectionCancelled();
    internal static Exception CR_NextAttemptWillExceedQueryTimeout(SqlException innerException, Guid connectionId);
    internal static Exception CR_EncryptionChanged(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_AllAttemptsFailed(SqlException innerException, Guid connectionId);
    internal static SqlException CR_NoCRAckAtReconnection(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_TDSVersionNotPreserved(SqlInternalConnectionTds internalConnection);
    internal static SqlException CR_UnrecoverableServer(Guid connectionId);
    internal static SqlException CR_UnrecoverableClient(Guid connectionId);
    internal static Exception StreamWriteNotSupported();
    internal static Exception StreamReadNotSupported();
    internal static Exception StreamSeekNotSupported();
    internal static SqlNullValueException SqlNullValue();
    internal static Exception SubclassMustOverride();
    internal static Exception UnsupportedKeyword(string keyword);
    internal static Exception NetworkLibraryKeywordNotSupported();
    internal static Exception UnsupportedFeatureAndToken(SqlInternalConnectionTds internalConnection, string token);
    internal static Exception BatchedUpdatesNotAvailableOnContextConnection();
    internal static string GetSNIErrorMessage(int sniError);
}
public enum System.Data.SqlClient.SqlAuthenticationMethod : Enum {
    
public int value__;
    
public static SqlAuthenticationMethod NotSpecified;
    
public static SqlAuthenticationMethod SqlPassword;
    
public static SqlAuthenticationMethod ActiveDirectoryPassword;
    
public static SqlAuthenticationMethod ActiveDirectoryIntegrated;
}
internal class System.Data.SqlClient.SqlBuffer : object {
    
private bool _isNull;
    
private StorageType _type;
    
private Storage _value;
    
private object _object;
    
private static String[] s_katmaiDateTimeOffsetFormatByScale;
    
private static String[] s_katmaiDateTime2FormatByScale;
    
private static String[] s_katmaiTimeFormatByScale;
    
internal bool IsEmpty { get; }
    
internal bool IsNull { get; }
    
internal StorageType VariantInternalStorageType { get; }
    
internal bool Boolean { get; internal set; }
    
internal byte Byte { get; internal set; }
    
internal Byte[] ByteArray { get; }
    
internal DateTime DateTime { get; }
    
internal decimal Decimal { get; }
    
internal double Double { get; internal set; }
    
internal Guid Guid { get; }
    
internal short Int16 { get; internal set; }
    
internal int Int32 { get; internal set; }
    
internal long Int64 { get; internal set; }
    
internal float Single { get; internal set; }
    
internal string String { get; }
    
internal string KatmaiDateTimeString { get; }
    
internal SqlString KatmaiDateTimeSqlString { get; }
    
internal TimeSpan Time { get; }
    
internal DateTimeOffset DateTimeOffset { get; }
    
internal SqlBinary SqlBinary { get; internal set; }
    
internal SqlBoolean SqlBoolean { get; }
    
internal SqlByte SqlByte { get; }
    
internal SqlCachedBuffer SqlCachedBuffer { get; internal set; }
    
internal SqlXml SqlXml { get; internal set; }
    
internal SqlDateTime SqlDateTime { get; }
    
internal SqlDecimal SqlDecimal { get; }
    
internal SqlDouble SqlDouble { get; }
    
internal SqlGuid SqlGuid { get; internal set; }
    
internal SqlInt16 SqlInt16 { get; }
    
internal SqlInt32 SqlInt32 { get; }
    
internal SqlInt64 SqlInt64 { get; }
    
internal SqlMoney SqlMoney { get; }
    
internal SqlSingle SqlSingle { get; }
    
internal SqlString SqlString { get; }
    
internal object SqlValue { get; }
    
internal object Value { get; }
    private SqlBuffer(SqlBuffer value);
    private static SqlBuffer();
    internal bool get_IsEmpty();
    internal bool get_IsNull();
    internal StorageType get_VariantInternalStorageType();
    internal bool get_Boolean();
    internal void set_Boolean(bool value);
    internal byte get_Byte();
    internal void set_Byte(byte value);
    internal Byte[] get_ByteArray();
    internal DateTime get_DateTime();
    internal decimal get_Decimal();
    internal double get_Double();
    internal void set_Double(double value);
    internal Guid get_Guid();
    internal short get_Int16();
    internal void set_Int16(short value);
    internal int get_Int32();
    internal void set_Int32(int value);
    internal long get_Int64();
    internal void set_Int64(long value);
    internal float get_Single();
    internal void set_Single(float value);
    internal string get_String();
    internal string get_KatmaiDateTimeString();
    internal SqlString get_KatmaiDateTimeSqlString();
    internal TimeSpan get_Time();
    internal DateTimeOffset get_DateTimeOffset();
    private static long GetTicksFromDateTime2Info(DateTime2Info dateTime2Info);
    internal SqlBinary get_SqlBinary();
    internal void set_SqlBinary(SqlBinary value);
    internal SqlBoolean get_SqlBoolean();
    internal SqlByte get_SqlByte();
    internal SqlCachedBuffer get_SqlCachedBuffer();
    internal void set_SqlCachedBuffer(SqlCachedBuffer value);
    internal SqlXml get_SqlXml();
    internal void set_SqlXml(SqlXml value);
    internal SqlDateTime get_SqlDateTime();
    internal SqlDecimal get_SqlDecimal();
    internal SqlDouble get_SqlDouble();
    internal SqlGuid get_SqlGuid();
    internal void set_SqlGuid(SqlGuid value);
    internal SqlInt16 get_SqlInt16();
    internal SqlInt32 get_SqlInt32();
    internal SqlInt64 get_SqlInt64();
    internal SqlMoney get_SqlMoney();
    internal SqlSingle get_SqlSingle();
    internal SqlString get_SqlString();
    internal object get_SqlValue();
    internal object get_Value();
    internal Type GetTypeFromStorageType(bool isSqlType);
    internal static SqlBuffer[] CreateBufferArray(int length);
    internal static SqlBuffer[] CloneBufferArray(SqlBuffer[] values);
    internal static void Clear(SqlBuffer[] values);
    internal void Clear();
    internal void SetToDateTime(int daypart, int timepart);
    internal void SetToDecimal(byte precision, byte scale, bool positive, Int32[] bits);
    internal void SetToMoney(long value);
    internal void SetToNullOfType(StorageType storageType);
    internal void SetToString(string value);
    internal void SetToDate(Byte[] bytes);
    internal void SetToDate(DateTime date);
    internal void SetToTime(Byte[] bytes, int length, byte scale);
    internal void SetToTime(TimeSpan timeSpan, byte scale);
    internal void SetToDateTime2(Byte[] bytes, int length, byte scale);
    internal void SetToDateTime2(DateTime dateTime, byte scale);
    internal void SetToDateTimeOffset(Byte[] bytes, int length, byte scale);
    internal void SetToDateTimeOffset(DateTimeOffset dateTimeOffset, byte scale);
    private static void FillInTimeInfo(TimeInfo& timeInfo, Byte[] timeBytes, int length, byte scale);
    private static int GetDateFromByteArray(Byte[] buf, int offset);
    private void ThrowIfNull();
}
public class System.Data.SqlClient.SqlBulkCopy : object {
    
private static int MetaDataResultId;
    
private static int CollationResultId;
    
private static int CollationId;
    
private static int MAX_LENGTH;
    
private static int DefaultCommandTimeout;
    
private bool _enableStreaming;
    
private int _batchSize;
    
private bool _ownConnection;
    
private SqlBulkCopyOptions _copyOptions;
    
private int _timeout;
    
private string _destinationTableName;
    
private int _rowsCopied;
    
private int _notifyAfter;
    
private int _rowsUntilNotification;
    
private bool _insideRowsCopiedEvent;
    
private object _rowSource;
    
private SqlDataReader _SqlDataReaderRowSource;
    
private DbDataReader _DbDataReaderRowSource;
    
private DataTable _dataTableSource;
    
private SqlBulkCopyColumnMappingCollection _columnMappings;
    
private SqlBulkCopyColumnMappingCollection _localColumnMappings;
    
private SqlConnection _connection;
    
private SqlTransaction _internalTransaction;
    
private SqlTransaction _externalTransaction;
    
private ValueSourceType _rowSourceType;
    
private DataRow _currentRow;
    
private int _currentRowLength;
    
private DataRowState _rowStateToSkip;
    
private IEnumerator _rowEnumerator;
    
private TdsParser _parser;
    
private TdsParserStateObject _stateObj;
    
private List`1<_ColumnMapping> _sortedColumnMappings;
    
private SqlRowsCopiedEventHandler _rowsCopiedEventHandler;
    
private int _savedBatchSize;
    
private bool _hasMoreRowToCopy;
    
private bool _isAsyncBulkCopy;
    
private bool _isBulkCopyingInProgress;
    
private SyncAsyncLock _parserLock;
    
private SourceColumnMetadata[] _currentRowMetadata;
    
public int BatchSize { get; public set; }
    
public int BulkCopyTimeout { get; public set; }
    
public bool EnableStreaming { get; public set; }
    
public SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    
public string DestinationTableName { get; public set; }
    
public int NotifyAfter { get; public set; }
    
internal SqlStatistics Statistics { get; }
    public SqlBulkCopy(SqlConnection connection);
    public SqlBulkCopy(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction);
    public SqlBulkCopy(string connectionString);
    public SqlBulkCopy(string connectionString, SqlBulkCopyOptions copyOptions);
    public int get_BatchSize();
    public void set_BatchSize(int value);
    public int get_BulkCopyTimeout();
    public void set_BulkCopyTimeout(int value);
    public bool get_EnableStreaming();
    public void set_EnableStreaming(bool value);
    public SqlBulkCopyColumnMappingCollection get_ColumnMappings();
    public string get_DestinationTableName();
    public void set_DestinationTableName(string value);
    public int get_NotifyAfter();
    public void set_NotifyAfter(int value);
    public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value);
    internal SqlStatistics get_Statistics();
    private sealed virtual override void System.IDisposable.Dispose();
    private bool IsCopyOption(SqlBulkCopyOptions copyOption);
    private string CreateInitialQuery();
    private Task`1<BulkCopySimpleResultSet> CreateAndExecuteInitialQueryAsync(BulkCopySimpleResultSet& result);
    private string AnalyzeTargetAndCreateUpdateBulkCommand(BulkCopySimpleResultSet internalResults);
    private Task SubmitUpdateBulkCommand(string TDSCommand);
    private void WriteMetaData(BulkCopySimpleResultSet internalResults);
    public void Close();
    private void Dispose(bool disposing);
    private object GetValueFromSourceRow(int destRowIndex, Boolean& isSqlType, Boolean& isDataFeed, Boolean& isNull);
    private Task ReadFromRowSourceAsync(CancellationToken cts);
    private bool ReadFromRowSource();
    private SourceColumnMetadata GetColumnMetadata(int ordinal);
    private void CreateOrValidateConnection(string method);
    private void RunParser(BulkCopySimpleResultSet bulkCopyHandler);
    private void RunParserReliably(BulkCopySimpleResultSet bulkCopyHandler);
    private void CommitTransaction();
    private void AbortTransaction();
    private void AppendColumnNameAndTypeName(StringBuilder query, string columnName, string typeName);
    private string UnquotedName(string name);
    private object ValidateBulkCopyVariant(object value);
    private object ConvertValue(object value, _SqlMetaData metadata, bool isNull, Boolean& isSqlType, Boolean& coercedToDataFeed);
    public void WriteToServer(DbDataReader reader);
    public void WriteToServer(IDataReader reader);
    public void WriteToServer(DataTable table);
    public void WriteToServer(DataTable table, DataRowState rowState);
    public void WriteToServer(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows);
    public Task WriteToServerAsync(DataRow[] rows, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DbDataReader reader);
    public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(IDataReader reader);
    public Task WriteToServerAsync(IDataReader reader, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table);
    public Task WriteToServerAsync(DataTable table, CancellationToken cancellationToken);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState);
    public Task WriteToServerAsync(DataTable table, DataRowState rowState, CancellationToken cancellationToken);
    private Task WriteRowSourceToServerAsync(int columnCount, CancellationToken ctoken);
    private void WriteRowSourceToServerCommon(int columnCount);
    internal void OnConnectionClosed();
    private void OnRowsCopied(SqlRowsCopiedEventArgs value);
    private bool FireRowsCopiedEvent(long rowsCopied);
    private Task ReadWriteColumnValueAsync(int col);
    private void RegisterForConnectionCloseNotification(Task`1& outerTask);
    private Task CopyColumnsAsync(int col, TaskCompletionSource`1<object> source);
    private void CopyColumnsAsyncSetupContinuation(TaskCompletionSource`1<object> source, Task task, int i);
    private void CheckAndRaiseNotification();
    private Task CheckForCancellation(CancellationToken cts, TaskCompletionSource`1<object> tcs);
    private TaskCompletionSource`1<object> ContinueTaskPend(Task task, TaskCompletionSource`1<object> source, Func`1<TaskCompletionSource`1<object>> action);
    private Task CopyRowsAsync(int rowsSoFar, int totalRows, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsync(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinued(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task CopyBatchesAsyncContinuedOnSuccess(BulkCopySimpleResultSet internalResults, string updateBulkCommandText, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void CopyBatchesAsyncContinuedOnError(bool cleanupParser);
    private void CleanUpStateObjectOnError();
    private void WriteToServerInternalRestContinuedAsync(BulkCopySimpleResultSet internalResults, CancellationToken cts, TaskCompletionSource`1<object> source);
    private void WriteToServerInternalRestAsync(CancellationToken cts, TaskCompletionSource`1<object> source);
    private Task WriteToServerInternalAsync(CancellationToken ctoken);
    [CompilerGeneratedAttribute]
private BulkCopySimpleResultSet <CreateAndExecuteInitialQueryAsync>b__71_0(Task t);
    [CompilerGeneratedAttribute]
private void <SubmitUpdateBulkCommand>b__73_0(Task t);
    [CompilerGeneratedAttribute]
private Task`1<bool> <ReadFromRowSourceAsync>b__78_0(Task`1<bool> t);
}
public class System.Data.SqlClient.SqlBulkCopyColumnMapping : object {
    
internal string _destinationColumnName;
    
internal int _destinationColumnOrdinal;
    
internal string _sourceColumnName;
    
internal int _sourceColumnOrdinal;
    
internal int _internalDestinationColumnOrdinal;
    
internal int _internalSourceColumnOrdinal;
    
public string DestinationColumn { get; public set; }
    
public int DestinationOrdinal { get; public set; }
    
public string SourceColumn { get; public set; }
    
public int SourceOrdinal { get; public set; }
    public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn);
    public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal);
    public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal);
    public string get_DestinationColumn();
    public void set_DestinationColumn(string value);
    public int get_DestinationOrdinal();
    public void set_DestinationOrdinal(int value);
    public string get_SourceColumn();
    public void set_SourceColumn(string value);
    public int get_SourceOrdinal();
    public void set_SourceOrdinal(int value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
    
private MappingSchema _mappingSchema;
    [CompilerGeneratedAttribute]

private bool <ReadOnly>k__BackingField;
    
internal bool ReadOnly { get; internal set; }
    
public SqlBulkCopyColumnMapping Item { get; }
    [CompilerGeneratedAttribute]
internal bool get_ReadOnly();
    [CompilerGeneratedAttribute]
internal void set_ReadOnly(bool value);
    public SqlBulkCopyColumnMapping get_Item(int index);
    public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn);
    public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex);
    public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex);
    private void AssertWriteAccess();
    public void Clear();
    public bool Contains(SqlBulkCopyColumnMapping value);
    public void CopyTo(SqlBulkCopyColumnMapping[] array, int index);
    internal void CreateDefaultMapping(int columnCount);
    public int IndexOf(SqlBulkCopyColumnMapping value);
    public void Insert(int index, SqlBulkCopyColumnMapping value);
    public void Remove(SqlBulkCopyColumnMapping value);
    public void RemoveAt(int index);
    internal void ValidateCollection();
}
[FlagsAttribute]
public enum System.Data.SqlClient.SqlBulkCopyOptions : Enum {
    
public int value__;
    
public static SqlBulkCopyOptions Default;
    
public static SqlBulkCopyOptions KeepIdentity;
    
public static SqlBulkCopyOptions CheckConstraints;
    
public static SqlBulkCopyOptions TableLock;
    
public static SqlBulkCopyOptions KeepNulls;
    
public static SqlBulkCopyOptions FireTriggers;
    
public static SqlBulkCopyOptions UseInternalTransaction;
    
public static SqlBulkCopyOptions AllowEncryptedValueModifications;
}
internal class System.Data.SqlClient.SqlCachedBuffer : object {
    
public static SqlCachedBuffer Null;
    
private static int _maxChunkSize;
    
private List`1<Byte[]> _cachedBytes;
    
internal List`1<Byte[]> CachedBytes { get; }
    
public bool IsNull { get; }
    private SqlCachedBuffer(List`1<Byte[]> cachedBytes);
    private static SqlCachedBuffer();
    internal List`1<Byte[]> get_CachedBytes();
    internal static bool TryCreate(SqlMetaDataPriv metadata, TdsParser parser, TdsParserStateObject stateObj, SqlCachedBuffer& buffer);
    private static void AddByteOrderMark(Byte[] byteArr, List`1<Byte[]> cachedBytes);
    internal Stream ToStream();
    public virtual string ToString();
    internal SqlString ToSqlString();
    internal SqlXml ToSqlXml();
    internal XmlReader ToXmlReader();
    public sealed virtual bool get_IsNull();
}
internal class System.Data.SqlClient.SqlCachedStream : Stream {
    
private int _currentPosition;
    
private int _currentArrayIndex;
    
private List`1<Byte[]> _cachedBytes;
    
private long _totalLength;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    
private long TotalLength { get; }
    internal SqlCachedStream(SqlCachedBuffer sqlBuf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    private void SetInternalPosition(long lPos, string argumentName);
    private long get_TotalLength();
}
[ExtensionAttribute]
internal static class System.Data.SqlClient.SqlClientDiagnosticListenerExtensions : object {
    
public static string DiagnosticListenerName;
    
private static string SqlClientPrefix;
    
public static string SqlBeforeExecuteCommand;
    
public static string SqlAfterExecuteCommand;
    
public static string SqlErrorExecuteCommand;
    
public static string SqlBeforeOpenConnection;
    
public static string SqlAfterOpenConnection;
    
public static string SqlErrorOpenConnection;
    
public static string SqlBeforeCloseConnection;
    
public static string SqlAfterCloseConnection;
    
public static string SqlErrorCloseConnection;
    
public static string SqlBeforeCommitTransaction;
    
public static string SqlAfterCommitTransaction;
    
public static string SqlErrorCommitTransaction;
    
public static string SqlBeforeRollbackTransaction;
    
public static string SqlAfterRollbackTransaction;
    
public static string SqlErrorRollbackTransaction;
    [ExtensionAttribute]
public static Guid WriteCommandBefore(DiagnosticListener this, SqlCommand sqlCommand, string operation);
    [ExtensionAttribute]
public static void WriteCommandAfter(DiagnosticListener this, Guid operationId, SqlCommand sqlCommand, string operation);
    [ExtensionAttribute]
public static void WriteCommandError(DiagnosticListener this, Guid operationId, SqlCommand sqlCommand, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionOpenBefore(DiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenAfter(DiagnosticListener this, Guid operationId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionOpenError(DiagnosticListener this, Guid operationId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteConnectionCloseBefore(DiagnosticListener this, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseAfter(DiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, string operation);
    [ExtensionAttribute]
public static void WriteConnectionCloseError(DiagnosticListener this, Guid operationId, Guid clientConnectionId, SqlConnection sqlConnection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionCommitBefore(DiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitAfter(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string operation);
    [ExtensionAttribute]
public static void WriteTransactionCommitError(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, Exception ex, string operation);
    [ExtensionAttribute]
public static Guid WriteTransactionRollbackBefore(DiagnosticListener this, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackAfter(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, string operation);
    [ExtensionAttribute]
public static void WriteTransactionRollbackError(DiagnosticListener this, Guid operationId, IsolationLevel isolationLevel, SqlConnection connection, string transactionName, Exception ex, string operation);
}
public class System.Data.SqlClient.SqlClientFactory : DbProviderFactory {
    
public static SqlClientFactory Instance;
    
public bool CanCreateDataSourceEnumerator { get; }
    private static SqlClientFactory();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
    public virtual CodeAccessPermission CreatePermission(PermissionState state);
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
}
public static class System.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
    
public static string Columns;
    
public static string Databases;
    
public static string ForeignKeys;
    
public static string IndexColumns;
    
public static string Indexes;
    
public static string Parameters;
    
public static string ProcedureColumns;
    
public static string Procedures;
    
public static string Tables;
    
public static string UserDefinedTypes;
    
public static string Users;
    
public static string ViewColumns;
    
public static string Views;
    private static SqlClientMetaDataCollectionNames();
}
public class System.Data.SqlClient.SqlClientPermission : DBDataPermission {
    public SqlClientPermission(PermissionState state);
    [ObsoleteAttribute("SqlClientPermission(PermissionState state, Boolean allowBlankPassword) has been deprecated.  Use the SqlClientPermission(PermissionState.None) constructor.  http://go.microsoft.com/fwlink/?linkid=14202", "True")]
public SqlClientPermission(PermissionState state, bool allowBlankPassword);
    private SqlClientPermission(SqlClientPermission permission);
    internal SqlClientPermission(SqlClientPermissionAttribute permissionAttribute);
    internal SqlClientPermission(SqlConnectionString constr);
    public virtual void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior);
    public virtual IPermission Copy();
}
[AttributeUsageAttribute("109")]
public class System.Data.SqlClient.SqlClientPermissionAttribute : DBDataPermissionAttribute {
    public SqlClientPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
internal class System.Data.SqlClient.SqlCollation : object {
    
private static UInt32 IgnoreCase;
    
private static UInt32 IgnoreNonSpace;
    
private static UInt32 IgnoreWidth;
    
private static UInt32 IgnoreKanaType;
    
private static UInt32 BinarySort;
    
internal static UInt32 MaskLcid;
    
private static int LcidVersionBitOffset;
    
private static UInt32 MaskLcidVersion;
    
private static UInt32 MaskCompareOpt;
    
internal UInt32 info;
    
internal byte sortId;
    
internal int LCID { get; internal set; }
    
internal SqlCompareOptions SqlCompareOptions { get; internal set; }
    private static int FirstSupportedCollationVersion(int lcid);
    internal int get_LCID();
    internal void set_LCID(int value);
    internal SqlCompareOptions get_SqlCompareOptions();
    internal void set_SqlCompareOptions(SqlCompareOptions value);
    internal static bool AreSame(SqlCollation a, SqlCollation b);
}
public class System.Data.SqlClient.SqlColumnEncryptionCertificateStoreProvider : SqlColumnEncryptionKeyStoreProvider {
    
public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
}
public class System.Data.SqlClient.SqlColumnEncryptionCngProvider : SqlColumnEncryptionKeyStoreProvider {
    
public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
}
public class System.Data.SqlClient.SqlColumnEncryptionCspProvider : SqlColumnEncryptionKeyStoreProvider {
    
public static string ProviderName;
    public virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
}
public abstract class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider : object {
    public abstract virtual Byte[] DecryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] encryptedColumnEncryptionKey);
    public abstract virtual Byte[] EncryptColumnEncryptionKey(string masterKeyPath, string encryptionAlgorithm, Byte[] columnEncryptionKey);
}
public class System.Data.SqlClient.SqlCommand : DbCommand {
    
private string _commandText;
    
private CommandType _commandType;
    
private int _commandTimeout;
    
private UpdateRowSource _updatedRowSource;
    
private bool _designTimeInvisible;
    
internal SqlDependency _sqlDep;
    
private static DiagnosticListener _diagnosticListener;
    
private bool _parentOperationStarted;
    
private bool _inPrepare;
    
private int _prepareHandle;
    
private bool _hiddenPrepare;
    
private int _preparedConnectionCloseCount;
    
private int _preparedConnectionReconnectCount;
    
private SqlParameterCollection _parameters;
    
private SqlConnection _activeConnection;
    
private bool _dirty;
    
private EXECTYPE _execType;
    
private _SqlRPC[] _rpcArrayOf1;
    
private _SqlMetaDataSet _cachedMetaData;
    
private TaskCompletionSource`1<object> _reconnectionCompletionSource;
    
private CachedAsyncState _cachedAsyncState;
    
internal int _rowsAffected;
    
private SqlNotificationRequest _notification;
    
private SqlTransaction _transaction;
    
private StatementCompletedEventHandler _statementCompletedEventHandler;
    
private TdsParserStateObject _stateObj;
    
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _pendingCancel;
    
private bool _batchRPCMode;
    
private List`1<_SqlRPC> _RPCList;
    
private _SqlRPC[] _SqlRPCBatchArray;
    
private List`1<SqlParameterCollection> _parameterCollectionList;
    
private int _currentlyExecutingBatch;
    
internal static String[] PreKatmaiProcParamsNames;
    
internal static String[] KatmaiProcParamsNames;
    
internal bool InPrepare { get; }
    
private CachedAsyncState cachedAsyncState { get; }
    
public SqlConnection Connection { get; public set; }
    
protected DbConnection DbConnection { get; protected set; }
    
private SqlInternalConnectionTds InternalTdsConnection { get; }
    
public SqlNotificationRequest Notification { get; public set; }
    
internal SqlStatistics Statistics { get; }
    
public SqlTransaction Transaction { get; public set; }
    
protected DbTransaction DbTransaction { get; protected set; }
    
public string CommandText { get; public set; }
    
public int CommandTimeout { get; public set; }
    
public CommandType CommandType { get; public set; }
    
public bool DesignTimeVisible { get; public set; }
    
public SqlParameterCollection Parameters { get; }
    
protected DbParameterCollection DbParameterCollection { get; }
    
public UpdateRowSource UpdatedRowSource { get; public set; }
    
internal _SqlMetaDataSet MetaData { get; }
    
internal TdsParserStateObject StateObject { get; }
    
private bool IsPrepared { get; }
    
private bool IsUserPrepared { get; }
    
internal bool IsDirty { get; internal set; }
    
internal int InternalRecordsAffected { get; internal set; }
    
internal bool BatchRPCMode { get; internal set; }
    [MonoTODOAttribute]

public bool NotificationAutoEnlist { get; public set; }
    
public SqlCommandColumnEncryptionSetting ColumnEncryptionSetting { get; }
    public SqlCommand(string cmdText);
    public SqlCommand(string cmdText, SqlConnection connection);
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction);
    private SqlCommand(SqlCommand from);
    private static SqlCommand();
    public SqlCommand(string cmdText, SqlConnection connection, SqlTransaction transaction, SqlCommandColumnEncryptionSetting columnEncryptionSetting);
    internal bool get_InPrepare();
    private CachedAsyncState get_cachedAsyncState();
    public SqlConnection get_Connection();
    public void set_Connection(SqlConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    private SqlInternalConnectionTds get_InternalTdsConnection();
    public SqlNotificationRequest get_Notification();
    public void set_Notification(SqlNotificationRequest value);
    internal SqlStatistics get_Statistics();
    public SqlTransaction get_Transaction();
    public void set_Transaction(SqlTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public void ResetCommandTimeout();
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public SqlParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public void add_StatementCompleted(StatementCompletedEventHandler value);
    public void remove_StatementCompleted(StatementCompletedEventHandler value);
    internal void OnStatementCompleted(int recordCount);
    private void PropertyChanging();
    public virtual void Prepare();
    private void InternalPrepare();
    internal void Unprepare();
    public virtual void Cancel();
    public SqlParameter CreateParameter();
    protected virtual DbParameter CreateDbParameter();
    protected virtual void Dispose(bool disposing);
    public virtual object ExecuteScalar();
    private object CompleteExecuteScalar(SqlDataReader ds, bool returnSqlValue);
    public virtual int ExecuteNonQuery();
    private IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject);
    private void BeginExecuteNonQueryInternalReadStage(TaskCompletionSource`1<object> completion);
    private void VerifyEndExecuteState(Task completionTask, string endMethod);
    private void WaitForAsyncResults(IAsyncResult asyncResult);
    private void ThrowIfReconnectionHasBeenCanceled();
    private int EndExecuteNonQuery(IAsyncResult asyncResult);
    private int EndExecuteNonQueryInternal(IAsyncResult asyncResult);
    private Task InternalExecuteNonQuery(TaskCompletionSource`1<object> completion, bool sendToPipe, int timeout, bool asyncWrite, string methodName);
    public XmlReader ExecuteXmlReader();
    private IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject);
    private void BeginExecuteXmlReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    private XmlReader EndExecuteXmlReader(IAsyncResult asyncResult);
    private XmlReader EndExecuteXmlReaderInternal(IAsyncResult asyncResult);
    private XmlReader CompleteXmlReader(SqlDataReader ds, bool async);
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqlDataReader ExecuteReader();
    public SqlDataReader ExecuteReader(CommandBehavior behavior);
    internal SqlDataReader EndExecuteReader(IAsyncResult asyncResult);
    private SqlDataReader EndExecuteReaderInternal(IAsyncResult asyncResult);
    internal IAsyncResult BeginExecuteReader(CommandBehavior behavior, AsyncCallback callback, object stateObject);
    private void BeginExecuteReaderInternalReadStage(TaskCompletionSource`1<object> completion);
    private SqlDataReader InternalEndExecuteReader(IAsyncResult asyncResult, string endMethod);
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync();
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public Task`1<XmlReader> ExecuteXmlReaderAsync();
    public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken);
    private static string UnquoteProcedurePart(string part);
    private static string UnquoteProcedureName(string name, Object& groupNumber);
    internal void DeriveParameters();
    private ParameterDirection ParameterDirectionFromOleDbDirection(short oledbDirection);
    internal _SqlMetaDataSet get_MetaData();
    private void CheckNotificationStateAndAutoEnlist();
    private Task RunExecuteNonQueryTds(string methodName, bool async, int timeout, bool asyncWrite);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, string method);
    internal SqlDataReader RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, TaskCompletionSource`1<object> completion, int timeout, Task& task, bool asyncWrite, string method);
    private SqlDataReader RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, bool returnStream, bool async, int timeout, Task& task, bool asyncWrite, SqlDataReader ds);
    private SqlDataReader CompleteAsyncExecuteReader();
    private void FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, string resetOptionsString);
    private void RegisterForConnectionCloseNotification(Task`1& outerTask);
    private void ValidateCommand(bool async, string method);
    private void ValidateAsyncCommand();
    private void GetStateObject(TdsParser parser);
    private void ReliablePutStateObject();
    private void PutStateObject();
    internal void OnDoneProc();
    internal void OnReturnStatus(int status);
    internal void OnReturnValue(SqlReturnValue rec);
    private SqlParameterCollection GetCurrentParameterCollection();
    private SqlParameter GetParameterForOutputValueExtraction(SqlParameterCollection parameters, string paramName, int paramCount);
    private void GetRPCObject(int paramCount, _SqlRPC& rpc);
    private void SetUpRPCParameters(_SqlRPC rpc, int startCount, bool inSchema, SqlParameterCollection parameters);
    private _SqlRPC BuildPrepExec(CommandBehavior behavior);
    private static bool ShouldSendParameter(SqlParameter p);
    private int CountSendableParameters(SqlParameterCollection parameters);
    private int GetParameterCount(SqlParameterCollection parameters);
    private void BuildRPC(bool inSchema, SqlParameterCollection parameters, _SqlRPC& rpc);
    private _SqlRPC BuildExecute(bool inSchema);
    private void BuildExecuteSql(CommandBehavior behavior, string commandText, SqlParameterCollection parameters, _SqlRPC& rpc);
    internal string BuildParamList(TdsParser parser, SqlParameterCollection parameters);
    private string ParseAndQuoteIdentifier(string identifier);
    private string GetSetOptionsString(CommandBehavior behavior);
    private string GetResetOptionsString(CommandBehavior behavior);
    private string GetCommandText(CommandBehavior behavior);
    internal void CheckThrowSNIException();
    internal void OnConnectionClosed();
    internal TdsParserStateObject get_StateObject();
    private bool get_IsPrepared();
    private bool get_IsUserPrepared();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal int get_InternalRecordsAffected();
    internal void set_InternalRecordsAffected(int value);
    internal void ClearBatchCommand();
    internal bool get_BatchRPCMode();
    internal void set_BatchRPCMode(bool value);
    internal void AddBatchCommand(string commandText, SqlParameterCollection parameters, CommandType cmdType);
    internal int ExecuteBatchRPCCommand();
    internal Nullable`1<int> GetRecordsAffected(int commandIndex);
    internal SqlException GetErrors(int commandIndex);
    internal void CancelIgnoreFailure();
    private void NotifyDependency();
    private sealed virtual override object System.ICloneable.Clone();
    public SqlCommand Clone();
    public bool get_NotificationAutoEnlist();
    public void set_NotificationAutoEnlist(bool value);
    public IAsyncResult BeginExecuteNonQuery();
    public IAsyncResult BeginExecuteXmlReader();
    public IAsyncResult BeginExecuteReader();
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject);
    public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior);
    public IAsyncResult BeginExecuteReader(CommandBehavior behavior);
    public SqlCommandColumnEncryptionSetting get_ColumnEncryptionSetting();
}
public class System.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
    
public CatalogLocation CatalogLocation { get; public set; }
    
public string CatalogSeparator { get; public set; }
    
public SqlDataAdapter DataAdapter { get; public set; }
    
public string QuotePrefix { get; public set; }
    
public string QuoteSuffix { get; public set; }
    
public string SchemaSeparator { get; public set; }
    public SqlCommandBuilder(SqlDataAdapter adapter);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public SqlDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqlDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    private void SqlRowUpdatingHandler(object sender, SqlRowUpdatingEventArgs ruevent);
    public SqlCommand GetInsertCommand();
    public SqlCommand GetInsertCommand(bool useColumnsForParameterNames);
    public SqlCommand GetUpdateCommand();
    public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SqlCommand GetDeleteCommand();
    public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    private void ConsistentQuoteDelimiters(string quotePrefix, string quoteSuffix);
    public static void DeriveParameters(SqlCommand command);
    protected virtual DataTable GetSchemaTable(DbCommand srcCommand);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public enum System.Data.SqlClient.SqlCommandColumnEncryptionSetting : Enum {
    
public int value__;
    
public static SqlCommandColumnEncryptionSetting UseConnectionSetting;
    
public static SqlCommandColumnEncryptionSetting Enabled;
    
public static SqlCommandColumnEncryptionSetting ResultSetOnly;
    
public static SqlCommandColumnEncryptionSetting Disabled;
}
internal class System.Data.SqlClient.SqlCommandSet : object {
    
private static string SqlIdentifierPattern;
    
private static Regex s_sqlIdentifierParser;
    
private List`1<LocalCommand> _commandList;
    
private SqlCommand _batchCommand;
    
private SqlCommand BatchCommand { get; }
    
internal int CommandCount { get; }
    
private List`1<LocalCommand> CommandList { get; }
    
unknown int CommandTimeout {internal set; }
    
internal SqlConnection Connection { get; internal set; }
    
unknown SqlTransaction Transaction {internal set; }
    private static SqlCommandSet();
    private SqlCommand get_BatchCommand();
    internal int get_CommandCount();
    private List`1<LocalCommand> get_CommandList();
    internal void set_CommandTimeout(int value);
    internal SqlConnection get_Connection();
    internal void set_Connection(SqlConnection value);
    internal void set_Transaction(SqlTransaction value);
    internal void Append(SqlCommand command);
    internal static void BuildStoredProcedureName(StringBuilder builder, string part);
    internal void Clear();
    internal void Dispose();
    internal int ExecuteNonQuery();
    internal SqlParameter GetParameter(int commandIndex, int parameterIndex);
    internal bool GetBatchedAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    internal int GetParameterCount(int commandIndex);
    private void ValidateCommandBehavior(string method, CommandBehavior behavior);
}
public class System.Data.SqlClient.SqlConnection : DbConnection {
    
private bool _AsyncCommandInProgress;
    
internal SqlStatistics _statistics;
    
private bool _collectstats;
    
private bool _fireInfoMessageEventOnUserErrors;
    
private Tuple`2<TaskCompletionSource`1<DbConnectionInternal>, Task> _currentCompletion;
    
private string _connectionString;
    
private int _connectRetryCount;
    
private object _reconnectLock;
    
internal Task _currentReconnectionTask;
    
private Task _asyncWaitingForReconnection;
    
private Guid _originalConnectionId;
    
private CancellationTokenSource _reconnectionCancellationSource;
    
internal SessionData _recoverySessionData;
    
internal bool _suppressStateChangeForReconnection;
    
private int _reconnectCount;
    
private static DiagnosticListener s_diagnosticListener;
    
internal bool _applyTransientFaultHandling;
    [CompilerGeneratedAttribute]

private SqlInfoMessageEventHandler InfoMessage;
    [CompilerGeneratedAttribute]

private bool <ForceNewConnection>k__BackingField;
    
private static DbConnectionFactory s_connectionFactory;
    
private DbConnectionOptions _userConnectionOptions;
    
private DbConnectionPoolGroup _poolGroup;
    
private DbConnectionInternal _innerConnection;
    
private int _closeCount;
    
public bool StatisticsEnabled { get; public set; }
    
internal bool AsyncCommandInProgress { get; internal set; }
    
internal TransactionBindingEnum TransactionBinding { get; }
    
internal TypeSystem TypeSystem { get; }
    
internal int ConnectRetryInterval { get; }
    
public string ConnectionString { get; public set; }
    
public int ConnectionTimeout { get; }
    
public string Database { get; }
    
public string DataSource { get; }
    
public int PacketSize { get; }
    
public Guid ClientConnectionId { get; }
    
public string ServerVersion { get; }
    
public ConnectionState State { get; }
    
internal SqlStatistics Statistics { get; }
    
public string WorkstationId { get; }
    
protected DbProviderFactory DbProviderFactory { get; }
    
public bool FireInfoMessageEventOnUserErrors { get; public set; }
    
internal int ReconnectCount { get; }
    
internal bool ForceNewConnection { get; internal set; }
    
internal bool HasLocalTransaction { get; }
    
internal bool HasLocalTransactionFromAPI { get; }
    
internal bool IsKatmaiOrNewer { get; }
    
internal TdsParser Parser { get; }
    
internal int CloseCount { get; }
    
internal DbConnectionFactory ConnectionFactory { get; }
    
internal DbConnectionOptions ConnectionOptions { get; }
    
internal DbConnectionInternal InnerConnection { get; }
    
internal DbConnectionPoolGroup PoolGroup { get; internal set; }
    
internal DbConnectionOptions UserConnectionOptions { get; }
    [MonoTODOAttribute]

public SqlCredential Credentials { get; public set; }
    
public string AccessToken { get; public set; }
    
public static TimeSpan ColumnEncryptionKeyCacheTtl { get; public set; }
    
public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; public set; }
    
public static IDictionary`2<string, IList`1<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    
public SqlCredential Credential { get; public set; }
    public SqlConnection(string connectionString);
    private SqlConnection(SqlConnection connection);
    public SqlConnection(string connectionString, SqlCredential credential);
    private static SqlConnection();
    private void CacheConnectionStringProperties();
    public bool get_StatisticsEnabled();
    public void set_StatisticsEnabled(bool value);
    internal bool get_AsyncCommandInProgress();
    internal void set_AsyncCommandInProgress(bool value);
    internal TransactionBindingEnum get_TransactionBinding();
    internal TypeSystem get_TypeSystem();
    internal int get_ConnectRetryInterval();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public virtual string get_Database();
    public virtual string get_DataSource();
    public int get_PacketSize();
    public Guid get_ClientConnectionId();
    public virtual string get_ServerVersion();
    public virtual ConnectionState get_State();
    internal SqlStatistics get_Statistics();
    public string get_WorkstationId();
    protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
public void add_InfoMessage(SqlInfoMessageEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_InfoMessage(SqlInfoMessageEventHandler value);
    public bool get_FireInfoMessageEventOnUserErrors();
    public void set_FireInfoMessageEventOnUserErrors(bool value);
    internal int get_ReconnectCount();
    [CompilerGeneratedAttribute]
internal bool get_ForceNewConnection();
    [CompilerGeneratedAttribute]
internal void set_ForceNewConnection(bool value);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public SqlTransaction BeginTransaction();
    public SqlTransaction BeginTransaction(IsolationLevel iso);
    public SqlTransaction BeginTransaction(string transactionName);
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName);
    public virtual void ChangeDatabase(string database);
    public static void ClearAllPools();
    public static void ClearPool(SqlConnection connection);
    private void CloseInnerConnection();
    public virtual void Close();
    public SqlCommand CreateCommand();
    private void DisposeMe(bool disposing);
    public virtual void Open();
    internal void RegisterWaitingForReconnect(Task waitingTask);
    [AsyncStateMachineAttribute("System.Data.SqlClient.SqlConnection/<ReconnectAsync>d__82")]
private Task ReconnectAsync(int timeout);
    internal Task ValidateAndReconnect(Action beforeDisconnect, int timeout);
    private void WaitForPendingReconnection();
    private void CancelOpenAndWait();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    private void PrepareStatisticsForNewConnection();
    private bool TryOpen(TaskCompletionSource`1<DbConnectionInternal> retry);
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsKatmaiOrNewer();
    internal TdsParser get_Parser();
    internal void ValidateConnectionForExecute(string method, SqlCommand command);
    internal static string FixupDatabaseTransactionName(string name);
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    internal SqlInternalConnectionTds GetOpenTdsConnection();
    internal SqlInternalConnectionTds GetOpenTdsConnection(string method);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent);
    internal void OnInfoMessage(SqlInfoMessageEventArgs imevent, Boolean& notified);
    internal void RegisterForConnectionCloseNotification(Task`1& outerTask, object value, int tag);
    public void ResetStatistics();
    public IDictionary RetrieveStatistics();
    private void UpdateStatistics();
    private sealed virtual override object System.ICloneable.Clone();
    private void CopyFrom(SqlConnection connection);
    internal int get_CloseCount();
    internal DbConnectionFactory get_ConnectionFactory();
    internal DbConnectionOptions get_ConnectionOptions();
    private string ConnectionString_Get();
    private void ConnectionString_Set(DbConnectionPoolKey key);
    internal DbConnectionInternal get_InnerConnection();
    internal DbConnectionPoolGroup get_PoolGroup();
    internal void set_PoolGroup(DbConnectionPoolGroup value);
    internal DbConnectionOptions get_UserConnectionOptions();
    internal void Abort(Exception e);
    internal void AddWeakReference(object value, int tag);
    protected virtual DbCommand CreateDbCommand();
    protected virtual void Dispose(bool disposing);
    private void RepairInnerConnection();
    public virtual void EnlistTransaction(Transaction transaction);
    internal void NotifyWeakReference(int message);
    internal void PermissionDemand();
    internal void RemoveWeakReference(object value);
    internal void SetInnerConnectionEvent(DbConnectionInternal to);
    internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from);
    internal void SetInnerConnectionTo(DbConnectionInternal to);
    [MonoTODOAttribute]
public static void ChangePassword(string connectionString, string newPassword);
    public SqlCredential get_Credentials();
    public void set_Credentials(SqlCredential value);
    [MonoTODOAttribute]
public void EnlistDistributedTransaction(ITransaction transaction);
    public string get_AccessToken();
    public void set_AccessToken(string value);
    public static TimeSpan get_ColumnEncryptionKeyCacheTtl();
    public static void set_ColumnEncryptionKeyCacheTtl(TimeSpan value);
    public static bool get_ColumnEncryptionQueryMetadataCacheEnabled();
    public static void set_ColumnEncryptionQueryMetadataCacheEnabled(bool value);
    public static IDictionary`2<string, IList`1<string>> get_ColumnEncryptionTrustedMasterKeyPaths();
    public SqlCredential get_Credential();
    public void set_Credential(SqlCredential value);
    public static void ChangePassword(string connectionString, SqlCredential credential, SecureString newSecurePassword);
    public static void RegisterColumnEncryptionKeyStoreProviders(IDictionary`2<string, SqlColumnEncryptionKeyStoreProvider> customProviders);
}
public enum System.Data.SqlClient.SqlConnectionColumnEncryptionSetting : Enum {
    
public int value__;
    
public static SqlConnectionColumnEncryptionSetting Disabled;
    
public static SqlConnectionColumnEncryptionSetting Enabled;
}
internal class System.Data.SqlClient.SqlConnectionFactory : DbConnectionFactory {
    
private static string _metaDataXml;
    
public static SqlConnectionFactory SingletonInstance;
    
public DbProviderFactory ProviderFactory { get; }
    private static SqlConnectionFactory();
    public virtual DbProviderFactory get_ProviderFactory();
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection);
    protected virtual DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions);
    protected virtual DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous);
    internal virtual DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions);
    protected virtual DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions);
    internal virtual DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions);
    internal static SqlConnectionString FindSqlConnectionOptions(SqlConnectionPoolKey key);
    internal virtual DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection);
    internal virtual DbConnectionInternal GetInnerConnection(DbConnection connection);
    internal virtual void PermissionDemand(DbConnection outerConnection);
    internal virtual void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup);
    internal virtual void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to);
    internal virtual bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from);
    internal virtual void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to);
    protected virtual DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory);
}
internal enum System.Data.SqlClient.SqlConnectionInternalSourceType : Enum {
    
public int value__;
    
public static SqlConnectionInternalSourceType Principle;
    
public static SqlConnectionInternalSourceType Failover;
    
public static SqlConnectionInternalSourceType RoutingDestination;
}
internal class System.Data.SqlClient.SqlConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
    
private string _alias;
    
private string _failoverPartner;
    
private bool _useFailoverPartner;
    
internal string FailoverPartner { get; }
    
internal bool UseFailoverPartner { get; }
    internal SqlConnectionPoolGroupProviderInfo(SqlConnectionString connectionOptions);
    internal string get_FailoverPartner();
    internal bool get_UseFailoverPartner();
    internal void AliasCheck(string server);
    internal void FailoverCheck(SqlInternalConnection connection, bool actualUseFailoverPartner, SqlConnectionString userConnectionOptions, string actualFailoverPartner);
}
internal class System.Data.SqlClient.SqlConnectionPoolKey : DbConnectionPoolKey {
    
private int _hashValue;
    
internal string ConnectionString { get; internal set; }
    internal SqlConnectionPoolKey(string connectionString);
    private SqlConnectionPoolKey(SqlConnectionPoolKey key);
    public virtual object Clone();
    internal virtual string get_ConnectionString();
    internal virtual void set_ConnectionString(string value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    private void CalculateHashCode();
}
internal class System.Data.SqlClient.SqlConnectionPoolProviderInfo : DbConnectionPoolProviderInfo {
    
private string _instanceName;
    
internal string InstanceName { get; internal set; }
    internal string get_InstanceName();
    internal void set_InstanceName(string value);
}
internal class System.Data.SqlClient.SqlConnectionString : DbConnectionOptions {
    
internal static int SynonymCount;
    
internal static int DeprecatedSynonymCount;
    
private static Dictionary`2<string, string> s_sqlClientSynonyms;
    
private bool _integratedSecurity;
    
private bool _encrypt;
    
private bool _trustServerCertificate;
    
private bool _enlist;
    
private bool _mars;
    
private bool _persistSecurityInfo;
    
private bool _pooling;
    
private bool _replication;
    
private bool _userInstance;
    
private bool _multiSubnetFailover;
    
private int _connectTimeout;
    
private int _loadBalanceTimeout;
    
private int _maxPoolSize;
    
private int _minPoolSize;
    
private int _packetSize;
    
private int _connectRetryCount;
    
private int _connectRetryInterval;
    
private ApplicationIntent _applicationIntent;
    
private string _applicationName;
    
private string _attachDBFileName;
    
private string _currentLanguage;
    
private string _dataSource;
    
private string _localDBInstance;
    
private string _failoverPartner;
    
private string _initialCatalog;
    
private string _password;
    
private string _userID;
    
private string _workstationId;
    
private TypeSystem _typeSystemVersion;
    
private TransactionBindingEnum _transactionBinding;
    
internal bool IntegratedSecurity { get; }
    
internal bool Asynchronous { get; }
    
internal bool ConnectionReset { get; }
    
internal bool Encrypt { get; }
    
internal bool TrustServerCertificate { get; }
    
internal bool Enlist { get; }
    
internal bool MARS { get; }
    
internal bool MultiSubnetFailover { get; }
    
internal bool PersistSecurityInfo { get; }
    
internal bool Pooling { get; }
    
internal bool Replication { get; }
    
internal bool UserInstance { get; }
    
internal int ConnectTimeout { get; }
    
internal int LoadBalanceTimeout { get; }
    
internal int MaxPoolSize { get; }
    
internal int MinPoolSize { get; }
    
internal int PacketSize { get; }
    
internal int ConnectRetryCount { get; }
    
internal int ConnectRetryInterval { get; }
    
internal ApplicationIntent ApplicationIntent { get; }
    
internal string ApplicationName { get; }
    
internal string AttachDBFilename { get; }
    
internal string CurrentLanguage { get; }
    
internal string DataSource { get; }
    
internal string LocalDBInstance { get; }
    
internal string FailoverPartner { get; }
    
internal string InitialCatalog { get; }
    
internal string Password { get; }
    
internal string UserID { get; }
    
internal string WorkstationId { get; }
    
internal TypeSystem TypeSystemVersion { get; }
    
internal TransactionBindingEnum TransactionBinding { get; }
    internal SqlConnectionString(string connectionString);
    internal SqlConnectionString(SqlConnectionString connectionOptions, string dataSource, bool userInstance, Nullable`1<bool> setEnlistValue);
    internal bool get_IntegratedSecurity();
    internal bool get_Asynchronous();
    internal bool get_ConnectionReset();
    internal bool get_Encrypt();
    internal bool get_TrustServerCertificate();
    internal bool get_Enlist();
    internal bool get_MARS();
    internal bool get_MultiSubnetFailover();
    internal bool get_PersistSecurityInfo();
    internal bool get_Pooling();
    internal bool get_Replication();
    internal bool get_UserInstance();
    internal int get_ConnectTimeout();
    internal int get_LoadBalanceTimeout();
    internal int get_MaxPoolSize();
    internal int get_MinPoolSize();
    internal int get_PacketSize();
    internal int get_ConnectRetryCount();
    internal int get_ConnectRetryInterval();
    internal ApplicationIntent get_ApplicationIntent();
    internal string get_ApplicationName();
    internal string get_AttachDBFilename();
    internal string get_CurrentLanguage();
    internal string get_DataSource();
    internal string get_LocalDBInstance();
    internal string get_FailoverPartner();
    internal string get_InitialCatalog();
    internal string get_Password();
    internal string get_UserID();
    internal string get_WorkstationId();
    internal TypeSystem get_TypeSystemVersion();
    internal TransactionBindingEnum get_TransactionBinding();
    internal static Dictionary`2<string, string> GetParseSynonyms();
    internal string ObtainWorkstationId();
    private void ValidateValueLength(string value, int limit, string key);
    internal ApplicationIntent ConvertValueToApplicationIntent();
    internal void ThrowUnsupportedIfKeywordSet(string keyword);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
    
internal static int KeywordsCount;
    
internal static int DeprecatedKeywordsCount;
    
private static String[] s_validKeywords;
    
private static Dictionary`2<string, Keywords> s_keywords;
    
private ApplicationIntent _applicationIntent;
    
private string _applicationName;
    
private string _attachDBFilename;
    
private string _currentLanguage;
    
private string _dataSource;
    
private string _failoverPartner;
    
private string _initialCatalog;
    
private string _password;
    
private string _transactionBinding;
    
private string _typeSystemVersion;
    
private string _userID;
    
private string _workstationID;
    
private int _connectTimeout;
    
private int _loadBalanceTimeout;
    
private int _maxPoolSize;
    
private int _minPoolSize;
    
private int _packetSize;
    
private int _connectRetryCount;
    
private int _connectRetryInterval;
    
private bool _encrypt;
    
private bool _trustServerCertificate;
    
private bool _enlist;
    
private bool _integratedSecurity;
    
private bool _multipleActiveResultSets;
    
private bool _multiSubnetFailover;
    
private bool _persistSecurityInfo;
    
private bool _pooling;
    
private bool _replication;
    
private bool _userInstance;
    
private static String[] s_notSupportedKeywords;
    
private static String[] s_notSupportedNetworkLibraryKeywords;
    [CompilerGeneratedAttribute]

private bool <AsynchronousProcessing>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <ConnectionReset>k__BackingField;
    
public object Item { get; public set; }
    
public ApplicationIntent ApplicationIntent { get; public set; }
    
public string ApplicationName { get; public set; }
    
public string AttachDBFilename { get; public set; }
    
public int ConnectTimeout { get; public set; }
    
public string CurrentLanguage { get; public set; }
    
public string DataSource { get; public set; }
    
public bool Encrypt { get; public set; }
    
public bool TrustServerCertificate { get; public set; }
    
public bool Enlist { get; public set; }
    
public string FailoverPartner { get; public set; }
    [TypeConverterAttribute("System.Data.SqlClient.SqlConnectionStringBuilder/SqlInitialCatalogConverter")]

public string InitialCatalog { get; public set; }
    
public bool IntegratedSecurity { get; public set; }
    
public int LoadBalanceTimeout { get; public set; }
    
public int MaxPoolSize { get; public set; }
    
public int ConnectRetryCount { get; public set; }
    
public int ConnectRetryInterval { get; public set; }
    
public int MinPoolSize { get; public set; }
    
public bool MultipleActiveResultSets { get; public set; }
    
public bool MultiSubnetFailover { get; public set; }
    
public int PacketSize { get; public set; }
    
public string Password { get; public set; }
    
public bool PersistSecurityInfo { get; public set; }
    
public bool Pooling { get; public set; }
    
public bool Replication { get; public set; }
    
public string TransactionBinding { get; public set; }
    
public string TypeSystemVersion { get; public set; }
    
public string UserID { get; public set; }
    
public bool UserInstance { get; public set; }
    
public string WorkstationID { get; public set; }
    
public ICollection Keys { get; }
    
public ICollection Values { get; }
    [ObsoleteAttribute("This property is ignored beginning in .NET Framework 4.5.For more information about SqlClient support for asynchronous programming, seehttps://docs.microsoft.com/en-us/dotnet/framework/data/adonet/asynchronous-programming")]

public bool AsynchronousProcessing { get; public set; }
    [ObsoleteAttribute("ConnectionReset has been deprecated.  SqlConnection will ignore the 'connection reset'keyword and always reset the connection")]

public bool ConnectionReset { get; public set; }
    [MonoTODOAttribute("Not implemented in corefx: https://github.com/dotnet/corefx/issues/22474")]

public bool ContextConnection { get; public set; }
    [MonoTODOAttribute("Not implemented in corefx: https://github.com/dotnet/corefx/issues/22474")]

public string NetworkLibrary { get; public set; }
    [MonoTODOAttribute("Not implemented in corefx: https://github.com/dotnet/corefx/issues/22474")]

public PoolBlockingPeriod PoolBlockingPeriod { get; public set; }
    [MonoTODOAttribute("Not implemented in corefx: https://github.com/dotnet/corefx/issues/22474")]

public bool TransparentNetworkIPResolution { get; public set; }
    [MonoTODOAttribute("Not implemented in corefx: https://github.com/dotnet/corefx/issues/22474")]

public SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; public set; }
    
public SqlAuthenticationMethod Authentication { get; public set; }
    public SqlConnectionStringBuilder(string connectionString);
    private static SqlConnectionStringBuilder();
    private static String[] CreateValidKeywords();
    private static Dictionary`2<string, Keywords> CreateKeywordsDictionary();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public ApplicationIntent get_ApplicationIntent();
    public void set_ApplicationIntent(ApplicationIntent value);
    public string get_ApplicationName();
    public void set_ApplicationName(string value);
    public string get_AttachDBFilename();
    public void set_AttachDBFilename(string value);
    public int get_ConnectTimeout();
    public void set_ConnectTimeout(int value);
    public string get_CurrentLanguage();
    public void set_CurrentLanguage(string value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public bool get_Encrypt();
    public void set_Encrypt(bool value);
    public bool get_TrustServerCertificate();
    public void set_TrustServerCertificate(bool value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public string get_FailoverPartner();
    public void set_FailoverPartner(string value);
    public string get_InitialCatalog();
    public void set_InitialCatalog(string value);
    public bool get_IntegratedSecurity();
    public void set_IntegratedSecurity(bool value);
    public int get_LoadBalanceTimeout();
    public void set_LoadBalanceTimeout(int value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_ConnectRetryCount();
    public void set_ConnectRetryCount(int value);
    public int get_ConnectRetryInterval();
    public void set_ConnectRetryInterval(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    public bool get_MultipleActiveResultSets();
    public void set_MultipleActiveResultSets(bool value);
    public bool get_MultiSubnetFailover();
    public void set_MultiSubnetFailover(bool value);
    public int get_PacketSize();
    public void set_PacketSize(int value);
    public string get_Password();
    public void set_Password(string value);
    public bool get_PersistSecurityInfo();
    public void set_PersistSecurityInfo(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_Replication();
    public void set_Replication(bool value);
    public string get_TransactionBinding();
    public void set_TransactionBinding(string value);
    public string get_TypeSystemVersion();
    public void set_TypeSystemVersion(string value);
    public string get_UserID();
    public void set_UserID(string value);
    public bool get_UserInstance();
    public void set_UserInstance(bool value);
    public string get_WorkstationID();
    public void set_WorkstationID(string value);
    public virtual ICollection get_Keys();
    public virtual ICollection get_Values();
    public virtual void Clear();
    public virtual bool ContainsKey(string keyword);
    private static bool ConvertToBoolean(object value);
    private static int ConvertToInt32(object value);
    private static bool ConvertToIntegratedSecurity(object value);
    private static string ConvertToString(object value);
    private static ApplicationIntent ConvertToApplicationIntent(string keyword, object value);
    private object GetAt(Keywords index);
    private Keywords GetIndex(string keyword);
    public virtual bool Remove(string keyword);
    private void Reset(Keywords index);
    private void SetValue(string keyword, bool value);
    private void SetValue(string keyword, int value);
    private void SetValue(string keyword, string value);
    private void SetApplicationIntentValue(ApplicationIntent value);
    public virtual bool ShouldSerialize(string keyword);
    public virtual bool TryGetValue(string keyword, Object& value);
    private Exception UnsupportedKeyword(string keyword);
    [CompilerGeneratedAttribute]
public bool get_AsynchronousProcessing();
    [CompilerGeneratedAttribute]
public void set_AsynchronousProcessing(bool value);
    [CompilerGeneratedAttribute]
public bool get_ConnectionReset();
    [CompilerGeneratedAttribute]
public void set_ConnectionReset(bool value);
    public bool get_ContextConnection();
    public void set_ContextConnection(bool value);
    public string get_NetworkLibrary();
    public void set_NetworkLibrary(string value);
    public PoolBlockingPeriod get_PoolBlockingPeriod();
    public void set_PoolBlockingPeriod(PoolBlockingPeriod value);
    public bool get_TransparentNetworkIPResolution();
    public void set_TransparentNetworkIPResolution(bool value);
    public SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting();
    public void set_ColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value);
    public SqlAuthenticationMethod get_Authentication();
    public void set_Authentication(SqlAuthenticationMethod value);
}
internal class System.Data.SqlClient.SqlConnectionTimeoutErrorInternal : object {
    
private SqlConnectionTimeoutPhaseDuration[] _phaseDurations;
    
private SqlConnectionTimeoutPhaseDuration[] _originalPhaseDurations;
    
private SqlConnectionTimeoutErrorPhase _currentPhase;
    
private SqlConnectionInternalSourceType _currentSourceType;
    
private bool _isFailoverScenario;
    
internal SqlConnectionTimeoutErrorPhase CurrentPhase { get; }
    internal SqlConnectionTimeoutErrorPhase get_CurrentPhase();
    public void SetFailoverScenario(bool useFailoverServer);
    public void SetInternalSourceType(SqlConnectionInternalSourceType sourceType);
    internal void ResetAndRestartPhase();
    internal void SetAndBeginPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void EndPhase(SqlConnectionTimeoutErrorPhase timeoutErrorPhase);
    internal void SetAllCompleteMarker();
    internal string GetErrorMessage();
}
internal enum System.Data.SqlClient.SqlConnectionTimeoutErrorPhase : Enum {
    
public int value__;
    
public static SqlConnectionTimeoutErrorPhase Undefined;
    
public static SqlConnectionTimeoutErrorPhase PreLoginBegin;
    
public static SqlConnectionTimeoutErrorPhase InitializeConnection;
    
public static SqlConnectionTimeoutErrorPhase SendPreLoginHandshake;
    
public static SqlConnectionTimeoutErrorPhase ConsumePreLoginHandshake;
    
public static SqlConnectionTimeoutErrorPhase LoginBegin;
    
public static SqlConnectionTimeoutErrorPhase ProcessConnectionAuth;
    
public static SqlConnectionTimeoutErrorPhase PostLogin;
    
public static SqlConnectionTimeoutErrorPhase Complete;
    
public static SqlConnectionTimeoutErrorPhase Count;
}
internal class System.Data.SqlClient.SqlConnectionTimeoutPhaseDuration : object {
    
private Stopwatch _swDuration;
    internal void StartCapture();
    internal void StopCapture();
    internal long GetMilliSecondDuration();
}
public class System.Data.SqlClient.SqlCredential : object {
    
private string uid;
    
private SecureString pwd;
    
public string UserId { get; }
    
public SecureString Password { get; }
    public SqlCredential(string userId, SecureString password);
    public string get_UserId();
    public SecureString get_Password();
}
public class System.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
    
private static object EventRowUpdated;
    
private static object EventRowUpdating;
    
private SqlCommand _deleteCommand;
    
private SqlCommand _insertCommand;
    
private SqlCommand _selectCommand;
    
private SqlCommand _updateCommand;
    
private SqlCommandSet _commandSet;
    
private int _updateBatchSize;
    
public SqlCommand DeleteCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    
public SqlCommand InsertCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    
public SqlCommand SelectCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    
public SqlCommand UpdateCommand { get; public set; }
    
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    
public int UpdateBatchSize { get; public set; }
    public SqlDataAdapter(SqlCommand selectCommand);
    public SqlDataAdapter(string selectCommandText, string selectConnectionString);
    public SqlDataAdapter(string selectCommandText, SqlConnection selectConnection);
    private SqlDataAdapter(SqlDataAdapter from);
    private static SqlDataAdapter();
    public SqlCommand get_DeleteCommand();
    public void set_DeleteCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    public SqlCommand get_InsertCommand();
    public void set_InsertCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public SqlCommand get_SelectCommand();
    public void set_SelectCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public SqlCommand get_UpdateCommand();
    public void set_UpdateCommand(SqlCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual int ExecuteBatch();
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    protected virtual void InitializeBatching();
    protected virtual void TerminateBatching();
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public void add_RowUpdated(SqlRowUpdatedEventHandler value);
    public void remove_RowUpdated(SqlRowUpdatedEventHandler value);
    public void add_RowUpdating(SqlRowUpdatingEventHandler value);
    public void remove_RowUpdating(SqlRowUpdatingEventHandler value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlDataReader : DbDataReader {
    
internal SharedState _sharedState;
    
private TdsParser _parser;
    
private TdsParserStateObject _stateObj;
    
private SqlCommand _command;
    
private SqlConnection _connection;
    
private int _defaultLCID;
    
private bool _haltRead;
    
private bool _metaDataConsumed;
    
private bool _browseModeInfoConsumed;
    
private bool _isClosed;
    
private bool _isInitialized;
    
private bool _hasRows;
    
private ALTROWSTATUS _altRowStatus;
    
private int _recordsAffected;
    
private long _defaultTimeoutMilliseconds;
    
private TypeSystem _typeSystem;
    
private SqlStatistics _statistics;
    
private SqlBuffer[] _data;
    
private SqlStreamingXml _streamingXml;
    
private _SqlMetaDataSet _metaData;
    
private _SqlMetaDataSetCollection _altMetaDataSetCollection;
    
private FieldNameLookup _fieldNameLookup;
    
private CommandBehavior _commandBehavior;
    
private static int s_objectTypeCount;
    
private static ReadOnlyCollection`1<DbColumn> s_emptySchema;
    
internal int ObjectID;
    
private MultiPartTableName[] _tableNames;
    
private string _resetOptionsString;
    
private int _lastColumnWithDataChunkRead;
    
private long _columnDataBytesRead;
    
private long _columnDataCharsRead;
    
private Char[] _columnDataChars;
    
private int _columnDataCharsIndex;
    
private Task _currentTask;
    
private Snapshot _snapshot;
    
private CancellationTokenSource _cancelAsyncOnCloseTokenSource;
    
private CancellationToken _cancelAsyncOnCloseToken;
    
internal static Type _typeofINullable;
    
private static Type s_typeofSqlString;
    
private SqlSequentialStream _currentStream;
    
private SqlSequentialTextReader _currentTextReader;
    
unknown bool BrowseModeInfoConsumed {internal set; }
    
internal SqlCommand Command { get; }
    
protected SqlConnection Connection { get; }
    
public int Depth { get; }
    
public int FieldCount { get; }
    
public bool HasRows { get; }
    
public bool IsClosed { get; }
    
internal bool IsInitialized { get; internal set; }
    
internal _SqlMetaDataSet MetaData { get; }
    
public int RecordsAffected { get; }
    
unknown string ResetOptionsString {internal set; }
    
private SqlStatistics Statistics { get; }
    
internal MultiPartTableName[] TableNames { get; internal set; }
    
public int VisibleFieldCount { get; }
    
public object Item { get; }
    
public object Item { get; }
    internal SqlDataReader(SqlCommand command, CommandBehavior behavior);
    private static SqlDataReader();
    internal void set_BrowseModeInfoConsumed(bool value);
    internal SqlCommand get_Command();
    protected SqlConnection get_Connection();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    internal bool get_IsInitialized();
    internal void set_IsInitialized(bool value);
    internal long ColumnDataBytesRemaining();
    internal _SqlMetaDataSet get_MetaData();
    internal virtual SmiExtendedMetaData[] GetInternalSmiMetaData();
    public virtual int get_RecordsAffected();
    internal void set_ResetOptionsString(string value);
    private SqlStatistics get_Statistics();
    internal MultiPartTableName[] get_TableNames();
    internal void set_TableNames(MultiPartTableName[] value);
    public virtual int get_VisibleFieldCount();
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    internal void Bind(TdsParserStateObject stateObj);
    internal DataTable BuildSchemaTable();
    internal void Cancel(SqlCommand command);
    private bool TryCleanPartialRead();
    private void CleanPartialReadReliable();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    private bool TryCloseInternal(bool closeReader);
    internal virtual void CloseReaderFromConnection();
    private bool TryConsumeMetaData();
    public virtual string GetDataTypeName(int i);
    private string GetDataTypeNameInternal(_SqlMetaData metaData);
    internal virtual StorageType GetVariantInternalStorageType(int i);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int i);
    private Type GetFieldTypeInternal(_SqlMetaData metaData);
    internal virtual int GetLocaleId(int i);
    public virtual string GetName(int i);
    public virtual Type GetProviderSpecificFieldType(int i);
    private Type GetProviderSpecificFieldTypeInternal(_SqlMetaData metaData);
    public virtual int GetOrdinal(string name);
    public virtual object GetProviderSpecificValue(int i);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual bool GetBoolean(int i);
    public virtual XmlReader GetXmlReader(int i);
    public virtual Stream GetStream(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    internal virtual long GetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    private bool TryGetBytesInternal(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length, Int64& remaining);
    internal int GetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Nullable`1<long> timeoutMilliseconds);
    internal bool TryGetBytesInternalSequential(int i, Byte[] buffer, int index, int length, Int32& bytesRead);
    public virtual TextReader GetTextReader(int i);
    [EditorBrowsableAttribute("1")]
public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    private long GetCharsFromPlpData(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    internal long GetStreamingXmlChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual SqlBoolean GetSqlBoolean(int i);
    public virtual SqlBinary GetSqlBinary(int i);
    public virtual SqlByte GetSqlByte(int i);
    public virtual SqlBytes GetSqlBytes(int i);
    public virtual SqlChars GetSqlChars(int i);
    public virtual SqlDateTime GetSqlDateTime(int i);
    public virtual SqlDecimal GetSqlDecimal(int i);
    public virtual SqlGuid GetSqlGuid(int i);
    public virtual SqlDouble GetSqlDouble(int i);
    public virtual SqlInt16 GetSqlInt16(int i);
    public virtual SqlInt32 GetSqlInt32(int i);
    public virtual SqlInt64 GetSqlInt64(int i);
    public virtual SqlMoney GetSqlMoney(int i);
    public virtual SqlSingle GetSqlSingle(int i);
    public virtual SqlString GetSqlString(int i);
    public virtual SqlXml GetSqlXml(int i);
    public virtual object GetSqlValue(int i);
    private object GetSqlValueInternal(int i);
    private object GetSqlValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    public virtual int GetSqlValues(Object[] values);
    public virtual string GetString(int i);
    public virtual T GetFieldValue(int i);
    public virtual object GetValue(int i);
    public virtual TimeSpan GetTimeSpan(int i);
    public virtual DateTimeOffset GetDateTimeOffset(int i);
    private object GetValueInternal(int i);
    private object GetValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    private T GetFieldValueInternal(int i);
    private T GetFieldValueFromSqlBufferInternal(SqlBuffer data, _SqlMetaData metaData);
    public virtual int GetValues(Object[] values);
    private MetaType GetVersionedMetaType(MetaType actualMetaType);
    private bool TryHasMoreResults(Boolean& moreResults);
    private bool TryHasMoreRows(Boolean& moreRows);
    private bool IsRowToken(byte token);
    public virtual bool IsDBNull(int i);
    protected internal bool IsCommandBehavior(CommandBehavior condition);
    public virtual bool NextResult();
    private bool TryNextResult(Boolean& more);
    public virtual bool Read();
    private bool TryReadInternal(bool setTimeout, Boolean& more);
    private void ReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn);
    private bool TryReadColumn(int i, bool setTimeout, bool allowPartiallyReadColumn);
    private bool TryReadColumnData();
    private void ReadColumnHeader(int i);
    private bool TryReadColumnHeader(int i);
    private bool TryReadColumnInternal(int i, bool readHeaderOnly);
    private bool WillHaveEnoughData(int targetColumn, bool headerOnly);
    private bool TryResetBlobState();
    private void CloseActiveSequentialStreamAndTextReader();
    private void RestoreServerSettings(TdsParser parser, TdsParserStateObject stateObj);
    internal bool TrySetAltMetaDataSet(_SqlMetaDataSet metaDataSet, bool metaDataConsumed);
    private void ClearMetaData();
    internal bool TrySetMetaData(_SqlMetaDataSet metaData, bool moreInfo);
    private void SetTimeout(long timeoutMilliseconds);
    private bool HasActiveStreamOrTextReaderOnColumn(int columnIndex);
    private void CheckMetaDataIsReady();
    private void CheckMetaDataIsReady(int columnIndex, bool permitAsync);
    private void CheckDataIsReady();
    private void CheckHeaderIsReady(int columnIndex, bool permitAsync, string methodName);
    private void CheckDataIsReady(int columnIndex, bool allowPartiallyReadColumn, bool permitAsync, string methodName);
    [ConditionalAttribute("DEBUG")]
private void AssertReaderState(bool requireData, bool permitAsync, Nullable`1<int> columnIndex, bool enforceSequentialAccess);
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    internal Task`1<int> GetBytesAsync(int i, Byte[] buffer, int index, int length, int timeout, CancellationToken cancellationToken, Int32& bytesRead);
    private Task`1<int> GetBytesAsyncReadDataStage(int i, Byte[] buffer, int index, int length, int timeout, bool isContinuation, CancellationToken cancellationToken, CancellationToken timeoutToken, Int32& bytesRead);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public virtual Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken);
    public virtual Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken);
    private Task`1<T> ContinueRetryable(Func`2<Task, Task`1<T>> moreFunc);
    private Task`1<T> InvokeRetryable(Func`2<Task, Task`1<T>> moreFunc, TaskCompletionSource`1<T> source, IDisposable objectToDispose);
    private void CompleteRetryable(Task`1<T> task, TaskCompletionSource`1<T> source, IDisposable objectToDispose);
    private void PrepareAsyncInvocation(bool useSnapshot);
    private void CleanupAfterAsyncInvocation(bool ignoreCloseToken);
    private void CleanupAfterAsyncInvocationInternal(TdsParserStateObject stateObj, bool resetNetworkPacketTaskSource);
    private void PrepareForAsyncContinuation();
    private void SwitchToAsyncWithoutSnapshot();
    private Exception UdtNotSupportedException();
    public sealed virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
    private ReadOnlyCollection`1<DbColumn> BuildColumnSchema();
}
internal class System.Data.SqlClient.SqlDbColumn : DbColumn {
    
private _SqlMetaData _metadata;
    
unknown Nullable`1<bool> SqlIsAliased {internal set; }
    
unknown Nullable`1<bool> SqlIsKey {internal set; }
    
unknown Nullable`1<bool> SqlIsHidden {internal set; }
    
unknown Nullable`1<bool> SqlIsExpression {internal set; }
    
unknown Type SqlDataType {internal set; }
    
unknown string SqlDataTypeName {internal set; }
    
unknown Nullable`1<int> SqlNumericScale {internal set; }
    internal SqlDbColumn(_SqlMetaData md);
    private void Populate();
    internal void set_SqlIsAliased(Nullable`1<bool> value);
    internal void set_SqlIsKey(Nullable`1<bool> value);
    internal void set_SqlIsHidden(Nullable`1<bool> value);
    internal void set_SqlIsExpression(Nullable`1<bool> value);
    internal void set_SqlDataType(Type value);
    internal void set_SqlDataTypeName(string value);
    internal void set_SqlNumericScale(Nullable`1<int> value);
}
[ClassInterfaceAttribute("0")]
[GuidAttribute("afef65ad-4577-447a-a148-83acadd3d4b9")]
[ComVisibleAttribute("True")]
public class System.Data.SqlClient.SQLDebugging : object {
}
internal class System.Data.SqlClient.SqlDelegatedTransaction : object {
    
private static int _objectTypeCount;
    
private int _objectID;
    
private static int _globalTransactionsTokenVersionSizeInBytes;
    
private SqlInternalConnection _connection;
    
private IsolationLevel _isolationLevel;
    
private SqlInternalTransaction _internalTransaction;
    
private Transaction _atomicTransaction;
    
private bool _active;
    
internal int ObjectID { get; }
    
internal Transaction Transaction { get; }
    
internal bool IsActive { get; }
    internal SqlDelegatedTransaction(SqlInternalConnection connection, Transaction tx);
    internal int get_ObjectID();
    internal Transaction get_Transaction();
    public sealed virtual void Initialize();
    internal bool get_IsActive();
    public sealed virtual Byte[] Promote();
    public sealed virtual void Rollback(SinglePhaseEnlistment enlistment);
    public sealed virtual void SinglePhaseCommit(SinglePhaseEnlistment enlistment);
    internal void TransactionEnded(Transaction transaction);
    private SqlInternalConnection GetValidConnection();
    private void ValidateActiveOnConnection(SqlInternalConnection connection);
    private Guid GetGlobalTxnIdentifierFromToken();
}
public class System.Data.SqlClient.SqlDependency : object {
    
private string _id;
    
private string _options;
    
private int _timeout;
    
private bool _dependencyFired;
    
private List`1<EventContextPair> _eventList;
    
private object _eventHandlerLock;
    
private DateTime _expirationTime;
    
private List`1<string> _serverList;
    
private static object s_startStopLock;
    
private static string s_appDomainKey;
    
private static Dictionary`2<string, Dictionary`2<IdentityUserNamePair, List`1<DatabaseServicePair>>> s_serverUserHash;
    
private static SqlDependencyProcessDispatcher s_processDispatcher;
    
private static string s_assemblyName;
    
private static string s_typeName;
    
public bool HasChanges { get; }
    
public string Id { get; }
    
internal static string AppDomainKey { get; }
    
internal DateTime ExpirationTime { get; }
    
internal string Options { get; }
    
internal static SqlDependencyProcessDispatcher ProcessDispatcher { get; }
    
internal int Timeout { get; }
    public SqlDependency(SqlCommand command);
    public SqlDependency(SqlCommand command, string options, int timeout);
    private static SqlDependency();
    public bool get_HasChanges();
    public string get_Id();
    internal static string get_AppDomainKey();
    internal DateTime get_ExpirationTime();
    internal string get_Options();
    internal static SqlDependencyProcessDispatcher get_ProcessDispatcher();
    internal int get_Timeout();
    public void add_OnChange(OnChangeEventHandler value);
    public void remove_OnChange(OnChangeEventHandler value);
    public void AddCommandDependency(SqlCommand command);
    public static bool Start(string connectionString);
    public static bool Start(string connectionString, string queue);
    internal static bool Start(string connectionString, string queue, bool useDefaults);
    public static bool Stop(string connectionString);
    public static bool Stop(string connectionString, string queue);
    internal static bool Stop(string connectionString, string queue, bool useDefaults, bool startFailed);
    private static bool AddToServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    private static void RemoveFromServerUserHash(string server, IdentityUserNamePair identityUser, DatabaseServicePair databaseService);
    internal static string GetDefaultComposedOptions(string server, string failoverServer, IdentityUserNamePair identityUser, string database);
    internal void AddToServerList(string server);
    internal bool ContainsServer(string server);
    internal string ComputeHashAndAddToDispatcher(SqlCommand command);
    internal void Invalidate(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    internal void StartTimer(SqlNotificationRequest notificationRequest);
    private void AddCommandInternal(SqlCommand cmd);
    private string ComputeCommandHash(string connectionString, SqlCommand command);
    internal static string FixupServiceOrDatabaseName(string name);
}
internal class System.Data.SqlClient.SqlDependencyPerAppDomainDispatcher : MarshalByRefObject {
    
internal static SqlDependencyPerAppDomainDispatcher SingletonInstance;
    
internal object _instanceLock;
    
private Dictionary`2<string, SqlDependency> _dependencyIdToDependencyHash;
    
private Dictionary`2<string, DependencyList> _notificationIdToDependenciesHash;
    
private Dictionary`2<string, string> _commandHashToNotificationId;
    
private bool _sqlDependencyTimeOutTimerStarted;
    
private DateTime _nextTimeout;
    
private Timer _timeoutTimer;
    private static SqlDependencyPerAppDomainDispatcher();
    public virtual object InitializeLifetimeService();
    internal void AddDependencyEntry(SqlDependency dep);
    internal string AddCommandEntry(string commandHash, SqlDependency dep);
    internal void InvalidateCommandID(SqlNotification sqlNotification);
    internal void InvalidateServer(string server, SqlNotification sqlNotification);
    internal SqlDependency LookupDependencyEntry(string id);
    private void LookupDependencyEntryWithRemove(string id);
    private List`1<SqlDependency> LookupCommandEntryWithRemove(string notificationId);
    private void RemoveDependencyFromCommandToDependenciesHash(SqlDependency dependency);
    internal void StartTimer(SqlDependency dep);
    private static void TimeoutTimerCallback(object state);
    private void SubscribeToAppDomainUnload();
}
internal class System.Data.SqlClient.SqlEnvChange : object {
    
internal byte type;
    
internal byte oldLength;
    
internal int newLength;
    
internal int length;
    
internal string newValue;
    
internal string oldValue;
    
internal Byte[] newBinValue;
    
internal Byte[] oldBinValue;
    
internal long newLongValue;
    
internal long oldLongValue;
    
internal SqlCollation newCollation;
    
internal SqlCollation oldCollation;
    
internal RoutingInfo newRoutingInfo;
}
public class System.Data.SqlClient.SqlError : object {
    
private string _source;
    
private int _number;
    
private byte _state;
    
private byte _errorClass;
    
private string _server;
    
private string _message;
    
private string _procedure;
    
private int _lineNumber;
    
private int _win32ErrorCode;
    
private Exception _exception;
    
public string Source { get; }
    
public int Number { get; }
    
public byte State { get; }
    
public byte Class { get; }
    
public string Server { get; }
    
public string Message { get; }
    
public string Procedure { get; }
    
public int LineNumber { get; }
    
internal int Win32ErrorCode { get; }
    
internal Exception Exception { get; }
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode, Exception exception);
    internal SqlError(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, Exception exception);
    public virtual string ToString();
    public string get_Source();
    public int get_Number();
    public byte get_State();
    public byte get_Class();
    public string get_Server();
    public string get_Message();
    public string get_Procedure();
    public int get_LineNumber();
    internal int get_Win32ErrorCode();
    internal Exception get_Exception();
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlErrorCollection : object {
    
private List`1<object> _errors;
    
public int Count { get; }
    
private object System.Collections.ICollection.SyncRoot { get; }
    
private bool System.Collections.ICollection.IsSynchronized { get; }
    
public SqlError Item { get; }
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(SqlError[] array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public SqlError get_Item(int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void Add(SqlError error);
}
public class System.Data.SqlClient.SqlException : DbException {
    
private static string OriginalClientConnectionIdKey;
    
private static string RoutingDestinationKey;
    
private static int SqlExceptionHResult;
    
private SqlErrorCollection _errors;
    
private Guid _clientConnectionId;
    
internal bool _doNotReconnect;
    
private static string DEF_MESSAGE;
    
public SqlErrorCollection Errors { get; }
    
public Guid ClientConnectionId { get; }
    
public byte Class { get; }
    
public int LineNumber { get; }
    
public int Number { get; }
    
public string Procedure { get; }
    
public string Server { get; }
    
public byte State { get; }
    
public string Source { get; }
    
public string Message { get; }
    private SqlException(string message, SqlErrorCollection errorCollection, Exception innerException, Guid conId);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
    public SqlErrorCollection get_Errors();
    public Guid get_ClientConnectionId();
    public byte get_Class();
    public int get_LineNumber();
    public int get_Number();
    public string get_Procedure();
    public string get_Server();
    public byte get_State();
    public virtual string get_Source();
    public virtual string ToString();
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException);
    internal static SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException);
    internal SqlException InternalClone();
    public virtual string get_Message();
}
public class System.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
    
private SqlException _exception;
    
public SqlErrorCollection Errors { get; }
    
public string Message { get; }
    
public string Source { get; }
    internal SqlInfoMessageEventArgs(SqlException exception);
    public SqlErrorCollection get_Errors();
    private bool ShouldSerializeErrors();
    public string get_Message();
    public string get_Source();
    public virtual string ToString();
}
public class System.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
    public SqlInfoMessageEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlInfoMessageEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal abstract class System.Data.SqlClient.SqlInternalConnection : DbConnectionInternal {
    
private SqlConnectionString _connectionOptions;
    
private bool _isEnlistedInTransaction;
    
private Byte[] _promotedDTCToken;
    
private Byte[] _whereAbouts;
    
private bool _isGlobalTransaction;
    
private bool _isGlobalTransactionEnabledForServer;
    
private static Guid _globalTransactionTMID;
    [CompilerGeneratedAttribute]

private string <CurrentDatabase>k__BackingField;
    [CompilerGeneratedAttribute]

private string <CurrentDataSource>k__BackingField;
    [CompilerGeneratedAttribute]

private SqlDelegatedTransaction <DelegatedTransaction>k__BackingField;
    
internal string CurrentDatabase { get; internal set; }
    
internal string CurrentDataSource { get; internal set; }
    
internal SqlDelegatedTransaction DelegatedTransaction { get; internal set; }
    
internal SqlConnection Connection { get; }
    
internal SqlConnectionString ConnectionOptions { get; }
    
internal SqlInternalTransaction CurrentTransaction { get; }
    
internal SqlInternalTransaction AvailableInternalTransaction { get; }
    
internal SqlInternalTransaction PendingTransaction { get; }
    
protected internal bool IsNonPoolableTransactionRoot { get; }
    
internal bool IsTransactionRoot { get; }
    
internal bool HasLocalTransaction { get; }
    
internal bool HasLocalTransactionFromAPI { get; }
    
internal bool IsEnlistedInTransaction { get; }
    
internal bool IsLockedForBulkCopy { get; }
    
internal bool IsKatmaiOrNewer { get; }
    
internal Byte[] PromotedDTCToken { get; internal set; }
    
internal bool IsGlobalTransaction { get; internal set; }
    
internal bool IsGlobalTransactionsEnabledForServer { get; internal set; }
    internal SqlInternalConnection(SqlConnectionString connectionOptions);
    private static SqlInternalConnection();
    [CompilerGeneratedAttribute]
internal string get_CurrentDatabase();
    [CompilerGeneratedAttribute]
internal void set_CurrentDatabase(string value);
    [CompilerGeneratedAttribute]
internal string get_CurrentDataSource();
    [CompilerGeneratedAttribute]
internal void set_CurrentDataSource(string value);
    [CompilerGeneratedAttribute]
internal SqlDelegatedTransaction get_DelegatedTransaction();
    [CompilerGeneratedAttribute]
internal void set_DelegatedTransaction(SqlDelegatedTransaction value);
    internal SqlConnection get_Connection();
    internal SqlConnectionString get_ConnectionOptions();
    internal abstract virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal abstract virtual SqlInternalTransaction get_PendingTransaction();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsTransactionRoot();
    internal bool get_HasLocalTransaction();
    internal bool get_HasLocalTransactionFromAPI();
    internal bool get_IsEnlistedInTransaction();
    internal abstract virtual bool get_IsLockedForBulkCopy();
    internal abstract virtual bool get_IsKatmaiOrNewer();
    internal Byte[] get_PromotedDTCToken();
    internal void set_PromotedDTCToken(Byte[] value);
    internal bool get_IsGlobalTransaction();
    internal void set_IsGlobalTransaction(bool value);
    internal bool get_IsGlobalTransactionsEnabledForServer();
    internal void set_IsGlobalTransactionsEnabledForServer(bool value);
    public virtual DbTransaction BeginTransaction(IsolationLevel iso);
    internal virtual SqlTransaction BeginSqlTransaction(IsolationLevel iso, string transactionName, bool shouldReconnect);
    public virtual void ChangeDatabase(string database);
    protected abstract virtual void ChangeDatabaseInternal(string database);
    protected virtual void CleanupTransactionOnCompletion(Transaction transaction);
    protected virtual DbReferenceCollection CreateReferenceCollection();
    protected virtual void Deactivate();
    internal abstract virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    public virtual void Dispose();
    protected void Enlist(Transaction tx);
    private void EnlistNonNull(Transaction tx);
    internal void EnlistNull();
    public virtual void EnlistTransaction(Transaction transaction);
    internal abstract virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    protected abstract virtual Byte[] GetDTCAddress();
    private static Byte[] GetTransactionCookie(Transaction transaction, Byte[] whereAbouts);
    protected virtual void InternalDeactivate();
    internal void OnError(SqlException exception, bool breakConnection, Action`1<Action> wrapCloseInAction);
    protected abstract virtual void PropagateTransactionCookie(Byte[] transactionCookie);
    internal abstract virtual void ValidateConnectionForExecute(SqlCommand command);
}
internal class System.Data.SqlClient.SqlInternalConnectionTds : SqlInternalConnection {
    
private SqlConnectionPoolGroupProviderInfo _poolGroupProviderInfo;
    
private TdsParser _parser;
    
private SqlLoginAck _loginAck;
    
private bool _sessionRecoveryRequested;
    
internal bool _sessionRecoveryAcknowledged;
    
internal SessionData _currentSessionData;
    
private SessionData _recoverySessionData;
    
private static HashSet`1<int> s_transientErrors;
    
private bool _fConnectionOpen;
    
private bool _fResetConnection;
    
private string _originalDatabase;
    
private string _currentFailoverPartner;
    
private string _originalLanguage;
    
private string _currentLanguage;
    
private int _currentPacketSize;
    
private int _asyncCommandCount;
    
private string _instanceName;
    
private DbConnectionPoolIdentity _identity;
    
internal SyncAsyncLock _parserLock;
    
private int _threadIdOwningParserLock;
    
private SqlConnectionTimeoutErrorInternal _timeoutErrorInternal;
    
internal Guid _clientConnectionId;
    
private RoutingInfo _routingInfo;
    
private Guid _originalClientConnectionId;
    
private string _routingDestination;
    
internal SessionData CurrentSessionData { get; }
    
internal SqlConnectionTimeoutErrorInternal TimeoutErrorInternal { get; }
    
internal Guid ClientConnectionId { get; }
    
internal Guid OriginalClientConnectionId { get; }
    
internal string RoutingDestination { get; }
    
internal SqlInternalTransaction CurrentTransaction { get; }
    
internal SqlInternalTransaction AvailableInternalTransaction { get; }
    
internal SqlInternalTransaction PendingTransaction { get; }
    
internal DbConnectionPoolIdentity Identity { get; }
    
internal string InstanceName { get; }
    
internal bool IsLockedForBulkCopy { get; }
    
protected internal bool IsNonPoolableTransactionRoot { get; }
    
internal bool IsKatmaiOrNewer { get; }
    
internal int PacketSize { get; }
    
internal TdsParser Parser { get; }
    
internal string ServerProvidedFailOverPartner { get; }
    
internal SqlConnectionPoolGroupProviderInfo PoolGroupProviderInfo { get; }
    
protected bool ReadyToPrepareTransaction { get; }
    
public string ServerVersion { get; }
    
protected bool UnbindOnTransactionCompletion { get; }
    
internal bool IgnoreEnvChange { get; }
    
internal bool ThreadHasParserLockForClose { get; internal set; }
    internal SqlInternalConnectionTds(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, object providerInfo, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling);
    private static SqlInternalConnectionTds();
    internal SessionData get_CurrentSessionData();
    internal SqlConnectionTimeoutErrorInternal get_TimeoutErrorInternal();
    private bool IsTransientError(SqlException exc);
    internal Guid get_ClientConnectionId();
    internal Guid get_OriginalClientConnectionId();
    internal string get_RoutingDestination();
    internal virtual SqlInternalTransaction get_CurrentTransaction();
    internal virtual SqlInternalTransaction get_AvailableInternalTransaction();
    internal virtual SqlInternalTransaction get_PendingTransaction();
    internal DbConnectionPoolIdentity get_Identity();
    internal string get_InstanceName();
    internal virtual bool get_IsLockedForBulkCopy();
    protected internal virtual bool get_IsNonPoolableTransactionRoot();
    internal virtual bool get_IsKatmaiOrNewer();
    internal int get_PacketSize();
    internal TdsParser get_Parser();
    internal string get_ServerProvidedFailOverPartner();
    internal SqlConnectionPoolGroupProviderInfo get_PoolGroupProviderInfo();
    protected virtual bool get_ReadyToPrepareTransaction();
    public virtual string get_ServerVersion();
    protected virtual bool get_UnbindOnTransactionCompletion();
    protected virtual void ChangeDatabaseInternal(string database);
    public virtual void Dispose();
    internal virtual void ValidateConnectionForExecute(SqlCommand command);
    internal void CheckEnlistedTransactionBinding();
    internal virtual bool IsConnectionAlive(bool throwOnException);
    protected virtual void Activate(Transaction transaction);
    protected virtual void InternalDeactivate();
    private void ResetConnection();
    internal void DecrementAsyncCount();
    internal void IncrementAsyncCount();
    internal virtual void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso);
    internal virtual void ExecuteTransaction(TransactionRequest transactionRequest, string name, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal void ExecuteTransactionYukon(TransactionRequest transactionRequest, string transactionName, IsolationLevel iso, SqlInternalTransaction internalTransaction, bool isDelegateControlRequest);
    internal virtual void DelegatedTransactionEnded();
    protected virtual Byte[] GetDTCAddress();
    protected virtual void PropagateTransactionCookie(Byte[] cookie);
    private void CompleteLogin(bool enlistOK);
    private void Login(ServerInfo server, TimeoutTimer timeout);
    private void LoginFailure();
    private void OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, bool redirectedUserInstance);
    private bool IsDoNotRetryConnectError(SqlException exc);
    private void LoginNoFailover(ServerInfo serverInfo, bool redirectedUserInstance, SqlConnectionString connectionOptions, TimeoutTimer timeout);
    private void LoginWithFailover(bool useFailoverHost, ServerInfo primaryServerInfo, string failoverHost, bool redirectedUserInstance, SqlConnectionString connectionOptions, TimeoutTimer timeout);
    private void ResolveExtendedServerName(ServerInfo serverInfo, bool aliasLookup, SqlConnectionString options);
    private void AttemptOneLogin(ServerInfo serverInfo, bool ignoreSniOpenTimeout, TimeoutTimer timeout, bool withFailover);
    protected virtual object ObtainAdditionalLocksForClose();
    protected virtual void ReleaseAdditionalLocksForClose(object lockToken);
    internal bool GetSessionAndReconnectIfNeeded(SqlConnection parent, int timeout);
    internal void BreakConnection();
    internal bool get_IgnoreEnvChange();
    internal void OnEnvChange(SqlEnvChange rec);
    internal void OnLoginAck(SqlLoginAck rec);
    internal void OnFeatureExtAck(int featureId, Byte[] data);
    internal bool get_ThreadHasParserLockForClose();
    internal void set_ThreadHasParserLockForClose(bool value);
    internal virtual bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions);
}
internal class System.Data.SqlClient.SqlInternalTransaction : object {
    
internal static long NullTransactionId;
    
private TransactionState _transactionState;
    
private TransactionType _transactionType;
    
private long _transactionId;
    
private int _openResultCount;
    
private SqlInternalConnection _innerConnection;
    
private bool _disposing;
    
private WeakReference _parent;
    [CompilerGeneratedAttribute]

private bool <RestoreBrokenConnection>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <ConnectionHasBeenRestored>k__BackingField;
    
internal bool RestoreBrokenConnection { get; internal set; }
    
internal bool ConnectionHasBeenRestored { get; internal set; }
    
internal bool HasParentTransaction { get; }
    
internal bool IsAborted { get; }
    
internal bool IsActive { get; }
    
internal bool IsCommitted { get; }
    
internal bool IsCompleted { get; }
    
internal bool IsDelegated { get; }
    
internal bool IsDistributed { get; }
    
internal bool IsLocal { get; }
    
internal bool IsOrphaned { get; }
    
internal bool IsZombied { get; }
    
internal int OpenResultsCount { get; }
    
internal SqlTransaction Parent { get; }
    
internal long TransactionId { get; internal set; }
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction);
    internal SqlInternalTransaction(SqlInternalConnection innerConnection, TransactionType type, SqlTransaction outerTransaction, long transactionId);
    [CompilerGeneratedAttribute]
internal bool get_RestoreBrokenConnection();
    [CompilerGeneratedAttribute]
internal void set_RestoreBrokenConnection(bool value);
    [CompilerGeneratedAttribute]
internal bool get_ConnectionHasBeenRestored();
    [CompilerGeneratedAttribute]
internal void set_ConnectionHasBeenRestored(bool value);
    internal bool get_HasParentTransaction();
    internal bool get_IsAborted();
    internal bool get_IsActive();
    internal bool get_IsCommitted();
    internal bool get_IsCompleted();
    internal bool get_IsDelegated();
    internal bool get_IsDistributed();
    internal bool get_IsLocal();
    internal bool get_IsOrphaned();
    internal bool get_IsZombied();
    internal int get_OpenResultsCount();
    internal SqlTransaction get_Parent();
    internal long get_TransactionId();
    internal void set_TransactionId(long value);
    internal void Activate();
    private void CheckTransactionLevelAndZombie();
    internal void CloseFromConnection();
    internal void Commit();
    internal void Completed(TransactionState transactionState);
    internal int DecrementAndObtainOpenResultCount();
    internal void Dispose();
    private void Dispose(bool disposing);
    private int GetServerTransactionLevel();
    internal int IncrementAndObtainOpenResultCount();
    internal void InitParent(SqlTransaction transaction);
    internal void Rollback();
    internal void Rollback(string transactionName);
    internal void Save(string savePointName);
    internal void Zombie();
    private void ZombieParent();
}
internal class System.Data.SqlClient.SqlLogin : object {
    
internal int timeout;
    
internal bool userInstance;
    
internal string hostName;
    
internal string userName;
    
internal string password;
    
internal string applicationName;
    
internal string serverName;
    
internal string language;
    
internal string database;
    
internal string attachDBFilename;
    
internal bool useReplication;
    
internal bool useSSPI;
    
internal int packetSize;
    
internal bool readOnlyIntent;
}
internal class System.Data.SqlClient.SqlLoginAck : object {
    
internal byte majorVersion;
    
internal byte minorVersion;
    
internal short buildNum;
    
internal UInt32 tdsVersion;
}
internal class System.Data.SqlClient.SQLMessage : object {
    internal static string CultureIdError();
    internal static string EncryptionNotSupportedByClient();
    internal static string EncryptionNotSupportedByServer();
    internal static string OperationCancelled();
    internal static string SevereError();
    internal static string SSPIInitializeError();
    internal static string SSPIGenerateError();
    internal static string SqlServerBrowserNotAccessible();
    internal static string KerberosTicketMissingError();
    internal static string Timeout();
    internal static string Timeout_PreLogin_Begin();
    internal static string Timeout_PreLogin_InitializeConnection();
    internal static string Timeout_PreLogin_SendHandshake();
    internal static string Timeout_PreLogin_ConsumeHandshake();
    internal static string Timeout_Login_Begin();
    internal static string Timeout_Login_ProcessConnectionAuth();
    internal static string Timeout_PostLogin();
    internal static string Timeout_FailoverInfo();
    internal static string Timeout_RoutingDestination();
    internal static string Duration_PreLogin_Begin(long PreLoginBeginDuration);
    internal static string Duration_PreLoginHandshake(long PreLoginBeginDuration, long PreLoginHandshakeDuration);
    internal static string Duration_Login_Begin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration);
    internal static string Duration_Login_ProcessConnectionAuth(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration);
    internal static string Duration_PostLogin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration, long PostLoginDuration);
    internal static string UserInstanceFailure();
    internal static string PreloginError();
    internal static string ExClientConnectionId();
    internal static string ExErrorNumberStateClass();
    internal static string ExOriginalClientConnectionId();
    internal static string ExRoutingDestination();
}
internal class System.Data.SqlClient.SqlMetaDataFactory : DbMetaDataFactory {
    
private static string _serverVersionNormalized90;
    
private static string _serverVersionNormalized90782;
    
private static string _serverVersionNormalized10;
    public SqlMetaDataFactory(Stream XMLStream, string serverVersion, string serverVersionNormalized);
    private void addUDTsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private void AddTVPsToDataTypesTable(DataTable dataTypesTable, SqlConnection connection, string ServerVersion);
    private DataTable GetDataTypesTable(SqlConnection connection);
    protected virtual DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection);
}
internal class System.Data.SqlClient.SqlMetaDataPriv : object {
    
internal SqlDbType type;
    
internal byte tdsType;
    
internal byte precision;
    
internal byte scale;
    
internal int length;
    
internal SqlCollation collation;
    
internal int codePage;
    
internal Encoding encoding;
    
internal bool isNullable;
    
internal string udtDatabaseName;
    
internal string udtSchemaName;
    
internal string udtTypeName;
    
internal string udtAssemblyQualifiedName;
    
internal string xmlSchemaCollectionDatabase;
    
internal string xmlSchemaCollectionOwningSchema;
    
internal string xmlSchemaCollectionName;
    
internal MetaType metaType;
    internal virtual void CopyFrom(SqlMetaDataPriv original);
}
internal class System.Data.SqlClient.SqlNotification : MarshalByRefObject {
    
private SqlNotificationInfo _info;
    
private SqlNotificationSource _source;
    
private SqlNotificationType _type;
    
private string _key;
    
internal SqlNotificationInfo Info { get; }
    
internal string Key { get; }
    
internal SqlNotificationSource Source { get; }
    
internal SqlNotificationType Type { get; }
    internal SqlNotification(SqlNotificationInfo info, SqlNotificationSource source, SqlNotificationType type, string key);
    internal SqlNotificationInfo get_Info();
    internal string get_Key();
    internal SqlNotificationSource get_Source();
    internal SqlNotificationType get_Type();
}
public class System.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
    
private SqlNotificationType _type;
    
private SqlNotificationInfo _info;
    
private SqlNotificationSource _source;
    
internal static SqlNotificationEventArgs s_notifyError;
    
public SqlNotificationType Type { get; }
    
public SqlNotificationInfo Info { get; }
    
public SqlNotificationSource Source { get; }
    public SqlNotificationEventArgs(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source);
    private static SqlNotificationEventArgs();
    public SqlNotificationType get_Type();
    public SqlNotificationInfo get_Info();
    public SqlNotificationSource get_Source();
}
public enum System.Data.SqlClient.SqlNotificationInfo : Enum {
    
public int value__;
    
public static SqlNotificationInfo Truncate;
    
public static SqlNotificationInfo Insert;
    
public static SqlNotificationInfo Update;
    
public static SqlNotificationInfo Delete;
    
public static SqlNotificationInfo Drop;
    
public static SqlNotificationInfo Alter;
    
public static SqlNotificationInfo Restart;
    
public static SqlNotificationInfo Error;
    
public static SqlNotificationInfo Query;
    
public static SqlNotificationInfo Invalid;
    
public static SqlNotificationInfo Options;
    
public static SqlNotificationInfo Isolation;
    
public static SqlNotificationInfo Expired;
    
public static SqlNotificationInfo Resource;
    
public static SqlNotificationInfo PreviousFire;
    
public static SqlNotificationInfo TemplateLimit;
    
public static SqlNotificationInfo Merge;
    
public static SqlNotificationInfo Unknown;
    
public static SqlNotificationInfo AlreadyChanged;
}
public enum System.Data.SqlClient.SqlNotificationSource : Enum {
    
public int value__;
    
public static SqlNotificationSource Data;
    
public static SqlNotificationSource Timeout;
    
public static SqlNotificationSource Object;
    
public static SqlNotificationSource Database;
    
public static SqlNotificationSource System;
    
public static SqlNotificationSource Statement;
    
public static SqlNotificationSource Environment;
    
public static SqlNotificationSource Execution;
    
public static SqlNotificationSource Owner;
    
public static SqlNotificationSource Unknown;
    
public static SqlNotificationSource Client;
}
public enum System.Data.SqlClient.SqlNotificationType : Enum {
    
public int value__;
    
public static SqlNotificationType Change;
    
public static SqlNotificationType Subscribe;
    
public static SqlNotificationType Unknown;
}
public class System.Data.SqlClient.SqlParameter : DbParameter {
    
private MetaType _metaType;
    
private SqlCollation _collation;
    
private string _xmlSchemaCollectionDatabase;
    
private string _xmlSchemaCollectionOwningSchema;
    
private string _xmlSchemaCollectionName;
    
private string _typeName;
    
private string _parameterName;
    
private byte _precision;
    
private byte _scale;
    
private bool _hasScale;
    
private MetaType _internalMetaType;
    
private SqlBuffer _sqlBufferReturnValue;
    
private INullable _valueAsINullable;
    
private bool _isSqlParameterSqlType;
    
private bool _isNull;
    
private bool _coercedValueIsSqlType;
    
private bool _coercedValueIsDataFeed;
    
private int _actualSize;
    
private DataRowVersion _sourceVersion;
    
private object _value;
    
private object _parent;
    
private ParameterDirection _direction;
    
private int _size;
    
private int _offset;
    
private string _sourceColumn;
    
private bool _sourceColumnNullMapping;
    
private bool _isNullable;
    
private object _coercedValue;
    
internal SqlCollation Collation { get; internal set; }
    
public SqlCompareOptions CompareInfo { get; public set; }
    
public string XmlSchemaCollectionDatabase { get; public set; }
    
public string XmlSchemaCollectionOwningSchema { get; public set; }
    
public string XmlSchemaCollectionName { get; public set; }
    
public DbType DbType { get; public set; }
    
internal MetaType InternalMetaType { get; internal set; }
    
public int LocaleId { get; public set; }
    
internal bool SizeInferred { get; }
    
internal bool ParameterIsSqlType { get; internal set; }
    
public string ParameterName { get; public set; }
    
internal string ParameterNameFixed { get; }
    
public byte Precision { get; public set; }
    
internal byte PrecisionInternal { get; internal set; }
    
public byte Scale { get; public set; }
    
internal byte ScaleInternal { get; internal set; }
    
public SqlDbType SqlDbType { get; public set; }
    
public object SqlValue { get; public set; }
    
public string TypeName { get; public set; }
    
public object Value { get; public set; }
    
internal INullable ValueAsINullable { get; }
    
internal bool IsNull { get; }
    
internal bool CoercedValueIsSqlType { get; }
    
internal bool CoercedValueIsDataFeed { get; }
    
public DataRowVersion SourceVersion { get; public set; }
    
private object CoercedValue { get; private set; }
    
public ParameterDirection Direction { get; public set; }
    
public bool IsNullable { get; public set; }
    
public int Offset { get; public set; }
    
public int Size { get; public set; }
    
public string SourceColumn { get; public set; }
    
public bool SourceColumnNullMapping { get; public set; }
    [MonoTODOAttribute]

public string UdtTypeName { get; public set; }
    
public bool ForceColumnEncryption { get; public set; }
    public SqlParameter(string parameterName, SqlDbType dbType);
    public SqlParameter(string parameterName, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, string sourceColumn);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value);
    public SqlParameter(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName);
    private SqlParameter(SqlParameter source);
    internal SqlCollation get_Collation();
    internal void set_Collation(SqlCollation value);
    public SqlCompareOptions get_CompareInfo();
    public void set_CompareInfo(SqlCompareOptions value);
    public string get_XmlSchemaCollectionDatabase();
    public void set_XmlSchemaCollectionDatabase(string value);
    public string get_XmlSchemaCollectionOwningSchema();
    public void set_XmlSchemaCollectionOwningSchema(string value);
    public string get_XmlSchemaCollectionName();
    public void set_XmlSchemaCollectionName(string value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual void ResetDbType();
    internal MetaType get_InternalMetaType();
    internal void set_InternalMetaType(MetaType value);
    public int get_LocaleId();
    public void set_LocaleId(int value);
    internal bool get_SizeInferred();
    internal SmiParameterMetaData MetaDataForSmi(ParameterPeekAheadValue& peekAhead);
    internal bool get_ParameterIsSqlType();
    internal void set_ParameterIsSqlType(bool value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    internal string get_ParameterNameFixed();
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    internal byte get_PrecisionInternal();
    internal void set_PrecisionInternal(byte value);
    private bool ShouldSerializePrecision();
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    internal byte get_ScaleInternal();
    internal void set_ScaleInternal(byte value);
    private bool ShouldSerializeScale();
    public SqlDbType get_SqlDbType();
    public void set_SqlDbType(SqlDbType value);
    private bool ShouldSerializeSqlDbType();
    public void ResetSqlDbType();
    public object get_SqlValue();
    public void set_SqlValue(object value);
    public string get_TypeName();
    public void set_TypeName(string value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    internal INullable get_ValueAsINullable();
    internal bool get_IsNull();
    internal int GetActualSize();
    internal static object CoerceValue(object value, MetaType destinationType, Boolean& coercedToDataFeed, Boolean& typeChanged, bool allowStreaming);
    internal void FixStreamDataForNonPLP();
    internal byte GetActualPrecision();
    internal byte GetActualScale();
    internal int GetParameterSize();
    private void GetActualFieldsAndProperties(List`1& fields, SmiMetaDataPropertyCollection& props, ParameterPeekAheadValue& peekAhead);
    internal object GetCoercedValue();
    internal bool get_CoercedValueIsSqlType();
    internal bool get_CoercedValueIsDataFeed();
    [ConditionalAttribute("DEBUG")]
internal void AssertCachedPropertiesAreValid();
    [ConditionalAttribute("DEBUG")]
internal void AssertPropertiesAreValid(object value, Nullable`1<bool> isSqlType, Nullable`1<bool> isDataFeed, Nullable`1<bool> isNull);
    private SqlDbType GetMetaSqlDbTypeOnly();
    private MetaType GetMetaTypeOnly();
    internal void Prepare(SqlCommand cmd);
    private void PropertyChanging();
    private void PropertyTypeChanging();
    internal void SetSqlBuffer(SqlBuffer buff);
    internal void Validate(int index, bool isCommandProc);
    internal MetaType ValidateTypeLengths();
    private byte ValuePrecision(object value);
    private byte ValueScale(object value);
    private static int StringSize(object value, bool isSqlType);
    private static int BinarySize(object value, bool isSqlType);
    private int ValueSize(object value);
    internal static String[] ParseTypeName(string typeName);
    private sealed virtual override object System.ICloneable.Clone();
    private void CloneHelper(SqlParameter destination);
    private void CloneHelperCore(SqlParameter destination);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private object get_CoercedValue();
    private void set_CoercedValue(object value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public int get_Offset();
    public void set_Offset(int value);
    public virtual int get_Size();
    public virtual void set_Size(int value);
    private bool ShouldSerializeSize();
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    internal object CompareExchangeParent(object value, object comparand);
    internal void ResetParent();
    public virtual string ToString();
    private byte ValuePrecisionCore(object value);
    private byte ValueScaleCore(object value);
    private int ValueSizeCore(object value);
    internal void CopyTo(SqlParameter destination);
    public string get_UdtTypeName();
    public void set_UdtTypeName(string value);
    [CompilerGeneratedAttribute]
public bool get_ForceColumnEncryption();
    [CompilerGeneratedAttribute]
public void set_ForceColumnEncryption(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
    
private bool _isDirty;
    
private static Type s_itemType;
    
private List`1<SqlParameter> _items;
    
internal bool IsDirty { get; internal set; }
    
public SqlParameter Item { get; public set; }
    
public SqlParameter Item { get; public set; }
    
public int Count { get; }
    
private List`1<SqlParameter> InnerList { get; }
    
public object SyncRoot { get; }
    private static SqlParameterCollection();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    public SqlParameter get_Item(int index);
    public void set_Item(int index, SqlParameter value);
    public SqlParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqlParameter value);
    public SqlParameter Add(SqlParameter value);
    public SqlParameter AddWithValue(string parameterName, object value);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size);
    public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn);
    public void AddRange(SqlParameter[] values);
    public virtual bool Contains(string value);
    public bool Contains(SqlParameter value);
    public void CopyTo(SqlParameter[] array, int index);
    public int IndexOf(SqlParameter value);
    public void Insert(int index, SqlParameter value);
    private void OnChange();
    public void Remove(SqlParameter value);
    public virtual int get_Count();
    private List`1<SqlParameter> get_InnerList();
    public virtual object get_SyncRoot();
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public virtual void AddRange(Array values);
    private int CheckName(string parameterName);
    public virtual void Clear();
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual IEnumerator GetEnumerator();
    protected virtual DbParameter GetParameter(int index);
    protected virtual DbParameter GetParameter(string parameterName);
    private static int IndexOf(IEnumerable items, string parameterName);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    private void RangeCheck(int index);
    public virtual void Remove(object value);
    public virtual void RemoveAt(int index);
    public virtual void RemoveAt(string parameterName);
    private void RemoveIndex(int index);
    private void Replace(int index, object newValue);
    protected virtual void SetParameter(int index, DbParameter value);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    private void Validate(int index, object value);
    private void ValidateType(object value);
    public SqlParameter Add(string parameterName, object value);
}
internal class System.Data.SqlClient.SqlReferenceCollection : DbReferenceCollection {
    
internal static int DataReaderTag;
    
internal static int CommandTag;
    
internal static int BulkCopyTag;
    public virtual void Add(object value, int tag);
    internal void Deactivate();
    internal SqlDataReader FindLiveReader(SqlCommand command);
    internal SqlCommand FindLiveCommand(TdsParserStateObject stateObj);
    protected virtual void NotifyItem(int message, int tag, object value);
    public virtual void Remove(object value);
}
internal class System.Data.SqlClient.SqlReturnValue : SqlMetaDataPriv {
    
internal string parameter;
    
internal SqlBuffer value;
}
public class System.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
    
private bool _abort;
    
private long _rowsCopied;
    
public bool Abort { get; public set; }
    
public long RowsCopied { get; }
    public SqlRowsCopiedEventArgs(long rowsCopied);
    public bool get_Abort();
    public void set_Abort(bool value);
    public long get_RowsCopied();
}
public class System.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
    public SqlRowsCopiedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowsCopiedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
    
public SqlCommand Command { get; }
    public SqlRowUpdatedEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
}
public class System.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
    public SqlRowUpdatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
    
public SqlCommand Command { get; public set; }
    
protected IDbCommand BaseCommand { get; protected set; }
    public SqlRowUpdatingEventArgs(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public SqlCommand get_Command();
    public void set_Command(SqlCommand value);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
}
public class System.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
    public SqlRowUpdatingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SqlRowUpdatingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.SqlClient.SqlSequentialStream : Stream {
    
private SqlDataReader _reader;
    
private int _columnIndex;
    
private Task _currentTask;
    
private int _readTimeout;
    
private CancellationTokenSource _disposalTokenSource;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanTimeout { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    
public int ReadTimeout { get; public set; }
    
internal int ColumnIndex { get; }
    internal SqlSequentialStream(SqlDataReader reader, int columnIndex);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanTimeout();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int get_ReadTimeout();
    public virtual void set_ReadTimeout(int value);
    internal int get_ColumnIndex();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual IAsyncResult BeginRead(Byte[] array, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetClosed();
    protected virtual void Dispose(bool disposing);
    internal static void ValidateReadParameters(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlSequentialTextReader : TextReader {
    
private SqlDataReader _reader;
    
private int _columnIndex;
    
private Encoding _encoding;
    
private Decoder _decoder;
    
private Byte[] _leftOverBytes;
    
private int _peekedChar;
    
private Task _currentTask;
    
private CancellationTokenSource _disposalTokenSource;
    
internal int ColumnIndex { get; }
    
private bool IsClosed { get; }
    
private bool HasPeekedChar { get; }
    internal SqlSequentialTextReader(SqlDataReader reader, int columnIndex, Encoding encoding);
    internal int get_ColumnIndex();
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    protected virtual void Dispose(bool disposing);
    internal void SetClosed();
    private int InternalRead(Char[] buffer, int index, int count);
    private Byte[] PrepareByteBuffer(int numberOfChars, Int32& byteBufferUsed);
    private int DecodeBytesToChars(Byte[] inBuffer, int inBufferCount, Char[] outBuffer, int outBufferOffset, int outBufferCount);
    private bool get_IsClosed();
    private bool get_HasPeekedChar();
    internal static void ValidateReadParameters(Char[] buffer, int index, int count);
}
internal static class System.Data.SqlClient.SqlServerEscapeHelper : object {
    internal static string EscapeIdentifier(string name);
    internal static void EscapeIdentifier(StringBuilder builder, string name);
    internal static string EscapeStringAsLiteral(string input);
    internal static string MakeStringLiteral(string input);
}
internal class System.Data.SqlClient.SqlStatistics : object {
    
internal long _closeTimestamp;
    
internal long _openTimestamp;
    
internal long _startExecutionTimestamp;
    
internal long _startFetchTimestamp;
    
internal long _startNetworkServerTimestamp;
    
internal long _buffersReceived;
    
internal long _buffersSent;
    
internal long _bytesReceived;
    
internal long _bytesSent;
    
internal long _connectionTime;
    
internal long _cursorOpens;
    
internal long _executionTime;
    
internal long _iduCount;
    
internal long _iduRows;
    
internal long _networkServerTime;
    
internal long _preparedExecs;
    
internal long _prepares;
    
internal long _selectCount;
    
internal long _selectRows;
    
internal long _serverRoundtrips;
    
internal long _sumResultSets;
    
internal long _transactions;
    
internal long _unpreparedExecs;
    
private bool _waitForDoneAfterRow;
    
private bool _waitForReply;
    
internal bool WaitForDoneAfterRow { get; internal set; }
    
internal bool WaitForReply { get; }
    internal static SqlStatistics StartTimer(SqlStatistics statistics);
    internal static void StopTimer(SqlStatistics statistics);
    internal bool get_WaitForDoneAfterRow();
    internal void set_WaitForDoneAfterRow(bool value);
    internal bool get_WaitForReply();
    internal void ContinueOnNewConnection();
    internal IDictionary GetDictionary();
    internal bool RequestExecutionTimer();
    internal void RequestNetworkServerTimer();
    internal void ReleaseAndUpdateExecutionTimer();
    internal void ReleaseAndUpdateNetworkServerTimer();
    internal void Reset();
    internal void SafeAdd(Int64& value, long summand);
    internal long SafeIncrement(Int64& value);
    internal void UpdateStatistics();
}
internal class System.Data.SqlClient.SqlStream : Stream {
    
private SqlDataReader _reader;
    
private int _columnOrdinal;
    
private long _bytesCol;
    
private int _bom;
    
private Byte[] _bufferedData;
    
private bool _processAllRows;
    
private bool _advanceReader;
    
private bool _readFirstRow;
    
private bool _endOfColumn;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal SqlStream(SqlDataReader reader, bool addByteOrderMark, bool processAllRows);
    internal SqlStream(int columnOrdinal, SqlDataReader reader, bool addByteOrderMark, bool processAllRows, bool advanceReader);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    private static bool AdvanceToNextRow(SqlDataReader reader);
    private int ReadBytes(Byte[] buffer, int offset, int count);
    internal XmlReader ToXmlReader(bool async);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
internal class System.Data.SqlClient.SqlStreamingXml : object {
    
private int _columnOrdinal;
    
private SqlDataReader _reader;
    
private XmlReader _xmlReader;
    
private XmlWriter _xmlWriter;
    
private StringWriter _strWriter;
    
private long _charsRemoved;
    
public int ColumnOrdinal { get; }
    public SqlStreamingXml(int i, SqlDataReader reader);
    public void Close();
    public int get_ColumnOrdinal();
    public long GetChars(long dataIndex, Char[] buffer, int bufferIndex, int length);
    private void WriteXmlElement();
}
public class System.Data.SqlClient.SqlTransaction : DbTransaction {
    
private static DiagnosticListener s_diagnosticListener;
    
internal IsolationLevel _isolationLevel;
    
private SqlInternalTransaction _internalTransaction;
    
private SqlConnection _connection;
    
private bool _isFromAPI;
    
public SqlConnection Connection { get; }
    
protected DbConnection DbConnection { get; }
    
internal SqlInternalTransaction InternalTransaction { get; }
    
public IsolationLevel IsolationLevel { get; }
    
private bool IsYukonPartialZombie { get; }
    
internal bool IsZombied { get; }
    
internal SqlStatistics Statistics { get; }
    internal SqlTransaction(SqlInternalConnection internalConnection, SqlConnection con, IsolationLevel iso, SqlInternalTransaction internalTransaction);
    private static SqlTransaction();
    public SqlConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    internal SqlInternalTransaction get_InternalTransaction();
    public virtual IsolationLevel get_IsolationLevel();
    private bool get_IsYukonPartialZombie();
    internal bool get_IsZombied();
    internal SqlStatistics get_Statistics();
    public virtual void Commit();
    protected virtual void Dispose(bool disposing);
    public virtual void Rollback();
    public void Rollback(string transactionName);
    public void Save(string savePointName);
    internal void Zombie();
    private void ZombieCheck();
}
internal class System.Data.SqlClient.SqlUnicodeEncoding : UnicodeEncoding {
    
private static SqlUnicodeEncoding s_singletonEncoding;
    
public static Encoding SqlUnicodeEncodingInstance { get; }
    private static SqlUnicodeEncoding();
    public virtual Decoder GetDecoder();
    public virtual int GetMaxByteCount(int charCount);
    public static Encoding get_SqlUnicodeEncodingInstance();
}
internal class System.Data.SqlClient.StreamDataFeed : DataFeed {
    
internal Stream _source;
    internal StreamDataFeed(Stream source);
}
internal static class System.Data.SqlClient.SysTxForGlobalTransactions : object {
    
private static Lazy`1<MethodInfo> _enlistPromotableSinglePhase;
    
private static Lazy`1<MethodInfo> _setDistributedTransactionIdentifier;
    
private static Lazy`1<MethodInfo> _getPromotedToken;
    
public static MethodInfo EnlistPromotableSinglePhase { get; }
    
public static MethodInfo SetDistributedTransactionIdentifier { get; }
    
public static MethodInfo GetPromotedToken { get; }
    private static SysTxForGlobalTransactions();
    public static MethodInfo get_EnlistPromotableSinglePhase();
    public static MethodInfo get_SetDistributedTransactionIdentifier();
    public static MethodInfo get_GetPromotedToken();
}
internal class System.Data.SqlClient.TdsDateTime : ValueType {
    
public int days;
    
public int time;
}
internal static class System.Data.SqlClient.TdsEnums : object {
    
public static string SQL_PROVIDER_NAME;
    
public static decimal SQL_SMALL_MONEY_MIN;
    
public static decimal SQL_SMALL_MONEY_MAX;
    
public static SqlDbType SmallVarBinary;
    
public static string TCP;
    
public static string NP;
    
public static string RPC;
    
public static string BV;
    
public static string ADSP;
    
public static string SPX;
    
public static string VIA;
    
public static string LPC;
    
public static string ADMIN;
    
public static string INIT_SSPI_PACKAGE;
    
public static string INIT_SESSION;
    
public static string CONNECTION_GET_SVR_USER;
    
public static string GEN_CLIENT_CONTEXT;
    
public static byte SOFTFLUSH;
    
public static byte HARDFLUSH;
    
public static byte IGNORE;
    
public static int HEADER_LEN;
    
public static int HEADER_LEN_FIELD_OFFSET;
    
public static int YUKON_HEADER_LEN;
    
public static int MARS_ID_OFFSET;
    
public static int HEADERTYPE_QNOTIFICATION;
    
public static int HEADERTYPE_MARS;
    
public static int HEADERTYPE_TRACE;
    
public static int SUCCEED;
    
public static int FAIL;
    
public static short TYPE_SIZE_LIMIT;
    
public static int MIN_PACKET_SIZE;
    
public static int DEFAULT_LOGIN_PACKET_SIZE;
    
public static int MAX_PRELOGIN_PAYLOAD_LENGTH;
    
public static int MAX_PACKET_SIZE;
    
public static int MAX_SERVER_USER_NAME;
    
public static byte MIN_ERROR_CLASS;
    
public static byte MAX_USER_CORRECTABLE_ERROR_CLASS;
    
public static byte FATAL_ERROR_CLASS;
    
public static byte MT_SQL;
    
public static byte MT_LOGIN;
    
public static byte MT_RPC;
    
public static byte MT_TOKENS;
    
public static byte MT_BINARY;
    
public static byte MT_ATTN;
    
public static byte MT_BULK;
    
public static byte MT_OPEN;
    
public static byte MT_CLOSE;
    
public static byte MT_ERROR;
    
public static byte MT_ACK;
    
public static byte MT_ECHO;
    
public static byte MT_LOGOUT;
    
public static byte MT_TRANS;
    
public static byte MT_OLEDB;
    
public static byte MT_LOGIN7;
    
public static byte MT_SSPI;
    
public static byte MT_PRELOGIN;
    
public static byte ST_EOM;
    
public static byte ST_AACK;
    
public static byte ST_IGNORE;
    
public static byte ST_BATCH;
    
public static byte ST_RESET_CONNECTION;
    
public static byte ST_RESET_CONNECTION_PRESERVE_TRANSACTION;
    
public static byte SQLCOLFMT;
    
public static byte SQLPROCID;
    
public static byte SQLCOLNAME;
    
public static byte SQLTABNAME;
    
public static byte SQLCOLINFO;
    
public static byte SQLALTNAME;
    
public static byte SQLALTFMT;
    
public static byte SQLERROR;
    
public static byte SQLINFO;
    
public static byte SQLRETURNVALUE;
    
public static byte SQLRETURNSTATUS;
    
public static byte SQLRETURNTOK;
    
public static byte SQLALTCONTROL;
    
public static byte SQLROW;
    
public static byte SQLNBCROW;
    
public static byte SQLALTROW;
    
public static byte SQLDONE;
    
public static byte SQLDONEPROC;
    
public static byte SQLDONEINPROC;
    
public static byte SQLOFFSET;
    
public static byte SQLORDER;
    
public static byte SQLDEBUG_CMD;
    
public static byte SQLLOGINACK;
    
public static byte SQLFEATUREEXTACK;
    
public static byte SQLSESSIONSTATE;
    
public static byte SQLENVCHANGE;
    
public static byte SQLSECLEVEL;
    
public static byte SQLROWCRC;
    
public static byte SQLCOLMETADATA;
    
public static byte SQLALTMETADATA;
    
public static byte SQLSSPI;
    
public static byte ENV_DATABASE;
    
public static byte ENV_LANG;
    
public static byte ENV_CHARSET;
    
public static byte ENV_PACKETSIZE;
    
public static byte ENV_LOCALEID;
    
public static byte ENV_COMPFLAGS;
    
public static byte ENV_COLLATION;
    
public static byte ENV_BEGINTRAN;
    
public static byte ENV_COMMITTRAN;
    
public static byte ENV_ROLLBACKTRAN;
    
public static byte ENV_ENLISTDTC;
    
public static byte ENV_DEFECTDTC;
    
public static byte ENV_LOGSHIPNODE;
    
public static byte ENV_PROMOTETRANSACTION;
    
public static byte ENV_TRANSACTIONMANAGERADDRESS;
    
public static byte ENV_TRANSACTIONENDED;
    
public static byte ENV_SPRESETCONNECTIONACK;
    
public static byte ENV_USERINSTANCE;
    
public static byte ENV_ROUTING;
    
public static int DONE_MORE;
    
public static int DONE_ERROR;
    
public static int DONE_INXACT;
    
public static int DONE_PROC;
    
public static int DONE_COUNT;
    
public static int DONE_ATTN;
    
public static int DONE_INPROC;
    
public static int DONE_RPCINBATCH;
    
public static int DONE_SRVERROR;
    
public static int DONE_FMTSENT;
    
public static byte FEATUREEXT_TERMINATOR;
    
public static byte FEATUREEXT_SRECOVERY;
    
public static byte FEATUREEXT_GLOBALTRANSACTIONS;
    
public static byte MAX_LOG_NAME;
    
public static byte MAX_PROG_NAME;
    
public static byte SEC_COMP_LEN;
    
public static byte MAX_PK_LEN;
    
public static byte MAX_NIC_SIZE;
    
public static byte SQLVARIANT_SIZE;
    
public static byte VERSION_SIZE;
    
public static int CLIENT_PROG_VER;
    
public static int YUKON_LOG_REC_FIXED_LEN;
    
public static int TEXT_TIME_STAMP_LEN;
    
public static int COLLATION_INFO_LEN;
    
public static int YUKON_MAJOR;
    
public static int KATMAI_MAJOR;
    
public static int DENALI_MAJOR;
    
public static int YUKON_INCREMENT;
    
public static int KATMAI_INCREMENT;
    
public static int DENALI_INCREMENT;
    
public static int YUKON_RTM_MINOR;
    
public static int KATMAI_MINOR;
    
public static int DENALI_MINOR;
    
public static int ORDER_68000;
    
public static int USE_DB_ON;
    
public static int INIT_DB_FATAL;
    
public static int SET_LANG_ON;
    
public static int INIT_LANG_FATAL;
    
public static int ODBC_ON;
    
public static int SSPI_ON;
    
public static int REPL_ON;
    
public static int READONLY_INTENT_ON;
    
public static byte SQLLenMask;
    
public static byte SQLFixedLen;
    
public static byte SQLVarLen;
    
public static byte SQLZeroLen;
    
public static byte SQLVarCnt;
    
public static byte SQLDifferentName;
    
public static byte SQLExpression;
    
public static byte SQLKey;
    
public static byte SQLHidden;
    
public static byte Nullable;
    
public static byte Identity;
    
public static byte Updatability;
    
public static byte ClrFixedLen;
    
public static byte IsColumnSet;
    
public static UInt32 VARLONGNULL;
    
public static int VARNULL;
    
public static int MAXSIZE;
    
public static byte FIXEDNULL;
    
public static ulong UDTNULL;
    
public static int SQLVOID;
    
public static int SQLTEXT;
    
public static int SQLVARBINARY;
    
public static int SQLINTN;
    
public static int SQLVARCHAR;
    
public static int SQLBINARY;
    
public static int SQLIMAGE;
    
public static int SQLCHAR;
    
public static int SQLINT1;
    
public static int SQLBIT;
    
public static int SQLINT2;
    
public static int SQLINT4;
    
public static int SQLMONEY;
    
public static int SQLDATETIME;
    
public static int SQLFLT8;
    
public static int SQLFLTN;
    
public static int SQLMONEYN;
    
public static int SQLDATETIMN;
    
public static int SQLFLT4;
    
public static int SQLMONEY4;
    
public static int SQLDATETIM4;
    
public static int SQLDECIMALN;
    
public static int SQLNUMERICN;
    
public static int SQLUNIQUEID;
    
public static int SQLBIGCHAR;
    
public static int SQLBIGVARCHAR;
    
public static int SQLBIGBINARY;
    
public static int SQLBIGVARBINARY;
    
public static int SQLBITN;
    
public static int SQLNCHAR;
    
public static int SQLNVARCHAR;
    
public static int SQLNTEXT;
    
public static int SQLUDT;
    
public static int AOPCNTB;
    
public static int AOPSTDEV;
    
public static int AOPSTDEVP;
    
public static int AOPVAR;
    
public static int AOPVARP;
    
public static int AOPCNT;
    
public static int AOPSUM;
    
public static int AOPAVG;
    
public static int AOPMIN;
    
public static int AOPMAX;
    
public static int AOPANY;
    
public static int AOPNOOP;
    
public static int SQLTIMESTAMP;
    
public static int MAX_NUMERIC_LEN;
    
public static int DEFAULT_NUMERIC_PRECISION;
    
public static int SPHINX_DEFAULT_NUMERIC_PRECISION;
    
public static int MAX_NUMERIC_PRECISION;
    
public static byte UNKNOWN_PRECISION_SCALE;
    
public static int SQLINT8;
    
public static int SQLVARIANT;
    
public static int SQLXMLTYPE;
    
public static int XMLUNICODEBOM;
    
public static Byte[] XMLUNICODEBOMBYTES;
    
public static int SQLTABLE;
    
public static int SQLDATE;
    
public static int SQLTIME;
    
public static int SQLDATETIME2;
    
public static int SQLDATETIMEOFFSET;
    
public static int DEFAULT_VARTIME_SCALE;
    
public static ulong SQL_PLP_NULL;
    
public static ulong SQL_PLP_UNKNOWNLEN;
    
public static int SQL_PLP_CHUNK_TERMINATOR;
    
public static ushort SQL_USHORTVARMAXLEN;
    
public static byte TVP_ROWCOUNT_ESTIMATE;
    
public static byte TVP_ROW_TOKEN;
    
public static byte TVP_END_TOKEN;
    
public static ushort TVP_NOMETADATA_TOKEN;
    
public static byte TVP_ORDER_UNIQUE_TOKEN;
    
public static int TVP_DEFAULT_COLUMN;
    
public static byte TVP_ORDERASC_FLAG;
    
public static byte TVP_ORDERDESC_FLAG;
    
public static byte TVP_UNIQUE_FLAG;
    
public static string SP_EXECUTESQL;
    
public static string SP_PREPEXEC;
    
public static string SP_PREPARE;
    
public static string SP_EXECUTE;
    
public static string SP_UNPREPARE;
    
public static string SP_PARAMS;
    
public static string SP_PARAMS_MANAGED;
    
public static string SP_PARAMS_MGD10;
    
public static ushort RPC_PROCID_CURSOR;
    
public static ushort RPC_PROCID_CURSOROPEN;
    
public static ushort RPC_PROCID_CURSORPREPARE;
    
public static ushort RPC_PROCID_CURSOREXECUTE;
    
public static ushort RPC_PROCID_CURSORPREPEXEC;
    
public static ushort RPC_PROCID_CURSORUNPREPARE;
    
public static ushort RPC_PROCID_CURSORFETCH;
    
public static ushort RPC_PROCID_CURSOROPTION;
    
public static ushort RPC_PROCID_CURSORCLOSE;
    
public static ushort RPC_PROCID_EXECUTESQL;
    
public static ushort RPC_PROCID_PREPARE;
    
public static ushort RPC_PROCID_EXECUTE;
    
public static ushort RPC_PROCID_PREPEXEC;
    
public static ushort RPC_PROCID_PREPEXECRPC;
    
public static ushort RPC_PROCID_UNPREPARE;
    
public static string TRANS_BEGIN;
    
public static string TRANS_COMMIT;
    
public static string TRANS_ROLLBACK;
    
public static string TRANS_IF_ROLLBACK;
    
public static string TRANS_SAVE;
    
public static string TRANS_READ_COMMITTED;
    
public static string TRANS_READ_UNCOMMITTED;
    
public static string TRANS_REPEATABLE_READ;
    
public static string TRANS_SERIALIZABLE;
    
public static string TRANS_SNAPSHOT;
    
public static byte SHILOH_RPCBATCHFLAG;
    
public static byte YUKON_RPCBATCHFLAG;
    
public static byte RPC_RECOMPILE;
    
public static byte RPC_NOMETADATA;
    
public static byte RPC_PARAM_BYREF;
    
public static byte RPC_PARAM_DEFAULT;
    
public static byte RPC_PARAM_IS_LOB_COOKIE;
    
public static string PARAM_OUTPUT;
    
public static int MAX_PARAMETER_NAME_LENGTH;
    
public static string FMTONLY_ON;
    
public static string FMTONLY_OFF;
    
public static string BROWSE_ON;
    
public static string BROWSE_OFF;
    
public static string TABLE;
    
public static int EXEC_THRESHOLD;
    
public static short TIMEOUT_EXPIRED;
    
public static short ENCRYPTION_NOT_SUPPORTED;
    
public static int LOGON_FAILED;
    
public static int PASSWORD_EXPIRED;
    
public static int IMPERSONATION_FAILED;
    
public static int P_TOKENTOOLONG;
    
public static UInt32 SNI_UNINITIALIZED;
    
public static UInt32 SNI_SUCCESS;
    
public static UInt32 SNI_ERROR;
    
public static UInt32 SNI_WAIT_TIMEOUT;
    
public static UInt32 SNI_SUCCESS_IO_PENDING;
    
public static short SNI_WSAECONNRESET;
    
public static UInt32 SNI_QUEUE_FULL;
    
public static UInt32 SNI_SSL_VALIDATE_CERTIFICATE;
    
public static UInt32 SNI_SSL_USE_SCHANNEL_CACHE;
    
public static UInt32 SNI_SSL_IGNORE_CHANNEL_BINDINGS;
    
public static string DEFAULT_ENGLISH_CODE_PAGE_STRING;
    
public static short DEFAULT_ENGLISH_CODE_PAGE_VALUE;
    
public static short CHARSET_CODE_PAGE_OFFSET;
    
internal static int MAX_SERVERNAME;
    
internal static ushort SELECT;
    
internal static ushort INSERT;
    
internal static ushort DELETE;
    
internal static ushort UPDATE;
    
internal static ushort ABORT;
    
internal static ushort BEGINXACT;
    
internal static ushort ENDXACT;
    
internal static ushort BULKINSERT;
    
internal static ushort OPENCURSOR;
    
internal static ushort MERGE;
    
internal static ushort MAXLEN_HOSTNAME;
    
internal static ushort MAXLEN_USERNAME;
    
internal static ushort MAXLEN_PASSWORD;
    
internal static ushort MAXLEN_APPNAME;
    
internal static ushort MAXLEN_SERVERNAME;
    
internal static ushort MAXLEN_CLIENTINTERFACE;
    
internal static ushort MAXLEN_LANGUAGE;
    
internal static ushort MAXLEN_DATABASE;
    
internal static ushort MAXLEN_ATTACHDBFILE;
    
internal static ushort MAXLEN_NEWPASSWORD;
    
public static UInt16[] CODE_PAGE_FROM_SORT_ID;
    
internal static Int64[] TICKS_FROM_SCALE;
    
internal static int WHIDBEY_DATE_LENGTH;
    
internal static Int32[] WHIDBEY_TIME_LENGTH;
    
internal static Int32[] WHIDBEY_DATETIME2_LENGTH;
    
internal static Int32[] WHIDBEY_DATETIMEOFFSET_LENGTH;
    private static TdsEnums();
    internal static string GetSniContextEnumName(SniContext sniContext);
}
internal class System.Data.SqlClient.TdsParameterSetter : SmiTypedGetterSetter {
    
private TdsRecordBufferSetter _target;
    
internal bool CanGet { get; }
    
internal bool CanSet { get; }
    internal TdsParameterSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    internal virtual SmiTypedGetterSetter GetTypedGetterSetter(SmiEventSink sink, int ordinal);
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
}
internal class System.Data.SqlClient.TdsParser : object {
    
internal TdsParserStateObject _physicalStateObj;
    
internal TdsParserStateObject _pMarsPhysicalConObj;
    
private static int constBinBufferSize;
    
private static int constTextBufferSize;
    
internal TdsParserState _state;
    
private string _server;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnection;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fPreserveTransaction;
    
private SqlCollation _defaultCollation;
    
private int _defaultCodePage;
    
private int _defaultLCID;
    
internal Encoding _defaultEncoding;
    
private static EncryptionOptions s_sniSupportedEncryptionOption;
    
private EncryptionOptions _encryptionOption;
    
private SqlInternalTransaction _currentTransaction;
    
private SqlInternalTransaction _pendingTransaction;
    
private long _retainedTransactionId;
    
private int _nonTransactedOpenResultCount;
    
private SqlInternalConnectionTds _connHandler;
    
private bool _fMARS;
    
internal bool _loginWithFailover;
    
internal AutoResetEvent _resetConnectionEvent;
    
internal TdsParserSessionPool _sessionPool;
    
private bool _isYukon;
    
private bool _isKatmai;
    
private bool _isDenali;
    
private Byte[] _sniSpnBuffer;
    
private SqlStatistics _statistics;
    
private bool _statisticsIsInTransaction;
    
private static Byte[] s_nicAddress;
    
private static UInt32 modreq(System.Runtime.CompilerServices.IsVolatile) s_maxSSPILength;
    
private static Byte[] s_longDataHeader;
    
private static object s_tdsParserLock;
    
private static Byte[] s_xmlMetadataSubstituteSequence;
    
private static int GUID_SIZE;
    
internal bool _asyncWrite;
    
private static IEnumerable`1<SqlDataRecord> s_tvpEmptyValue;
    
private static ulong _indeterminateSize;
    
internal SqlInternalConnectionTds Connection { get; }
    
internal SqlInternalTransaction CurrentTransaction { get; internal set; }
    
internal int DefaultLCID { get; }
    
internal EncryptionOptions EncryptionOptions { get; internal set; }
    
internal bool IsKatmaiOrNewer { get; }
    
internal bool MARSOn { get; }
    
internal SqlInternalTransaction PendingTransaction { get; internal set; }
    
internal string Server { get; }
    
internal TdsParserState State { get; internal set; }
    
internal SqlStatistics Statistics { get; internal set; }
    internal TdsParser(bool MARS, bool fAsynchronous);
    private static TdsParser();
    internal void PostReadAsyncForMars();
    private void LoadSSPILibrary();
    private void WaitForSSLHandShakeToComplete(UInt32& error);
    private SNIErrorDetails GetSniErrorDetails();
    internal SqlInternalConnectionTds get_Connection();
    internal SqlInternalTransaction get_CurrentTransaction();
    internal void set_CurrentTransaction(SqlInternalTransaction value);
    internal int get_DefaultLCID();
    internal EncryptionOptions get_EncryptionOptions();
    internal void set_EncryptionOptions(EncryptionOptions value);
    internal bool get_IsKatmaiOrNewer();
    internal bool get_MARSOn();
    internal SqlInternalTransaction get_PendingTransaction();
    internal void set_PendingTransaction(SqlInternalTransaction value);
    internal string get_Server();
    internal TdsParserState get_State();
    internal void set_State(TdsParserState value);
    internal SqlStatistics get_Statistics();
    internal void set_Statistics(SqlStatistics value);
    internal int IncrementNonTransactedOpenResultCount();
    internal void DecrementNonTransactedOpenResultCount();
    internal void ProcessPendingAck(TdsParserStateObject stateObj);
    internal void Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, bool ignoreSniOpenTimeout, long timerExpire, bool encrypt, bool trustServerCert, bool integratedSecurity, bool withFailover);
    internal void RemoveEncryption();
    internal void EnableMars();
    internal TdsParserStateObject CreateSession();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    private void SendPreLoginHandshake(Byte[] instanceName, bool encrypt);
    private PreLoginHandshakeStatus ConsumePreLoginHandshake(bool encrypt, bool trustServerCert, bool integratedSecurity, Boolean& marsCapable);
    internal void Deactivate(bool connectionIsDoomed);
    internal void Disconnect();
    private void FireInfoMessageEvent(SqlConnection connection, TdsParserStateObject stateObj, SqlError error);
    internal void DisconnectTransaction(SqlInternalTransaction internalTransaction);
    internal void RollbackOrphanedAPITransactions();
    internal void ThrowExceptionAndWarning(TdsParserStateObject stateObj, bool callerHasConnectionLock, bool asyncClose);
    internal SqlError ProcessSNIError(TdsParserStateObject stateObj);
    internal void CheckResetConnection(TdsParserStateObject stateObj);
    internal void WriteShort(int v, TdsParserStateObject stateObj);
    internal void WriteUnsignedShort(ushort us, TdsParserStateObject stateObj);
    internal void WriteUnsignedInt(UInt32 i, TdsParserStateObject stateObj);
    internal void WriteInt(int v, TdsParserStateObject stateObj);
    internal void WriteFloat(float v, TdsParserStateObject stateObj);
    internal void WriteLong(long v, TdsParserStateObject stateObj);
    internal void WritePartialLong(long v, int length, TdsParserStateObject stateObj);
    internal void WriteUnsignedLong(ulong uv, TdsParserStateObject stateObj);
    internal void WriteDouble(double v, TdsParserStateObject stateObj);
    internal void PrepareResetConnection(bool preserveTransaction);
    internal bool Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj);
    internal static bool IsValidTdsToken(byte token);
    internal bool TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady);
    private bool TryProcessEnvChange(int tokenLength, TdsParserStateObject stateObj, SqlEnvChange[]& sqlEnvChange);
    private bool TryReadTwoBinaryFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryReadTwoStringFields(SqlEnvChange env, TdsParserStateObject stateObj);
    private bool TryProcessDone(SqlCommand cmd, SqlDataReader reader, RunBehavior& run, TdsParserStateObject stateObj);
    private void ProcessSqlStatistics(ushort curCmd, ushort status, int count);
    private bool TryProcessFeatureExtAck(TdsParserStateObject stateObj);
    private bool TryProcessSessionState(TdsParserStateObject stateObj, int length, SessionData sdata);
    private bool TryProcessLoginAck(TdsParserStateObject stateObj, SqlLoginAck& sqlLoginAck);
    internal bool TryProcessError(byte token, TdsParserStateObject stateObj, SqlError& error);
    internal bool TryProcessReturnValue(int length, TdsParserStateObject stateObj, SqlReturnValue& returnValue);
    internal bool TryProcessCollation(TdsParserStateObject stateObj, SqlCollation& collation);
    private void WriteCollation(SqlCollation collation, TdsParserStateObject stateObj);
    internal int GetCodePage(SqlCollation collation, TdsParserStateObject stateObj);
    internal void DrainData(TdsParserStateObject stateObj);
    internal void ThrowUnsupportedCollationEncountered(TdsParserStateObject stateObj);
    internal bool TryProcessAltMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryProcessMetaData(int cColumns, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    private bool IsVarTimeTds(byte tdsType);
    private bool TryCommonProcessMetaData(TdsParserStateObject stateObj, _SqlMetaData col);
    internal bool TryProcessTableName(int length, TdsParserStateObject stateObj, MultiPartTableName[]& multiPartTableNames);
    private bool TryProcessOneTable(TdsParserStateObject stateObj, Int32& length, MultiPartTableName& multiPartTableName);
    private bool TryProcessColInfo(_SqlMetaDataSet columns, SqlDataReader reader, TdsParserStateObject stateObj, _SqlMetaDataSet& metaData);
    internal bool TryProcessColumnHeader(SqlMetaDataPriv col, TdsParserStateObject stateObj, int columnOrdinal, Boolean& isNull, UInt64& length);
    private bool TryProcessColumnHeaderNoNBC(SqlMetaDataPriv col, TdsParserStateObject stateObj, Boolean& isNull, UInt64& length);
    internal bool TryGetAltRowId(TdsParserStateObject stateObj, Int32& id);
    private bool TryProcessRow(_SqlMetaDataSet columns, Object[] buffer, Int32[] map, TdsParserStateObject stateObj);
    internal object GetNullSqlValue(SqlBuffer nullVal, SqlMetaDataPriv md);
    internal bool TrySkipRow(_SqlMetaDataSet columns, TdsParserStateObject stateObj);
    internal bool TrySkipRow(_SqlMetaDataSet columns, int startCol, TdsParserStateObject stateObj);
    internal bool TrySkipValue(SqlMetaDataPriv md, int columnOrdinal, TdsParserStateObject stateObj);
    private bool IsNull(MetaType mt, ulong length);
    private bool TryReadSqlStringValue(SqlBuffer value, byte type, int length, Encoding encoding, bool isPlp, TdsParserStateObject stateObj);
    internal bool TryReadSqlValue(SqlBuffer value, SqlMetaDataPriv md, int length, TdsParserStateObject stateObj);
    private bool TryReadSqlDateTime(SqlBuffer value, byte tdsType, int length, byte scale, TdsParserStateObject stateObj);
    internal bool TryReadSqlValueInternal(SqlBuffer value, byte tdsType, int length, TdsParserStateObject stateObj);
    internal bool TryReadSqlVariant(SqlBuffer value, int lenTotal, TdsParserStateObject stateObj);
    internal Task WriteSqlVariantValue(object value, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteSqlVariantDataRowValue(object value, TdsParserStateObject stateObj, bool canAccumulate);
    internal void WriteSqlVariantHeader(int length, byte tdstype, byte propbytes, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDateTime2(DateTime value, TdsParserStateObject stateObj);
    internal void WriteSqlVariantDate(DateTime value, TdsParserStateObject stateObj);
    private void WriteSqlMoney(SqlMoney value, int length, TdsParserStateObject stateObj);
    private void WriteCurrency(decimal value, int length, TdsParserStateObject stateObj);
    private void WriteDate(DateTime value, TdsParserStateObject stateObj);
    private void WriteTime(TimeSpan value, byte scale, int length, TdsParserStateObject stateObj);
    private void WriteDateTime2(DateTime value, byte scale, int length, TdsParserStateObject stateObj);
    private void WriteDateTimeOffset(DateTimeOffset value, byte scale, int length, TdsParserStateObject stateObj);
    private bool TryReadSqlDecimal(SqlBuffer value, int length, byte precision, byte scale, TdsParserStateObject stateObj);
    private bool TryReadDecimalBits(int length, TdsParserStateObject stateObj, Int32[]& bits);
    internal static SqlDecimal AdjustSqlDecimalScale(SqlDecimal d, int newScale);
    internal static decimal AdjustDecimalScale(decimal value, int newScale);
    internal void WriteSqlDecimal(SqlDecimal d, TdsParserStateObject stateObj);
    private void WriteDecimal(decimal value, TdsParserStateObject stateObj);
    private void WriteIdentifier(string s, TdsParserStateObject stateObj);
    private void WriteIdentifierWithShortLength(string s, TdsParserStateObject stateObj);
    private Task WriteString(string s, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteCharArray(Char[] carr, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    internal Task WriteString(string s, int length, int offset, TdsParserStateObject stateObj, bool canAccumulate);
    private static void CopyCharsToBytes(Char[] source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private static void CopyStringToBytes(string source, int sourceOffset, Byte[] dest, int destOffset, int charLength);
    private Task WriteEncodingChar(string s, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    private Task WriteEncodingChar(string s, int numChars, int offset, Encoding encoding, TdsParserStateObject stateObj, bool canAccumulate);
    internal int GetEncodingCharLength(string value, int numChars, int charOffset, Encoding encoding);
    internal bool TryGetDataLength(SqlMetaDataPriv colmeta, TdsParserStateObject stateObj, UInt64& length);
    internal bool TryGetTokenLength(byte token, TdsParserStateObject stateObj, Int32& tokenLength);
    private void ProcessAttention(TdsParserStateObject stateObj);
    private static int StateValueLength(int dataLen);
    internal int WriteSessionRecoveryFeatureRequest(SessionData reconnectData, bool write);
    internal int WriteGlobalTransactionsFeatureRequest(bool write);
    internal void TdsLogin(SqlLogin rec, FeatureExtension requestedFeatures, SessionData recoverySessionData);
    private void SSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength);
    private void SNISSPIData(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength);
    private void ProcessSSPI(int receivedLength);
    private void SSPIError(string error, string procedure);
    internal Byte[] GetDTCAddress(int timeout, TdsParserStateObject stateObj);
    internal void PropagateDistributedTransaction(Byte[] buffer, int timeout, TdsParserStateObject stateObj);
    internal SqlDataReader TdsExecuteTransactionManagerRequest(Byte[] buffer, TransactionManagerRequestType request, string transactionName, TransactionManagerIsolationLevel isoLevel, int timeout, SqlInternalTransaction transaction, TdsParserStateObject stateObj, bool isDelegateControlRequest);
    internal void FailureCleanup(TdsParserStateObject stateObj, Exception e);
    internal Task TdsExecuteSQLBatch(string text, int timeout, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool sync, bool callerHasConnectionLock);
    internal Task TdsExecuteRPC(_SqlRPC[] rpcArray, int timeout, bool inSchema, SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj, bool isCommandProc, bool sync, TaskCompletionSource`1<object> completion, int startRpc, int startParam);
    private void FinalizeExecuteRPC(TdsParserStateObject stateObj);
    private void TdsExecuteRPC_OnFailure(Exception exc, TdsParserStateObject stateObj);
    private void ExecuteFlushTaskCallback(Task tsk, TdsParserStateObject stateObj, TaskCompletionSource`1<object> completion, bool releaseConnectionLock);
    private void WriteParameterName(string parameterName, TdsParserStateObject stateObj);
    private void WriteSmiParameter(SqlParameter param, int paramIndex, bool sendDefault, TdsParserStateObject stateObj);
    private void WriteSmiParameterMetaData(SmiParameterMetaData metaData, bool sendDefault, TdsParserStateObject stateObj);
    private void WriteSmiTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpTypeInfo(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    private void WriteTvpColumnMetaData(SmiExtendedMetaData md, bool isDefault, TdsParserStateObject stateObj);
    private void WriteTvpOrderUnique(SmiExtendedMetaData metaData, TdsParserStateObject stateObj);
    internal Task WriteBulkCopyDone(TdsParserStateObject stateObj);
    internal void WriteBulkCopyMetaData(_SqlMetaDataSet metadataCollection, int count, TdsParserStateObject stateObj);
    internal Task WriteBulkCopyValue(object value, SqlMetaDataPriv metadata, TdsParserStateObject stateObj, bool isSqlType, bool isDataFeed, bool isNull);
    private Task WriteBulkCopyValueSetupContinuation(Task internalWriteTask, Encoding saveEncoding, SqlCollation saveCollation, int saveCodePage, int saveLCID);
    private void WriteMarsHeaderData(TdsParserStateObject stateObj, SqlInternalTransaction transaction);
    private int GetNotificationHeaderSize(SqlNotificationRequest notificationRequest);
    private void WriteQueryNotificationHeaderData(SqlNotificationRequest notificationRequest, TdsParserStateObject stateObj);
    private void WriteRPCBatchHeaders(TdsParserStateObject stateObj, SqlNotificationRequest notificationRequest);
    private void WriteTokenLength(byte token, int length, TdsParserStateObject stateObj);
    private bool IsBOMNeeded(MetaType type, object value);
    private Task GetTerminationTask(Task unterminatedWriteTask, object value, MetaType type, int actualLength, TdsParserStateObject stateObj, bool isDataFeed);
    private Task WriteSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    private Task WriteUnterminatedSqlValue(object value, MetaType type, int actualLength, int codePageByteSize, int offset, TdsParserStateObject stateObj);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteXmlFeed>d__205")]
private Task WriteXmlFeed(XmlDataFeed feed, TdsParserStateObject stateObj, bool needBom, Encoding encoding, int size);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteTextFeed>d__206")]
private Task WriteTextFeed(TextDataFeed feed, Encoding encoding, bool needBom, TdsParserStateObject stateObj, int size);
    [AsyncStateMachineAttribute("System.Data.SqlClient.TdsParser/<WriteStreamFeed>d__207")]
private Task WriteStreamFeed(StreamDataFeed feed, TdsParserStateObject stateObj, int len);
    private Task NullIfCompletedWriteTask(Task task);
    private Task WriteValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    private Task WriteUnterminatedValue(object value, MetaType type, byte scale, int actualLength, int encodingByteSize, int offset, TdsParserStateObject stateObj, int paramSize, bool isDataFeed);
    internal void WriteParameterVarLen(MetaType type, int size, bool isNull, TdsParserStateObject stateObj, bool unknownLength);
    private bool TryReadPlpUnicodeCharsChunk(Char[] buff, int offst, int len, TdsParserStateObject stateObj, Int32& charsRead);
    internal int ReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj);
    internal bool TryReadPlpUnicodeChars(Char[]& buff, int offst, int len, TdsParserStateObject stateObj, Int32& totalCharsRead);
    internal int ReadPlpAnsiChars(Char[]& buff, int offst, int len, SqlMetaDataPriv metadata, TdsParserStateObject stateObj);
    internal ulong SkipPlpValue(ulong cb, TdsParserStateObject stateObj);
    internal bool TrySkipPlpValue(ulong cb, TdsParserStateObject stateObj, UInt64& totalBytesSkipped);
    internal ulong PlpBytesLeft(TdsParserStateObject stateObj);
    internal bool TryPlpBytesLeft(TdsParserStateObject stateObj, UInt64& left);
    internal ulong PlpBytesTotalLength(TdsParserStateObject stateObj);
    private bool TryProcessUDTMetaData(SqlMetaDataPriv metaData, TdsParserStateObject stateObj);
}
internal class System.Data.SqlClient.TdsParserSessionPool : object {
    
private static int MaxInactiveCount;
    
private TdsParser _parser;
    
private List`1<TdsParserStateObject> _cache;
    
private int _cachedCount;
    
private TdsParserStateObject[] _freeStateObjects;
    
private int _freeStateObjectCount;
    
private bool IsDisposed { get; }
    
internal int ActiveSessionsCount { get; }
    internal TdsParserSessionPool(TdsParser parser);
    private bool get_IsDisposed();
    internal void Deactivate();
    internal void Dispose();
    internal TdsParserStateObject GetSession(object owner);
    internal void PutSession(TdsParserStateObject session);
    internal int get_ActiveSessionsCount();
}
internal enum System.Data.SqlClient.TdsParserState : Enum {
    
public int value__;
    
public static TdsParserState Closed;
    
public static TdsParserState OpenNotLoggedIn;
    
public static TdsParserState OpenLoggedIn;
    
public static TdsParserState Broken;
}
internal abstract class System.Data.SqlClient.TdsParserStateObject : object {
    
private static int AttentionTimeoutSeconds;
    
private static long CheckConnectionWindow;
    
protected TdsParser _parser;
    
private WeakReference _owner;
    
internal SharedState _readerState;
    
private int _activateCount;
    
internal int _inputHeaderLen;
    
internal int _outputHeaderLen;
    
internal Byte[] _outBuff;
    
internal int _outBytesUsed;
    
protected Byte[] _inBuff;
    
internal int _inBytesUsed;
    
internal int _inBytesRead;
    
internal int _inBytesPacket;
    
internal byte _outputMessageType;
    
internal byte _messageStatus;
    
internal byte _outputPacketNumber;
    
internal bool _pendingData;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetEventOwned;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _fResetConnectionSent;
    
internal bool _errorTokenReceived;
    
internal bool _bulkCopyOpperationInProgress;
    
internal bool _bulkCopyWriteTimeout;
    
protected object _writePacketLockObject;
    
private int _pendingCallbacks;
    
private long _timeoutMilliseconds;
    
private long _timeoutTime;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSent;
    
internal bool _attentionReceived;
    
internal Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _attentionSending;
    
internal bool _internalTimeout;
    
private LastIOTimer _lastSuccessfulIOTimer;
    
private bool _cancelled;
    
private static int _waitForCancellationLockPollTimeout;
    
private WeakReference _cancellationOwner;
    
internal bool _hasOpenResult;
    
internal SqlInternalTransaction _executedUnderTransaction;
    
internal ulong _longlen;
    
internal ulong _longlenleft;
    
internal Int32[] _decimalBits;
    
internal Byte[] _bTmp;
    
internal int _bTmpRead;
    
internal Decoder _plpdecoder;
    
internal bool _accumulateInfoEvents;
    
internal List`1<SqlError> _pendingInfoEvents;
    
private Byte[] _partialHeaderBuffer;
    
internal int _partialHeaderBytesRead;
    
internal _SqlMetaDataSet _cleanupMetaData;
    
internal _SqlMetaDataSetCollection _cleanupAltMetaDataSetArray;
    
internal bool _receivedColMetaData;
    
private SniContext _sniContext;
    
private bool _bcpLock;
    
private NullBitmap _nullBitmapInfo;
    
internal TaskCompletionSource`1<object> _networkPacketTaskSource;
    
private Timer _networkPacketTimeout;
    
internal bool _syncOverAsync;
    
private bool _snapshotReplay;
    
private StateSnapshot _snapshot;
    
internal ExecutionContext _executionContext;
    
internal bool _asyncReadWithoutSnapshot;
    
internal SqlErrorCollection _errors;
    
internal SqlErrorCollection _warnings;
    
internal object _errorAndWarningsLock;
    
private bool _hasErrorOrWarning;
    
internal SqlErrorCollection _preAttentionErrors;
    
internal SqlErrorCollection _preAttentionWarnings;
    
private TaskCompletionSource`1 modreq(System.Runtime.CompilerServices.IsVolatile) _writeCompletionSource;
    
protected Int32 modreq(System.Runtime.CompilerServices.IsVolatile) _asyncWriteCount;
    
private Exception modreq(System.Runtime.CompilerServices.IsVolatile) _delayedWriteAsyncCallbackException;
    
private int _readingCount;
    
internal bool BcpLock { get; internal set; }
    
internal bool HasOpenResult { get; }
    
internal bool IsOrphaned { get; }
    
unknown object Owner {internal set; }
    
internal bool HasOwner { get; }
    
internal TdsParser Parser { get; }
    
internal SniContext SniContext { get; internal set; }
    
internal UInt32 Status { get; }
    
internal object SessionHandle { get; }
    
internal bool TimeoutHasExpired { get; }
    
internal long TimeoutTime { get; internal set; }
    
internal bool HasErrorOrWarning { get; }
    
internal int ErrorCount { get; }
    
internal int WarningCount { get; }
    
protected object EmptyReadPacket { get; }
    internal TdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject(TdsParser parser, TdsParserStateObject physicalConnection, bool async);
    internal bool get_BcpLock();
    internal void set_BcpLock(bool value);
    internal bool get_HasOpenResult();
    internal bool get_IsOrphaned();
    internal void set_Owner(object value);
    internal abstract virtual UInt32 DisabeSsl();
    internal bool get_HasOwner();
    internal TdsParser get_Parser();
    internal abstract virtual UInt32 EnableMars(UInt32& info);
    internal SniContext get_SniContext();
    internal void set_SniContext(SniContext value);
    internal abstract virtual UInt32 get_Status();
    internal abstract virtual object get_SessionHandle();
    internal bool get_TimeoutHasExpired();
    internal long get_TimeoutTime();
    internal void set_TimeoutTime(long value);
    internal int GetTimeoutRemaining();
    internal bool TryStartNewRow(bool isNullCompressed, int nullBitmapColumnsCount);
    internal bool IsRowTokenReady();
    internal bool IsNullCompressionBitSet(int columnOrdinal);
    internal void Activate(object owner);
    internal void Cancel(object caller);
    internal void CancelRequest();
    public void CheckSetResetConnectionState(UInt32 error, CallbackType callbackType);
    internal void CloseSession();
    private void ResetCancelAndProcessAttention();
    internal abstract virtual void CreatePhysicalSNIHandle(string serverName, bool ignoreSniOpenTimeout, long timerExpire, Byte[]& instanceName, Byte[]& spnBuffer, bool flushCache, bool async, bool fParallel, bool isIntegratedSecurity);
    internal abstract virtual UInt32 SniGetConnectionId(Guid& clientConnectionId);
    internal abstract virtual bool IsFailedHandle();
    protected abstract virtual void CreateSessionHandle(TdsParserStateObject physicalConnection, bool async);
    protected abstract virtual void FreeGcHandle(int remaining, bool release);
    internal abstract virtual UInt32 EnableSsl(UInt32& info);
    internal abstract virtual UInt32 WaitForSSLHandShakeToComplete();
    internal abstract virtual void Dispose();
    internal abstract virtual void DisposePacketCache();
    internal abstract virtual bool IsPacketEmpty(object readPacket);
    internal abstract virtual object ReadSyncOverAsync(int timeoutRemaining, bool isMarsOn, UInt32& error);
    internal abstract virtual object ReadAsync(UInt32& error, Object& handle);
    internal abstract virtual UInt32 CheckConnection();
    internal abstract virtual UInt32 SetConnectionBufferSize(UInt32& unsignedPacketSize);
    internal abstract virtual void ReleasePacket(object syncReadPacket);
    protected abstract virtual UInt32 SNIPacketGetData(object packet, Byte[] _inBuff, UInt32& dataSize);
    internal abstract virtual object GetResetWritePacket();
    internal abstract virtual void ClearAllWritePackets();
    internal abstract virtual object AddPacketToPendingList(object packet);
    protected abstract virtual void RemovePacketFromPendingList(object pointer);
    internal abstract virtual UInt32 GenerateSspiClientContext(Byte[] receivedBuff, UInt32 receivedLength, Byte[]& sendBuff, UInt32& sendLength, Byte[] _sniSpnBuffer);
    internal bool Deactivate();
    internal void RemoveOwner();
    internal void DecrementOpenResultCount();
    internal int DecrementPendingCallbacks(bool release);
    internal void DisposeCounters();
    internal int IncrementAndObtainOpenResultCount(SqlInternalTransaction transaction);
    internal int IncrementPendingCallbacks();
    internal void SetTimeoutSeconds(int timeout);
    internal void SetTimeoutMilliseconds(long timeout);
    internal void StartSession(object cancellationOwner);
    internal void ThrowExceptionAndWarning(bool callerHasConnectionLock, bool asyncClose);
    internal Task ExecuteFlush();
    internal bool TryProcessHeader();
    internal bool TryPrepareBuffer();
    internal void ResetBuffer();
    internal bool SetPacketSize(int size);
    internal bool TryPeekByte(Byte& value);
    public bool TryReadByteArray(Byte[] buff, int offset, int len);
    public bool TryReadByteArray(Byte[] buff, int offset, int len, Int32& totalRead);
    internal bool TryReadByte(Byte& value);
    internal bool TryReadChar(Char& value);
    internal bool TryReadInt16(Int16& value);
    internal bool TryReadInt32(Int32& value);
    internal bool TryReadInt64(Int64& value);
    internal bool TryReadUInt16(UInt16& value);
    internal bool TryReadUInt32(UInt32& value);
    internal bool TryReadSingle(Single& value);
    internal bool TryReadDouble(Double& value);
    internal bool TryReadString(int length, String& value);
    internal bool TryReadStringWithEncoding(int length, Encoding encoding, bool isPlp, String& value);
    internal ulong ReadPlpLength(bool returnPlpNullIfNull);
    internal bool TryReadPlpLength(bool returnPlpNullIfNull, UInt64& lengthLeft);
    internal int ReadPlpBytesChunk(Byte[] buff, int offset, int len);
    internal bool TryReadPlpBytes(Byte[]& buff, int offset, int len, Int32& totalBytesRead);
    internal bool TrySkipLongBytes(long num);
    internal bool TrySkipBytes(int num);
    internal void SetSnapshot();
    internal void ResetSnapshot();
    internal bool TryReadNetworkPacket();
    internal void PrepareReplaySnapshot();
    internal void ReadSniSyncOverAsync();
    internal void OnConnectionClosed();
    private void OnTimeout(object state);
    internal void ReadSni(TaskCompletionSource`1<object> completion);
    internal bool IsConnectionAlive(bool throwOnException);
    internal bool ValidateSNIConnection();
    private void ReadSniError(TdsParserStateObject stateObj, UInt32 error);
    public void ProcessSniPacket(object packet, UInt32 error);
    private void ChangeNetworkPacketTimeout(int dueTime, int period);
    public void ReadAsyncCallback(T packet, UInt32 error);
    public void ReadAsyncCallback(IntPtr key, T packet, UInt32 error);
    protected abstract virtual bool CheckPacket(object packet, TaskCompletionSource`1<object> source);
    private void ReadAsyncCallbackCaptureException(TaskCompletionSource`1<object> source);
    public void WriteAsyncCallback(T packet, UInt32 sniError);
    public void WriteAsyncCallback(IntPtr key, T packet, UInt32 sniError);
    internal Task WaitForAccumulatedWrites();
    internal void WriteByte(byte b);
    internal Task WriteByteArray(Byte[] b, int len, int offsetBuffer, bool canAccumulate, TaskCompletionSource`1<object> completion);
    private void WriteByteArraySetupContinuation(Byte[] b, int len, TaskCompletionSource`1<object> completion, int offset, Task packetTask);
    internal Task WritePacket(byte flushMode, bool canAccumulate);
    private void CancelWritePacket();
    private Task SNIWritePacket(object packet, UInt32& sniError, bool canAccumulate, bool callerHasConnectionLock);
    internal abstract virtual bool IsValidPacket(object packetPointer);
    internal abstract virtual UInt32 WritePacket(object packet, bool sync);
    internal void SendAttention(bool mustTakeWriteLock);
    internal abstract virtual object CreateAndSetAttentionPacket();
    internal abstract virtual void SetPacketData(object packet, Byte[] buffer, int bytesUsed);
    private Task WriteSni(bool canAccumulate);
    private void SniReadStatisticsAndTracing();
    private void SniWriteStatisticsAndTracing();
    [ConditionalAttribute("DEBUG")]
private void AssertValidState();
    internal bool get_HasErrorOrWarning();
    internal void AddError(SqlError error);
    internal int get_ErrorCount();
    internal void AddWarning(SqlError error);
    internal int get_WarningCount();
    protected abstract virtual object get_EmptyReadPacket();
    internal SqlErrorCollection GetFullErrorAndWarningCollection(Boolean& broken);
    private void AddErrorsToCollection(SqlErrorCollection inCollection, SqlErrorCollection& collectionToAddTo, Boolean& broken);
    internal void StoreErrorAndWarningForAttention();
    internal void RestoreErrorAndWarningAfterAttention();
    internal void CheckThrowSNIException();
    [ConditionalAttribute("DEBUG")]
internal void AssertStateIsClean();
    internal void CloneCleanupAltMetaDataSetArray();
    [CompilerGeneratedAttribute]
private bool <DisposeCounters>b__135_0();
    [CompilerGeneratedAttribute]
private void <ExecuteFlush>b__142_0();
}
internal class System.Data.SqlClient.TdsParserStateObjectFactory : object {
    
public static TdsParserStateObjectFactory Singleton;
    
public static bool UseManagedSNI { get; }
    
public EncryptionOptions EncryptionOptions { get; }
    
public UInt32 SNIStatus { get; }
    private static TdsParserStateObjectFactory();
    public static bool get_UseManagedSNI();
    public EncryptionOptions get_EncryptionOptions();
    public UInt32 get_SNIStatus();
    public TdsParserStateObject CreateTdsParserStateObject(TdsParser parser);
    internal TdsParserStateObject CreateSessionObject(TdsParser tdsParser, TdsParserStateObject _pMarsPhysicalConObj, bool v);
}
internal class System.Data.SqlClient.TdsParserStaticMethods : object {
    
private static int NoProcessId;
    
private static int s_currentProcessId;
    
private static Byte[] s_nicAddress;
    private static TdsParserStaticMethods();
    internal static Byte[] ObfuscatePassword(string password);
    internal static int GetCurrentProcessIdForTdsLoginOnly();
    internal static int GetCurrentThreadIdForTdsLoginOnly();
    internal static Byte[] GetNetworkPhysicalAddressForTdsLoginOnly();
    internal static int GetTimeoutMilliseconds(long timeoutTime);
    internal static long GetTimeout(long timeoutMilliseconds);
    internal static bool TimeoutHasExpired(long timeoutTime);
    internal static int NullAwareStringLength(string str);
    internal static int GetRemainingTimeout(int timeout, long start);
}
internal class System.Data.SqlClient.TdsRecordBufferSetter : SmiRecordBuffer {
    
private TdsValueSetter[] _fieldSetters;
    
private TdsParserStateObject _stateObj;
    
private SmiMetaData _metaData;
    
internal bool CanGet { get; }
    
internal bool CanSet { get; }
    internal TdsRecordBufferSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal virtual bool get_CanGet();
    internal virtual bool get_CanSet();
    public virtual void SetDBNull(SmiEventSink sink, int ordinal);
    public virtual void SetBoolean(SmiEventSink sink, int ordinal, bool value);
    public virtual void SetByte(SmiEventSink sink, int ordinal, byte value);
    public virtual int SetBytes(SmiEventSink sink, int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    public virtual void SetBytesLength(SmiEventSink sink, int ordinal, long length);
    public virtual int SetChars(SmiEventSink sink, int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length);
    public virtual void SetCharsLength(SmiEventSink sink, int ordinal, long length);
    public virtual void SetString(SmiEventSink sink, int ordinal, string value, int offset, int length);
    public virtual void SetInt16(SmiEventSink sink, int ordinal, short value);
    public virtual void SetInt32(SmiEventSink sink, int ordinal, int value);
    public virtual void SetInt64(SmiEventSink sink, int ordinal, long value);
    public virtual void SetSingle(SmiEventSink sink, int ordinal, float value);
    public virtual void SetDouble(SmiEventSink sink, int ordinal, double value);
    public virtual void SetSqlDecimal(SmiEventSink sink, int ordinal, SqlDecimal value);
    public virtual void SetDateTime(SmiEventSink sink, int ordinal, DateTime value);
    public virtual void SetGuid(SmiEventSink sink, int ordinal, Guid value);
    public virtual void SetTimeSpan(SmiEventSink sink, int ordinal, TimeSpan value);
    public virtual void SetDateTimeOffset(SmiEventSink sink, int ordinal, DateTimeOffset value);
    public virtual void SetVariantMetaData(SmiEventSink sink, int ordinal, SmiMetaData metaData);
    internal virtual void NewElement(SmiEventSink sink);
    internal virtual void EndElements(SmiEventSink sink);
    [ConditionalAttribute("DEBUG")]
private void CheckWritingToColumn(int ordinal);
    [ConditionalAttribute("DEBUG")]
private void SkipPossibleDefaultedColumns(int targetColumn);
    [ConditionalAttribute("DEBUG")]
internal void CheckSettingColumn(int ordinal);
}
internal class System.Data.SqlClient.TdsValueSetter : object {
    
private TdsParserStateObject _stateObj;
    
private SmiMetaData _metaData;
    
private bool _isPlp;
    
private bool _plpUnknownSent;
    
private Encoder _encoder;
    
private SmiMetaData _variantType;
    internal TdsValueSetter(TdsParserStateObject stateObj, SmiMetaData md);
    internal void SetDBNull();
    internal void SetBoolean(bool value);
    internal void SetByte(byte value);
    internal int SetBytes(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    private void SetBytesNoOffsetHandling(long fieldOffset, Byte[] buffer, int bufferOffset, int length);
    internal void SetBytesLength(long length);
    internal int SetChars(long fieldOffset, Char[] buffer, int bufferOffset, int length);
    internal void SetCharsLength(long length);
    internal void SetString(string value, int offset, int length);
    internal void SetInt16(short value);
    internal void SetInt32(int value);
    internal void SetInt64(long value);
    internal void SetSingle(float value);
    internal void SetDouble(double value);
    internal void SetSqlDecimal(SqlDecimal value);
    internal void SetDateTime(DateTime value);
    internal void SetGuid(Guid value);
    internal void SetTimeSpan(TimeSpan value);
    internal void SetDateTimeOffset(DateTimeOffset value);
    internal void SetVariantType(SmiMetaData value);
    [ConditionalAttribute("DEBUG")]
private void CheckSettingOffset(long offset);
}
internal class System.Data.SqlClient.TextDataFeed : DataFeed {
    
internal TextReader _source;
    internal TextDataFeed(TextReader source);
}
internal enum System.Data.SqlClient.TransactionState : Enum {
    
public int value__;
    
public static TransactionState Pending;
    
public static TransactionState Active;
    
public static TransactionState Aborted;
    
public static TransactionState Committed;
    
public static TransactionState Unknown;
}
internal enum System.Data.SqlClient.TransactionType : Enum {
    
public int value__;
    
public static TransactionType LocalFromTSQL;
    
public static TransactionType LocalFromAPI;
    
public static TransactionType Delegated;
    
public static TransactionType Distributed;
    
public static TransactionType Context;
}
internal class System.Data.SqlClient.XmlDataFeed : DataFeed {
    
internal XmlReader _source;
    internal XmlDataFeed(XmlReader source);
}
public enum System.Data.SqlDbType : Enum {
    
public int value__;
    
public static SqlDbType BigInt;
    
public static SqlDbType Binary;
    
public static SqlDbType Bit;
    
public static SqlDbType Char;
    
public static SqlDbType DateTime;
    
public static SqlDbType Decimal;
    
public static SqlDbType Float;
    
public static SqlDbType Image;
    
public static SqlDbType Int;
    
public static SqlDbType Money;
    
public static SqlDbType NChar;
    
public static SqlDbType NText;
    
public static SqlDbType NVarChar;
    
public static SqlDbType Real;
    
public static SqlDbType UniqueIdentifier;
    
public static SqlDbType SmallDateTime;
    
public static SqlDbType SmallInt;
    
public static SqlDbType SmallMoney;
    
public static SqlDbType Text;
    
public static SqlDbType Timestamp;
    
public static SqlDbType TinyInt;
    
public static SqlDbType VarBinary;
    
public static SqlDbType VarChar;
    
public static SqlDbType Variant;
    
public static SqlDbType Xml;
    
public static SqlDbType Udt;
    
public static SqlDbType Structured;
    
public static SqlDbType Date;
    
public static SqlDbType Time;
    
public static SqlDbType DateTime2;
    
public static SqlDbType DateTimeOffset;
}
internal enum System.Data.SqlTypes.EComparison : Enum {
    
public int value__;
    
public static EComparison LT;
    
public static EComparison LE;
    
public static EComparison EQ;
    
public static EComparison GE;
    
public static EComparison GT;
    
public static EComparison NE;
}
public interface System.Data.SqlTypes.INullable {
    
public bool IsNull { get; }
    public abstract virtual bool get_IsNull();
}
public class System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
    public SqlAlreadyFilledException(string message);
    public SqlAlreadyFilledException(string message, Exception e);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlTypes.SqlBinary : ValueType {
    
private Byte[] _value;
    
public static SqlBinary Null;
    
public bool IsNull { get; }
    
public Byte[] Value { get; }
    
public byte Item { get; }
    
public int Length { get; }
    private SqlBinary(bool fNull);
    public SqlBinary(Byte[] value);
    internal SqlBinary(Byte[] value, bool ignored);
    private static SqlBinary();
    public sealed virtual bool get_IsNull();
    public Byte[] get_Value();
    public byte get_Item(int index);
    public int get_Length();
    public static SqlBinary op_Implicit(Byte[] x);
    public static Byte[] op_Explicit(SqlBinary x);
    public virtual string ToString();
    public static SqlBinary op_Addition(SqlBinary x, SqlBinary y);
    private static EComparison PerformCompareByte(Byte[] x, Byte[] y);
    public static SqlBinary op_Explicit(SqlGuid x);
    public static SqlBoolean op_Equality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_Inequality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBinary Add(SqlBinary x, SqlBinary y);
    public static SqlBinary Concat(SqlBinary x, SqlBinary y);
    public static SqlBoolean Equals(SqlBinary x, SqlBinary y);
    public static SqlBoolean NotEquals(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public SqlGuid ToSqlGuid();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBinary value);
    public virtual bool Equals(object value);
    internal static int HashByteArray(Byte[] rgbValue, int length);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBoolean : ValueType {
    
private byte m_value;
    
private static byte x_Null;
    
private static byte x_False;
    
private static byte x_True;
    
public static SqlBoolean True;
    
public static SqlBoolean False;
    
public static SqlBoolean Null;
    
public static SqlBoolean Zero;
    
public static SqlBoolean One;
    
public bool IsNull { get; }
    
public bool Value { get; }
    
public bool IsTrue { get; }
    
public bool IsFalse { get; }
    
public byte ByteValue { get; }
    public SqlBoolean(bool value);
    public SqlBoolean(int value);
    private SqlBoolean(int value, bool fNull);
    private static SqlBoolean();
    public sealed virtual bool get_IsNull();
    public bool get_Value();
    public bool get_IsTrue();
    public bool get_IsFalse();
    public static SqlBoolean op_Implicit(bool x);
    public static bool op_Explicit(SqlBoolean x);
    public static SqlBoolean op_LogicalNot(SqlBoolean x);
    public static bool op_True(SqlBoolean x);
    public static bool op_False(SqlBoolean x);
    public static SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y);
    public byte get_ByteValue();
    public virtual string ToString();
    public static SqlBoolean Parse(string s);
    public static SqlBoolean op_OnesComplement(SqlBoolean x);
    public static SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Explicit(SqlByte x);
    public static SqlBoolean op_Explicit(SqlInt16 x);
    public static SqlBoolean op_Explicit(SqlInt32 x);
    public static SqlBoolean op_Explicit(SqlInt64 x);
    public static SqlBoolean op_Explicit(SqlDouble x);
    public static SqlBoolean op_Explicit(SqlSingle x);
    public static SqlBoolean op_Explicit(SqlMoney x);
    public static SqlBoolean op_Explicit(SqlDecimal x);
    public static SqlBoolean op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean OnesComplement(SqlBoolean x);
    public static SqlBoolean And(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Or(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Xor(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Equals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y);
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBoolean value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlByte : ValueType {
    
private bool m_fNotNull;
    
private byte m_value;
    
private static int s_iBitNotByteMax;
    
public static SqlByte Null;
    
public static SqlByte Zero;
    
public static SqlByte MinValue;
    
public static SqlByte MaxValue;
    
public bool IsNull { get; }
    
public byte Value { get; }
    private SqlByte(bool fNull);
    public SqlByte(byte value);
    private static SqlByte();
    public sealed virtual bool get_IsNull();
    public byte get_Value();
    public static SqlByte op_Implicit(byte x);
    public static byte op_Explicit(SqlByte x);
    public virtual string ToString();
    public static SqlByte Parse(string s);
    public static SqlByte op_OnesComplement(SqlByte x);
    public static SqlByte op_Addition(SqlByte x, SqlByte y);
    public static SqlByte op_Subtraction(SqlByte x, SqlByte y);
    public static SqlByte op_Multiply(SqlByte x, SqlByte y);
    public static SqlByte op_Division(SqlByte x, SqlByte y);
    public static SqlByte op_Modulus(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte op_ExclusiveOr(SqlByte x, SqlByte y);
    public static SqlByte op_Explicit(SqlBoolean x);
    public static SqlByte op_Explicit(SqlMoney x);
    public static SqlByte op_Explicit(SqlInt16 x);
    public static SqlByte op_Explicit(SqlInt32 x);
    public static SqlByte op_Explicit(SqlInt64 x);
    public static SqlByte op_Explicit(SqlSingle x);
    public static SqlByte op_Explicit(SqlDouble x);
    public static SqlByte op_Explicit(SqlDecimal x);
    public static SqlByte op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlByte x, SqlByte y);
    public static SqlBoolean op_Inequality(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte OnesComplement(SqlByte x);
    public static SqlByte Add(SqlByte x, SqlByte y);
    public static SqlByte Subtract(SqlByte x, SqlByte y);
    public static SqlByte Multiply(SqlByte x, SqlByte y);
    public static SqlByte Divide(SqlByte x, SqlByte y);
    public static SqlByte Mod(SqlByte x, SqlByte y);
    public static SqlByte Modulus(SqlByte x, SqlByte y);
    public static SqlByte BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte Xor(SqlByte x, SqlByte y);
    public static SqlBoolean Equals(SqlByte x, SqlByte y);
    public static SqlBoolean NotEquals(SqlByte x, SqlByte y);
    public static SqlBoolean LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y);
    public SqlBoolean ToSqlBoolean();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlByte value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBytes : object {
    
internal Byte[] _rgbBuf;
    
private long _lCurLen;
    
internal Stream _stream;
    
private SqlBytesCharsState _state;
    
private Byte[] _rgbWorkBuf;
    
private static long x_lMaxLen;
    
private static long x_lNull;
    
public bool IsNull { get; }
    
public Byte[] Buffer { get; }
    
public long Length { get; }
    
public long MaxLength { get; }
    
public Byte[] Value { get; }
    
public byte Item { get; public set; }
    
public StorageState Storage { get; }
    
public Stream Stream { get; public set; }
    
public static SqlBytes Null { get; }
    public SqlBytes(Byte[] buffer);
    public SqlBytes(SqlBinary value);
    public SqlBytes(Stream s);
    public sealed virtual bool get_IsNull();
    public Byte[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Byte[] get_Value();
    public byte get_Item(long offset);
    public void set_Item(long offset, byte value);
    public StorageState get_Storage();
    public Stream get_Stream();
    public void set_Stream(Stream value);
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public SqlBinary ToSqlBinary();
    public static SqlBinary op_Explicit(SqlBytes value);
    public static SqlBytes op_Explicit(SqlBinary value);
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    private void CopyStreamToBuffer();
    internal bool FStream();
    private void SetBuffer(Byte[] buffer);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlBytes get_Null();
}
internal enum System.Data.SqlTypes.SqlBytesCharsState : Enum {
    
public int value__;
    
public static SqlBytesCharsState Null;
    
public static SqlBytesCharsState Buffer;
    
public static SqlBytesCharsState Stream;
}
[XmlSchemaProviderAttribute("GetXsdType")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlTypes.SqlChars : object {
    
internal Char[] _rgchBuf;
    
private long _lCurLen;
    
internal SqlStreamChars _stream;
    
private SqlBytesCharsState _state;
    
private Char[] _rgchWorkBuf;
    
private static long x_lMaxLen;
    
private static long x_lNull;
    
public bool IsNull { get; }
    
public Char[] Buffer { get; }
    
public long Length { get; }
    
public long MaxLength { get; }
    
public Char[] Value { get; }
    
public char Item { get; public set; }
    
internal SqlStreamChars Stream { get; internal set; }
    
public StorageState Storage { get; }
    
public static SqlChars Null { get; }
    public SqlChars(Char[] buffer);
    public SqlChars(SqlString value);
    internal SqlChars(SqlStreamChars s);
    public sealed virtual bool get_IsNull();
    public Char[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Char[] get_Value();
    public char get_Item(long offset);
    public void set_Item(long offset, char value);
    internal SqlStreamChars get_Stream();
    internal void set_Stream(SqlStreamChars value);
    public StorageState get_Storage();
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Char[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Char[] buffer, int offsetInBuffer, int count);
    public SqlString ToSqlString();
    public static SqlString op_Explicit(SqlChars value);
    public static SqlChars op_Explicit(SqlString value);
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    internal bool FStream();
    private void CopyStreamToBuffer();
    private void SetBuffer(Char[] buffer);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlChars get_Null();
}
[FlagsAttribute]
public enum System.Data.SqlTypes.SqlCompareOptions : Enum {
    
public int value__;
    
public static SqlCompareOptions None;
    
public static SqlCompareOptions IgnoreCase;
    
public static SqlCompareOptions IgnoreNonSpace;
    
public static SqlCompareOptions IgnoreKanaType;
    
public static SqlCompareOptions IgnoreWidth;
    
public static SqlCompareOptions BinarySort;
    
public static SqlCompareOptions BinarySort2;
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDateTime : ValueType {
    
private bool m_fNotNull;
    
private int m_day;
    
private int m_time;
    
private static double s_SQLTicksPerMillisecond;
    
public static int SQLTicksPerSecond;
    
public static int SQLTicksPerMinute;
    
public static int SQLTicksPerHour;
    
private static int s_SQLTicksPerDay;
    
private static long s_ticksPerSecond;
    
private static DateTime s_SQLBaseDate;
    
private static long s_SQLBaseDateTicks;
    
private static int s_minYear;
    
private static int s_maxYear;
    
private static int s_minDay;
    
private static int s_maxDay;
    
private static int s_minTime;
    
private static int s_maxTime;
    
private static int s_dayBase;
    
private static Int32[] s_daysToMonth365;
    
private static Int32[] s_daysToMonth366;
    
private static DateTime s_minDateTime;
    
private static DateTime s_maxDateTime;
    
private static TimeSpan s_minTimeSpan;
    
private static TimeSpan s_maxTimeSpan;
    
private static string s_ISO8601_DateTimeFormat;
    
private static String[] s_dateTimeFormats;
    
private static DateTimeStyles x_DateTimeStyle;
    
public static SqlDateTime MinValue;
    
public static SqlDateTime MaxValue;
    
public static SqlDateTime Null;
    
public bool IsNull { get; }
    
public DateTime Value { get; }
    
public int DayTicks { get; }
    
public int TimeTicks { get; }
    private SqlDateTime(bool fNull);
    public SqlDateTime(DateTime value);
    public SqlDateTime(int year, int month, int day);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, double millisecond);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, int bilisecond);
    public SqlDateTime(int dayTicks, int timeTicks);
    internal SqlDateTime(double dblVal);
    private static SqlDateTime();
    public sealed virtual bool get_IsNull();
    private static TimeSpan ToTimeSpan(SqlDateTime value);
    private static DateTime ToDateTime(SqlDateTime value);
    internal static DateTime ToDateTime(int daypart, int timepart);
    private static SqlDateTime FromTimeSpan(TimeSpan value);
    private static SqlDateTime FromDateTime(DateTime value);
    public DateTime get_Value();
    public int get_DayTicks();
    public int get_TimeTicks();
    public static SqlDateTime op_Implicit(DateTime value);
    public static DateTime op_Explicit(SqlDateTime x);
    public virtual string ToString();
    public static SqlDateTime Parse(string s);
    public static SqlDateTime op_Addition(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Add(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Subtract(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Explicit(SqlString x);
    private static bool IsLeapYear(int year);
    public static SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean Equals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDateTime value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDecimal : ValueType {
    
internal byte _bStatus;
    
internal byte _bLen;
    
internal byte _bPrec;
    
internal byte _bScale;
    
internal UInt32 _data1;
    
internal UInt32 _data2;
    
internal UInt32 _data3;
    
internal UInt32 _data4;
    
private static byte s_NUMERIC_MAX_PRECISION;
    
public static byte MaxPrecision;
    
public static byte MaxScale;
    
private static byte s_bNullMask;
    
private static byte s_bIsNull;
    
private static byte s_bNotNull;
    
private static byte s_bReverseNullMask;
    
private static byte s_bSignMask;
    
private static byte s_bPositive;
    
private static byte s_bNegative;
    
private static byte s_bReverseSignMask;
    
private static UInt32 s_uiZero;
    
private static int s_cNumeMax;
    
private static long s_lInt32Base;
    
private static ulong s_ulInt32Base;
    
private static ulong s_ulInt32BaseForMod;
    
internal static ulong s_llMax;
    
private static UInt32 s_ulBase10;
    
private static double s_DUINT_BASE;
    
private static double s_DUINT_BASE2;
    
private static double s_DUINT_BASE3;
    
private static double s_DMAX_NUME;
    
private static UInt32 s_DBL_DIG;
    
private static byte s_cNumeDivScaleMin;
    
private static UInt32[] s_rgulShiftBase;
    
private static UInt32[] s_decimalHelpersLo;
    
private static UInt32[] s_decimalHelpersMid;
    
private static UInt32[] s_decimalHelpersHi;
    
private static UInt32[] s_decimalHelpersHiHi;
    
private static int HelperTableStartIndexLo;
    
private static int HelperTableStartIndexMid;
    
private static int HelperTableStartIndexHi;
    
private static int HelperTableStartIndexHiHi;
    
private static Byte[] s_rgCLenFromPrec;
    
private static UInt32 s_ulT1;
    
private static UInt32 s_ulT2;
    
private static UInt32 s_ulT3;
    
private static UInt32 s_ulT4;
    
private static UInt32 s_ulT5;
    
private static UInt32 s_ulT6;
    
private static UInt32 s_ulT7;
    
private static UInt32 s_ulT8;
    
private static UInt32 s_ulT9;
    
private static ulong s_dwlT10;
    
private static ulong s_dwlT11;
    
private static ulong s_dwlT12;
    
private static ulong s_dwlT13;
    
private static ulong s_dwlT14;
    
private static ulong s_dwlT15;
    
private static ulong s_dwlT16;
    
private static ulong s_dwlT17;
    
private static ulong s_dwlT18;
    
private static ulong s_dwlT19;
    
public static SqlDecimal Null;
    
public static SqlDecimal MinValue;
    
public static SqlDecimal MaxValue;
    
public bool IsNull { get; }
    
public decimal Value { get; }
    
public bool IsPositive { get; }
    
public byte Precision { get; }
    
public byte Scale { get; }
    
public Int32[] Data { get; }
    
public Byte[] BinData { get; }
    private SqlDecimal(bool fNull);
    public SqlDecimal(decimal value);
    public SqlDecimal(int value);
    public SqlDecimal(long value);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, Int32[] bits);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4);
    public SqlDecimal(double dVal);
    private SqlDecimal(UInt32[] rglData, byte bLen, byte bPrec, byte bScale, bool fPositive);
    private static SqlDecimal();
    private byte CalculatePrecision();
    private bool VerifyPrecision(byte precision);
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public bool get_IsPositive();
    private void SetPositive();
    private void SetSignBit(bool fPositive);
    public byte get_Precision();
    public byte get_Scale();
    public Int32[] get_Data();
    public Byte[] get_BinData();
    public virtual string ToString();
    public static SqlDecimal Parse(string s);
    public double ToDouble();
    private decimal ToDecimal();
    public static SqlDecimal op_Implicit(decimal x);
    public static SqlDecimal op_Explicit(double x);
    public static SqlDecimal op_Implicit(long x);
    public static decimal op_Explicit(SqlDecimal x);
    public static SqlDecimal op_UnaryNegation(SqlDecimal x);
    public static SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Division(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Explicit(SqlBoolean x);
    public static SqlDecimal op_Implicit(SqlByte x);
    public static SqlDecimal op_Implicit(SqlInt16 x);
    public static SqlDecimal op_Implicit(SqlInt32 x);
    public static SqlDecimal op_Implicit(SqlInt64 x);
    public static SqlDecimal op_Implicit(SqlMoney x);
    public static SqlDecimal op_Explicit(SqlSingle x);
    public static SqlDecimal op_Explicit(SqlDouble x);
    public static SqlDecimal op_Explicit(SqlString x);
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    private static void ZeroToMaxLen(UInt32[] rgulData, int cUI4sCur);
    private static byte CLenFromPrec(byte bPrec);
    private bool FZero();
    private bool FGt10_38();
    private bool FGt10_38(UInt32[] rglData);
    private static byte BGetPrecUI4(UInt32 value);
    private static byte BGetPrecUI8(UInt32 ulU0, UInt32 ulU1);
    private static byte BGetPrecUI8(ulong dwlVal);
    private void AddULong(UInt32 ulAdd);
    private void MultByULong(UInt32 uiMultiplier);
    private UInt32 DivByULong(UInt32 iDivisor);
    internal void AdjustScale(int digits, bool fRound);
    public static SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound);
    public static SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale);
    private int LAbsCmp(SqlDecimal snumOp);
    private static void MpMove(UInt32[] rgulS, int ciulS, UInt32[] rgulD, Int32& ciulD);
    private static void MpSet(UInt32[] rgulD, Int32& ciulD, UInt32 iulN);
    private static void MpNormalize(UInt32[] rgulU, Int32& ciulU);
    private static void MpMul1(UInt32[] piulD, Int32& ciulD, UInt32 iulX);
    private static void MpDiv1(UInt32[] rgulU, Int32& ciulU, UInt32 iulD, UInt32& iulR);
    internal static ulong DWL(UInt32 lo, UInt32 hi);
    private static UInt32 HI(ulong x);
    private static UInt32 LO(ulong x);
    private static void MpDiv(UInt32[] rgulU, int ciulU, UInt32[] rgulD, int ciulD, UInt32[] rgulQ, Int32& ciulQ, UInt32[] rgulR, Int32& ciulR);
    private EComparison CompareNm(SqlDecimal snumOp);
    private static void CheckValidPrecScale(byte bPrec, byte bScale);
    private static void CheckValidPrecScale(int iPrec, int iScale);
    public static SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Add(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Subtract(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Divide(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean Equals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    private static char ChFromDigit(UInt32 uiDigit);
    private void StoreFromWorkingArray(UInt32[] rguiData);
    private void SetToZero();
    private void MakeInteger(Boolean& fFraction);
    public static SqlDecimal Abs(SqlDecimal n);
    public static SqlDecimal Ceiling(SqlDecimal n);
    public static SqlDecimal Floor(SqlDecimal n);
    public static SqlInt32 Sign(SqlDecimal n);
    private static SqlDecimal Round(SqlDecimal n, int lPosition, bool fTruncate);
    public static SqlDecimal Round(SqlDecimal n, int position);
    public static SqlDecimal Truncate(SqlDecimal n, int position);
    public static SqlDecimal Power(SqlDecimal n, double exp);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDecimal value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDouble : ValueType {
    
private bool m_fNotNull;
    
private double m_value;
    
public static SqlDouble Null;
    
public static SqlDouble Zero;
    
public static SqlDouble MinValue;
    
public static SqlDouble MaxValue;
    
public bool IsNull { get; }
    
public double Value { get; }
    private SqlDouble(bool fNull);
    public SqlDouble(double value);
    private static SqlDouble();
    public sealed virtual bool get_IsNull();
    public double get_Value();
    public static SqlDouble op_Implicit(double x);
    public static double op_Explicit(SqlDouble x);
    public virtual string ToString();
    public static SqlDouble Parse(string s);
    public static SqlDouble op_UnaryNegation(SqlDouble x);
    public static SqlDouble op_Addition(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Subtraction(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Division(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Explicit(SqlBoolean x);
    public static SqlDouble op_Implicit(SqlByte x);
    public static SqlDouble op_Implicit(SqlInt16 x);
    public static SqlDouble op_Implicit(SqlInt32 x);
    public static SqlDouble op_Implicit(SqlInt64 x);
    public static SqlDouble op_Implicit(SqlSingle x);
    public static SqlDouble op_Implicit(SqlMoney x);
    public static SqlDouble op_Implicit(SqlDecimal x);
    public static SqlDouble op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_Inequality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble Add(SqlDouble x, SqlDouble y);
    public static SqlDouble Subtract(SqlDouble x, SqlDouble y);
    public static SqlDouble Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble Divide(SqlDouble x, SqlDouble y);
    public static SqlBoolean Equals(SqlDouble x, SqlDouble y);
    public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDouble value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlFileStream : Stream {
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public string Name { get; }
    
public long Position { get; public set; }
    
public Byte[] TransactionContext { get; }
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access);
    public SqlFileStream(string path, Byte[] transactionContext, FileAccess access, FileOptions options, long allocationSize);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public string get_Name();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public Byte[] get_TransactionContext();
    public virtual void Flush();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlGuid : ValueType {
    
private static int s_sizeOfGuid;
    
private static Int32[] s_rgiGuidOrder;
    
private Byte[] m_value;
    
public static SqlGuid Null;
    
public bool IsNull { get; }
    
public Guid Value { get; }
    private SqlGuid(bool fNull);
    public SqlGuid(Byte[] value);
    internal SqlGuid(Byte[] value, bool ignored);
    public SqlGuid(string s);
    public SqlGuid(Guid g);
    public SqlGuid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    private static SqlGuid();
    public sealed virtual bool get_IsNull();
    public Guid get_Value();
    public static SqlGuid op_Implicit(Guid x);
    public static Guid op_Explicit(SqlGuid x);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public static SqlGuid Parse(string s);
    private static EComparison Compare(SqlGuid x, SqlGuid y);
    public static SqlGuid op_Explicit(SqlString x);
    public static SqlGuid op_Explicit(SqlBinary x);
    public static SqlBoolean op_Equality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_Inequality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean Equals(SqlGuid x, SqlGuid y);
    public static SqlBoolean NotEquals(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public SqlString ToSqlString();
    public SqlBinary ToSqlBinary();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlGuid value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt16 : ValueType {
    
private bool m_fNotNull;
    
private short m_value;
    
private static int s_MASKI2;
    
public static SqlInt16 Null;
    
public static SqlInt16 Zero;
    
public static SqlInt16 MinValue;
    
public static SqlInt16 MaxValue;
    
public bool IsNull { get; }
    
public short Value { get; }
    private SqlInt16(bool fNull);
    public SqlInt16(short value);
    private static SqlInt16();
    public sealed virtual bool get_IsNull();
    public short get_Value();
    public static SqlInt16 op_Implicit(short x);
    public static short op_Explicit(SqlInt16 x);
    public virtual string ToString();
    public static SqlInt16 Parse(string s);
    public static SqlInt16 op_UnaryNegation(SqlInt16 x);
    public static SqlInt16 op_OnesComplement(SqlInt16 x);
    public static SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Division(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Explicit(SqlBoolean x);
    public static SqlInt16 op_Implicit(SqlByte x);
    public static SqlInt16 op_Explicit(SqlInt32 x);
    public static SqlInt16 op_Explicit(SqlInt64 x);
    public static SqlInt16 op_Explicit(SqlSingle x);
    public static SqlInt16 op_Explicit(SqlDouble x);
    public static SqlInt16 op_Explicit(SqlMoney x);
    public static SqlInt16 op_Explicit(SqlDecimal x);
    public static SqlInt16 op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 OnesComplement(SqlInt16 x);
    public static SqlInt16 Add(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Subtract(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Divide(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Mod(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Xor(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean Equals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt16 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt32 : ValueType {
    
private bool m_fNotNull;
    
private int m_value;
    
private static long s_iIntMin;
    
private static long s_lBitNotIntMax;
    
public static SqlInt32 Null;
    
public static SqlInt32 Zero;
    
public static SqlInt32 MinValue;
    
public static SqlInt32 MaxValue;
    
public bool IsNull { get; }
    
public int Value { get; }
    private SqlInt32(bool fNull);
    public SqlInt32(int value);
    private static SqlInt32();
    public sealed virtual bool get_IsNull();
    public int get_Value();
    public static SqlInt32 op_Implicit(int x);
    public static int op_Explicit(SqlInt32 x);
    public virtual string ToString();
    public static SqlInt32 Parse(string s);
    public static SqlInt32 op_UnaryNegation(SqlInt32 x);
    public static SqlInt32 op_OnesComplement(SqlInt32 x);
    public static SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Division(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Explicit(SqlBoolean x);
    public static SqlInt32 op_Implicit(SqlByte x);
    public static SqlInt32 op_Implicit(SqlInt16 x);
    public static SqlInt32 op_Explicit(SqlInt64 x);
    public static SqlInt32 op_Explicit(SqlSingle x);
    public static SqlInt32 op_Explicit(SqlDouble x);
    public static SqlInt32 op_Explicit(SqlMoney x);
    public static SqlInt32 op_Explicit(SqlDecimal x);
    public static SqlInt32 op_Explicit(SqlString x);
    private static bool SameSignInt(int x, int y);
    public static SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 OnesComplement(SqlInt32 x);
    public static SqlInt32 Add(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Subtract(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Divide(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Mod(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Xor(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean Equals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt32 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt64 : ValueType {
    
private bool m_fNotNull;
    
private long m_value;
    
private static long s_lLowIntMask;
    
private static long s_lHighIntMask;
    
public static SqlInt64 Null;
    
public static SqlInt64 Zero;
    
public static SqlInt64 MinValue;
    
public static SqlInt64 MaxValue;
    
public bool IsNull { get; }
    
public long Value { get; }
    private SqlInt64(bool fNull);
    public SqlInt64(long value);
    private static SqlInt64();
    public sealed virtual bool get_IsNull();
    public long get_Value();
    public static SqlInt64 op_Implicit(long x);
    public static long op_Explicit(SqlInt64 x);
    public virtual string ToString();
    public static SqlInt64 Parse(string s);
    public static SqlInt64 op_UnaryNegation(SqlInt64 x);
    public static SqlInt64 op_OnesComplement(SqlInt64 x);
    public static SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Division(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Explicit(SqlBoolean x);
    public static SqlInt64 op_Implicit(SqlByte x);
    public static SqlInt64 op_Implicit(SqlInt16 x);
    public static SqlInt64 op_Implicit(SqlInt32 x);
    public static SqlInt64 op_Explicit(SqlSingle x);
    public static SqlInt64 op_Explicit(SqlDouble x);
    public static SqlInt64 op_Explicit(SqlMoney x);
    public static SqlInt64 op_Explicit(SqlDecimal x);
    public static SqlInt64 op_Explicit(SqlString x);
    private static bool SameSignLong(long x, long y);
    public static SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 OnesComplement(SqlInt64 x);
    public static SqlInt64 Add(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Subtract(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Divide(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Mod(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Xor(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean Equals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt64 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlMoney : ValueType {
    
private bool _fNotNull;
    
private long _value;
    
internal static int s_iMoneyScale;
    
private static long s_lTickBase;
    
private static double s_dTickBase;
    
private static long s_minLong;
    
private static long s_maxLong;
    
public static SqlMoney Null;
    
public static SqlMoney Zero;
    
public static SqlMoney MinValue;
    
public static SqlMoney MaxValue;
    
public bool IsNull { get; }
    
public decimal Value { get; }
    private SqlMoney(bool fNull);
    internal SqlMoney(long value, int ignored);
    public SqlMoney(int value);
    public SqlMoney(long value);
    public SqlMoney(decimal value);
    public SqlMoney(double value);
    private static SqlMoney();
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public decimal ToDecimal();
    public long ToInt64();
    internal long ToSqlInternalRepresentation();
    public int ToInt32();
    public double ToDouble();
    public static SqlMoney op_Implicit(decimal x);
    public static SqlMoney op_Explicit(double x);
    public static SqlMoney op_Implicit(long x);
    public static decimal op_Explicit(SqlMoney x);
    public virtual string ToString();
    public static SqlMoney Parse(string s);
    public static SqlMoney op_UnaryNegation(SqlMoney x);
    public static SqlMoney op_Addition(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Subtraction(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Division(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Explicit(SqlBoolean x);
    public static SqlMoney op_Implicit(SqlByte x);
    public static SqlMoney op_Implicit(SqlInt16 x);
    public static SqlMoney op_Implicit(SqlInt32 x);
    public static SqlMoney op_Implicit(SqlInt64 x);
    public static SqlMoney op_Explicit(SqlSingle x);
    public static SqlMoney op_Explicit(SqlDouble x);
    public static SqlMoney op_Explicit(SqlDecimal x);
    public static SqlMoney op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_Inequality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney Add(SqlMoney x, SqlMoney y);
    public static SqlMoney Subtract(SqlMoney x, SqlMoney y);
    public static SqlMoney Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney Divide(SqlMoney x, SqlMoney y);
    public static SqlBoolean Equals(SqlMoney x, SqlMoney y);
    public static SqlBoolean NotEquals(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlMoney value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
    public SqlNotFilledException(string message);
    public SqlNotFilledException(string message, Exception e);
}
public class System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
    public SqlNullValueException(string message);
    public SqlNullValueException(string message, Exception e);
    private static SerializationInfo SqlNullValueExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
internal static class System.Data.SqlTypes.SQLResource : object {
    
internal static string NullString { get; }
    
internal static string MessageString { get; }
    
internal static string ArithOverflowMessage { get; }
    
internal static string DivideByZeroMessage { get; }
    
internal static string NullValueMessage { get; }
    
internal static string TruncationMessage { get; }
    
internal static string DateTimeOverflowMessage { get; }
    
internal static string ConcatDiffCollationMessage { get; }
    
internal static string CompareDiffCollationMessage { get; }
    
internal static string InvalidFlagMessage { get; }
    
internal static string NumeToDecOverflowMessage { get; }
    
internal static string ConversionOverflowMessage { get; }
    
internal static string InvalidDateTimeMessage { get; }
    
internal static string TimeZoneSpecifiedMessage { get; }
    
internal static string InvalidArraySizeMessage { get; }
    
internal static string InvalidPrecScaleMessage { get; }
    
internal static string FormatMessage { get; }
    
internal static string NotFilledMessage { get; }
    
internal static string AlreadyFilledMessage { get; }
    
internal static string ClosedXmlReaderMessage { get; }
    internal static string get_NullString();
    internal static string get_MessageString();
    internal static string get_ArithOverflowMessage();
    internal static string get_DivideByZeroMessage();
    internal static string get_NullValueMessage();
    internal static string get_TruncationMessage();
    internal static string get_DateTimeOverflowMessage();
    internal static string get_ConcatDiffCollationMessage();
    internal static string get_CompareDiffCollationMessage();
    internal static string get_InvalidFlagMessage();
    internal static string get_NumeToDecOverflowMessage();
    internal static string get_ConversionOverflowMessage();
    internal static string get_InvalidDateTimeMessage();
    internal static string get_TimeZoneSpecifiedMessage();
    internal static string get_InvalidArraySizeMessage();
    internal static string get_InvalidPrecScaleMessage();
    internal static string get_FormatMessage();
    internal static string get_NotFilledMessage();
    internal static string get_AlreadyFilledMessage();
    internal static string get_ClosedXmlReaderMessage();
    internal static string InvalidOpStreamClosed(string method);
    internal static string InvalidOpStreamNonWritable(string method);
    internal static string InvalidOpStreamNonReadable(string method);
    internal static string InvalidOpStreamNonSeekable(string method);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlSingle : ValueType {
    
private bool _fNotNull;
    
private float _value;
    
public static SqlSingle Null;
    
public static SqlSingle Zero;
    
public static SqlSingle MinValue;
    
public static SqlSingle MaxValue;
    
public bool IsNull { get; }
    
public float Value { get; }
    private SqlSingle(bool fNull);
    public SqlSingle(float value);
    public SqlSingle(double value);
    private static SqlSingle();
    public sealed virtual bool get_IsNull();
    public float get_Value();
    public static SqlSingle op_Implicit(float x);
    public static float op_Explicit(SqlSingle x);
    public virtual string ToString();
    public static SqlSingle Parse(string s);
    public static SqlSingle op_UnaryNegation(SqlSingle x);
    public static SqlSingle op_Addition(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Subtraction(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Division(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Explicit(SqlBoolean x);
    public static SqlSingle op_Implicit(SqlByte x);
    public static SqlSingle op_Implicit(SqlInt16 x);
    public static SqlSingle op_Implicit(SqlInt32 x);
    public static SqlSingle op_Implicit(SqlInt64 x);
    public static SqlSingle op_Implicit(SqlMoney x);
    public static SqlSingle op_Implicit(SqlDecimal x);
    public static SqlSingle op_Explicit(SqlDouble x);
    public static SqlSingle op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_Inequality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle Add(SqlSingle x, SqlSingle y);
    public static SqlSingle Subtract(SqlSingle x, SqlSingle y);
    public static SqlSingle Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle Divide(SqlSingle x, SqlSingle y);
    public static SqlBoolean Equals(SqlSingle x, SqlSingle y);
    public static SqlBoolean NotEquals(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlSingle value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal abstract class System.Data.SqlTypes.SqlStreamChars : object {
    
public bool IsNull { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    public abstract virtual bool get_IsNull();
    public abstract virtual long get_Length();
    public abstract virtual long get_Position();
    public abstract virtual void set_Position(long value);
    public abstract virtual int Read(Char[] buffer, int offset, int count);
    public abstract virtual void Write(Char[] buffer, int offset, int count);
    public abstract virtual long Seek(long offset, SeekOrigin origin);
    public abstract virtual void SetLength(long value);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlString : ValueType {
    
private string m_value;
    
private CompareInfo m_cmpInfo;
    
private int m_lcid;
    
private SqlCompareOptions m_flag;
    
private bool m_fNotNull;
    
public static SqlString Null;
    
internal static UnicodeEncoding s_unicodeEncoding;
    
public static int IgnoreCase;
    
public static int IgnoreWidth;
    
public static int IgnoreNonSpace;
    
public static int IgnoreKanaType;
    
public static int BinarySort;
    
public static int BinarySort2;
    
private static SqlCompareOptions s_iDefaultFlag;
    
private static CompareOptions s_iValidCompareOptionMask;
    
internal static SqlCompareOptions s_iValidSqlCompareOptionMask;
    
internal static int s_lcidUSEnglish;
    
private static int s_lcidBinary;
    
public bool IsNull { get; }
    
public string Value { get; }
    
public int LCID { get; }
    
public CultureInfo CultureInfo { get; }
    
public CompareInfo CompareInfo { get; }
    
public SqlCompareOptions SqlCompareOptions { get; }
    private SqlString(bool fNull);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data);
    public SqlString(string data, int lcid, SqlCompareOptions compareOptions);
    public SqlString(string data, int lcid);
    public SqlString(string data);
    private SqlString(int lcid, SqlCompareOptions compareOptions, string data, CompareInfo cmpInfo);
    private static SqlString();
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public int get_LCID();
    public CultureInfo get_CultureInfo();
    private void SetCompareInfo();
    public CompareInfo get_CompareInfo();
    public SqlCompareOptions get_SqlCompareOptions();
    public static SqlString op_Implicit(string x);
    public static string op_Explicit(SqlString x);
    public virtual string ToString();
    public Byte[] GetUnicodeBytes();
    public Byte[] GetNonUnicodeBytes();
    public static SqlString op_Addition(SqlString x, SqlString y);
    private static int StringCompare(SqlString x, SqlString y);
    private static SqlBoolean Compare(SqlString x, SqlString y, EComparison ecExpectedResult);
    public static SqlString op_Explicit(SqlBoolean x);
    public static SqlString op_Explicit(SqlByte x);
    public static SqlString op_Explicit(SqlInt16 x);
    public static SqlString op_Explicit(SqlInt32 x);
    public static SqlString op_Explicit(SqlInt64 x);
    public static SqlString op_Explicit(SqlSingle x);
    public static SqlString op_Explicit(SqlDouble x);
    public static SqlString op_Explicit(SqlDecimal x);
    public static SqlString op_Explicit(SqlMoney x);
    public static SqlString op_Explicit(SqlDateTime x);
    public static SqlString op_Explicit(SqlGuid x);
    public SqlString Clone();
    public static SqlBoolean op_Equality(SqlString x, SqlString y);
    public static SqlBoolean op_Inequality(SqlString x, SqlString y);
    public static SqlBoolean op_LessThan(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y);
    public static SqlString Concat(SqlString x, SqlString y);
    public static SqlString Add(SqlString x, SqlString y);
    public static SqlBoolean Equals(SqlString x, SqlString y);
    public static SqlBoolean NotEquals(SqlString x, SqlString y);
    public static SqlBoolean LessThan(SqlString x, SqlString y);
    public static SqlBoolean GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDateTime ToSqlDateTime();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlGuid ToSqlGuid();
    private static void ValidateSqlCompareOptions(SqlCompareOptions compareOptions);
    public static CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions);
    private bool FBinarySort();
    private static int CompareBinary(SqlString x, SqlString y);
    private static int CompareBinary2(SqlString x, SqlString y);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlString value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
public class System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
    public SqlTruncateException(string message);
    public SqlTruncateException(string message, Exception e);
    private static SerializationInfo SqlTruncateExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
public class System.Data.SqlTypes.SqlTypeException : SystemException {
    public SqlTypeException(string message);
    public SqlTypeException(string message, Exception e);
    protected SqlTypeException(SerializationInfo si, StreamingContext sc);
    private static SerializationInfo SqlTypeExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
public class System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper : SchemaImporterExtension {
    
private string m_name;
    
private string m_targetNamespace;
    
private String[] m_references;
    
private CodeNamespaceImport[] m_namespaceImports;
    
private string m_destinationType;
    
private bool m_direct;
    
protected static string SqlTypesNamespace;
    public SqlTypesSchemaImporterExtensionHelper(string name, string targetNamespace, String[] references, CodeNamespaceImport[] namespaceImports, string destinationType, bool direct);
    public SqlTypesSchemaImporterExtensionHelper(string name, string destinationType);
    public SqlTypesSchemaImporterExtensionHelper(string name, string destinationType, bool direct);
    private static SqlTypesSchemaImporterExtensionHelper();
    private void Init(string name, string targetNamespace, String[] references, CodeNamespaceImport[] namespaceImports, string destinationType, bool direct);
    public virtual string ImportSchemaType(string name, string xmlNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
    public virtual string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider);
}
internal static class System.Data.SqlTypes.SqlTypeWorkarounds : object {
    
private static XmlReaderSettings s_defaultXmlReaderSettings;
    
private static XmlReaderSettings s_defaultXmlReaderSettingsCloseInput;
    
private static XmlReaderSettings s_defaultXmlReaderSettingsAsyncCloseInput;
    
internal static SqlCompareOptions SqlStringValidSqlCompareOptionMask;
    private static SqlTypeWorkarounds();
    internal static XmlReader SqlXmlCreateSqlXmlReader(Stream stream, bool closeInput, bool async);
    internal static DateTime SqlDateTimeToDateTime(int daypart, int timepart);
    internal static SqlMoney SqlMoneyCtor(long value, int ignored);
    internal static long SqlMoneyToSqlInternalRepresentation(SqlMoney money);
    internal static void SqlDecimalExtractData(SqlDecimal d, UInt32& data1, UInt32& data2, UInt32& data3, UInt32& data4);
    internal static SqlBinary SqlBinaryCtor(Byte[] value, bool ignored);
    internal static SqlGuid SqlGuidCtor(Byte[] value, bool ignored);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlXml : object {
    
private static Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> s_sqlReaderDelegate;
    
private static XmlReaderSettings s_defaultXmlReaderSettings;
    
private static XmlReaderSettings s_defaultXmlReaderSettingsCloseInput;
    
private static MethodInfo s_createSqlReaderMethodInfo;
    
private MethodInfo _createSqlReaderMethodInfo;
    
private bool _fNotNull;
    
private Stream _stream;
    
private bool _firstCreateReader;
    
private static MethodInfo CreateSqlReaderMethodInfo { get; }
    
public bool IsNull { get; }
    
public string Value { get; }
    
public static SqlXml Null { get; }
    private SqlXml(bool fNull);
    public SqlXml(XmlReader value);
    public SqlXml(Stream value);
    private static SqlXml();
    public XmlReader CreateReader();
    internal static XmlReader CreateSqlXmlReader(Stream stream, bool closeInput, bool throwTargetInvocationExceptions);
    private static Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> CreateSqlReaderDelegate();
    private static MethodInfo get_CreateSqlReaderMethodInfo();
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public static SqlXml get_Null();
    private void SetNull();
    private Stream CreateMemoryStreamFromXmlReader(XmlReader reader);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal class System.Data.SqlTypes.SqlXmlStreamWrapper : Stream {
    
private Stream _stream;
    
private long _lPosition;
    
private bool _isClosed;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal SqlXmlStreamWrapper(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfStreamCannotSeek(string method);
    private void ThrowIfStreamCannotRead(string method);
    private void ThrowIfStreamCannotWrite(string method);
    private void ThrowIfStreamClosed(string method);
    private bool IsStreamClosed();
}
public enum System.Data.SqlTypes.StorageState : Enum {
    
public int value__;
    
public static StorageState Buffer;
    
public static StorageState Stream;
    
public static StorageState UnmanagedBuffer;
}
internal class System.Data.SqlTypes.StreamOnSqlBytes : Stream {
    
private SqlBytes _sb;
    
private long _lPosition;
    
public bool CanRead { get; }
    
public bool CanSeek { get; }
    
public bool CanWrite { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal StreamOnSqlBytes(SqlBytes sb);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private bool FClosed();
    private void CheckIfStreamClosed(string methodname);
}
internal class System.Data.SqlTypes.StreamOnSqlChars : SqlStreamChars {
    
private SqlChars _sqlchars;
    
private long _lPosition;
    
public bool IsNull { get; }
    
public long Length { get; }
    
public long Position { get; public set; }
    internal StreamOnSqlChars(SqlChars s);
    public virtual bool get_IsNull();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Char[] buffer, int offset, int count);
    public virtual void Write(Char[] buffer, int offset, int count);
    public virtual void SetLength(long value);
    protected virtual void Dispose(bool disposing);
    private bool FClosed();
    private void CheckIfStreamClosed(string methodname);
}
public class System.Data.SqlTypes.TypeBigIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeBinarySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeBitSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeDateTimeSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeDecimalSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeFloatSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeMoneySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNTextSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNumericSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeNVarCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeRealSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallDateTimeSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeSmallMoneySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeTextSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeTinyIntSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeUniqueIdentifierSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarBinarySchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarCharSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.SqlTypes.TypeVarImageSchemaImporterExtension : SqlTypesSchemaImporterExtensionHelper {
}
public class System.Data.StateChangeEventArgs : EventArgs {
    
private ConnectionState _originalState;
    
private ConnectionState _currentState;
    
public ConnectionState CurrentState { get; }
    
public ConnectionState OriginalState { get; }
    public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState);
    public ConnectionState get_CurrentState();
    public ConnectionState get_OriginalState();
}
public class System.Data.StateChangeEventHandler : MulticastDelegate {
    public StateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.StatementCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]

private int <RecordCount>k__BackingField;
    
public int RecordCount { get; }
    public StatementCompletedEventArgs(int recordCount);
    [CompilerGeneratedAttribute]
public int get_RecordCount();
}
public class System.Data.StatementCompletedEventHandler : MulticastDelegate {
    public StatementCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatementCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.StatementType : Enum {
    
public int value__;
    
public static StatementType Select;
    
public static StatementType Insert;
    
public static StatementType Update;
    
public static StatementType Delete;
    
public static StatementType Batch;
}
public class System.Data.StrongTypingException : DataException {
    protected StrongTypingException(SerializationInfo info, StreamingContext context);
    public StrongTypingException(string message);
    public StrongTypingException(string s, Exception innerException);
}
public class System.Data.SyntaxErrorException : InvalidExpressionException {
    protected SyntaxErrorException(SerializationInfo info, StreamingContext context);
    public SyntaxErrorException(string s);
    public SyntaxErrorException(string message, Exception innerException);
}
internal enum System.Data.Tokens : Enum {
    
public int value__;
    
public static Tokens None;
    
public static Tokens Name;
    
public static Tokens Numeric;
    
public static Tokens Decimal;
    
public static Tokens Float;
    
public static Tokens BinaryConst;
    
public static Tokens StringConst;
    
public static Tokens Date;
    
public static Tokens ListSeparator;
    
public static Tokens LeftParen;
    
public static Tokens RightParen;
    
public static Tokens ZeroOp;
    
public static Tokens UnaryOp;
    
public static Tokens BinaryOp;
    
public static Tokens Child;
    
public static Tokens Parent;
    
public static Tokens Dot;
    
public static Tokens Unknown;
    
public static Tokens EOS;
}
internal enum System.Data.TreeAccessMethod : Enum {
    
public int value__;
    
public static TreeAccessMethod KEY_SEARCH_AND_INDEX;
    
public static TreeAccessMethod INDEX_ONLY;
}
[ObsoleteAttribute("TypedDataSetGenerator class will be removed in a future release. Please use System.Data.Design.TypedDataSetGenerator in System.Design.dll.")]
public class System.Data.TypedDataSetGenerator : object {
    
private bool useExtendedNaming;
    
private ICodeGenerator codeGen;
    
private ArrayList errorList;
    
private ArrayList conflictingTables;
    
private Hashtable lookupIdentifiers;
    public static void Generate(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen);
    public static string GenerateIdName(string name, ICodeGenerator codeGen);
    internal CodeTypeDeclaration GenerateCode(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen);
    private void InitLookupIdentifiers();
    private string FixIdName(string inVarName);
    private static bool isEmpty(string s);
    private string RowClassName(DataTable table);
    private string RowBaseClassName(DataTable table);
    private string RowConcreteClassName(DataTable table);
    private string TableClassName(DataTable table);
    private string TablePropertyName(DataTable table);
    private string TableFieldName(DataTable table);
    private string RowColumnPropertyName(DataColumn column);
    private string TableColumnFieldName(DataColumn column);
    private string TableColumnPropertyName(DataColumn column);
    private static int TablesConnectedness(DataTable parentTable, DataTable childTable);
    private string ChildPropertyName(DataRelation relation);
    private string ParentPropertyName(DataRelation relation);
    private string RelationFieldName(DataRelation relation);
    private string GetTypeName(Type t);
    private bool ChildRelationFollowable(DataRelation relation);
    private static CodeMemberMethod CreateOnRowEventMethod(string eventName, string rowClassName);
    private CodeTypeDeclaration CreateTypedTable(DataTable table);
    private CodeTypeDeclaration CreateTypedRow(DataTable table);
    private CodeTypeDeclaration CreateTypedRowEvent(DataTable table);
    private CodeTypeDelegate CreateTypedRowEventHandler(DataTable table);
    private CodeTypeDeclaration CreateTypedDataSet(DataSet dataSet);
    private static CodeExpression This();
    private static CodeExpression Base();
    private static CodeExpression Value();
    private static CodeTypeReference Type(string type);
    private static CodeTypeReference Type(Type type);
    private static CodeTypeReference Type(string type, int rank);
    private static CodeTypeReferenceExpression TypeExpr(Type type);
    private static CodeTypeReferenceExpression TypeExpr(string type);
    private static CodeExpression Cast(string type, CodeExpression expr);
    private static CodeExpression Cast(CodeTypeReference type, CodeExpression expr);
    private static CodeExpression TypeOf(string type);
    private static CodeExpression Field(CodeExpression exp, string field);
    private static CodeExpression Property(CodeExpression exp, string property);
    private static CodeExpression Argument(string argument);
    private static CodeExpression Variable(string variable);
    private static CodeExpression Event(string eventName);
    private static CodeExpression New(string type, CodeExpression[] parameters);
    private static CodeExpression New(Type type, CodeExpression[] parameters);
    private static CodeExpression Primitive(object primitive);
    private static CodeExpression Str(string str);
    private static CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression[] parameters);
    private static CodeExpression MethodCall(CodeExpression targetObject, string methodName);
    private static CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression par);
    private static CodeExpression DelegateCall(CodeExpression targetObject, CodeExpression par);
    private static CodeExpression Indexer(CodeExpression targetObject, CodeExpression indices);
    private static CodeBinaryOperatorExpression BinOperator(CodeExpression left, CodeBinaryOperatorType op, CodeExpression right);
    private static CodeBinaryOperatorExpression IdNotEQ(CodeExpression left, CodeExpression right);
    private static CodeBinaryOperatorExpression EQ(CodeExpression left, CodeExpression right);
    private static CodeStatement Stm(CodeExpression expr);
    private static CodeStatement Return(CodeExpression expr);
    private static CodeStatement Return();
    private static CodeStatement Assign(CodeExpression left, CodeExpression right);
    private static CodeStatement Throw(Type exception, string arg, string inner);
    private static CodeStatement If(CodeExpression cond, CodeStatement[] trueStms, CodeStatement[] falseStms);
    private static CodeStatement If(CodeExpression cond, CodeStatement[] trueStms);
    private static CodeStatement If(CodeExpression cond, CodeStatement trueStm);
    private static CodeMemberField FieldDecl(string type, string name);
    private static CodeMemberField FieldDecl(Type type, string name);
    private static CodeMemberMethod Method(CodeTypeReference type, string name, MemberAttributes attributes);
    private static CodeMemberMethod MethodDecl(Type type, string name, MemberAttributes attributes);
    private static CodeMemberMethod MethodDecl(string type, string name, MemberAttributes attributes);
    private static CodeMemberProperty PropertyDecl(string type, string name, MemberAttributes attributes);
    private static CodeMemberProperty PropertyDecl(Type type, string name, MemberAttributes attributes);
    private static CodeStatement VariableDecl(Type type, string name);
    private static CodeStatement VariableDecl(string type, string name, CodeExpression initExpr);
    private static CodeStatement VariableDecl(Type type, string name, CodeExpression initExpr);
    private static CodeMemberEvent EventDecl(string type, string name);
    private static CodeParameterDeclarationExpression ParameterDecl(string type, string name);
    private static CodeParameterDeclarationExpression ParameterDecl(Type type, string name);
    private static CodeAttributeDeclaration AttributeDecl(string name);
    private static CodeAttributeDeclaration AttributeDecl(string name, CodeExpression value);
    private static CodeStatement Try(CodeStatement tryStmnt, CodeCatchClause catchClause);
    private static CodeCatchClause Catch(Type type, string name, CodeStatement catchStmnt);
}
public class System.Data.TypedDataSetGeneratorException : DataException {
    
private ArrayList errorList;
    
private string KEY_ARRAYCOUNT;
    
private string KEY_ARRAYVALUES;
    
public ArrayList ErrorList { get; }
    protected TypedDataSetGeneratorException(SerializationInfo info, StreamingContext context);
    public TypedDataSetGeneratorException(string message);
    public TypedDataSetGeneratorException(string message, Exception innerException);
    public TypedDataSetGeneratorException(ArrayList list);
    public ArrayList get_ErrorList();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.Data.UnaryNode : ExpressionNode {
    
internal int _op;
    
internal ExpressionNode _right;
    internal UnaryNode(DataTable table, int op, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    private object EvalUnaryOp(int op, object vl);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.UniqueConstraint : Constraint {
    
private DataKey _key;
    
private Index _constraintIndex;
    
internal bool _bPrimaryKey;
    
internal string _constraintName;
    
internal String[] _columnNames;
    
internal String[] ColumnNames { get; }
    
internal Index ConstraintIndex { get; }
    [ReadOnlyAttribute("True")]

public DataColumn[] Columns { get; }
    
internal DataColumn[] ColumnsReference { get; }
    
public bool IsPrimaryKey { get; }
    
unknown bool InCollection {internal set; }
    
internal DataKey Key { get; }
    [ReadOnlyAttribute("True")]

public DataTable Table { get; }
    public UniqueConstraint(string name, DataColumn column);
    public UniqueConstraint(DataColumn column);
    public UniqueConstraint(string name, DataColumn[] columns);
    public UniqueConstraint(DataColumn[] columns);
    [BrowsableAttribute("False")]
public UniqueConstraint(string name, String[] columnNames, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn[] columns, bool isPrimaryKey);
    public UniqueConstraint(DataColumn[] columns, bool isPrimaryKey);
    internal String[] get_ColumnNames();
    internal Index get_ConstraintIndex();
    [ConditionalAttribute("DEBUG")]
private void AssertConstraintAndKeyIndexes();
    internal void ConstraintIndexClear();
    internal void ConstraintIndexInitialize();
    internal virtual void CheckState();
    private void NonVirtualCheckState();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal virtual bool CanEnableConstraint();
    internal virtual bool IsConstraintViolated();
    internal virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal UniqueConstraint Clone(DataTable table);
    public virtual DataColumn[] get_Columns();
    internal DataColumn[] get_ColumnsReference();
    public bool get_IsPrimaryKey();
    private void Create(string constraintName, DataColumn[] columns);
    public virtual bool Equals(object key2);
    public virtual int GetHashCode();
    internal virtual void set_InCollection(bool value);
    internal DataKey get_Key();
    public virtual DataTable get_Table();
}
public enum System.Data.UpdateRowSource : Enum {
    
public int value__;
    
public static UpdateRowSource None;
    
public static UpdateRowSource OutputParameters;
    
public static UpdateRowSource FirstReturnedRecord;
    
public static UpdateRowSource Both;
}
public enum System.Data.UpdateStatus : Enum {
    
public int value__;
    
public static UpdateStatus Continue;
    
public static UpdateStatus ErrorsOccurred;
    
public static UpdateStatus SkipCurrentRow;
    
public static UpdateStatus SkipAllRemainingRows;
}
internal enum System.Data.ValueType : Enum {
    
public int value__;
    
public static ValueType Unknown;
    
public static ValueType Null;
    
public static ValueType Bool;
    
public static ValueType Numeric;
    
public static ValueType Str;
    
public static ValueType Float;
    
public static ValueType Decimal;
    
public static ValueType Object;
    
public static ValueType Date;
}
public class System.Data.VersionNotFoundException : DataException {
    protected VersionNotFoundException(SerializationInfo info, StreamingContext context);
    public VersionNotFoundException(string s);
    public VersionNotFoundException(string message, Exception innerException);
}
internal static class System.Data.Win32NativeMethods : object {
    internal static bool IsTokenRestrictedWrapper(IntPtr token);
}
internal class System.Data.XDRSchema : XMLSchema {
    
internal string _schemaName;
    
internal string _schemaUri;
    
internal XmlElement _schemaRoot;
    
internal DataSet _ds;
    
private static Char[] s_colonArray;
    
private static NameType[] s_mapNameTypeXdr;
    
private static NameType s_enumerationNameType;
    internal XDRSchema(DataSet ds, bool fInline);
    private static XDRSchema();
    internal void LoadSchema(XmlElement schemaRoot, DataSet ds);
    internal XmlElement FindTypeNode(XmlElement node);
    internal bool IsTextOnlyContent(XmlElement node);
    internal bool IsXDRField(XmlElement node, XmlElement typeNode);
    internal DataTable HandleTable(XmlElement node);
    private static NameType FindNameType(string name);
    private Type ParseDataType(string dt, string dtValues);
    internal string GetInstanceName(XmlElement node);
    internal void HandleColumn(XmlElement node, DataTable table);
    internal void GetMinMax(XmlElement elNode, Int32& minOccurs, Int32& maxOccurs);
    internal void GetMinMax(XmlElement elNode, bool isAttribute, Int32& minOccurs, Int32& maxOccurs);
    internal void HandleTypeNode(XmlElement typeNode, DataTable table, ArrayList tableChildren);
    internal DataTable InstantiateTable(DataSet dataSet, XmlElement node, XmlElement typeNode);
    internal DataTable InstantiateSimpleTable(DataSet dataSet, XmlElement node);
}
internal class System.Data.XmlDataLoader : object {
    
private DataSet _dataSet;
    
private XmlToDatasetMap _nodeToSchemaMap;
    
private Hashtable _nodeToRowMap;
    
private Stack _childRowsStack;
    
private Hashtable _htableExcludedNS;
    
private bool _fIsXdr;
    
internal bool _isDiffgram;
    
private XmlElement _topMostNode;
    
private bool _ignoreSchema;
    
private DataTable _dataTable;
    
private bool _isTableLevel;
    
private bool _fromInference;
    
private XmlReader _dataReader;
    
private object _XSD_XMLNS_NS;
    
private object _XDR_SCHEMA;
    
private object _XDRNS;
    
private object _SQL_SYNC;
    
private object _UPDGNS;
    
private object _XSD_SCHEMA;
    
private object _XSDNS;
    
private object _DFFNS;
    
private object _MSDNS;
    
private object _DIFFID;
    
private object _HASCHANGES;
    
private object _ROWORDER;
    
internal bool FromInference { get; internal set; }
    internal XmlDataLoader(DataSet dataset, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataSet dataset, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    private void AttachRows(DataRow parentRow, XmlNode parentElement);
    private int CountNonNSAttributes(XmlNode node);
    private string GetValueForTextOnlyColums(XmlNode n);
    private string GetInitialTextFromNodes(XmlNode& n);
    private DataColumn GetTextOnlyColumn(DataRow row);
    internal DataRow GetRowFromElement(XmlElement e);
    internal bool FColumnElement(XmlElement e);
    private bool FExcludedNamespace(string ns);
    private bool FIgnoreNamespace(XmlNode node);
    private bool FIgnoreNamespace(XmlReader node);
    internal bool IsTextLikeNode(XmlNodeType n);
    internal bool IsTextOnly(DataColumn c);
    internal void LoadData(XmlDocument xdoc);
    private void LoadRowData(DataRow row, XmlElement rowElement);
    private void LoadRows(DataRow parentRow, XmlNode parentElement);
    private void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText);
    private void InitNameTable();
    internal void LoadData(XmlReader reader);
    private void LoadTopMostTable(DataTable table);
    private void LoadTable(DataTable table, bool isNested);
    private void LoadColumn(DataColumn column, Object[] foundColumns);
    private bool ProcessXsdSchema();
}
internal class System.Data.XmlDataTreeWriter : object {
    
private XmlWriter _xmlw;
    
private DataSet _ds;
    
private DataTable _dt;
    
private ArrayList _dTables;
    
private DataTable[] _topLevelTables;
    
private bool _fFromTable;
    
private bool _isDiffgram;
    
private Hashtable _rowsOrder;
    
private bool _writeHierarchy;
    internal XmlDataTreeWriter(DataSet ds);
    internal XmlDataTreeWriter(DataTable dt, bool writeHierarchy);
    private DataTable[] CreateToplevelTables();
    private void CreateTablesHierarchy(DataTable dt);
    internal static bool RowHasErrors(DataRow row);
    internal void SaveDiffgramData(XmlWriter xw, Hashtable rowsOrder);
    internal void Save(XmlWriter xw, bool writeSchema);
    private ArrayList GetNestedChildRelations(DataRow row);
    internal void XmlDataRowWriter(DataRow row, string encodedTableName);
    internal static bool PreserveSpace(object value);
}
internal class System.Data.XMLDiffLoader : object {
    
private ArrayList _tables;
    
private DataSet _dataSet;
    
private DataTable _dataTable;
    internal void LoadDiffGram(DataSet ds, XmlReader dataTextReader);
    private void CreateTablesHierarchy(DataTable dt);
    internal void LoadDiffGram(DataTable dt, XmlReader dataTextReader);
    internal void ProcessDiffs(DataSet ds, XmlReader ssync);
    internal void ProcessDiffs(ArrayList tableList, XmlReader ssync);
    internal void ProcessErrors(DataSet ds, XmlReader ssync);
    internal void ProcessErrors(ArrayList dt, XmlReader ssync);
    private DataTable GetTable(string tableName, string ns);
    private int ReadOldRowData(DataSet ds, DataTable& table, Int32& pos, XmlReader row);
    internal void SkipWhitespaces(XmlReader reader);
}
internal class System.Data.XmlIgnoreNamespaceReader : XmlNodeReader {
    
private List`1<string> _namespacesToIgnore;
    internal XmlIgnoreNamespaceReader(XmlDocument xdoc, String[] namespacesToIgnore);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
}
public enum System.Data.XmlReadMode : Enum {
    
public int value__;
    
public static XmlReadMode Auto;
    
public static XmlReadMode ReadSchema;
    
public static XmlReadMode IgnoreSchema;
    
public static XmlReadMode InferSchema;
    
public static XmlReadMode DiffGram;
    
public static XmlReadMode Fragment;
    
public static XmlReadMode InferTypedSchema;
}
internal class System.Data.XMLSchema : object {
    internal static TypeConverter GetConverter(Type type);
    internal static void SetProperties(object instance, XmlAttributeCollection attrs);
    internal static bool FEqualIdentity(XmlNode node, string name, string ns);
    internal static bool GetBooleanAttribute(XmlElement element, string attrName, string attrNS, bool defVal);
    internal static string GenUniqueColumnName(string proposedName, DataTable table);
}
internal class System.Data.XmlToDatasetMap : object {
    
private XmlNodeIdHashtable _tableSchemaMap;
    
private TableSchemaInfo _lastTableSchemaInfo;
    public XmlToDatasetMap(DataSet dataSet, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataSet dataSet);
    public XmlToDatasetMap(DataTable dataTable, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataTable dataTable);
    internal static bool IsMappedColumn(DataColumn c);
    private TableSchemaInfo AddTableSchema(DataTable table, XmlNameTable nameTable);
    private TableSchemaInfo AddTableSchema(XmlNameTable nameTable, DataTable table);
    private bool AddColumnSchema(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns);
    private bool AddColumnSchema(XmlNameTable nameTable, DataColumn col, XmlNodeIdHashtable columns);
    private void BuildIdentityMap(DataSet dataSet, XmlNameTable nameTable);
    private void BuildIdentityMap(XmlNameTable nameTable, DataSet dataSet);
    private void BuildIdentityMap(DataTable dataTable, XmlNameTable nameTable);
    private void BuildIdentityMap(XmlNameTable nameTable, DataTable dataTable);
    private ArrayList GetSelfAndDescendants(DataTable dt);
    public object GetColumnSchema(XmlNode node, bool fIgnoreNamespace);
    public object GetColumnSchema(DataTable table, XmlReader dataReader, bool fIgnoreNamespace);
    public object GetSchemaForNode(XmlNode node, bool fIgnoreNamespace);
    public DataTable GetTableForNode(XmlReader node, bool fIgnoreNamespace);
    private void HandleSpecialColumn(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns);
}
internal class System.Data.XmlTreeGen : object {
    
private ArrayList _constraintNames;
    
private Hashtable _namespaces;
    
private Hashtable _autogenerated;
    
private Hashtable _prefixes;
    
private DataSet _ds;
    
private ArrayList _tables;
    
private ArrayList _relations;
    
private XmlDocument _dc;
    
private XmlElement _sRoot;
    
private int _prefixCount;
    
private SchemaFormat _schFormat;
    
private string _filePath;
    
private string _fileName;
    
private string _fileExt;
    
private XmlElement _dsElement;
    
private XmlElement _constraintSeparator;
    
private Converter`2<Type, string> _targetConverter;
    internal XmlTreeGen(SchemaFormat format);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type);
    internal void AddXdoProperties(object instance, XmlElement root, XmlDocument xd);
    internal void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd);
    internal static string XmlDataTypeName(Type type);
    private void GenerateConstraintNames(DataTable table, bool fromTable);
    private void GenerateConstraintNames(ArrayList tables);
    private void GenerateConstraintNames(DataSet ds);
    private static bool _PropsNotEmpty(PropertyCollection props);
    private bool HaveExtendedProperties(DataSet ds);
    internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace);
    internal static void ValidateColumnMapping(Type columnType);
    internal void SetupAutoGenerated(DataSet ds);
    internal void SetupAutoGenerated(ArrayList dt);
    internal void SetupAutoGenerated(DataTable dt);
    private void CreateTablesHierarchy(DataTable dt);
    private void CreateRelations(DataTable dt);
    private DataTable[] CreateToplevelTables();
    internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy);
    internal XmlElement SchemaTree(XmlDocument xd, DataTable dt);
    internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt);
    internal void SetPath(XmlWriter xw);
    internal void Save(DataSet ds, XmlWriter xw);
    internal void Save(DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy, Converter`2<Type, string> multipleTargetConverter);
    internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc);
    private static XmlElement FindSimpleType(XmlElement schema, string name);
    internal XmlElement GetSchema(string NamespaceURI);
    internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema);
    internal void AddColumnProperties(DataColumn col, XmlElement root);
    private string FindTargetNamespace(DataTable table);
    internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal);
    internal static string TranslateAcceptRejectRule(AcceptRejectRule rule);
    internal static string TranslateRule(Rule rule);
    internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString);
    internal XmlElement FindTypeNode(XmlElement node, string strType);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema);
    private bool HasMixedColumns(DataTable table);
    internal static bool AutoGenerated(DataColumn col);
    internal static bool AutoGenerated(DataRelation rel);
    internal static bool AutoGenerated(UniqueConstraint unique);
    private bool AutoGenerated(ForeignKeyConstraint fk);
    internal static bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation);
    private bool IsAutoGenerated(object o);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested);
    private void SetMSDataAttribute(XmlElement root, Type type);
}
public enum System.Data.XmlWriteMode : Enum {
    
public int value__;
    
public static XmlWriteMode WriteSchema;
    
public static XmlWriteMode IgnoreSchema;
    
public static XmlWriteMode DiffGram;
}
internal class System.Data.XSDSchema : XMLSchema {
    
private XmlSchemaSet _schemaSet;
    
private XmlSchemaElement _dsElement;
    
private DataSet _ds;
    
private string _schemaName;
    
private ArrayList _columnExpressions;
    
private Hashtable _constraintNodes;
    
private ArrayList _refTables;
    
private ArrayList _complexTypes;
    
private XmlSchemaObjectCollection _annotations;
    
private XmlSchemaObjectCollection _elements;
    
private Hashtable _attributes;
    
private Hashtable _elementsTable;
    
private Hashtable _attributeGroups;
    
private Hashtable _schemaTypes;
    
private Hashtable _expressions;
    
private Dictionary`2<DataTable, List`1<DataTable>> _tableDictionary;
    
private Hashtable _udSimpleTypes;
    
private Hashtable _existingSimpleTypeMap;
    
private bool _fromInference;
    
private static NameType[] s_mapNameTypeXsd;
    
internal bool FromInference { get; internal set; }
    private static XSDSchema();
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    private void CollectElementsAnnotations(XmlSchema schema);
    private void CollectElementsAnnotations(XmlSchema schema, ArrayList schemaList);
    internal static string QualifiedName(string name);
    internal static void SetProperties(object instance, XmlAttribute[] attrs);
    private static void SetExtProperties(object instance, XmlAttribute[] attrs);
    private void HandleColumnExpression(object instance, XmlAttribute[] attrs);
    internal static string GetMsdataAttribute(XmlSchemaAnnotated node, string ln);
    private static void SetExtProperties(object instance, XmlAttributeCollection attrs);
    internal void HandleRefTableProperties(ArrayList RefTables, XmlSchemaElement element);
    internal void HandleRelation(XmlElement node, bool fNested);
    private bool HasAttributes(XmlSchemaObjectCollection attributes);
    private bool IsDatasetParticle(XmlSchemaParticle pt);
    private int DatasetElementCount(XmlSchemaObjectCollection elements);
    private XmlSchemaElement FindDatasetElement(XmlSchemaObjectCollection elements);
    public void LoadSchema(XmlSchemaSet schemaSet, DataTable dt);
    public void LoadSchema(XmlSchemaSet schemaSet, DataSet ds);
    private void HandleRelations(XmlSchemaAnnotation ann, bool fNested);
    internal XmlSchemaObjectCollection GetParticleItems(XmlSchemaParticle pt);
    internal void HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, bool isBase);
    internal void HandleAttributes(XmlSchemaObjectCollection attributes, DataTable table, bool isBase);
    private void HandleAttributeGroup(XmlSchemaAttributeGroup attributeGroup, DataTable table, bool isBase);
    internal void HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, bool isNillable);
    internal XmlSchemaParticle GetParticle(XmlSchemaComplexType ct);
    internal DataColumn FindField(DataTable table, string field);
    internal DataColumn[] BuildKey(XmlSchemaIdentityConstraint keyNode, DataTable table);
    internal bool GetBooleanAttribute(XmlSchemaAnnotated element, string attrName, bool defVal);
    internal string GetStringAttribute(XmlSchemaAnnotated element, string attrName, string defVal);
    internal static AcceptRejectRule TranslateAcceptRejectRule(string strRule);
    internal static Rule TranslateRule(string strRule);
    internal void HandleKeyref(XmlSchemaKeyref keyref);
    internal void HandleConstraint(XmlSchemaIdentityConstraint keyNode);
    internal DataTable InstantiateSimpleTable(XmlSchemaElement node);
    internal string GetInstanceName(XmlSchemaAnnotated node);
    internal DataTable InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, bool isRef);
    public static Type XsdtoClr(string xsdTypeName);
    private static NameType FindNameType(string name);
    private Type ParseDataType(string dt);
    internal static bool IsXsdType(string name);
    internal XmlSchemaAnnotated FindTypeNode(XmlSchemaAnnotated node);
    internal void HandleSimpleTypeSimpleContentColumn(XmlSchemaSimpleType typeNode, string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleSimpleContentColumn(string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleAttributeColumn(XmlSchemaAttribute attrib, DataTable table, bool isBase);
    internal void HandleElementColumn(XmlSchemaElement elem, DataTable table, bool isBase);
    internal void HandleDataSet(XmlSchemaElement node, bool isNewDataSet);
    private void AddTablesToList(List`1<DataTable> tableList, DataTable dt);
    private string GetPrefix(string ns);
    private string GetNamespaceFromPrefix(string prefix);
    private string GetTableNamespace(XmlSchemaIdentityConstraint key);
    private string GetTableName(XmlSchemaIdentityConstraint key);
    internal bool IsTable(XmlSchemaElement node);
    internal DataTable HandleTable(XmlSchemaElement node);
}
internal class System.Data.ZeroOpNode : ExpressionNode {
    
internal int _op;
    
internal static int zop_True;
    
internal static int zop_False;
    
internal static int zop_Null;
    internal ZeroOpNode(int op);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
}
internal static class System.HResults : object {
    
internal static int Data;
    
internal static int DataDeletedRowInaccessible;
    
internal static int DataDuplicateName;
    
internal static int DataInRowChangingEvent;
    
internal static int DataInvalidConstraint;
    
internal static int DataMissingPrimaryKey;
    
internal static int DataNoNullAllowed;
    
internal static int DataReadOnly;
    
internal static int DataRowNotInTable;
    
internal static int DataVersionNotFound;
    
internal static int DataConstraint;
    
internal static int StrongTyping;
    
internal static int SqlType;
    
internal static int SqlNullValue;
    
internal static int SqlTruncate;
    
internal static int DBConcurrency;
    
internal static int OperationAborted;
    
internal static int OdbcException;
}
[AttributeUsageAttribute("32767")]
internal class System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
    public MonoDocumentationNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoExtensionAttribute : MonoTODOAttribute {
    public MonoExtensionAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoInternalNoteAttribute : MonoTODOAttribute {
    public MonoInternalNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoLimitationAttribute : MonoTODOAttribute {
    public MonoLimitationAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoNotSupportedAttribute : MonoTODOAttribute {
    public MonoNotSupportedAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoTODOAttribute : Attribute {
    
private string comment;
    
public string Comment { get; }
    public MonoTODOAttribute(string comment);
    public string get_Comment();
}
internal static class System.Net.ContextFlagsAdapterPal : object {
    
private static ContextFlagMapping[] s_contextFlagMapping;
    private static ContextFlagsAdapterPal();
    internal static ContextFlagsPal GetContextFlagsPalFromInterop(GssFlags gssFlags, bool isServer);
    internal static GssFlags GetInteropFromContextFlagsPal(ContextFlagsPal flags, bool isServer);
}
[FlagsAttribute]
internal enum System.Net.ContextFlagsPal : Enum {
    
public int value__;
    
public static ContextFlagsPal None;
    
public static ContextFlagsPal Delegate;
    
public static ContextFlagsPal MutualAuth;
    
public static ContextFlagsPal ReplayDetect;
    
public static ContextFlagsPal SequenceDetect;
    
public static ContextFlagsPal Confidentiality;
    
public static ContextFlagsPal UseSessionKey;
    
public static ContextFlagsPal AllocateMemory;
    
public static ContextFlagsPal Connection;
    
public static ContextFlagsPal InitExtendedError;
    
public static ContextFlagsPal AcceptExtendedError;
    
public static ContextFlagsPal InitStream;
    
public static ContextFlagsPal AcceptStream;
    
public static ContextFlagsPal InitIntegrity;
    
public static ContextFlagsPal AcceptIntegrity;
    
public static ContextFlagsPal InitManualCredValidation;
    
public static ContextFlagsPal InitUseSuppliedCreds;
    
public static ContextFlagsPal InitIdentify;
    
public static ContextFlagsPal AcceptIdentify;
    
public static ContextFlagsPal ProxyBindings;
    
public static ContextFlagsPal AllowMissingBindings;
    
public static ContextFlagsPal UnverifiedTargetName;
}
internal static class System.Net.DebugThreadTracking : object {
    [ThreadStaticAttribute]

private static Stack`1<ThreadKinds> t_threadKindStack;
    
private static Stack`1<ThreadKinds> ThreadKindStack { get; }
    
internal static ThreadKinds CurrentThreadKind { get; }
    private static Stack`1<ThreadKinds> get_ThreadKindStack();
    internal static ThreadKinds get_CurrentThreadKind();
    internal static IDisposable SetThreadKind(ThreadKinds kind);
    internal static void SetThreadSource(ThreadKinds source);
}
internal class System.Net.InternalException : Exception {
}
internal class System.Net.NegotiationInfoClass : object {
    
internal static string NTLM;
    
internal static string Kerberos;
    
internal static string Negotiate;
    
internal static string Basic;
}
internal class System.Net.NetEventSource : EventSource {
    
public static NetEventSource Log;
    
private static string MissingMember;
    
private static string NullInstance;
    
private static string StaticMethodObject;
    
private static string NoParameters;
    
private static int MaxDumpSize;
    
private static int EnterEventId;
    
private static int ExitEventId;
    
private static int AssociateEventId;
    
private static int InfoEventId;
    
private static int ErrorEventId;
    
private static int CriticalFailureEventId;
    
private static int DumpArrayEventId;
    
private static int NextAvailableEventId;
    
public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
internal static class System.Net.Security.NegotiateStreamPal : object {
    
private static int NTE_FAIL;
    internal static string QueryContextClientSpecifiedSpn(SafeDeleteContext securityContext);
    internal static string QueryContextAuthenticationPackage(SafeDeleteContext securityContext);
    private static Byte[] GssWrap(SafeGssContextHandle context, bool encrypt, Byte[] buffer, int offset, int count);
    private static int GssUnwrap(SafeGssContextHandle context, Byte[] buffer, int offset, int count);
    private static bool GssInitSecurityContext(SafeGssContextHandle& context, SafeGssCredHandle credential, bool isNtlm, SafeGssNameHandle targetName, GssFlags inFlags, Byte[] buffer, Byte[]& outputBuffer, UInt32& outFlags, Int32& isNtlmUsed);
    private static SecurityStatusPal EstablishSecurityContext(SafeFreeNegoCredentials credential, SafeDeleteContext& context, string targetName, ContextFlagsPal inFlags, SecurityBuffer inputBuffer, SecurityBuffer outputBuffer, ContextFlagsPal& outFlags);
    internal static SecurityStatusPal InitializeSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, string spn, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags);
    internal static SecurityStatusPal AcceptSecurityContext(SafeFreeCredentials credentialsHandle, SafeDeleteContext& securityContext, ContextFlagsPal requestedContextFlags, SecurityBuffer[] inSecurityBufferArray, SecurityBuffer outSecurityBuffer, ContextFlagsPal& contextFlags);
    internal static Win32Exception CreateExceptionFromError(SecurityStatusPal statusCode);
    internal static int QueryMaxTokenSize(string package);
    internal static SafeFreeCredentials AcquireDefaultCredential(string package, bool isServer);
    internal static SafeFreeCredentials AcquireCredentialsHandle(string package, bool isServer, NetworkCredential credential);
    internal static SecurityStatusPal CompleteAuthToken(SafeDeleteContext& securityContext, SecurityBuffer[] inSecurityBufferArray);
    internal static int Encrypt(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count, bool isConfidential, bool isNtlm, Byte[]& output, UInt32 sequenceNumber);
    internal static int Decrypt(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count, bool isConfidential, bool isNtlm, Int32& newOffset, UInt32 sequenceNumber);
    internal static int VerifySignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count);
    internal static int MakeSignature(SafeDeleteContext securityContext, Byte[] buffer, int offset, int count, Byte[]& output);
}
internal class System.Net.Security.SafeCredentialReference : CriticalHandleMinusOneIsInvalid {
    
internal SafeFreeCredentials Target;
    private SafeCredentialReference(SafeFreeCredentials target);
    internal static SafeCredentialReference CreateReference(SafeFreeCredentials target);
    protected virtual bool ReleaseHandle();
}
internal abstract class System.Net.Security.SafeDeleteContext : SafeHandle {
    
private SafeFreeCredentials _credential;
    
public bool IsInvalid { get; }
    protected SafeDeleteContext(SafeFreeCredentials credential);
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SafeDeleteNegoContext : SafeDeleteContext {
    
private SafeGssNameHandle _targetName;
    
private SafeGssContextHandle _context;
    
private bool _isNtlmUsed;
    
public SafeGssNameHandle TargetName { get; }
    
public bool IsNtlmUsed { get; }
    
public SafeGssContextHandle GssContext { get; }
    public SafeDeleteNegoContext(SafeFreeNegoCredentials credential, string targetName);
    public SafeGssNameHandle get_TargetName();
    public bool get_IsNtlmUsed();
    public SafeGssContextHandle get_GssContext();
    public void SetGssContext(SafeGssContextHandle context);
    public void SetAuthenticationPackage(bool isNtlmUsed);
    protected virtual void Dispose(bool disposing);
}
internal abstract class System.Net.Security.SafeFreeCredentials : SafeHandle {
    protected SafeFreeCredentials(IntPtr handle, bool ownsHandle);
}
internal class System.Net.Security.SafeFreeNegoCredentials : SafeFreeCredentials {
    
private SafeGssCredHandle _credential;
    
private bool _isNtlmOnly;
    
private string _userName;
    
private bool _isDefault;
    
public SafeGssCredHandle GssCredential { get; }
    
public bool IsNtlmOnly { get; }
    
public string UserName { get; }
    
public bool IsDefault { get; }
    
public bool IsInvalid { get; }
    public SafeFreeNegoCredentials(bool isNtlmOnly, string username, string password, string domain);
    public SafeGssCredHandle get_GssCredential();
    public bool get_IsNtlmOnly();
    public string get_UserName();
    public bool get_IsDefault();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class System.Net.Security.SecurityBuffer : object {
    
public int size;
    
public SecurityBufferType type;
    
public Byte[] token;
    
public SafeHandle unmanagedToken;
    
public int offset;
    public SecurityBuffer(Byte[] data, int offset, int size, SecurityBufferType tokentype);
    public SecurityBuffer(Byte[] data, SecurityBufferType tokentype);
    public SecurityBuffer(int size, SecurityBufferType tokentype);
    public SecurityBuffer(ChannelBinding binding);
}
internal enum System.Net.Security.SecurityBufferType : Enum {
    
public int value__;
    
public static SecurityBufferType SECBUFFER_EMPTY;
    
public static SecurityBufferType SECBUFFER_DATA;
    
public static SecurityBufferType SECBUFFER_TOKEN;
    
public static SecurityBufferType SECBUFFER_PKG_PARAMS;
    
public static SecurityBufferType SECBUFFER_MISSING;
    
public static SecurityBufferType SECBUFFER_EXTRA;
    
public static SecurityBufferType SECBUFFER_STREAM_TRAILER;
    
public static SecurityBufferType SECBUFFER_STREAM_HEADER;
    
public static SecurityBufferType SECBUFFER_PADDING;
    
public static SecurityBufferType SECBUFFER_STREAM;
    
public static SecurityBufferType SECBUFFER_CHANNEL_BINDINGS;
    
public static SecurityBufferType SECBUFFER_TARGET_HOST;
    
public static SecurityBufferType SECBUFFER_ALERT;
    
public static SecurityBufferType SECBUFFER_APPLICATION_PROTOCOLS;
    
public static SecurityBufferType SECBUFFER_READONLY;
    
public static SecurityBufferType SECBUFFER_READONLY_WITH_CHECKSUM;
}
internal class System.Net.SecurityStatusPal : ValueType {
    
public SecurityStatusPalErrorCode ErrorCode;
    
public Exception Exception;
    public SecurityStatusPal(SecurityStatusPalErrorCode errorCode, Exception exception);
    public virtual string ToString();
}
internal enum System.Net.SecurityStatusPalErrorCode : Enum {
    
public int value__;
    
public static SecurityStatusPalErrorCode NotSet;
    
public static SecurityStatusPalErrorCode OK;
    
public static SecurityStatusPalErrorCode ContinueNeeded;
    
public static SecurityStatusPalErrorCode CompleteNeeded;
    
public static SecurityStatusPalErrorCode CompAndContinue;
    
public static SecurityStatusPalErrorCode ContextExpired;
    
public static SecurityStatusPalErrorCode CredentialsNeeded;
    
public static SecurityStatusPalErrorCode Renegotiate;
    
public static SecurityStatusPalErrorCode OutOfMemory;
    
public static SecurityStatusPalErrorCode InvalidHandle;
    
public static SecurityStatusPalErrorCode Unsupported;
    
public static SecurityStatusPalErrorCode TargetUnknown;
    
public static SecurityStatusPalErrorCode InternalError;
    
public static SecurityStatusPalErrorCode PackageNotFound;
    
public static SecurityStatusPalErrorCode NotOwner;
    
public static SecurityStatusPalErrorCode CannotInstall;
    
public static SecurityStatusPalErrorCode InvalidToken;
    
public static SecurityStatusPalErrorCode CannotPack;
    
public static SecurityStatusPalErrorCode QopNotSupported;
    
public static SecurityStatusPalErrorCode NoImpersonation;
    
public static SecurityStatusPalErrorCode LogonDenied;
    
public static SecurityStatusPalErrorCode UnknownCredentials;
    
public static SecurityStatusPalErrorCode NoCredentials;
    
public static SecurityStatusPalErrorCode MessageAltered;
    
public static SecurityStatusPalErrorCode OutOfSequence;
    
public static SecurityStatusPalErrorCode NoAuthenticatingAuthority;
    
public static SecurityStatusPalErrorCode IncompleteMessage;
    
public static SecurityStatusPalErrorCode IncompleteCredentials;
    
public static SecurityStatusPalErrorCode BufferNotEnough;
    
public static SecurityStatusPalErrorCode WrongPrincipal;
    
public static SecurityStatusPalErrorCode TimeSkew;
    
public static SecurityStatusPalErrorCode UntrustedRoot;
    
public static SecurityStatusPalErrorCode IllegalMessage;
    
public static SecurityStatusPalErrorCode CertUnknown;
    
public static SecurityStatusPalErrorCode CertExpired;
    
public static SecurityStatusPalErrorCode AlgorithmMismatch;
    
public static SecurityStatusPalErrorCode SecurityQosFailed;
    
public static SecurityStatusPalErrorCode SmartcardLogonRequired;
    
public static SecurityStatusPalErrorCode UnsupportedPreauth;
    
public static SecurityStatusPalErrorCode BadBinding;
    
public static SecurityStatusPalErrorCode DowngradeDetected;
}
[FlagsAttribute]
internal enum System.Net.ThreadKinds : Enum {
    
public int value__;
    
public static ThreadKinds Unknown;
    
public static ThreadKinds User;
    
public static ThreadKinds System;
    
public static ThreadKinds Sync;
    
public static ThreadKinds Async;
    
public static ThreadKinds Timer;
    
public static ThreadKinds CompletionPort;
    
public static ThreadKinds Worker;
    
public static ThreadKinds Finalization;
    
public static ThreadKinds Other;
    
public static ThreadKinds OwnerMask;
    
public static ThreadKinds SyncMask;
    
public static ThreadKinds SourceMask;
    
public static ThreadKinds SafeSources;
    
public static ThreadKinds ThreadPool;
}
internal static class System.NotImplemented : object {
    
internal static Exception ByDesign { get; }
    internal static Exception get_ByDesign();
    internal static Exception ByDesignWithMessage(string message);
    internal static Exception ActiveIssue(string issue);
}
internal class System.Runtime.CompilerServices.FriendAccessAllowedAttribute : Attribute {
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
internal abstract class System.Xml.BaseRegionIterator : BaseTreeIterator {
    internal BaseRegionIterator(DataSetMapper mapper);
}
internal abstract class System.Xml.BaseTreeIterator : object {
    
protected DataSetMapper mapper;
    
internal XmlNode CurrentNode { get; }
    internal BaseTreeIterator(DataSetMapper mapper);
    internal abstract virtual XmlNode get_CurrentNode();
    internal abstract virtual bool Next();
    internal abstract virtual bool NextRight();
    internal bool NextRowElement();
    internal bool NextRightRowElement();
    internal bool OnRowElement();
}
internal class System.Xml.DataDocumentXPathNavigator : XPathNavigator {
    
private XPathNodePointer _curNode;
    
private XmlDataDocument _doc;
    
private XPathNodePointer _temp;
    
internal XPathNodePointer CurNode { get; }
    
internal XmlDataDocument Document { get; }
    
public XPathNodeType NodeType { get; }
    
public string LocalName { get; }
    
public string NamespaceURI { get; }
    
public string Name { get; }
    
public string Prefix { get; }
    
public string Value { get; }
    
public string BaseURI { get; }
    
public string XmlLang { get; }
    
public bool IsEmptyElement { get; }
    
public XmlNameTable NameTable { get; }
    
public bool HasAttributes { get; }
    
public bool HasChildren { get; }
    internal DataDocumentXPathNavigator(XmlDataDocument doc, XmlNode node);
    private DataDocumentXPathNavigator(DataDocumentXPathNavigator other);
    public virtual XPathNavigator Clone();
    internal XPathNodePointer get_CurNode();
    internal XmlDataDocument get_Document();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual string get_XmlLang();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool get_HasChildren();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    private sealed virtual override XmlNode System.Xml.IHasXmlNode.GetNode();
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
}
internal class System.Xml.DataPointer : object {
    
private XmlDataDocument _doc;
    
private XmlNode _node;
    
private DataColumn _column;
    
private bool _fOnValue;
    
private bool _bNeedFoliate;
    
private bool _isInUse;
    
private DataRow Row { get; }
    
internal int AttributeCount { get; }
    
internal XmlNodeType NodeType { get; }
    
internal string LocalName { get; }
    
internal string NamespaceURI { get; }
    
internal string Name { get; }
    
internal string Prefix { get; }
    
internal string Value { get; }
    
internal bool IsEmptyElement { get; }
    
internal bool IsDefault { get; }
    
internal string PublicId { get; }
    
internal string SystemId { get; }
    
internal string InternalSubset { get; }
    
internal XmlDeclaration Declaration { get; }
    
internal string Encoding { get; }
    
internal string Standalone { get; }
    
internal string Version { get; }
    internal DataPointer(XmlDataDocument doc, XmlNode node);
    internal DataPointer(DataPointer pointer);
    internal void AddPointer();
    private XmlBoundElement GetRowElement();
    private DataRow get_Row();
    private static bool IsFoliated(XmlNode node);
    internal void MoveTo(DataPointer pointer);
    private void MoveTo(XmlNode node);
    private void MoveTo(XmlNode node, DataColumn column, bool fOnValue);
    private DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute, bool fNulls);
    private DataColumn NthColumn(DataRow row, bool fAttribute, int iColumn, bool fNulls);
    private int ColumnCount(DataRow row, bool fAttribute, bool fNulls);
    internal bool MoveToFirstChild();
    internal bool MoveToNextSibling();
    internal bool MoveToParent();
    internal bool MoveToOwnerElement();
    internal int get_AttributeCount();
    internal bool MoveToAttribute(int i);
    internal XmlNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_NamespaceURI();
    internal string get_Name();
    private bool IsLocalNameEmpty(XmlNodeType nt);
    internal string get_Prefix();
    internal string get_Value();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col);
    internal XmlNode GetNode();
    internal bool get_IsEmptyElement();
    internal bool get_IsDefault();
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    internal void RealFoliate();
    internal string get_PublicId();
    internal string get_SystemId();
    internal string get_InternalSubset();
    internal XmlDeclaration get_Declaration();
    internal string get_Encoding();
    internal string get_Standalone();
    internal string get_Version();
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
    internal void SetNoLongerUse();
}
internal class System.Xml.DataSetMapper : object {
    
private Hashtable _tableSchemaMap;
    
private Hashtable _columnSchemaMap;
    
private XmlDataDocument _doc;
    
private DataSet _dataSet;
    
internal static string strReservedXmlns;
    internal void SetupMapping(XmlDataDocument xd, DataSet ds);
    internal bool IsMapped();
    internal DataTable SearchMatchingTableSchema(string localName, string namespaceURI);
    internal DataTable SearchMatchingTableSchema(XmlBoundElement rowElem, XmlBoundElement elem);
    internal DataColumn GetColumnSchemaForNode(XmlBoundElement rowElem, XmlNode node);
    internal DataTable GetTableSchemaForElement(XmlElement elem);
    internal DataTable GetTableSchemaForElement(XmlBoundElement be);
    internal static bool IsNotMapped(DataColumn c);
    internal DataRow GetRowFromElement(XmlElement e);
    internal DataRow GetRowFromElement(XmlBoundElement be);
    internal bool GetRegion(XmlNode node, XmlBoundElement& rowElem);
    internal bool IsRegionRadical(XmlBoundElement rowElem);
    private void AddTableSchema(DataTable table);
    private void AddColumnSchema(DataColumn col);
    private static object GetIdentity(string localName, string namespaceURI);
    private bool IsNextColumn(DataColumnCollection columns, Int32& iColumn, DataColumn col);
}
internal enum System.Xml.ElementState : Enum {
    
public int value__;
    
public static ElementState None;
    
public static ElementState Defoliated;
    
public static ElementState WeakFoliation;
    
public static ElementState StrongFoliation;
    
public static ElementState Foliating;
    
public static ElementState Defoliating;
}
internal interface System.Xml.IXmlDataVirtualNode {
    public abstract virtual bool IsOnNode(XmlNode nodeToCheck);
    public abstract virtual bool IsOnColumn(DataColumn col);
    public abstract virtual bool IsInUse();
    public abstract virtual void OnFoliated(XmlNode foliatedNode);
}
internal class System.Xml.RegionIterator : BaseRegionIterator {
    
private XmlBoundElement _rowElement;
    
private XmlNode _currentNode;
    
internal XmlNode CurrentNode { get; }
    internal RegionIterator(XmlBoundElement rowElement);
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
    internal bool NextInitialTextLikeNodes(String& value);
    private static string GetInitialTextFromNodes(XmlNode& n);
}
internal class System.Xml.TreeIterator : BaseTreeIterator {
    
private XmlNode _nodeTop;
    
private XmlNode _currentNode;
    
internal XmlNode CurrentNode { get; }
    internal TreeIterator(XmlNode nodeTop);
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
}
internal class System.Xml.XmlBoundElement : XmlElement {
    
private DataRow _row;
    
private ElementState _state;
    
public XmlAttributeCollection Attributes { get; }
    
public bool HasAttributes { get; }
    
public XmlNode FirstChild { get; }
    
internal XmlNode SafeFirstChild { get; }
    
public XmlNode LastChild { get; }
    
public XmlNode PreviousSibling { get; }
    
internal XmlNode SafePreviousSibling { get; }
    
public XmlNode NextSibling { get; }
    
internal XmlNode SafeNextSibling { get; }
    
public bool HasChildNodes { get; }
    
public string InnerXml { get; public set; }
    
internal DataRow Row { get; internal set; }
    
internal bool IsFoliated { get; }
    
internal ElementState ElementState { get; internal set; }
    internal XmlBoundElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual XmlNode get_FirstChild();
    internal XmlNode get_SafeFirstChild();
    public virtual XmlNode get_LastChild();
    public virtual XmlNode get_PreviousSibling();
    internal XmlNode get_SafePreviousSibling();
    public virtual XmlNode get_NextSibling();
    internal XmlNode get_SafeNextSibling();
    public virtual bool get_HasChildNodes();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal void RemoveAllChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    internal DataRow get_Row();
    internal void set_Row(DataRow value);
    internal bool get_IsFoliated();
    internal ElementState get_ElementState();
    internal void set_ElementState(ElementState value);
    internal void Foliate(ElementState newState);
    private void AutoFoliate();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    private void WriteRootBoundElementTo(DataPointer dp, XmlWriter w);
    private static void WriteBoundElementTo(DataPointer dp, XmlWriter w);
    private static void WriteBoundElementContentTo(DataPointer dp, XmlWriter w);
    private static void WriteTo(DataPointer dp, XmlWriter w);
    public virtual XmlNodeList GetElementsByTagName(string name);
}
[ObsoleteAttribute("XmlDataDocument class will be removed in a future release.")]
public class System.Xml.XmlDataDocument : XmlDocument {
    
private DataSet _dataSet;
    
private DataSetMapper _mapper;
    
internal Hashtable _pointers;
    
private int _countAddPointer;
    
private ArrayList _columnChangeList;
    
private DataRowState _rollbackState;
    
private bool _fBoundToDataSet;
    
private bool _fBoundToDocument;
    
private bool _fDataRowCreatedSpecial;
    
private bool _ignoreXmlEvents;
    
private bool _ignoreDataSetEvents;
    
private bool _isFoliationEnabled;
    
private bool _optimizeStorage;
    
private ElementState _autoFoliationState;
    
private bool _fAssociateDataRow;
    
private object _foliationLock;
    
internal static string XSI_NIL;
    
internal static string XSI;
    
private bool _bForceExpandEntity;
    
internal XmlAttribute _attrXml;
    
internal bool _bLoadFromDataSet;
    
internal bool _bHasXSINIL;
    
internal ElementState AutoFoliationState { get; internal set; }
    
public DataSet DataSet { get; }
    
internal bool IgnoreXmlEvents { get; internal set; }
    
internal bool IgnoreDataSetEvents { get; internal set; }
    
internal bool IsFoliationEnabled { get; internal set; }
    
internal DataSetMapper Mapper { get; }
    public XmlDataDocument(DataSet dataset);
    internal XmlDataDocument(XmlImplementation imp);
    internal void AddPointer(IXmlDataVirtualNode pointer);
    [ConditionalAttribute("DEBUG")]
internal void AssertPointerPresent(IXmlDataVirtualNode pointer);
    private void AttachDataSet(DataSet ds);
    internal void SyncRows(DataRow parentRow, XmlNode node, bool fAddRowsToTable);
    internal void SyncTree(XmlNode node);
    internal ElementState get_AutoFoliationState();
    internal void set_AutoFoliationState(ElementState value);
    private void BindForLoad();
    private void Bind(bool fLoadFromDataSet);
    internal void Bind(DataRow r, XmlBoundElement e);
    private void BindSpecialListeners();
    private void UnBindSpecialListeners();
    private void BindListeners();
    private void BindToDataSet();
    private void BindToDocument();
    private void BindToTable(DataTable t);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public DataSet get_DataSet();
    private void DefoliateRegion(XmlBoundElement rowElem);
    private XmlElement EnsureDocumentElement();
    private XmlElement EnsureNonRowDocumentElement();
    private XmlElement DemoteDocumentElement();
    private void EnsurePopulatedMode();
    private void FixNestedChildren(DataRow row, XmlElement rowElement);
    internal void Foliate(XmlBoundElement node, ElementState newState);
    private void Foliate(XmlElement element);
    private void FoliateIfDataPointers(DataRow row, XmlElement rowElement);
    private void EnsureFoliation(XmlBoundElement rowElem, ElementState foliation);
    private void ForceFoliation(XmlBoundElement node, ElementState newState);
    private XmlNode GetColumnInsertAfterLocation(DataRow row, DataColumn col, XmlBoundElement rowElement);
    private ArrayList GetNestedChildRelations(DataRow row);
    private DataRow GetNestedParent(DataRow row);
    private static DataRelation GetNestedParentRelation(DataRow row);
    private DataColumn GetTextOnlyColumn(DataRow row);
    public DataRow GetRowFromElement(XmlElement e);
    private XmlNode GetRowInsertBeforeLocation(DataRow row, XmlElement rowElement, XmlNode parentElement);
    public XmlElement GetElementFromRow(DataRow r);
    internal bool HasPointers(XmlNode node);
    internal bool get_IgnoreXmlEvents();
    internal void set_IgnoreXmlEvents(bool value);
    internal bool get_IgnoreDataSetEvents();
    internal void set_IgnoreDataSetEvents(bool value);
    private bool IsFoliated(XmlElement element);
    private bool IsFoliated(XmlBoundElement be);
    internal bool get_IsFoliationEnabled();
    internal void set_IsFoliationEnabled(bool value);
    internal XmlNode CloneTree(DataPointer other);
    private XmlNode CloneTreeInternal(DataPointer other);
    public virtual XmlNode CloneNode(bool deep);
    private XmlNode CloneNode(DataPointer dp);
    internal static bool IsTextLikeNode(XmlNode n);
    internal bool IsNotMapped(DataColumn c);
    private bool IsSame(DataColumn c, int recNo1, int recNo2);
    internal bool IsTextOnly(DataColumn c);
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    private void LoadDataSetFromTree();
    private void LoadTreeFromDataSet(DataSet ds);
    private void LoadRows(XmlBoundElement rowElem, XmlNode node);
    internal DataSetMapper get_Mapper();
    internal void OnDataRowCreated(object oDataSet, DataRow row);
    internal void OnClearCalled(object oDataSet, DataTable table);
    internal void OnDataRowCreatedSpecial(object oDataSet, DataRow row);
    internal void OnNewRow(DataRow row);
    private XmlBoundElement AttachBoundElementToDataRow(DataRow row);
    private bool NeedXSI_NilAttr(DataRow row);
    private void OnAddRow(DataRow row);
    private void OnColumnValueChanged(DataRow row, DataColumn col, XmlBoundElement rowElement);
    private void OnColumnChanged(object sender, DataColumnChangeEventArgs args);
    private void OnColumnValuesChanged(DataRow row, XmlBoundElement rowElement);
    private void OnDeleteRow(DataRow row, XmlBoundElement rowElement);
    private void OnDeletingRow(DataRow row, XmlBoundElement rowElement);
    private void OnFoliated(XmlNode node);
    private DataColumn FindAssociatedParentColumn(DataRelation relation, DataColumn childCol);
    private void OnNestedParentChange(DataRow child, XmlBoundElement childElement, DataColumn childCol);
    private void OnNodeChanged(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeChanging(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeInserted(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeInserting(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemoved(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemoving(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemovedFromTree(XmlNode node, XmlNode oldParent);
    private void OnNodeRemovedFromFragment(XmlNode node, XmlNode oldParent);
    private void OnRowChanged(object sender, DataRowChangeEventArgs args);
    private void OnRowChanging(object sender, DataRowChangeEventArgs args);
    private void OnDataSetPropertyChanging(object oDataSet, PropertyChangedEventArgs args);
    private void OnColumnPropertyChanging(object oColumn, PropertyChangedEventArgs args);
    private void OnTablePropertyChanging(object oTable, PropertyChangedEventArgs args);
    private void OnTableColumnsChanging(object oColumnsCollection, CollectionChangeEventArgs args);
    private void OnDataSetTablesChanging(object oTablesCollection, CollectionChangeEventArgs args);
    private void OnDataSetRelationsChanging(object oRelationsCollection, CollectionChangeEventArgs args);
    private void OnRelationPropertyChanging(object oRelationsCollection, PropertyChangedEventArgs args);
    private void OnUndeleteRow(DataRow row, XmlElement rowElement);
    private void PromoteChild(XmlNode child, XmlNode prevSibling);
    private void PromoteInnerRegions(XmlNode parent);
    private void PromoteNonValueChildren(XmlNode parent);
    private void RemoveInitialTextNodes(XmlNode node);
    private void ReplaceInitialChildText(XmlNode parent, string value);
    internal XmlNode SafeFirstChild(XmlNode n);
    internal XmlNode SafeNextSibling(XmlNode n);
    internal XmlNode SafePreviousSibling(XmlNode n);
    internal static void SetRowValueToNull(DataRow row, DataColumn col);
    internal static void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText);
    private void SynchronizeRowFromRowElement(XmlBoundElement rowElement);
    private void SynchronizeRowFromRowElement(XmlBoundElement rowElement, ArrayList rowElemList);
    private void SynchronizeRowFromRowElementEx(XmlBoundElement rowElement, ArrayList rowElemList);
    private void UpdateAllColumns(DataRow row, XmlBoundElement rowElement);
    private void Init();
    private void Init(DataSet ds);
    private bool IsConnected(XmlNode node);
    private bool IsRowLive(DataRow row);
    private static void SetNestedParentRow(DataRow childRow, DataRow parentRow);
    private void OnNodeInsertedInTree(XmlNode node);
    private void OnNodeInsertedInFragment(XmlNode node);
    private void OnRowElementInsertedInTree(XmlBoundElement rowElem, ArrayList rowElemList);
    private void EnsureDisconnectedDataRow(XmlBoundElement rowElem);
    private void OnNonRowElementInsertedInTree(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList);
    private void OnNonRowElementInsertedInFragment(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList);
    private void SetNestedParentRegion(XmlBoundElement childRowElem);
    private void SetNestedParentRegion(XmlBoundElement childRowElem, XmlBoundElement parentRowElem);
    internal static bool IsTextNode(XmlNodeType nt);
    protected virtual XPathNavigator CreateNavigator(XmlNode node);
    [ConditionalAttribute("DEBUG")]
private void AssertLiveRows(XmlNode node);
    [ConditionalAttribute("DEBUG")]
private void AssertNonLiveRows(XmlNode node);
    public virtual XmlElement GetElementById(string elemId);
    public virtual XmlNodeList GetElementsByTagName(string name);
    private DataTable[] OrderTables(DataSet ds);
    private bool IsSelfRelatedDataTable(DataTable rootTable);
    private bool TablesAreOrdered(DataSet ds);
}
internal class System.Xml.XmlDataImplementation : XmlImplementation {
    public virtual XmlDocument CreateDocument();
}
internal class System.Xml.XPathNodePointer : object {
    
private WeakReference _owner;
    
private XmlDataDocument _doc;
    
private XmlNode _node;
    
private DataColumn _column;
    
private bool _fOnValue;
    
internal XmlBoundElement _parentOfNS;
    
internal static Int32[] s_xmlNodeType_To_XpathNodeType_Map;
    
internal static string StrReservedXmlns;
    
internal static string StrReservedXml;
    
internal static string StrXmlNS;
    
private bool _bNeedFoliate;
    
internal bool IsEmptyElement { get; }
    
internal XPathNodeType NodeType { get; }
    
internal string LocalName { get; }
    
internal string Name { get; }
    
internal string NamespaceURI { get; }
    
internal string Prefix { get; }
    
internal string Value { get; }
    
internal string InnerText { get; }
    
internal string BaseURI { get; }
    
internal string XmlLang { get; }
    
private DataRow Row { get; }
    
internal int AttributeCount { get; }
    
internal bool HasChildren { get; }
    
internal XmlNode Node { get; }
    
internal XmlDataDocument Document { get; }
    private static XPathNodePointer();
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node);
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XPathNodePointer pointer);
    private XPathNodePointer(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node, DataColumn c, bool bOnValue, XmlBoundElement parentOfNS);
    private XPathNodeType DecideXPNodeTypeForTextNodes(XmlNode node);
    private XPathNodeType ConvertNodeType(XmlNode node);
    private bool IsNamespaceNode(XmlNodeType nt, string ns);
    internal XPathNodePointer Clone(DataDocumentXPathNavigator owner);
    internal bool get_IsEmptyElement();
    internal XPathNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_Name();
    internal string get_NamespaceURI();
    internal string get_Prefix();
    internal string get_Value();
    internal string get_InnerText();
    internal string get_BaseURI();
    internal string get_XmlLang();
    private XmlBoundElement GetRowElement();
    private DataRow get_Row();
    internal bool MoveTo(XPathNodePointer pointer);
    private void MoveTo(XmlNode node);
    private void MoveTo(XmlNode node, DataColumn column, bool fOnValue);
    private bool IsFoliated(XmlNode node);
    private int ColumnCount(DataRow row, bool fAttribute);
    internal int get_AttributeCount();
    internal DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute);
    internal DataColumn PreviousColumn(DataRow row, DataColumn col, bool fAttribute);
    internal bool MoveToAttribute(string localName, string namespaceURI);
    internal bool MoveToNextAttribute(bool bFirst);
    private bool IsValidChild(XmlNode parent, XmlNode child);
    private bool IsValidChild(XmlNode parent, DataColumn c);
    internal bool MoveToNextSibling();
    internal bool MoveToPreviousSibling();
    internal bool MoveToFirst();
    internal bool get_HasChildren();
    internal bool MoveToFirstChild();
    internal bool MoveToParent();
    private XmlNode GetParent(XmlNode node);
    internal void MoveToRoot();
    internal bool IsSamePosition(XPathNodePointer pointer);
    private XmlNodeOrder CompareNamespacePosition(XPathNodePointer other);
    private static XmlNode GetRoot(XmlNode node, Int32& depth);
    internal XmlNodeOrder ComparePosition(XPathNodePointer other);
    internal XmlNode get_Node();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col);
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    private void RealFoliate();
    private string GetNamespace(XmlBoundElement be, string name);
    internal string GetNamespace(string name);
    internal bool MoveToNamespace(string name);
    private bool MoveToNextNamespace(XmlBoundElement be, DataColumn col, XmlAttribute curAttr);
    internal bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    private bool DuplicateNS(XmlBoundElement endElem, string lname);
    internal bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    internal XmlDataDocument get_Document();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
}
internal static class ThisAssembly : object {
    
public static string InformationalVersion;
}
internal class Unity.ThrowStub : ObjectDisposedException {
    public static void ThrowNotSupportedException();
}
