internal AssemblyRef : object {
internal string SystemConfiguration
internal string System
public string EcmaPublicKey
public string FrameworkPublicKeyFull
public string FrameworkPublicKeyFull2
public string MicrosoftPublicKey
public string MicrosoftJScript
public string MicrosoftVSDesigner
public string SystemData
public string SystemDesign
public string SystemDrawing
public string SystemWeb
public string SystemWebExtensions
public string SystemWindowsForms
}
internal Bid : object {
private string dllName
private IntPtr __noData
private object _setBitsLock
private IntPtr modID
private ApiGroup modFlags
private string modIdentity
private CtrlCB ctrlCallback
private BindingCookie cookieObject
private GCHandle hCookie
private IntPtr __defaultCmdSpace
private int BidVer
private UInt32 configFlags
private AutoInit ai
internal bool TraceOn
internal bool ScopeOn
internal bool AdvancedOn
internal IntPtr NoData
internal IntPtr ID
internal bool IsInitialized
internal IntPtr DefaultCmdSpace
internal void PoolerTrace(string fmtPrintfW, int a1)
internal void PoolerTrace(string fmtPrintfW, int a1, int a2)
internal void PoolerTrace(string fmtPrintfW, int a1, int a2, int a3)
internal void PoolerTrace(string fmtPrintfW, int a1, int a2, int a3, int a4)
internal void PoolerTrace(string fmtPrintfW, int a1, Exception a2)
internal void PoolerScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2, int a2)
internal void NotificationsScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string fmtPrintfW2, string fmtPrintfW3, int a4)
internal void NotificationsTrace(string fmtPrintfW)
internal void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2)
internal void NotificationsTrace(string fmtPrintfW, int a1)
internal void NotificationsTrace(string fmtPrintfW, bool a1)
internal void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2, int a1)
internal void NotificationsTrace(string fmtPrintfW, int a1, string fmtPrintfW2)
internal void NotificationsTrace(string fmtPrintfW, int a1, int a2)
internal void NotificationsTrace(string fmtPrintfW, int a1, bool a2)
internal void NotificationsTrace(string fmtPrintfW, string a1, string a2)
internal void NotificationsTrace(string fmtPrintfW, string fmtPrintfW2, string fmtPrintfW3, int a1)
internal void NotificationsTrace(string fmtPrintfW, bool a1, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4)
internal void NotificationsTrace(string fmtPrintfW, int a1, string fmtPrintfW2, string fmtPrintfW3, string fmtPrintfW4)
internal void CorrelationTrace(string fmtPrintfW, int a1)
internal void CorrelationTrace(string fmtPrintfW)
internal void CorrelationTrace(string fmtPrintfW, int a1, int a2)
internal void TraceSqlReturn(string fmtPrintfW, RetCode a1)
internal void TraceSqlReturn(string fmtPrintfW, RetCode a1, string a2)
internal void Trace(string fmtPrintfW, OleDbHResult a1)
internal void Trace(string fmtPrintfW, OleDbHResult a1, string a2)
internal void Trace(string fmtPrintfW, OleDbHResult a1, IntPtr a2)
internal void Trace(string fmtPrintfW, OleDbHResult a1, int a2)
internal void Trace(string fmtPrintfW, string a1, string a2)
internal void Trace(string fmtPrintfW, int a1, string a2, bool a3)
internal void Trace(string fmtPrintfW, int a1, int a2, string a3, string a4, int a5)
internal void Trace(string fmtPrintfW, int a1, int a2, long a3, UInt32 a4, int a5, UInt32 a6, UInt32 a7)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, Guid a2)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2, int a3)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, bool a2, int a3)
internal void Trace(string fmtPrintfW, int a1, string a2)
internal void Trace(string fmtPrintfW, IntPtr a1)
internal void Trace(string fmtPrintfW, int a1)
internal void Trace(string fmtPrintfW, int a1, int a2)
internal void Trace(string fmtPrintfW, int a1, IntPtr a2, IntPtr a3)
internal void Trace(string fmtPrintfW, int a1, IntPtr a2)
internal void Trace(string fmtPrintfW, int a1, string a2, string a3)
internal void Trace(string fmtPrintfW, int a1, string a2, int a3)
internal void Trace(string fmtPrintfW, int a1, string a2, string a3, int a4)
internal void Trace(string fmtPrintfW, int a1, int a2, int a3, string a4, string a5, int a6)
internal void Trace(string fmtPrintfW, int a1, int a2, int a3)
internal void Trace(string fmtPrintfW, int a1, bool a2)
internal void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4)
internal void Trace(string fmtPrintfW, int a1, int a2, bool a3)
internal void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4, int a5, int a6, int a7)
internal void Trace(string fmtPrintfW, int a1, string a2, int a3, int a4, bool a5)
internal void Trace(string fmtPrintfW, int a1, long a2)
internal void Trace(string fmtPrintfW, int a1, int a2, long a3)
internal void Trace(string fmtPrintfW, int a1, string a2, string a3, string a4, int a5, long a6)
internal void Trace(string fmtPrintfW, int a1, long a2, int a3, int a4)
internal void Trace(string fmtPrintfW, int a1, int a2, long a3, int a4)
internal void Trace(string fmtPrintfW, int a1, int a2, int a3, int a4, string a5, string a6, string a7, int a8)
internal void Trace(string fmtPrintfW, int a1, int a2, string a3, string a4)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, bool a2)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, string a3)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, string a2, bool a3)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, bool a3)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, int a3, string a4)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, int a3)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2, bool a3, int a4)
internal bool get_TraceOn()
internal bool get_ScopeOn()
internal bool get_AdvancedOn()
internal bool IsOn(ApiGroup flag)
internal IntPtr get_NoData()
internal IntPtr get_ID()
internal bool get_IsInitialized()
internal void PutStr(string str)
internal void Trace(string strConst)
internal void TraceEx(UInt32 flags, string strConst)
internal void Trace(string fmtPrintfW, string a1)
internal void TraceEx(UInt32 flags, string fmtPrintfW, string a1)
internal void ScopeLeave(IntPtr& hScp)
internal void ScopeEnter(IntPtr& hScp, string strConst)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1)
internal void ScopeEnter(IntPtr& hScp, string fmtPrintfW, int a1, int a2)
internal void TraceBin(string constStrHeader, Byte[] buff, ushort length)
internal void TraceBinEx(Byte[] buff, ushort length)
internal ApiGroup SetApiGroupBits(ApiGroup mask, ApiGroup bits)
internal bool AddMetaText(string metaStr)
internal void DTRACE(string strConst)
internal void DTRACE(string clrFormatString, Object[] args)
internal void DASSERT(bool condition)
private void deterministicStaticInit()
internal IntPtr get_DefaultCmdSpace()
private string getIdentity(Module mod)
private string getAppDomainFriendlyName()
private string getModulePath(Module mod)
private void initEntryPoint()
private void doneEntryPoint()
private IntPtr internalInitialize()
}
internal BidArgumentTypeAttribute : Attribute {
public Type ArgumentType
public int Index
internal void .ctor(Type bidArgumentType)
internal void .ctor(Type bidArgumentType, int index)
}
internal BidIdentityAttribute : Attribute {
private string _identity
internal string IdentityString
internal void .ctor(string idStr)
internal string get_IdentityString()
}
internal BidMetaTextAttribute : Attribute {
private string _metaText
internal string MetaText
internal void .ctor(string str)
internal string get_MetaText()
}
internal BidMethodAttribute : Attribute {
private bool m_enabled
public bool Enabled
public bool get_Enabled()
public void set_Enabled(bool value)
}
internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Microsoft.SqlServer.Server.DataAccessKind : Enum {
public int value__
public DataAccessKind None
public DataAccessKind Read
}
internal Microsoft.SqlServer.Server.EMDEventType : Enum {
public int value__
public EMDEventType x_eet_Invalid
public EMDEventType x_eet_Insert
public EMDEventType x_eet_Update
public EMDEventType x_eet_Delete
public EMDEventType x_eet_Create_Table
public EMDEventType x_eet_Alter_Table
public EMDEventType x_eet_Drop_Table
public EMDEventType x_eet_Create_Index
public EMDEventType x_eet_Alter_Index
public EMDEventType x_eet_Drop_Index
public EMDEventType x_eet_Create_Stats
public EMDEventType x_eet_Update_Stats
public EMDEventType x_eet_Drop_Stats
public EMDEventType x_eet_Create_Secexpr
public EMDEventType x_eet_Drop_Secexpr
public EMDEventType x_eet_Create_Synonym
public EMDEventType x_eet_Drop_Synonym
public EMDEventType x_eet_Create_View
public EMDEventType x_eet_Alter_View
public EMDEventType x_eet_Drop_View
public EMDEventType x_eet_Create_Procedure
public EMDEventType x_eet_Alter_Procedure
public EMDEventType x_eet_Drop_Procedure
public EMDEventType x_eet_Create_Function
public EMDEventType x_eet_Alter_Function
public EMDEventType x_eet_Drop_Function
public EMDEventType x_eet_Create_Trigger
public EMDEventType x_eet_Alter_Trigger
public EMDEventType x_eet_Drop_Trigger
public EMDEventType x_eet_Create_Event_Notification
public EMDEventType x_eet_Drop_Event_Notification
public EMDEventType x_eet_Create_Type
public EMDEventType x_eet_Drop_Type
public EMDEventType x_eet_Create_Assembly
public EMDEventType x_eet_Alter_Assembly
public EMDEventType x_eet_Drop_Assembly
public EMDEventType x_eet_Create_User
public EMDEventType x_eet_Alter_User
public EMDEventType x_eet_Drop_User
public EMDEventType x_eet_Create_Role
public EMDEventType x_eet_Alter_Role
public EMDEventType x_eet_Drop_Role
public EMDEventType x_eet_Create_AppRole
public EMDEventType x_eet_Alter_AppRole
public EMDEventType x_eet_Drop_AppRole
public EMDEventType x_eet_Create_Schema
public EMDEventType x_eet_Alter_Schema
public EMDEventType x_eet_Drop_Schema
public EMDEventType x_eet_Create_Login
public EMDEventType x_eet_Alter_Login
public EMDEventType x_eet_Drop_Login
public EMDEventType x_eet_Create_MsgType
public EMDEventType x_eet_Alter_MsgType
public EMDEventType x_eet_Drop_MsgType
public EMDEventType x_eet_Create_Contract
public EMDEventType x_eet_Alter_Contract
public EMDEventType x_eet_Drop_Contract
public EMDEventType x_eet_Create_Queue
public EMDEventType x_eet_Alter_Queue
public EMDEventType x_eet_Drop_Queue
public EMDEventType x_eet_Create_Service
public EMDEventType x_eet_Alter_Service
public EMDEventType x_eet_Drop_Service
public EMDEventType x_eet_Create_Route
public EMDEventType x_eet_Alter_Route
public EMDEventType x_eet_Drop_Route
public EMDEventType x_eet_Grant_Statement
public EMDEventType x_eet_Deny_Statement
public EMDEventType x_eet_Revoke_Statement
public EMDEventType x_eet_Grant_Object
public EMDEventType x_eet_Deny_Object
public EMDEventType x_eet_Revoke_Object
public EMDEventType x_eet_Activation
public EMDEventType x_eet_Create_Binding
public EMDEventType x_eet_Alter_Binding
public EMDEventType x_eet_Drop_Binding
public EMDEventType x_eet_Create_XmlSchema
public EMDEventType x_eet_Alter_XmlSchema
public EMDEventType x_eet_Drop_XmlSchema
public EMDEventType x_eet_Create_HttpEndpoint
public EMDEventType x_eet_Alter_HttpEndpoint
public EMDEventType x_eet_Drop_HttpEndpoint
public EMDEventType x_eet_Create_Partition_Function
public EMDEventType x_eet_Alter_Partition_Function
public EMDEventType x_eet_Drop_Partition_Function
public EMDEventType x_eet_Create_Partition_Scheme
public EMDEventType x_eet_Alter_Partition_Scheme
public EMDEventType x_eet_Drop_Partition_Scheme
public EMDEventType x_eet_Create_Database
public EMDEventType x_eet_Alter_Database
public EMDEventType x_eet_Drop_Database
public EMDEventType x_eet_Trace_Start
public EMDEventType x_eet_Trace_End
}
public Microsoft.SqlServer.Server.Format : Enum {
public int value__
public Format Unknown
public Format Native
public Format UserDefined
}
public Microsoft.SqlServer.Server.IBinarySerialize {
public void Read(BinaryReader r)
public void Write(BinaryWriter w)
}
public Microsoft.SqlServer.Server.InvalidUdtException : SystemException {
internal void .ctor(string message)
internal void .ctor(string message, Exception innerException)
private void .ctor(SerializationInfo si, StreamingContext sc)
public void GetObjectData(SerializationInfo si, StreamingContext context)
internal InvalidUdtException Create(Type udtType, string resourceReason)
}
public Microsoft.SqlServer.Server.SqlDataRecord : object {
public int FieldCount
public object Item
public object Item
public void .ctor(SqlMetaData[] metaData)
public bool GetBoolean(int ordinal)
public byte GetByte(int ordinal)
public long GetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length)
public char GetChar(int ordinal)
public long GetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length)
public IDataReader GetData(int ordinal)
public string GetDataTypeName(int ordinal)
public DateTime GetDateTime(int ordinal)
public DateTimeOffset GetDateTimeOffset(int ordinal)
public decimal GetDecimal(int ordinal)
public double GetDouble(int ordinal)
public Type GetFieldType(int ordinal)
public float GetFloat(int ordinal)
public Guid GetGuid(int ordinal)
public short GetInt16(int ordinal)
public int GetInt32(int ordinal)
public long GetInt64(int ordinal)
public string GetName(int ordinal)
public int GetOrdinal(string name)
public SqlBinary GetSqlBinary(int ordinal)
public SqlBoolean GetSqlBoolean(int ordinal)
public SqlByte GetSqlByte(int ordinal)
public SqlBytes GetSqlBytes(int ordinal)
public SqlChars GetSqlChars(int ordinal)
public SqlDateTime GetSqlDateTime(int ordinal)
public SqlDecimal GetSqlDecimal(int ordinal)
public SqlDouble GetSqlDouble(int ordinal)
public Type GetSqlFieldType(int ordinal)
public SqlGuid GetSqlGuid(int ordinal)
public SqlInt16 GetSqlInt16(int ordinal)
public SqlInt32 GetSqlInt32(int ordinal)
public SqlInt64 GetSqlInt64(int ordinal)
public SqlMetaData GetSqlMetaData(int ordinal)
public SqlMoney GetSqlMoney(int ordinal)
public SqlSingle GetSqlSingle(int ordinal)
public SqlString GetSqlString(int ordinal)
public object GetSqlValue(int ordinal)
public int GetSqlValues(Object[] values)
public SqlXml GetSqlXml(int ordinal)
public string GetString(int ordinal)
public TimeSpan GetTimeSpan(int ordinal)
public object GetValue(int ordinal)
public int GetValues(Object[] values)
public void SetBoolean(int ordinal, bool value)
public void SetByte(int ordinal, byte value)
public void SetBytes(int ordinal, long fieldOffset, Byte[] buffer, int bufferOffset, int length)
public void SetChar(int ordinal, char value)
public void SetChars(int ordinal, long fieldOffset, Char[] buffer, int bufferOffset, int length)
public void SetDateTime(int ordinal, DateTime value)
public void SetDateTimeOffset(int ordinal, DateTimeOffset value)
public void SetDBNull(int ordinal)
public void SetDecimal(int ordinal, decimal value)
public void SetDouble(int ordinal, double value)
public void SetFloat(int ordinal, float value)
public void SetGuid(int ordinal, Guid value)
public void SetInt16(int ordinal, short value)
public void SetInt32(int ordinal, int value)
public void SetInt64(int ordinal, long value)
public void SetSqlBinary(int ordinal, SqlBinary value)
public void SetSqlBoolean(int ordinal, SqlBoolean value)
public void SetSqlByte(int ordinal, SqlByte value)
public void SetSqlBytes(int ordinal, SqlBytes value)
public void SetSqlChars(int ordinal, SqlChars value)
public void SetSqlDateTime(int ordinal, SqlDateTime value)
public void SetSqlDecimal(int ordinal, SqlDecimal value)
public void SetSqlDouble(int ordinal, SqlDouble value)
public void SetSqlGuid(int ordinal, SqlGuid value)
public void SetSqlInt16(int ordinal, SqlInt16 value)
public void SetSqlInt32(int ordinal, SqlInt32 value)
public void SetSqlInt64(int ordinal, SqlInt64 value)
public void SetSqlMoney(int ordinal, SqlMoney value)
public void SetSqlSingle(int ordinal, SqlSingle value)
public void SetSqlString(int ordinal, SqlString value)
public void SetSqlXml(int ordinal, SqlXml value)
public void SetString(int ordinal, string value)
public void SetTimeSpan(int ordinal, TimeSpan value)
public void SetValue(int ordinal, object value)
public int SetValues(Object[] values)
public bool IsDBNull(int ordinal)
public int get_FieldCount()
public object get_Item(string name)
public object get_Item(int ordinal)
}
public Microsoft.SqlServer.Server.SqlFacetAttribute : Attribute {
private bool m_IsFixedLength
private int m_MaxSize
private int m_Scale
private int m_Precision
private bool m_IsNullable
public bool IsFixedLength
public int MaxSize
public int Precision
public int Scale
public bool IsNullable
public bool get_IsFixedLength()
public void set_IsFixedLength(bool value)
public int get_MaxSize()
public void set_MaxSize(int value)
public int get_Precision()
public void set_Precision(int value)
public int get_Scale()
public void set_Scale(int value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
}
public Microsoft.SqlServer.Server.SqlFunctionAttribute : Attribute {
private bool m_fDeterministic
private DataAccessKind m_eDataAccess
private SystemDataAccessKind m_eSystemDataAccess
private bool m_fPrecise
private string m_fName
private string m_fTableDefinition
private string m_FillRowMethodName
public bool IsDeterministic
public DataAccessKind DataAccess
public SystemDataAccessKind SystemDataAccess
public bool IsPrecise
public string Name
public string TableDefinition
public string FillRowMethodName
public bool get_IsDeterministic()
public void set_IsDeterministic(bool value)
public DataAccessKind get_DataAccess()
public void set_DataAccess(DataAccessKind value)
public SystemDataAccessKind get_SystemDataAccess()
public void set_SystemDataAccess(SystemDataAccessKind value)
public bool get_IsPrecise()
public void set_IsPrecise(bool value)
public string get_Name()
public void set_Name(string value)
public string get_TableDefinition()
public void set_TableDefinition(string value)
public string get_FillRowMethodName()
public void set_FillRowMethodName(string value)
}
public Microsoft.SqlServer.Server.SqlMetaData : object {
private SqlCompareOptions compareOptions
private string databaseName
private long _localeId
private long maxLength
private string name
private byte precision
private byte scale
private string owningSchema
private string objectName
private SqlDbType _sqlDbType
private DbType _dbType
private Type type
private Dictionary`2<string, int> <>f__switch$map2
public SqlCompareOptions CompareOptions
public DbType DbType
public long LocaleId
public long Max
public long MaxLength
public string Name
public byte Precision
public byte Scale
public SqlDbType SqlDbType
public string XmlSchemaCollectionDatabase
public string XmlSchemaCollectionName
public string XmlSchemaCollectionOwningSchema
public string TypeName
public bool IsUniqueKey
public SortOrder SortOrder
public int SortOrdinal
public bool UseServerDefault
public void .ctor(string name, SqlDbType dbType)
public void .ctor(string name, SqlDbType dbType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, long maxLength, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, byte precision, byte scale, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, string database, string owningSchema, string objectName, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType, bool useServerDefault, bool isUniqueKey, SortOrder columnSortOrder, int sortOrdinal)
public void .ctor(string name, SqlDbType dbType, long maxLength)
public void .ctor(string name, SqlDbType dbType, Type userDefinedType)
public void .ctor(string name, SqlDbType dbType, byte precision, byte scale)
public void .ctor(string name, SqlDbType dbType, long maxLength, long locale, SqlCompareOptions compareOptions)
public void .ctor(string name, SqlDbType dbType, string database, string owningSchema, string objectName)
public void .ctor(string name, SqlDbType dbType, long maxLength, byte precision, byte scale, long locale, SqlCompareOptions compareOptions, Type userDefinedType)
public SqlCompareOptions get_CompareOptions()
public DbType get_DbType()
public long get_LocaleId()
public long get_Max()
public long get_MaxLength()
public string get_Name()
public byte get_Precision()
public byte get_Scale()
public SqlDbType get_SqlDbType()
public string get_XmlSchemaCollectionDatabase()
public string get_XmlSchemaCollectionName()
public string get_XmlSchemaCollectionOwningSchema()
public string get_TypeName()
public bool get_IsUniqueKey()
public SortOrder get_SortOrder()
public int get_SortOrdinal()
public bool get_UseServerDefault()
public bool Adjust(bool value)
public byte Adjust(byte value)
public Byte[] Adjust(Byte[] value)
public char Adjust(char value)
public Char[] Adjust(Char[] value)
public DateTime Adjust(DateTime value)
public DateTimeOffset Adjust(DateTimeOffset value)
public TimeSpan Adjust(TimeSpan value)
public decimal Adjust(decimal value)
public double Adjust(double value)
public Guid Adjust(Guid value)
public short Adjust(short value)
public int Adjust(int value)
public long Adjust(long value)
public object Adjust(object value)
public float Adjust(float value)
public SqlBinary Adjust(SqlBinary value)
public SqlBoolean Adjust(SqlBoolean value)
public SqlByte Adjust(SqlByte value)
public SqlBytes Adjust(SqlBytes value)
public SqlChars Adjust(SqlChars value)
public SqlDateTime Adjust(SqlDateTime value)
public SqlDecimal Adjust(SqlDecimal value)
public SqlDouble Adjust(SqlDouble value)
public SqlGuid Adjust(SqlGuid value)
public SqlInt16 Adjust(SqlInt16 value)
public SqlInt32 Adjust(SqlInt32 value)
public SqlInt64 Adjust(SqlInt64 value)
public SqlMoney Adjust(SqlMoney value)
public SqlSingle Adjust(SqlSingle value)
public SqlString Adjust(SqlString value)
public SqlXml Adjust(SqlXml value)
public string Adjust(string value)
public SqlMetaData InferFromValue(object value, string name)
}
public Microsoft.SqlServer.Server.SqlMethodAttribute : SqlFunctionAttribute {
private bool m_fCallOnNullInputs
private bool m_fMutator
private bool m_fInvokeIfReceiverIsNull
public bool OnNullCall
public bool IsMutator
public bool InvokeIfReceiverIsNull
public bool get_OnNullCall()
public void set_OnNullCall(bool value)
public bool get_IsMutator()
public void set_IsMutator(bool value)
public bool get_InvokeIfReceiverIsNull()
public void set_InvokeIfReceiverIsNull(bool value)
}
public Microsoft.SqlServer.Server.SqlProcedureAttribute : Attribute {
private string m_fName
public string Name
public string get_Name()
public void set_Name(string value)
}
public Microsoft.SqlServer.Server.SqlTriggerAttribute : Attribute {
private string m_fName
private string m_fTarget
private string m_fEvent
public string Name
public string Target
public string Event
public string get_Name()
public void set_Name(string value)
public string get_Target()
public void set_Target(string value)
public string get_Event()
public void set_Event(string value)
}
public Microsoft.SqlServer.Server.SqlTriggerContext : object {
private TriggerAction _triggerAction
private Boolean[] _columnsUpdated
private SqlXml _eventInstanceData
public int ColumnCount
public SqlXml EventData
public TriggerAction TriggerAction
internal void .ctor(TriggerAction triggerAction, Boolean[] columnsUpdated, SqlXml eventInstanceData)
public int get_ColumnCount()
public SqlXml get_EventData()
public TriggerAction get_TriggerAction()
public bool IsUpdatedColumn(int columnOrdinal)
}
public Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute : Attribute {
private int m_MaxByteSize
private bool m_fInvariantToDup
private bool m_fInvariantToNulls
private bool m_fInvariantToOrder
private bool m_fNullIfEmpty
private Format m_format
private string m_fName
public int MaxByteSizeValue
public int MaxByteSize
public bool IsInvariantToDuplicates
public bool IsInvariantToNulls
public bool IsInvariantToOrder
public bool IsNullIfEmpty
public Format Format
public string Name
public void .ctor(Format format)
public int get_MaxByteSize()
public void set_MaxByteSize(int value)
public bool get_IsInvariantToDuplicates()
public void set_IsInvariantToDuplicates(bool value)
public bool get_IsInvariantToNulls()
public void set_IsInvariantToNulls(bool value)
public bool get_IsInvariantToOrder()
public void set_IsInvariantToOrder(bool value)
public bool get_IsNullIfEmpty()
public void set_IsNullIfEmpty(bool value)
public Format get_Format()
public string get_Name()
public void set_Name(string value)
}
public Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute : Attribute {
private int m_MaxByteSize
private bool m_IsFixedLength
private bool m_IsByteOrdered
private Format m_format
private string m_fName
internal int YukonMaxByteSizeValue
private string m_ValidationMethodName
public int MaxByteSize
public bool IsFixedLength
public bool IsByteOrdered
public Format Format
public string ValidationMethodName
public string Name
public void .ctor(Format format)
public int get_MaxByteSize()
public void set_MaxByteSize(int value)
public bool get_IsFixedLength()
public void set_IsFixedLength(bool value)
public bool get_IsByteOrdered()
public void set_IsByteOrdered(bool value)
public Format get_Format()
public string get_ValidationMethodName()
public void set_ValidationMethodName(string value)
public string get_Name()
public void set_Name(string value)
}
public Microsoft.SqlServer.Server.SystemDataAccessKind : Enum {
public int value__
public SystemDataAccessKind None
public SystemDataAccessKind Read
}
public Microsoft.SqlServer.Server.TriggerAction : Enum {
public int value__
public TriggerAction Invalid
public TriggerAction Insert
public TriggerAction Update
public TriggerAction Delete
public TriggerAction CreateTable
public TriggerAction AlterTable
public TriggerAction DropTable
public TriggerAction CreateIndex
public TriggerAction AlterIndex
public TriggerAction DropIndex
public TriggerAction CreateSynonym
public TriggerAction DropSynonym
public TriggerAction CreateSecurityExpression
public TriggerAction DropSecurityExpression
public TriggerAction CreateView
public TriggerAction AlterView
public TriggerAction DropView
public TriggerAction CreateProcedure
public TriggerAction AlterProcedure
public TriggerAction DropProcedure
public TriggerAction CreateFunction
public TriggerAction AlterFunction
public TriggerAction DropFunction
public TriggerAction CreateTrigger
public TriggerAction AlterTrigger
public TriggerAction DropTrigger
public TriggerAction CreateEventNotification
public TriggerAction DropEventNotification
public TriggerAction CreateType
public TriggerAction DropType
public TriggerAction CreateAssembly
public TriggerAction AlterAssembly
public TriggerAction DropAssembly
public TriggerAction CreateUser
public TriggerAction AlterUser
public TriggerAction DropUser
public TriggerAction CreateRole
public TriggerAction AlterRole
public TriggerAction DropRole
public TriggerAction CreateAppRole
public TriggerAction AlterAppRole
public TriggerAction DropAppRole
public TriggerAction CreateSchema
public TriggerAction AlterSchema
public TriggerAction DropSchema
public TriggerAction CreateLogin
public TriggerAction AlterLogin
public TriggerAction DropLogin
public TriggerAction CreateMsgType
public TriggerAction DropMsgType
public TriggerAction CreateContract
public TriggerAction DropContract
public TriggerAction CreateQueue
public TriggerAction AlterQueue
public TriggerAction DropQueue
public TriggerAction CreateService
public TriggerAction AlterService
public TriggerAction DropService
public TriggerAction CreateRoute
public TriggerAction AlterRoute
public TriggerAction DropRoute
public TriggerAction GrantStatement
public TriggerAction DenyStatement
public TriggerAction RevokeStatement
public TriggerAction GrantObject
public TriggerAction DenyObject
public TriggerAction RevokeObject
public TriggerAction CreateBinding
public TriggerAction AlterBinding
public TriggerAction DropBinding
public TriggerAction CreatePartitionFunction
public TriggerAction AlterPartitionFunction
public TriggerAction DropPartitionFunction
public TriggerAction CreatePartitionScheme
public TriggerAction AlterPartitionScheme
public TriggerAction DropPartitionScheme
}
internal NativeOledbWrapper : object {
private string msg
public int SizeOfPROPVARIANT
public int get_SizeOfPROPVARIANT()
public int ITransactionAbort(IntPtr handle)
public int ITransactionCommit(IntPtr handle)
public bool MemoryCompare(IntPtr dst, IntPtr src, int bytes)
public IntPtr IChapteredRowsetReleaseChapter(IntPtr handle, IntPtr chapter)
public int MemoryCopy(IntPtr dst, IntPtr src, int bytes)
}
internal SR : object {
internal string GetString(string name, Object[] args)
internal string GetString(CultureInfo culture, string name, Object[] args)
internal string GetString(string name)
internal string GetString(CultureInfo culture, string name)
}
internal System.Configuration.PrivilegedConfigurationManager : object {
internal ConnectionStringSettingsCollection ConnectionStrings
internal ConnectionStringSettingsCollection get_ConnectionStrings()
internal object GetSection(string sectionName)
}
public System.Data.AcceptRejectRule : Enum {
public int value__
public AcceptRejectRule None
public AcceptRejectRule Cascade
}
internal System.Data.Aggregate : Enum {
public int value__
public Aggregate None
public Aggregate Sum
public Aggregate Avg
public Aggregate Min
public Aggregate Max
public Aggregate Count
public Aggregate StDev
public Aggregate Var
}
internal System.Data.AggregateNode : ExpressionNode {
private AggregateType type
private Aggregate aggregate
private bool local
private string relationName
private string columnName
private DataTable childTable
private DataColumn column
private DataRelation relation
internal void .ctor(DataTable table, FunctionId aggregateType, string columnName)
internal void .ctor(DataTable table, FunctionId aggregateType, string columnName, string relationName)
internal void .ctor(DataTable table, FunctionId aggregateType, string columnName, bool local, string relationName)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal void Bind(DataRelation relation, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] records)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
}
internal System.Data.AggregateType : Enum {
public int value__
public AggregateType None
public AggregateType Sum
public AggregateType Mean
public AggregateType Min
public AggregateType Max
public AggregateType First
public AggregateType Count
public AggregateType Var
public AggregateType StDev
}
internal System.Data.AutoIncrementBigInteger : AutoIncrementValue {
private BigInteger current
private long seed
private BigInteger step
internal object Current
internal Type DataType
internal long Seed
internal long Step
internal object get_Current()
internal void set_Current(object value)
internal Type get_DataType()
internal long get_Seed()
internal void set_Seed(long value)
internal long get_Step()
internal void set_Step(long value)
internal void MoveAfter()
internal void SetCurrent(object value, IFormatProvider formatProvider)
internal void SetCurrentAndIncrement(object value)
private bool BoundaryCheck(BigInteger value)
}
internal System.Data.AutoIncrementInt64 : AutoIncrementValue {
private long current
private long seed
private long step
internal object Current
internal Type DataType
internal long Seed
internal long Step
internal object get_Current()
internal void set_Current(object value)
internal Type get_DataType()
internal long get_Seed()
internal void set_Seed(long value)
internal long get_Step()
internal void set_Step(long value)
internal void MoveAfter()
internal void SetCurrent(object value, IFormatProvider formatProvider)
internal void SetCurrentAndIncrement(object value)
private bool BoundaryCheck(BigInteger value)
}
internal System.Data.AutoIncrementValue : object {
private bool auto
internal bool Auto
internal object Current
internal long Seed
internal long Step
internal Type DataType
internal bool get_Auto()
internal void set_Auto(bool value)
internal object get_Current()
internal void set_Current(object value)
internal long get_Seed()
internal void set_Seed(long value)
internal long get_Step()
internal void set_Step(long value)
internal Type get_DataType()
internal void SetCurrent(object value, IFormatProvider formatProvider)
internal void SetCurrentAndIncrement(object value)
internal void MoveAfter()
internal AutoIncrementValue Clone()
}
internal System.Data.BinaryNode : ExpressionNode {
internal int op
internal ExpressionNode left
internal ExpressionNode right
internal void .ctor(DataTable table, int op, ExpressionNode left, ExpressionNode right)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
internal void SetTypeMismatchError(int op, Type left, Type right)
private object Eval(ExpressionNode expr, DataRow row, DataRowVersion version, Int32[] recordNos)
internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op)
internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op, CompareInfo comparer)
private object EvalBinaryOp(int op, ExpressionNode left, ExpressionNode right, DataRow row, DataRowVersion version, Int32[] recordNos)
private DataTypePrecedence GetPrecedence(StorageType storageType)
private StorageType GetPrecedenceType(DataTypePrecedence code)
private bool IsMixed(StorageType left, StorageType right)
private bool IsMixedSql(StorageType left, StorageType right)
internal StorageType ResultType(StorageType left, StorageType right, bool lc, bool rc, int op)
internal StorageType ResultSqlType(StorageType left, StorageType right, bool lc, bool rc, int op)
private int SqlResultType(int typeCode)
}
internal System.Data.ChildForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
private DataTable table
public void .ctor(DataSet dataSet, DataTable inTable)
protected bool IsValidCandidate(Constraint constraint)
}
internal System.Data.ColumnTypeConverter : TypeConverter {
private Type[] types
private StandardValuesCollection values
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
public StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
public bool GetStandardValuesExclusive(ITypeDescriptorContext context)
public bool GetStandardValuesSupported(ITypeDescriptorContext context)
}
public System.Data.CommandBehavior : Enum {
public int value__
public CommandBehavior Default
public CommandBehavior SingleResult
public CommandBehavior SchemaOnly
public CommandBehavior KeyInfo
public CommandBehavior SingleRow
public CommandBehavior SequentialAccess
public CommandBehavior CloseConnection
}
public System.Data.CommandType : Enum {
public int value__
public CommandType Text
public CommandType StoredProcedure
public CommandType TableDirect
}
internal System.Data.Common.ActivityCorrelator : object {
internal ApiGroup CorrelationTracePoints
private ActivityId tlsActivity
internal ActivityId Current
internal ActivityId get_Current()
internal ActivityId Next()
}
internal System.Data.Common.ADP : object {
private Task`1<bool> _trueTask
private Task`1<bool> _falseTask
private Type StackOverflowType
private Type OutOfMemoryType
private Type ThreadAbortType
private Type NullReferenceType
private Type AccessViolationType
private Type SecurityType
internal string Append
internal string BeginExecuteNonQuery
internal string BeginExecuteReader
internal string BeginTransaction
internal string BeginExecuteXmlReader
internal string ChangeDatabase
internal string Cancel
internal string Clone
internal string ColumnEncryptionSystemProviderNamePrefix
internal string CommitTransaction
internal string CommandTimeout
internal string ConnectionString
internal string DataSetColumn
internal string DataSetTable
internal string Delete
internal string DeleteCommand
internal string DeriveParameters
internal string EndExecuteNonQuery
internal string EndExecuteReader
internal string EndExecuteXmlReader
internal string ExecuteReader
internal string ExecuteRow
internal string ExecuteNonQuery
internal string ExecuteScalar
internal string ExecuteSqlScalar
internal string ExecuteXmlReader
internal string Fill
internal string FillPage
internal string FillSchema
internal string GetBytes
internal string GetChars
internal string GetOleDbSchemaTable
internal string GetProperties
internal string GetSchema
internal string GetSchemaTable
internal string GetServerTransactionLevel
internal string Insert
internal string Open
internal string Parameter
internal string ParameterBuffer
internal string ParameterCount
internal string ParameterDestinationType
internal string ParameterIndex
internal string ParameterName
internal string ParameterOffset
internal string ParameterSetPosition
internal string ParameterService
internal string ParameterTimeout
internal string ParameterUserData
internal string Prepare
internal string QuoteIdentifier
internal string Read
internal string ReadAsync
internal string Remove
internal string RollbackTransaction
internal string SaveTransaction
internal string SetProperties
internal string SourceColumn
internal string SourceVersion
internal string SourceTable
internal string UnquoteIdentifier
internal string Update
internal string UpdateCommand
internal string UpdateRows
internal CompareOptions compareOptions
internal int DecimalMaxPrecision
internal int DecimalMaxPrecision28
internal int DefaultCommandTimeout
internal int DefaultConnectionTimeout
internal float FailoverTimeoutStep
internal int FirstTransparentAttemptTimeout
internal string StrEmpty
internal IntPtr PtrZero
internal int PtrSize
internal IntPtr InvalidPtr
internal IntPtr RecordsUnaffected
internal HandleRef NullHandleRef
internal int CharSize
internal bool IsWindowsNT
internal bool IsPlatformNT5
private string hexDigits
private Version _systemDataVersion
internal Task`1<bool> TrueTask
internal Task`1<bool> FalseTask
internal Task`1<T> CreatedTaskWithException(Exception ex)
internal Task`1<T> CreatedTaskWithCancellation()
internal Exception ExceptionWithStackTrace(Exception e)
internal Task`1<bool> get_TrueTask()
internal Task`1<bool> get_FalseTask()
private void TraceException(string trace, Exception e)
internal void TraceExceptionAsReturnValue(Exception e)
internal void TraceExceptionForCapture(Exception e)
internal void TraceExceptionWithoutRethrow(Exception e)
internal ArgumentException Argument(string error)
internal ArgumentException Argument(string error, Exception inner)
internal ArgumentException Argument(string error, string parameter)
internal ArgumentException Argument(string error, string parameter, Exception inner)
internal ArgumentNullException ArgumentNull(string parameter)
internal ArgumentNullException ArgumentNull(string parameter, string error)
internal ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName)
internal ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName)
internal ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName, object value)
internal ConfigurationException Configuration(string message)
internal ConfigurationException Configuration(string message, XmlNode node)
internal DataException Data(string message)
internal IndexOutOfRangeException IndexOutOfRange(int value)
internal IndexOutOfRangeException IndexOutOfRange(string error)
internal IndexOutOfRangeException IndexOutOfRange()
internal InvalidCastException InvalidCast(string error)
internal InvalidCastException InvalidCast(string error, Exception inner)
internal InvalidOperationException InvalidOperation(string error)
internal TimeoutException TimeoutException(string error)
internal InvalidOperationException InvalidOperation(string error, Exception inner)
internal NotImplementedException NotImplemented(string error)
internal NotSupportedException NotSupported()
internal NotSupportedException NotSupported(string error)
internal OverflowException Overflow(string error)
internal OverflowException Overflow(string error, Exception inner)
internal PlatformNotSupportedException PropertyNotSupported(string property)
internal TypeLoadException TypeLoad(string error)
internal InvalidCastException InvalidCast()
internal IOException IO(string error)
internal IOException IO(string error, Exception inner)
internal InvalidOperationException DataAdapter(string error)
internal InvalidOperationException DataAdapter(string error, Exception inner)
private InvalidOperationException Provider(string error)
internal ObjectDisposedException ObjectDisposed(object instance)
internal InvalidOperationException MethodCalledTwice(string method)
internal ArgumentException IncorrectAsyncResult()
internal ArgumentException SingleValuedProperty(string propertyName, string value)
internal ArgumentException DoubleValuedProperty(string propertyName, string value1, string value2)
internal ArgumentException InvalidPrefixSuffix()
internal ArgumentException InvalidMultipartName(string property, string value)
internal ArgumentException InvalidMultipartNameIncorrectUsageOfQuotes(string property, string value)
internal ArgumentException InvalidMultipartNameToManyParts(string property, string value, int limit)
internal ArgumentException BadParameterName(string parameterName)
internal ArgumentException MultipleReturnValue()
internal void CheckArgumentLength(string value, string parameterName)
internal void CheckArgumentLength(Array value, string parameterName)
internal void CheckArgumentNull(object value, string parameterName)
internal bool IsCatchableExceptionType(Exception e)
internal bool IsCatchableOrSecurityExceptionType(Exception e)
internal ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value)
internal ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method)
internal ArgumentOutOfRangeException InvalidAcceptRejectRule(AcceptRejectRule value)
internal ArgumentOutOfRangeException InvalidCatalogLocation(CatalogLocation value)
internal ArgumentOutOfRangeException InvalidCommandBehavior(CommandBehavior value)
internal void ValidateCommandBehavior(CommandBehavior value)
internal ArgumentException InvalidArgumentLength(string argumentName, int limit)
internal ArgumentException MustBeReadOnly(string argumentName)
internal ArgumentOutOfRangeException InvalidCommandType(CommandType value)
internal ArgumentOutOfRangeException InvalidConflictOptions(ConflictOption value)
internal ArgumentOutOfRangeException InvalidDataRowState(DataRowState value)
internal ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value)
internal ArgumentOutOfRangeException InvalidIsolationLevel(IsolationLevel value)
internal ArgumentOutOfRangeException InvalidKeyRestrictionBehavior(KeyRestrictionBehavior value)
internal ArgumentOutOfRangeException InvalidLoadOption(LoadOption value)
internal ArgumentOutOfRangeException InvalidMissingMappingAction(MissingMappingAction value)
internal ArgumentOutOfRangeException InvalidMissingSchemaAction(MissingSchemaAction value)
internal ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value)
internal ArgumentOutOfRangeException InvalidPermissionState(PermissionState value)
internal ArgumentOutOfRangeException InvalidRule(Rule value)
internal ArgumentOutOfRangeException InvalidSchemaType(SchemaType value)
internal ArgumentOutOfRangeException InvalidStatementType(StatementType value)
internal ArgumentOutOfRangeException InvalidUpdateRowSource(UpdateRowSource value)
internal ArgumentOutOfRangeException InvalidUpdateStatus(UpdateStatus value)
internal ArgumentOutOfRangeException NotSupportedCommandBehavior(CommandBehavior value, string method)
internal ArgumentOutOfRangeException NotSupportedStatementType(StatementType value, string method)
internal ArgumentOutOfRangeException InvalidUserDefinedTypeSerializationFormat(Format value)
internal ArgumentOutOfRangeException NotSupportedUserDefinedTypeSerializationFormat(Format value, string method)
internal ArgumentException ConfigProviderNotFound()
internal InvalidOperationException ConfigProviderInvalid()
internal ConfigurationException ConfigProviderNotInstalled()
internal ConfigurationException ConfigProviderMissing()
internal ConfigurationException ConfigBaseNoChildNodes(XmlNode node)
internal ConfigurationException ConfigBaseElementsOnly(XmlNode node)
internal ConfigurationException ConfigUnrecognizedAttributes(XmlNode node)
internal ConfigurationException ConfigUnrecognizedElement(XmlNode node)
internal ConfigurationException ConfigSectionsUnique(string sectionName)
internal ConfigurationException ConfigRequiredAttributeMissing(string name, XmlNode node)
internal ConfigurationException ConfigRequiredAttributeEmpty(string name, XmlNode node)
internal ArgumentException ConnectionStringSyntax(int index)
internal ArgumentException KeywordNotSupported(string keyword)
internal ArgumentException UdlFileError(Exception inner)
internal ArgumentException InvalidUDL()
internal InvalidOperationException InvalidDataDirectory()
internal ArgumentException InvalidKeyname(string parameterName)
internal ArgumentException InvalidValue(string parameterName)
internal ArgumentException InvalidMinMaxPoolSizeValues()
internal ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException)
internal InvalidOperationException InvalidMixedUsageOfSecureAndClearCredential()
internal ArgumentException InvalidMixedArgumentOfSecureAndClearCredential()
internal InvalidOperationException InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity()
internal ArgumentException InvalidMixedArgumentOfSecureCredentialAndIntegratedSecurity()
internal InvalidOperationException InvalidMixedUsageOfSecureCredentialAndContextConnection()
internal ArgumentException InvalidMixedArgumentOfSecureCredentialAndContextConnection()
internal InvalidOperationException InvalidMixedUsageOfAccessTokenAndContextConnection()
internal InvalidOperationException InvalidMixedUsageOfAccessTokenAndIntegratedSecurity()
internal InvalidOperationException InvalidMixedUsageOfAccessTokenAndUserIDPassword()
internal Exception InvalidMixedUsageOfAccessTokenAndCredential()
internal Exception InvalidMixedUsageOfAccessTokenAndAuthentication()
internal Exception InvalidMixedUsageOfCredentialAndAccessToken()
internal InvalidOperationException NoConnectionString()
internal NotImplementedException MethodNotImplemented(string methodName)
private string ConnectionStateMsg(ConnectionState state)
internal ConfigurationException ConfigUnableToLoadXmlMetaDataFile(string settingName)
internal ConfigurationException ConfigWrongNumberOfValues(string settingName)
internal Exception InvalidConnectionOptionValue(string key)
internal Exception InvalidConnectionOptionValueLength(string key, int limit)
internal Exception InvalidConnectionOptionValue(string key, Exception inner)
internal Exception MissingConnectionOptionValue(string key, string requiredAdditionalKey)
internal Exception InvalidXMLBadVersion()
internal Exception NotAPermissionElement()
internal Exception PermissionTypeMismatch()
internal Exception WrongType(Type got, Type expected)
internal Exception OdbcNoTypesFromProvider()
internal Exception PooledOpenTimeout()
internal Exception NonPooledOpenTimeout()
internal ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection)
internal ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType)
internal IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count)
internal IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection)
internal InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue)
internal Exception CollectionUniqueValue(Type itemType, string propertyName, string propertyValue)
internal ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection)
internal ArgumentException ParametersIsParent(Type parameterType, ICollection collection)
internal InvalidOperationException TransactionConnectionMismatch()
internal InvalidOperationException TransactionCompletedButNotDisposed()
internal InvalidOperationException TransactionRequired(string method)
internal InvalidOperationException MissingSelectCommand(string method)
private InvalidOperationException DataMapping(string error)
internal InvalidOperationException ColumnSchemaExpression(string srcColumn, string cacheColumn)
internal InvalidOperationException ColumnSchemaMismatch(string srcColumn, Type srcType, DataColumn column)
internal InvalidOperationException ColumnSchemaMissing(string cacheColumn, string tableName, string srcColumn)
internal InvalidOperationException MissingColumnMapping(string srcColumn)
internal InvalidOperationException MissingTableSchema(string cacheTable, string srcTable)
internal InvalidOperationException MissingTableMapping(string srcTable)
internal InvalidOperationException MissingTableMappingDestination(string dstTable)
internal Exception InvalidSourceColumn(string parameter)
internal Exception ColumnsAddNullAttempt(string parameter)
internal Exception ColumnsDataSetColumn(string cacheColumn)
internal Exception ColumnsIndexInt32(int index, IColumnMappingCollection collection)
internal Exception ColumnsIndexSource(string srcColumn)
internal Exception ColumnsIsNotParent(ICollection collection)
internal Exception ColumnsIsParent(ICollection collection)
internal Exception ColumnsUniqueSourceColumn(string srcColumn)
internal Exception NotADataColumnMapping(object value)
internal Exception InvalidSourceTable(string parameter)
internal Exception TablesAddNullAttempt(string parameter)
internal Exception TablesDataSetTable(string cacheTable)
internal Exception TablesIndexInt32(int index, ITableMappingCollection collection)
internal Exception TablesIsNotParent(ICollection collection)
internal Exception TablesIsParent(ICollection collection)
internal Exception TablesSourceIndex(string srcTable)
internal Exception TablesUniqueSourceTable(string srcTable)
internal Exception NotADataTableMapping(object value)
internal InvalidOperationException CommandAsyncOperationCompleted()
internal Exception CommandTextRequired(string method)
internal InvalidOperationException ConnectionRequired(string method)
internal InvalidOperationException OpenConnectionRequired(string method, ConnectionState state)
internal InvalidOperationException UpdateConnectionRequired(StatementType statementType, bool isRowUpdatingCommand)
internal InvalidOperationException ConnectionRequired_Res(string method)
internal InvalidOperationException UpdateOpenConnectionRequired(StatementType statementType, bool isRowUpdatingCommand, ConnectionState state)
internal Exception NoStoredProcedureExists(string sproc)
internal Exception OpenReaderExists()
internal Exception OpenReaderExists(Exception e)
internal Exception TransactionCompleted()
internal Exception NonSeqByteAccess(long badIndex, long currIndex, string method)
internal Exception NegativeParameter(string parameterName)
internal Exception NumericToDecimalOverflow()
internal Exception ExceedsMaxDataLength(long specifiedLength, long maxLength)
internal Exception InvalidSeekOrigin(string parameterName)
internal Exception InvalidImplicitConversion(Type fromtype, string totype)
internal Exception InvalidMetaDataValue()
internal Exception NotRowType()
internal ArgumentException UnwantedStatementType(StatementType statementType)
internal InvalidOperationException NonSequentialColumnAccess(int badCol, int currCol)
internal Exception FillSchemaRequiresSourceTableName(string parameter)
internal Exception InvalidMaxRecords(string parameter, int max)
internal Exception InvalidStartRecord(string parameter, int start)
internal Exception FillRequires(string parameter)
internal Exception FillRequiresSourceTableName(string parameter)
internal Exception FillChapterAutoIncrement()
internal InvalidOperationException MissingDataReaderFieldType(int index)
internal InvalidOperationException OnlyOneTableForStartRecordOrMaxRecords()
internal ArgumentNullException UpdateRequiresNonNullDataSet(string parameter)
internal InvalidOperationException UpdateRequiresSourceTable(string defaultSrcTableName)
internal InvalidOperationException UpdateRequiresSourceTableName(string srcTable)
internal ArgumentNullException UpdateRequiresDataTable(string parameter)
internal Exception UpdateConcurrencyViolation(StatementType statementType, int affected, int expected, DataRow[] dataRows)
internal InvalidOperationException UpdateRequiresCommand(StatementType statementType, bool isRowUpdatingCommand)
internal ArgumentException UpdateMismatchRowTable(int i)
internal DataException RowUpdatedErrors()
internal DataException RowUpdatingErrors()
internal InvalidOperationException ResultsNotAllowedDuringBatch()
internal Exception InvalidCommandTimeout(int value)
internal Exception DeriveParametersNotSupported(IDbCommand value)
internal Exception UninitializedParameterSize(int index, Type dataType)
internal Exception PrepareParameterType(IDbCommand cmd)
internal Exception PrepareParameterSize(IDbCommand cmd)
internal Exception PrepareParameterScale(IDbCommand cmd, string type)
internal Exception MismatchedAsyncResult(string expectedMethod, string gotMethod)
internal Exception ConnectionIsDisabled(Exception InnerException)
internal Exception ClosedConnectionError()
internal Exception ConnectionAlreadyOpen(ConnectionState state)
internal Exception DelegatedTransactionPresent()
internal Exception TransactionPresent()
internal Exception LocalTransactionPresent()
internal Exception OpenConnectionPropertySet(string property, ConnectionState state)
internal Exception EmptyDatabaseName()
internal Exception DatabaseNameTooLong()
internal Exception InternalConnectionError(ConnectionError internalError)
internal Exception InternalError(InternalErrorCode internalError)
internal Exception InternalError(InternalErrorCode internalError, Exception innerException)
internal Exception InvalidConnectTimeoutValue()
internal Exception InvalidConnectRetryCountValue()
internal Exception InvalidConnectRetryIntervalValue()
internal Exception DataReaderNoData()
internal Exception DataReaderClosed(string method)
internal ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName)
internal ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName)
internal IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex)
internal Exception InvalidDataLength(long length)
internal InvalidOperationException AsyncOperationPending()
internal Exception StreamClosed(string method)
internal IOException ErrorReadingFromStream(Exception internalException)
internal InvalidOperationException DynamicSQLJoinUnsupported()
internal InvalidOperationException DynamicSQLNoTableInfo()
internal InvalidOperationException DynamicSQLNoKeyInfoDelete()
internal InvalidOperationException DynamicSQLNoKeyInfoUpdate()
internal InvalidOperationException DynamicSQLNoKeyInfoRowVersionDelete()
internal InvalidOperationException DynamicSQLNoKeyInfoRowVersionUpdate()
internal InvalidOperationException DynamicSQLNestedQuote(string name, string quote)
internal InvalidOperationException NoQuoteChange()
internal InvalidOperationException ComputerNameEx(int lastError)
internal InvalidOperationException MissingSourceCommand()
internal InvalidOperationException MissingSourceCommandConnection()
internal ArgumentException InvalidDataType(TypeCode typecode)
internal ArgumentException UnknownDataType(Type dataType)
internal ArgumentException DbTypeNotSupported(DbType type, Type enumtype)
internal ArgumentException UnknownDataTypeCode(Type dataType, TypeCode typeCode)
internal ArgumentException InvalidOffsetValue(int value)
internal ArgumentException InvalidSizeValue(int value)
internal ArgumentException ParameterValueOutOfRange(decimal value)
internal ArgumentException ParameterValueOutOfRange(SqlDecimal value)
internal ArgumentException ParameterValueOutOfRange(string value)
internal ArgumentException VersionDoesNotSupportDataType(string typeName)
internal Exception ParameterConversionFailed(object value, Type destType, Exception inner)
internal Exception ParametersMappingIndex(int index, IDataParameterCollection collection)
internal Exception ParametersSourceIndex(string parameterName, IDataParameterCollection collection, Type parameterType)
internal Exception ParameterNull(string parameter, IDataParameterCollection collection, Type parameterType)
internal Exception InvalidParameterType(IDataParameterCollection collection, Type parameterType, object invalidValue)
internal Exception ParallelTransactionsNotSupported(IDbConnection obj)
internal Exception TransactionZombied(IDbTransaction obj)
internal Exception DbRecordReadOnly(string methodname)
internal Exception OffsetOutOfRangeException()
internal Exception AmbigousCollectionName(string collectionName)
internal Exception CollectionNameIsNotUnique(string collectionName)
internal Exception DataTableDoesNotExist(string collectionName)
internal Exception IncorrectNumberOfDataSourceInformationRows()
internal ArgumentException InvalidRestrictionValue(string collectionName, string restrictionName, string restrictionValue)
internal Exception InvalidXml()
internal Exception InvalidXmlMissingColumn(string collectionName, string columnName)
internal Exception InvalidXmlInvalidValue(string collectionName, string columnName)
internal Exception MissingDataSourceInformationColumn()
internal Exception MissingRestrictionColumn()
internal Exception MissingRestrictionRow()
internal Exception NoColumns()
internal Exception QueryFailed(string collectionName, Exception e)
internal Exception TooManyRestrictions(string collectionName)
internal Exception UnableToBuildCollection(string collectionName)
internal Exception UndefinedCollection(string collectionName)
internal Exception UndefinedPopulationMechanism(string populationMechanism)
internal Exception UnsupportedVersion(string collectionName)
internal InvalidOperationException InvalidDateTimeDigits(string dataTypeName)
internal Exception InvalidFormatValue()
internal InvalidOperationException InvalidMaximumScale(string dataTypeName)
internal Exception LiteralValueIsInvalid(string dataTypeName)
internal Exception EvenLengthLiteralValue(string argumentName)
internal Exception HexDigitLiteralValue(string argumentName)
internal InvalidOperationException QuotePrefixNotSet(string method)
internal InvalidOperationException UnableToCreateBooleanLiteral()
internal Exception UnsupportedNativeDataTypeOleDb(string dataTypeName)
internal Exception InvalidArgumentValue(string methodName)
internal bool CompareInsensitiveInvariant(string strvalue, string strconst)
internal Delegate FindBuilder(MulticastDelegate mcd)
internal Transaction GetCurrentTransaction()
internal void SetCurrentTransaction(Transaction transaction)
internal IDtcTransaction GetOletxTransaction(Transaction transaction)
internal bool IsSysTxEqualSysEsTransaction()
internal bool NeedManualEnlistment()
internal void TimerCurrent(Int64& ticks)
internal long TimerCurrent()
internal long TimerFromSeconds(int seconds)
internal long TimerFromMilliseconds(long milliseconds)
internal bool TimerHasExpired(long timerExpire)
internal long TimerRemaining(long timerExpire)
internal long TimerRemainingMilliseconds(long timerExpire)
internal long TimerRemainingSeconds(long timerExpire)
internal long TimerToMilliseconds(long timerValue)
private long TimerToSeconds(long timerValue)
internal string MachineName()
internal string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString)
internal Byte[] ByteArrayFromString(string hexString, string dataTypeName)
internal void EscapeSpecialCharacters(string unescapedString, StringBuilder escapedString)
internal string FixUpDecimalSeparator(string numericString, bool formatLiteral, string decimalSeparator, Char[] exponentSymbols)
internal string GetFullPath(string filename)
internal string GetComputerNameDnsFullyQualified()
internal Stream GetFileStream(string filename)
internal FileVersionInfo GetVersionInfo(string filename)
internal Stream GetXmlStreamFromValues(String[] values, string errorString)
internal Stream GetXmlStream(string value, string errorString)
internal object ClassesRootRegistryValue(string subkey, string queryvalue)
internal object LocalMachineRegistryValue(string subkey, string queryvalue)
internal void CheckVersionMDAC(bool ifodbcelseoledb)
internal bool RemoveStringQuotes(string quotePrefix, string quoteSuffix, string quotedString, String& unquotedString)
internal DataRow[] SelectAdapterRows(DataTable dataTable, bool sorted)
internal int StringLength(string inputString)
internal void BuildSchemaTableInfoTableNames(String[] columnNameArray)
private int GenerateUniqueName(Dictionary`2<string, int> hash, String& columnName, int index, int uniqueIndex)
internal IntPtr IntPtrOffset(IntPtr pbase, int offset)
internal int IntPtrToInt32(IntPtr value)
internal int SrcCompare(string strA, string strB)
internal int DstCompare(string strA, string strB)
internal bool IsDirection(IDataParameter value, ParameterDirection condition)
internal bool IsEmpty(string str)
internal bool IsEmptyArray(String[] array)
internal bool IsNull(object value)
internal void IsNullOrSqlType(object value, Boolean& isNull, Boolean& isSqlType)
internal Version GetAssemblyVersion()
}
internal System.Data.Common.BigIntegerStorage : DataStorage {
private BigInteger[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
internal BigInteger ConvertToBigInteger(object value, IFormatProvider formatProvider)
internal object ConvertFromBigInteger(BigInteger value, Type type, IFormatProvider formatProvider)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.BooleanStorage : DataStorage {
private bool defaultValue
private Boolean[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.ByteStorage : DataStorage {
private byte defaultValue
private Byte[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
public System.Data.Common.CatalogLocation : Enum {
public int value__
public CatalogLocation Start
public CatalogLocation End
}
internal System.Data.Common.CharStorage : DataStorage {
private char defaultValue
private Char[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
public System.Data.Common.DataAdapter : Component {
private object EventFillError
private bool _acceptChangesDuringUpdate
private bool _acceptChangesDuringUpdateAfterInsert
private bool _continueUpdateOnError
private bool _hasFillErrorHandler
private bool _returnProviderSpecificTypes
private bool _acceptChangesDuringFill
private LoadOption _fillLoadOption
private MissingMappingAction _missingMappingAction
private MissingSchemaAction _missingSchemaAction
private DataTableMappingCollection _tableMappings
private int _objectTypeCount
internal int _objectID
private ITableMappingCollection System.Data.IDataAdapter.TableMappings
public bool AcceptChangesDuringFill
public bool AcceptChangesDuringUpdate
public bool ContinueUpdateOnError
public LoadOption FillLoadOption
public MissingMappingAction MissingMappingAction
public MissingSchemaAction MissingSchemaAction
internal int ObjectID
public bool ReturnProviderSpecificTypes
public DataTableMappingCollection TableMappings
protected void .ctor(DataAdapter from)
private void AssertReaderHandleFieldCount(DataReaderContainer readerHandler)
private void AssertSchemaMapping(SchemaMapping mapping)
public bool get_AcceptChangesDuringFill()
public void set_AcceptChangesDuringFill(bool value)
public bool ShouldSerializeAcceptChangesDuringFill()
public bool get_AcceptChangesDuringUpdate()
public void set_AcceptChangesDuringUpdate(bool value)
public bool get_ContinueUpdateOnError()
public void set_ContinueUpdateOnError(bool value)
public LoadOption get_FillLoadOption()
public void set_FillLoadOption(LoadOption value)
public void ResetFillLoadOption()
public bool ShouldSerializeFillLoadOption()
public MissingMappingAction get_MissingMappingAction()
public void set_MissingMappingAction(MissingMappingAction value)
public MissingSchemaAction get_MissingSchemaAction()
public void set_MissingSchemaAction(MissingSchemaAction value)
internal int get_ObjectID()
public bool get_ReturnProviderSpecificTypes()
public void set_ReturnProviderSpecificTypes(bool value)
public DataTableMappingCollection get_TableMappings()
private ITableMappingCollection System.Data.IDataAdapter.get_TableMappings()
protected bool ShouldSerializeTableMappings()
protected bool HasTableMappings()
public void add_FillError(FillErrorEventHandler value)
public void remove_FillError(FillErrorEventHandler value)
protected DataAdapter CloneInternals()
private void CloneFrom(DataAdapter from)
protected DataTableMappingCollection CreateTableMappings()
protected void Dispose(bool disposing)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
protected DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader)
protected DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader)
internal object FillSchemaFromReader(DataSet dataset, DataTable datatable, SchemaType schemaType, string srcTable, IDataReader dataReader)
public int Fill(DataSet dataSet)
protected int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords)
protected int Fill(DataTable dataTable, IDataReader dataReader)
protected int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords)
internal int FillFromReader(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int startRecord, int maxRecords, DataColumn parentChapterColumn, object parentChapterValue)
private int FillLoadDataRowChunk(SchemaMapping mapping, int startRecord, int maxRecords)
private int FillLoadDataRow(SchemaMapping mapping)
private SchemaMapping FillMappingInternal(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue)
private SchemaMapping FillMapping(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue)
private bool FillNextResult(DataReaderContainer dataReader)
public IDataParameter[] GetFillParameters()
internal DataTableMapping GetTableMappingBySchemaAction(string sourceTableName, string dataSetTableName, MissingMappingAction mappingAction)
internal int IndexOfDataSetTable(string dataSetTable)
protected void OnFillError(FillErrorEventArgs value)
private void OnFillErrorHandler(Exception e, DataTable dataTable, Object[] dataValues)
public int Update(DataSet dataSet)
private DataTable[] AddDataTableToArray(DataTable[] tables, DataTable newTable)
private string GetSourceTableName(string srcTable, int index)
}
public System.Data.Common.DataColumnMapping : MarshalByRefObject {
private DataColumnMappingCollection parent
private string _dataSetColumnName
private string _sourceColumnName
public string DataSetColumn
internal DataColumnMappingCollection Parent
public string SourceColumn
public void .ctor(string sourceColumn, string dataSetColumn)
public string get_DataSetColumn()
public void set_DataSetColumn(string value)
internal DataColumnMappingCollection get_Parent()
internal void set_Parent(DataColumnMappingCollection value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
private object System.ICloneable.Clone()
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction)
public DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction)
internal DataColumn CreateDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction)
public string ToString()
}
public System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
private List`1<DataColumnMapping> items
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
private object System.Data.IColumnMappingCollection.Item
public int Count
private Type ItemType
public DataColumnMapping Item
public DataColumnMapping Item
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private object System.Data.IColumnMappingCollection.get_Item(string index)
private void System.Data.IColumnMappingCollection.set_Item(string index, object value)
private IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName)
private IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName)
public int get_Count()
private Type get_ItemType()
public DataColumnMapping get_Item(int index)
public void set_Item(int index, DataColumnMapping value)
public DataColumnMapping get_Item(string sourceColumn)
public void set_Item(string sourceColumn, DataColumnMapping value)
public int Add(object value)
private DataColumnMapping Add(DataColumnMapping value)
public DataColumnMapping Add(string sourceColumn, string dataSetColumn)
public void AddRange(DataColumnMapping[] values)
public void AddRange(Array values)
private void AddEnumerableRange(IEnumerable values, bool doClone)
private void AddWithoutEvents(DataColumnMapping value)
private List`1<DataColumnMapping> ArrayList()
public void Clear()
private void ClearWithoutEvents()
public bool Contains(string value)
public bool Contains(object value)
public void CopyTo(Array array, int index)
public void CopyTo(DataColumnMapping[] array, int index)
public DataColumnMapping GetByDataSetColumn(string value)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string sourceColumn)
public int IndexOfDataSetColumn(string dataSetColumn)
public void Insert(int index, object value)
public void Insert(int index, DataColumnMapping value)
private void RangeCheck(int index)
private int RangeCheck(string sourceColumn)
public void RemoveAt(int index)
public void RemoveAt(string sourceColumn)
private void RemoveIndex(int index)
public void Remove(object value)
public void Remove(DataColumnMapping value)
private void Replace(int index, DataColumnMapping newValue)
private void ValidateType(object value)
private void Validate(int index, DataColumnMapping value)
internal void ValidateSourceColumn(int index, string value)
public DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction)
public DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction)
}
internal System.Data.Common.DataRecordInternal : DbDataRecord {
private SchemaInfo[] _schemaInfo
private Object[] _values
private PropertyDescriptorCollection _propertyDescriptors
private FieldNameLookup _fieldNameLookup
public int FieldCount
public object Item
public object Item
internal void .ctor(SchemaInfo[] schemaInfo, Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup)
internal void .ctor(Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup)
internal void SetSchemaInfo(SchemaInfo[] schemaInfo)
public int get_FieldCount()
public int GetValues(Object[] values)
public string GetName(int i)
public object GetValue(int i)
public string GetDataTypeName(int i)
public Type GetFieldType(int i)
public int GetOrdinal(string name)
public object get_Item(int i)
public object get_Item(string name)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public float GetFloat(int i)
public double GetDouble(int i)
public string GetString(int i)
public decimal GetDecimal(int i)
public DateTime GetDateTime(int i)
public bool IsDBNull(int i)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
internal System.Data.Common.DataStorage : object {
private Type[] StorageClassType
internal DataColumn Column
internal DataTable Table
internal Type DataType
internal StorageType StorageTypeCode
private BitArray dbNullBits
private object DefaultValue
internal object NullValue
internal bool IsCloneable
internal bool IsCustomDefinedType
internal bool IsStringType
internal bool IsValueType
private Func`2<Type, Tuple`4<bool, bool, bool, bool>> _inspectTypeForInterfaces
private ConcurrentDictionary`2<Type, Tuple`4<bool, bool, bool, bool>> _typeImplementsInterface
private Func`2<Type, Tuple`4<bool, bool, bool, bool>> <>f__mg$cache0
internal DataSetDateTime DateTimeMode
internal IFormatProvider FormatProvider
protected void .ctor(DataColumn column, Type type, object defaultValue, StorageType storageType)
protected void .ctor(DataColumn column, Type type, object defaultValue, object nullValue, StorageType storageType)
protected void .ctor(DataColumn column, Type type, object defaultValue, object nullValue, bool isICloneable, StorageType storageType)
internal DataSetDateTime get_DateTimeMode()
internal IFormatProvider get_FormatProvider()
public object Aggregate(Int32[] recordNos, AggregateType kind)
public object AggregateCount(Int32[] recordNos)
protected int CompareBits(int recordNo1, int recordNo2)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo1, object value)
public object ConvertValue(object value)
protected void CopyBits(int srcRecordNo, int dstRecordNo)
public void Copy(int recordNo1, int recordNo2)
public object Get(int recordNo)
protected object GetBits(int recordNo)
public int GetStringLength(int record)
protected bool HasValue(int recordNo)
public bool IsNull(int recordNo)
public void Set(int recordNo, object value)
protected void SetNullBit(int recordNo, bool flag)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
public string ConvertObjectToXml(object value)
public void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib)
public DataStorage CreateStorage(DataColumn column, Type dataType, StorageType typeCode)
internal StorageType GetStorageType(Type dataType)
internal Type GetTypeStorage(StorageType storageType)
internal bool IsTypeCustomType(Type type)
internal bool IsTypeCustomType(StorageType typeCode)
internal bool IsSqlType(StorageType storageType)
public bool IsSqlType(Type dataType)
private bool DetermineIfValueType(StorageType typeCode, Type dataType)
internal void ImplementsInterfaces(StorageType typeCode, Type dataType, Boolean& sqlType, Boolean& nullable, Boolean& xmlSerializable, Boolean& changeTracking, Boolean& revertibleChangeTracking)
private Tuple`4<bool, bool, bool, bool> InspectTypeForInterfaces(Type dataType)
internal bool ImplementsINullableValue(StorageType typeCode, Type dataType)
public bool IsObjectNull(object value)
public bool IsObjectSqlNull(object value)
internal object GetEmptyStorageInternal(int recordCount)
internal void CopyValueInternal(int record, object store, BitArray nullbits, int storeIndex)
internal void SetStorageInternal(object store, BitArray nullbits)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
protected void SetNullStorage(BitArray nullbits)
internal Type GetType(string value)
internal string GetQualifiedName(Type type)
}
public System.Data.Common.DataTableMapping : MarshalByRefObject {
private DataTableMappingCollection parent
private DataColumnMappingCollection _columnMappings
private string _dataSetTableName
private string _sourceTableName
private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings
public DataColumnMappingCollection ColumnMappings
public string DataSetTable
internal DataTableMappingCollection Parent
public string SourceTable
public void .ctor(string sourceTable, string dataSetTable)
public void .ctor(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings)
private IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings()
public DataColumnMappingCollection get_ColumnMappings()
public string get_DataSetTable()
public void set_DataSetTable(string value)
internal DataTableMappingCollection get_Parent()
internal void set_Parent(DataTableMappingCollection value)
public string get_SourceTable()
public void set_SourceTable(string value)
private object System.ICloneable.Clone()
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction)
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction)
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction)
public string ToString()
}
public System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
private List`1<DataTableMapping> items
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
private object System.Data.ITableMappingCollection.Item
public int Count
private Type ItemType
public DataTableMapping Item
public DataTableMapping Item
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private object System.Data.ITableMappingCollection.get_Item(string index)
private void System.Data.ITableMappingCollection.set_Item(string index, object value)
private ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName)
private ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName)
public int get_Count()
private Type get_ItemType()
public DataTableMapping get_Item(int index)
public void set_Item(int index, DataTableMapping value)
public DataTableMapping get_Item(string sourceTable)
public void set_Item(string sourceTable, DataTableMapping value)
public int Add(object value)
private DataTableMapping Add(DataTableMapping value)
public void AddRange(DataTableMapping[] values)
public void AddRange(Array values)
private void AddEnumerableRange(IEnumerable values, bool doClone)
public DataTableMapping Add(string sourceTable, string dataSetTable)
private void AddWithoutEvents(DataTableMapping value)
private List`1<DataTableMapping> ArrayList()
public void Clear()
private void ClearWithoutEvents()
public bool Contains(string value)
public bool Contains(object value)
public void CopyTo(Array array, int index)
public void CopyTo(DataTableMapping[] array, int index)
public DataTableMapping GetByDataSetTable(string dataSetTable)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string sourceTable)
public int IndexOfDataSetTable(string dataSetTable)
public void Insert(int index, object value)
public void Insert(int index, DataTableMapping value)
private void RangeCheck(int index)
private int RangeCheck(string sourceTable)
public void RemoveAt(int index)
public void RemoveAt(string sourceTable)
private void RemoveIndex(int index)
public void Remove(object value)
public void Remove(DataTableMapping value)
private void Replace(int index, DataTableMapping newValue)
private void ValidateType(object value)
private void Validate(int index, DataTableMapping value)
internal void ValidateSourceTable(int index, string value)
public DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction)
}
internal System.Data.Common.DateTimeOffsetStorage : DataStorage {
private DateTimeOffset defaultValue
private DateTimeOffset[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.DateTimeStorage : DataStorage {
private DateTime defaultValue
private DateTime[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
public System.Data.Common.DbCommand : Component {
private IDbConnection System.Data.IDbCommand.Connection
private IDataParameterCollection System.Data.IDbCommand.Parameters
private IDbTransaction System.Data.IDbCommand.Transaction
public string CommandText
public int CommandTimeout
public CommandType CommandType
public DbConnection Connection
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public bool DesignTimeVisible
public DbParameterCollection Parameters
public DbTransaction Transaction
public UpdateRowSource UpdatedRowSource
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public DbConnection get_Connection()
public void set_Connection(DbConnection value)
private IDbConnection System.Data.IDbCommand.get_Connection()
private void System.Data.IDbCommand.set_Connection(IDbConnection value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public DbParameterCollection get_Parameters()
private IDataParameterCollection System.Data.IDbCommand.get_Parameters()
public DbTransaction get_Transaction()
public void set_Transaction(DbTransaction value)
private IDbTransaction System.Data.IDbCommand.get_Transaction()
private void System.Data.IDbCommand.set_Transaction(IDbTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
internal void CancelIgnoreFailure()
public void Cancel()
public DbParameter CreateParameter()
private IDbDataParameter System.Data.IDbCommand.CreateParameter()
protected DbParameter CreateDbParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public int ExecuteNonQuery()
public DbDataReader ExecuteReader()
private IDataReader System.Data.IDbCommand.ExecuteReader()
public DbDataReader ExecuteReader(CommandBehavior behavior)
private IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior)
public Task`1<int> ExecuteNonQueryAsync()
public Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken)
public Task`1<DbDataReader> ExecuteReaderAsync()
public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken)
public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior)
public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
protected Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
public Task`1<object> ExecuteScalarAsync()
public Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken)
public object ExecuteScalar()
public void Prepare()
}
public System.Data.Common.DbCommandBuilder : Component {
private string DeleteFrom
private string InsertInto
private string DefaultValues
private string Values
private string Update
private string Set
private string Where
private string SpaceLeftParenthesis
private string Comma
private string Equal
private string LeftParenthesis
private string RightParenthesis
private string NameSeparator
private string IsNull
private string EqualOne
private string And
private string Or
private DbDataAdapter _dataAdapter
private DbCommand _insertCommand
private DbCommand _updateCommand
private DbCommand _deleteCommand
private MissingMappingAction _missingMappingAction
private ConflictOption _conflictDetection
private bool _setAllValues
private bool _hasPartialPrimaryKey
private DataTable _dbSchemaTable
private DbSchemaRow[] _dbSchemaRows
private String[] _sourceColumnNames
private ParameterNames _parameterNames
private string _quotedBaseTableName
private CatalogLocation _catalogLocation
private string _catalogSeparator
private string _schemaSeparator
private string _quotePrefix
private string _quoteSuffix
private string _parameterNamePattern
private string _parameterMarkerFormat
private int _parameterNameMaxLength
public ConflictOption ConflictOption
public CatalogLocation CatalogLocation
public string CatalogSeparator
public DbDataAdapter DataAdapter
internal int ParameterNameMaxLength
internal string ParameterNamePattern
private string QuotedBaseTableName
public string QuotePrefix
public string QuoteSuffix
public string SchemaSeparator
public bool SetAllValues
private DbCommand InsertCommand
private DbCommand UpdateCommand
private DbCommand DeleteCommand
public ConflictOption get_ConflictOption()
public void set_ConflictOption(ConflictOption value)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public DbDataAdapter get_DataAdapter()
public void set_DataAdapter(DbDataAdapter value)
internal int get_ParameterNameMaxLength()
internal string get_ParameterNamePattern()
private string get_QuotedBaseTableName()
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
public bool get_SetAllValues()
public void set_SetAllValues(bool value)
private DbCommand get_InsertCommand()
private void set_InsertCommand(DbCommand value)
private DbCommand get_UpdateCommand()
private void set_UpdateCommand(DbCommand value)
private DbCommand get_DeleteCommand()
private void set_DeleteCommand(DbCommand value)
private void BuildCache(bool closeConnection, DataRow dataRow, bool useColumnsForParameterNames)
protected DataTable GetSchemaTable(DbCommand sourceCommand)
private void BuildInformation(DataTable schemaTable)
private DbCommand BuildDeleteCommand(DataTableMapping mappings, DataRow dataRow)
private DbCommand BuildInsertCommand(DataTableMapping mappings, DataRow dataRow)
private DbCommand BuildUpdateCommand(DataTableMapping mappings, DataRow dataRow)
private int BuildWhereClause(DataTableMapping mappings, DataRow dataRow, StringBuilder builder, DbCommand command, int parameterCount, bool isUpdate)
private string CreateParameterForNullTest(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause)
private string CreateParameterForValue(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause)
protected void Dispose(bool disposing)
private DataTableMapping GetTableMapping(DataRow dataRow)
private string GetBaseParameterName(int index)
private string GetOriginalParameterName(int index)
private string GetNullParameterName(int index)
private DbCommand GetSelectCommand()
internal DbConnection GetConnection()
public DbCommand GetInsertCommand()
public DbCommand GetInsertCommand(bool useColumnsForParameterNames)
internal DbCommand GetInsertCommand(DataRow dataRow, bool useColumnsForParameterNames)
public DbCommand GetUpdateCommand()
public DbCommand GetUpdateCommand(bool useColumnsForParameterNames)
internal DbCommand GetUpdateCommand(DataRow dataRow, bool useColumnsForParameterNames)
public DbCommand GetDeleteCommand()
public DbCommand GetDeleteCommand(bool useColumnsForParameterNames)
internal DbCommand GetDeleteCommand(DataRow dataRow, bool useColumnsForParameterNames)
private object GetColumnValue(DataRow row, string columnName, DataTableMapping mappings, DataRowVersion version)
private object GetColumnValue(DataRow row, DataColumn column, DataRowVersion version)
private DataColumn GetDataColumn(string columnName, DataTableMapping tablemapping, DataRow row)
private DbParameter GetNextParameter(DbCommand command, int pcount)
private bool IncludeInInsertValues(DbSchemaRow row)
private bool IncludeInUpdateSet(DbSchemaRow row)
private bool IncludeInWhereClause(DbSchemaRow row, bool isUpdate)
private bool IncrementWhereCount(DbSchemaRow row)
protected DbCommand InitializeCommand(DbCommand command)
private string QuotedColumn(string column)
public string QuoteIdentifier(string unquotedIdentifier)
public void RefreshSchema()
private void RemoveExtraParameters(DbCommand command, int usedParameterCount)
protected void RowUpdatingHandler(RowUpdatingEventArgs rowUpdatingEvent)
private void RowUpdatingHandlerBuilder(RowUpdatingEventArgs rowUpdatingEvent)
public string UnquoteIdentifier(string quotedIdentifier)
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
internal String[] ParseProcedureName(string name, string quotePrefix, string quoteSuffix)
}
public System.Data.Common.DbConnection : Component {
private StateChangeEventHandler _stateChangeEventHandler
internal bool _supressStateChangeForReconnection
private bool <ForceNewConnection>k__BackingField
public string ConnectionString
public int ConnectionTimeout
public string Database
public string DataSource
protected DbProviderFactory DbProviderFactory
internal DbProviderFactory ProviderFactory
public string ServerVersion
public ConnectionState State
internal bool ForceNewConnection
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public string get_Database()
public string get_DataSource()
protected DbProviderFactory get_DbProviderFactory()
internal DbProviderFactory get_ProviderFactory()
public string get_ServerVersion()
public ConnectionState get_State()
public void add_StateChange(StateChangeEventHandler value)
public void remove_StateChange(StateChangeEventHandler value)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public DbTransaction BeginTransaction()
public DbTransaction BeginTransaction(IsolationLevel isolationLevel)
private IDbTransaction System.Data.IDbConnection.BeginTransaction()
private IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel)
public void Close()
public void ChangeDatabase(string databaseName)
public DbCommand CreateCommand()
private IDbCommand System.Data.IDbConnection.CreateCommand()
protected DbCommand CreateDbCommand()
public void EnlistTransaction(Transaction transaction)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
protected void OnStateChange(StateChangeEventArgs stateChange)
internal bool get_ForceNewConnection()
internal void set_ForceNewConnection(bool value)
public void Open()
public Task OpenAsync()
public Task OpenAsync(CancellationToken cancellationToken)
}
internal System.Data.Common.DbConnectionOptionKeywords : object {
internal string Driver
internal string Pwd
internal string UID
internal string DataProvider
internal string ExtendedProperties
internal string FileName
internal string Provider
internal string RemoteProvider
internal string Password
internal string UserID
}
internal System.Data.Common.DbConnectionOptions : object {
private string ConnectionStringValidKeyPattern
private string ConnectionStringValidValuePattern
private string ConnectionStringQuoteValuePattern
private string ConnectionStringQuoteOdbcValuePattern
internal string DataDirectory
private Regex ConnectionStringValidKeyRegex
private Regex ConnectionStringValidValueRegex
private Regex ConnectionStringQuoteValueRegex
private Regex ConnectionStringQuoteOdbcValueRegex
private string _usersConnectionString
private Hashtable _parsetable
internal NameValuePair KeyChain
internal bool HasPasswordKeyword
internal bool HasUserIdKeyword
internal bool UseOdbcRules
private PermissionSet _permissionset
private Dictionary`2<string, int> <>f__switch$map0
internal bool HasBlankPassword
internal bool HasPersistablePassword
public bool IsEmpty
internal Hashtable Parsetable
public ICollection Keys
public string Item
public void .ctor(string connectionString)
public void .ctor(string connectionString, Hashtable synonyms, bool useOdbcRules)
protected void .ctor(DbConnectionOptions connectionOptions)
public string UsersConnectionString(bool hidePassword)
private string UsersConnectionString(bool hidePassword, bool forceHidePassword)
internal string UsersConnectionStringForTrace()
internal bool get_HasBlankPassword()
internal bool get_HasPersistablePassword()
public bool get_IsEmpty()
internal Hashtable get_Parsetable()
public ICollection get_Keys()
public string get_Item(string keyword)
internal void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules)
public bool ConvertValueToBoolean(string keyName, bool defaultValue)
internal bool ConvertValueToBooleanInternal(string keyName, string stringValue)
public bool ConvertValueToIntegratedSecurity()
internal bool ConvertValueToIntegratedSecurityInternal(string stringValue)
public int ConvertValueToInt32(string keyName, int defaultValue)
internal int ConvertToInt32Internal(string keyname, string stringValue)
public string ConvertValueToString(string keyName, string defaultValue)
private bool CompareInsensitiveInvariant(string strvalue, string strconst)
public bool ContainsKey(string keyword)
protected internal PermissionSet CreatePermissionSet()
internal void DemandPermission()
protected internal string Expand()
internal string ExpandDataDirectory(string keyword, string value, String& datadir)
internal string ExpandDataDirectories(String& filename, Int32& position)
internal string ExpandKeyword(string keyword, string replacementValue)
private string GetKeyName(StringBuilder buffer)
private string GetKeyValue(StringBuilder buffer, bool trimWhitespace)
internal int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue)
private bool IsValueValidInternal(string keyvalue)
private bool IsKeyNameValid(string keyname)
private NameValuePair ParseInternal(Hashtable parsetable, string connectionString, bool buildChain, Hashtable synonyms, bool firstKey)
internal NameValuePair ReplacePasswordPwd(String& constr, bool fakePassword)
internal void ValidateKeyValuePair(string keyword, string value)
}
internal System.Data.Common.DbConnectionPoolKey : object {
private string _connectionString
internal string ConnectionString
internal void .ctor(string connectionString)
protected void .ctor(DbConnectionPoolKey key)
private object System.ICloneable.Clone()
internal string get_ConnectionString()
internal void set_ConnectionString(string value)
public bool Equals(object obj)
public int GetHashCode()
}
internal System.Data.Common.DBConnectionString : object {
private string _encryptedUsersConnectionString
private Hashtable _parsetable
private NameValuePair _keychain
private bool _hasPassword
private String[] _restrictionValues
private string _restrictions
private KeyRestrictionBehavior _behavior
private string _encryptedActualConnectionString
internal KeyRestrictionBehavior Behavior
internal string ConnectionString
internal bool IsEmpty
internal NameValuePair KeyChain
internal string Restrictions
internal string Item
internal void .ctor(string value, string restrictions, KeyRestrictionBehavior behavior, Hashtable synonyms, bool useOdbcRules)
internal void .ctor(DbConnectionOptions connectionOptions)
private void .ctor(DbConnectionOptions connectionOptions, string restrictions, KeyRestrictionBehavior behavior, Hashtable synonyms, bool mustCloneDictionary)
private void .ctor(DBConnectionString connectionString, String[] restrictionValues, KeyRestrictionBehavior behavior)
internal KeyRestrictionBehavior get_Behavior()
internal string get_ConnectionString()
internal bool get_IsEmpty()
internal NameValuePair get_KeyChain()
internal string get_Restrictions()
internal string get_Item(string keyword)
internal bool ContainsKey(string keyword)
internal DBConnectionString Intersect(DBConnectionString entry)
private void ValidateCombinedSet(DBConnectionString componentSet, DBConnectionString combinedSet)
private bool IsRestrictedKeyword(string key)
internal bool IsSupersetOf(DBConnectionString entry)
private String[] NewRestrictionAllowOnly(String[] allowonly, String[] preventusage)
private String[] NewRestrictionIntersect(String[] a, String[] b)
private String[] NoDuplicateUnion(String[] a, String[] b)
private String[] ParseRestrictions(string restrictions, Hashtable synonyms)
internal String[] RemoveDuplicates(String[] restrictions)
private void Verify(String[] restrictionValues)
}
public System.Data.Common.DbConnectionStringBuilder : object {
private Dictionary`2<string, object> _currentValues
private string _connectionString
private PropertyDescriptorCollection _propertyDescriptors
private bool _browsableConnectionString
private bool UseOdbcRules
private int _objectTypeCount
internal int _objectID
private object System.Collections.IDictionary.Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private ICollection Collection
private IDictionary Dictionary
private Dictionary`2<string, object> CurrentValues
public object Item
public bool BrowsableConnectionString
public string ConnectionString
public int Count
public bool IsReadOnly
public bool IsFixedSize
public ICollection Keys
internal int ObjectID
public ICollection Values
public void .ctor(bool useOdbcRules)
private ICollection get_Collection()
private IDictionary get_Dictionary()
private Dictionary`2<string, object> get_CurrentValues()
private object System.Collections.IDictionary.get_Item(object keyword)
private void System.Collections.IDictionary.set_Item(object keyword, object value)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public bool get_BrowsableConnectionString()
public void set_BrowsableConnectionString(bool value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsFixedSize()
private bool System.Collections.ICollection.get_IsSynchronized()
public ICollection get_Keys()
internal int get_ObjectID()
private object System.Collections.ICollection.get_SyncRoot()
public ICollection get_Values()
internal string ConvertValueToString(object value)
private void System.Collections.IDictionary.Add(object keyword, object value)
public void Add(string keyword, object value)
public void AppendKeyValuePair(StringBuilder builder, string keyword, string value)
public void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules)
public void Clear()
protected internal void ClearPropertyDescriptors()
private bool System.Collections.IDictionary.Contains(object keyword)
public bool ContainsKey(string keyword)
private void System.Collections.ICollection.CopyTo(Array array, int index)
public bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
private string ObjectToString(object keyword)
private void System.Collections.IDictionary.Remove(object keyword)
public bool Remove(string keyword)
public bool ShouldSerialize(string keyword)
public string ToString()
public bool TryGetValue(string keyword, Object& value)
internal Attribute[] GetAttributesFromCollection(AttributeCollection collection)
private PropertyDescriptorCollection GetProperties()
protected void GetProperties(Hashtable propertyDescriptors)
private PropertyDescriptorCollection GetProperties(Attribute[] attributes)
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
internal System.Data.Common.DbConnectionStringBuilderDescriptor : PropertyDescriptor {
private Type _componentType
private Type _propertyType
private bool _isReadOnly
private bool _refreshOnChange
internal bool RefreshOnChange
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
internal void .ctor(string propertyName, Type componentType, Type propertyType, bool isReadOnly, Attribute[] attributes)
internal bool get_RefreshOnChange()
internal void set_RefreshOnChange(bool value)
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public bool CanResetValue(object component)
public object GetValue(object component)
public void ResetValue(object component)
public void SetValue(object component, object value)
public bool ShouldSerializeValue(object component)
}
internal System.Data.Common.DbConnectionStringBuilderHelper : object {
public int ConvertToInt32(object value)
public bool ConvertToBoolean(object value)
}
internal System.Data.Common.DbConnectionStringBuilderUtil : object {
private string ApplicationIntentReadWriteString
private string ApplicationIntentReadOnlyString
private string SqlPasswordString
private string ActiveDirectoryPasswordString
private string ActiveDirectoryIntegratedString
private string ColumnEncryptionSettingEnabledString
private string ColumnEncryptionSettingDisabledString
internal bool ConvertToBoolean(object value)
internal bool ConvertToIntegratedSecurity(object value)
internal int ConvertToInt32(object value)
internal string ConvertToString(object value)
internal bool TryConvertToApplicationIntent(string value, ApplicationIntent& result)
internal bool IsValidApplicationIntentValue(ApplicationIntent value)
internal string ApplicationIntentToString(ApplicationIntent value)
internal ApplicationIntent ConvertToApplicationIntent(string keyword, object value)
internal bool TryConvertToAuthenticationType(string value, SqlAuthenticationMethod& result)
internal bool TryConvertToColumnEncryptionSetting(string value, SqlConnectionColumnEncryptionSetting& result)
internal bool IsValidColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value)
internal string ColumnEncryptionSettingToString(SqlConnectionColumnEncryptionSetting value)
internal bool IsValidAuthenticationTypeValue(SqlAuthenticationMethod value)
internal string AuthenticationTypeToString(SqlAuthenticationMethod value)
internal SqlAuthenticationMethod ConvertToAuthenticationType(string keyword, object value)
internal SqlConnectionColumnEncryptionSetting ConvertToColumnEncryptionSetting(string keyword, object value)
}
internal System.Data.Common.DbConnectionStringDefaults : object {
internal string Driver
internal string Dsn
internal bool AdoNetPooler
internal string FileName
internal int OleDbServices
internal string Provider
internal bool Unicode
internal bool OmitOracleConnectionName
internal ApplicationIntent ApplicationIntent
internal string ApplicationName
internal bool AsynchronousProcessing
internal string AttachDBFilename
internal int ConnectTimeout
internal bool ConnectionReset
internal bool ContextConnection
internal string CurrentLanguage
internal string DataSource
internal bool Encrypt
internal bool Enlist
internal string FailoverPartner
internal string InitialCatalog
internal bool IntegratedSecurity
internal int LoadBalanceTimeout
internal bool MultipleActiveResultSets
internal bool MultiSubnetFailover
internal bool TransparentNetworkIPResolution
internal int MaxPoolSize
internal int MinPoolSize
internal string NetworkLibrary
internal int PacketSize
internal string Password
internal bool PersistSecurityInfo
internal bool Pooling
internal bool TrustServerCertificate
internal string TypeSystemVersion
internal string UserID
internal bool UserInstance
internal bool Replication
internal string WorkstationID
internal string TransactionBinding
internal int ConnectRetryCount
internal int ConnectRetryInterval
internal SqlAuthenticationMethod Authentication
internal SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting
}
internal System.Data.Common.DbConnectionStringKeywords : object {
internal string Driver
internal string Dsn
internal string FileDsn
internal string SaveFile
internal string FileName
internal string OleDbServices
internal string Provider
internal string Unicode
internal string OmitOracleConnectionName
internal string ApplicationIntent
internal string ApplicationName
internal string AsynchronousProcessing
internal string AttachDBFilename
internal string ConnectTimeout
internal string ConnectionReset
internal string ContextConnection
internal string CurrentLanguage
internal string Encrypt
internal string FailoverPartner
internal string InitialCatalog
internal string MultipleActiveResultSets
internal string MultiSubnetFailover
internal string TransparentNetworkIPResolution
internal string NetworkLibrary
internal string PacketSize
internal string Replication
internal string TransactionBinding
internal string TrustServerCertificate
internal string TypeSystemVersion
internal string UserInstance
internal string WorkstationID
internal string ConnectRetryCount
internal string ConnectRetryInterval
internal string Authentication
internal string Certificate
internal string ColumnEncryptionSetting
internal string DataSource
internal string IntegratedSecurity
internal string Password
internal string PersistSecurityInfo
internal string UserID
internal string Enlist
internal string LoadBalanceTimeout
internal string MaxPoolSize
internal string Pooling
internal string MinPoolSize
}
internal System.Data.Common.DbConnectionStringSynonyms : object {
internal string Async
internal string APP
internal string EXTENDEDPROPERTIES
internal string INITIALFILENAME
internal string CONNECTIONTIMEOUT
internal string TIMEOUT
internal string LANGUAGE
internal string ADDR
internal string ADDRESS
internal string SERVER
internal string NETWORKADDRESS
internal string DATABASE
internal string TRUSTEDCONNECTION
internal string ConnectionLifetime
internal string NET
internal string NETWORK
internal string WorkaroundOracleBug914652
internal string Pwd
internal string PERSISTSECURITYINFO
internal string UID
internal string User
internal string WSID
}
public System.Data.Common.DbDataAdapter : DataAdapter {
public string DefaultSourceTableName
internal object ParameterValueNonNullValue
internal object ParameterValueNullValue
private IDbCommand _deleteCommand
private IDbCommand _insertCommand
private IDbCommand _selectCommand
private IDbCommand _updateCommand
private CommandBehavior _fillCommandBehavior
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
private IDbDataAdapter _IDbDataAdapter
public DbCommand DeleteCommand
protected internal CommandBehavior FillCommandBehavior
public DbCommand InsertCommand
public DbCommand SelectCommand
public int UpdateBatchSize
public DbCommand UpdateCommand
private MissingMappingAction UpdateMappingAction
private MissingSchemaAction UpdateSchemaAction
protected void .ctor(DbDataAdapter adapter)
private IDbDataAdapter get__IDbDataAdapter()
public DbCommand get_DeleteCommand()
public void set_DeleteCommand(DbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
protected internal CommandBehavior get_FillCommandBehavior()
protected internal void set_FillCommandBehavior(CommandBehavior value)
public DbCommand get_InsertCommand()
public void set_InsertCommand(DbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
public DbCommand get_SelectCommand()
public void set_SelectCommand(DbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
public int get_UpdateBatchSize()
public void set_UpdateBatchSize(int value)
public DbCommand get_UpdateCommand()
public void set_UpdateCommand(DbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private MissingMappingAction get_UpdateMappingAction()
private MissingSchemaAction get_UpdateSchemaAction()
protected int AddToBatch(IDbCommand command)
protected void ClearBatch()
private object System.ICloneable.Clone()
private void CloneFrom(DbDataAdapter from)
private IDbCommand CloneCommand(IDbCommand command)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void Dispose(bool disposing)
protected int ExecuteBatch()
public DataTable FillSchema(DataTable dataTable, SchemaType schemaType)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable)
protected DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior)
protected DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior)
private object FillSchemaInternal(DataSet dataset, DataTable datatable, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior)
public int Fill(DataSet dataSet)
public int Fill(DataSet dataSet, string srcTable)
public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable)
protected int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior)
public int Fill(DataTable dataTable)
public int Fill(int startRecord, int maxRecords, DataTable[] dataTables)
protected int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior)
protected int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior)
private int FillInternal(DataSet dataset, DataTable[] datatables, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior)
protected IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex)
protected bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error)
public IDataParameter[] GetFillParameters()
internal DataTableMapping GetTableMapping(DataTable dataTable)
protected void InitializeBatching()
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
private void ParameterInput(IDataParameterCollection parameters, StatementType typeIndex, DataRow row, DataTableMapping mappings)
private void ParameterOutput(IDataParameter parameter, DataRow row, DataTableMapping mappings, MissingMappingAction missingMapping, MissingSchemaAction missingSchema)
private void ParameterOutput(IDataParameterCollection parameters, DataRow row, DataTableMapping mappings)
protected void TerminateBatching()
public int Update(DataSet dataSet)
public int Update(DataRow[] dataRows)
public int Update(DataTable dataTable)
public int Update(DataSet dataSet, string srcTable)
protected int Update(DataRow[] dataRows, DataTableMapping tableMapping)
private void UpdateBatchExecute(BatchCommandInfo[] batchCommands, int commandCount, RowUpdatedEventArgs rowUpdatedEvent)
private ConnectionState UpdateConnectionOpen(IDbConnection connection, StatementType statementType, IDbConnection[] connections, ConnectionState[] connectionStates, bool useSelectConnectionState)
private int UpdateFromDataTable(DataTable dataTable, DataTableMapping tableMapping)
private void UpdateRowExecute(RowUpdatedEventArgs rowUpdatedEvent, IDbCommand dataCommand, StatementType cmdIndex)
private int UpdatedRowStatus(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount)
private int UpdatedRowStatusContinue(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount)
private int UpdatedRowStatusErrors(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount)
private int UpdatedRowStatusSkip(BatchCommandInfo[] batchCommands, int commandCount)
private void UpdatingRowStatusErrors(RowUpdatingEventArgs rowUpdatedEvent, DataRow dataRow)
private IDbConnection GetConnection1(DbDataAdapter adapter)
private IDbConnection GetConnection3(DbDataAdapter adapter, IDbCommand command, string method)
private IDbConnection GetConnection4(DbDataAdapter adapter, IDbCommand command, StatementType statementType, bool isCommandFromRowUpdating)
private DataRowVersion GetParameterSourceVersion(StatementType statementType, IDataParameter parameter)
private void QuietClose(IDbConnection connection, ConnectionState originalState)
private void QuietOpen(IDbConnection connection, ConnectionState& originalState)
}
public System.Data.Common.DBDataPermission : CodeAccessPermission {
private bool _isUnrestricted
private bool _allowBlankPassword
private NameValuePermission _keyvaluetree
private ArrayList _keyvalues
public bool AllowBlankPassword
protected void .ctor(PermissionState state)
protected void .ctor(PermissionState state, bool allowBlankPassword)
protected void .ctor(DBDataPermission permission)
protected void .ctor(DBDataPermissionAttribute permissionAttribute)
internal void .ctor(DbConnectionOptions connectionOptions)
public bool get_AllowBlankPassword()
public void set_AllowBlankPassword(bool value)
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
internal void AddPermissionEntry(DBConnectionString entry)
protected void Clear()
public IPermission Copy()
private void CopyFrom(DBDataPermission permission)
protected DBDataPermission CreateInstance()
public IPermission Intersect(IPermission target)
private bool IsEmpty()
public bool IsSubsetOf(IPermission target)
public bool IsUnrestricted()
public IPermission Union(IPermission target)
private string DecodeXmlValue(string value)
private string EncodeXmlValue(string value)
public void FromXml(SecurityElement securityElement)
public SecurityElement ToXml()
}
public System.Data.Common.DBDataPermissionAttribute : CodeAccessSecurityAttribute {
private bool _allowBlankPassword
private string _connectionString
private string _restrictions
private KeyRestrictionBehavior _behavior
public bool AllowBlankPassword
public string ConnectionString
public KeyRestrictionBehavior KeyRestrictionBehavior
public string KeyRestrictions
protected void .ctor(SecurityAction action)
public bool get_AllowBlankPassword()
public void set_AllowBlankPassword(bool value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public KeyRestrictionBehavior get_KeyRestrictionBehavior()
public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value)
public string get_KeyRestrictions()
public void set_KeyRestrictions(string value)
public bool ShouldSerializeConnectionString()
public bool ShouldSerializeKeyRestrictions()
}
public System.Data.Common.DbDataReader : MarshalByRefObject {
public int Depth
public int FieldCount
public bool HasRows
public bool IsClosed
public int RecordsAffected
public int VisibleFieldCount
public object Item
public object Item
public int get_Depth()
public int get_FieldCount()
public bool get_HasRows()
public bool get_IsClosed()
public int get_RecordsAffected()
public int get_VisibleFieldCount()
public object get_Item(int ordinal)
public object get_Item(string name)
public void Close()
public void Dispose()
protected void Dispose(bool disposing)
public string GetDataTypeName(int ordinal)
public IEnumerator GetEnumerator()
public Type GetFieldType(int ordinal)
public string GetName(int ordinal)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
public bool GetBoolean(int ordinal)
public byte GetByte(int ordinal)
public long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length)
public char GetChar(int ordinal)
public long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length)
public DbDataReader GetData(int ordinal)
private IDataReader System.Data.IDataRecord.GetData(int ordinal)
protected DbDataReader GetDbDataReader(int ordinal)
public DateTime GetDateTime(int ordinal)
public decimal GetDecimal(int ordinal)
public double GetDouble(int ordinal)
public float GetFloat(int ordinal)
public Guid GetGuid(int ordinal)
public short GetInt16(int ordinal)
public int GetInt32(int ordinal)
public long GetInt64(int ordinal)
public Type GetProviderSpecificFieldType(int ordinal)
public object GetProviderSpecificValue(int ordinal)
public int GetProviderSpecificValues(Object[] values)
public string GetString(int ordinal)
public Stream GetStream(int ordinal)
public TextReader GetTextReader(int ordinal)
public object GetValue(int ordinal)
public T GetFieldValue(int ordinal)
public Task`1<T> GetFieldValueAsync(int ordinal)
public Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken)
public int GetValues(Object[] values)
public bool IsDBNull(int ordinal)
public Task`1<bool> IsDBNullAsync(int ordinal)
public Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken)
public bool NextResult()
public bool Read()
public Task`1<bool> ReadAsync()
public Task`1<bool> ReadAsync(CancellationToken cancellationToken)
public Task`1<bool> NextResultAsync()
public Task`1<bool> NextResultAsync(CancellationToken cancellationToken)
}
public System.Data.Common.DbDataRecord : object {
public int FieldCount
public object Item
public object Item
public int get_FieldCount()
public object get_Item(int i)
public object get_Item(string name)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public IDataReader GetData(int i)
protected DbDataReader GetDbDataReader(int i)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
public System.Data.Common.DbDataSourceEnumerator : object {
public DataTable GetDataSources()
}
public System.Data.Common.DbEnumerator : object {
internal IDataReader _reader
internal DbDataRecord _current
internal SchemaInfo[] _schemaInfo
internal PropertyDescriptorCollection _descriptors
private FieldNameLookup _fieldNameLookup
private bool closeReader
public object Current
public void .ctor(IDataReader reader)
public void .ctor(IDataReader reader, bool closeReader)
public void .ctor(DbDataReader reader)
public void .ctor(DbDataReader reader, bool closeReader)
public object get_Current()
public bool MoveNext()
public void Reset()
private void BuildSchemaInfo()
}
public System.Data.Common.DbException : ExternalException {
protected void .ctor(string message)
protected void .ctor(string message, Exception innerException)
protected void .ctor(string message, int errorCode)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.Common.DbMetaDataCollectionNames : object {
public string MetaDataCollections
public string DataSourceInformation
public string DataTypes
public string Restrictions
public string ReservedWords
}
public System.Data.Common.DbMetaDataColumnNames : object {
public string CollectionName
public string ColumnSize
public string CompositeIdentifierSeparatorPattern
public string CreateFormat
public string CreateParameters
public string DataSourceProductName
public string DataSourceProductVersion
public string DataType
public string DataSourceProductVersionNormalized
public string GroupByBehavior
public string IdentifierCase
public string IdentifierPattern
public string IsAutoIncrementable
public string IsBestMatch
public string IsCaseSensitive
public string IsConcurrencyType
public string IsFixedLength
public string IsFixedPrecisionScale
public string IsLiteralSupported
public string IsLong
public string IsNullable
public string IsSearchable
public string IsSearchableWithLike
public string IsUnsigned
public string LiteralPrefix
public string LiteralSuffix
public string MaximumScale
public string MinimumScale
public string NumberOfIdentifierParts
public string NumberOfRestrictions
public string OrderByColumnsInSelect
public string ParameterMarkerFormat
public string ParameterMarkerPattern
public string ParameterNameMaxLength
public string ParameterNamePattern
public string ProviderDbType
public string QuotedIdentifierCase
public string QuotedIdentifierPattern
public string ReservedWord
public string StatementSeparatorPattern
public string StringLiteralPattern
public string SupportedJoinOperators
public string TypeName
}
public System.Data.Common.DbParameter : MarshalByRefObject {
private byte System.Data.IDbDataParameter.Precision
private byte System.Data.IDbDataParameter.Scale
public DbType DbType
public ParameterDirection Direction
public bool IsNullable
public string ParameterName
public byte Precision
public byte Scale
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
public object Value
public DbType get_DbType()
public void set_DbType(DbType value)
public void ResetDbType()
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public string get_ParameterName()
public void set_ParameterName(string value)
private byte System.Data.IDbDataParameter.get_Precision()
private void System.Data.IDbDataParameter.set_Precision(byte value)
private byte System.Data.IDbDataParameter.get_Scale()
private void System.Data.IDbDataParameter.set_Scale(byte value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
}
public System.Data.Common.DbParameterCollection : MarshalByRefObject {
private object System.Collections.IList.Item
private object System.Data.IDataParameterCollection.Item
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public DbParameter Item
public DbParameter Item
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private object System.Data.IDataParameterCollection.get_Item(string parameterName)
private void System.Data.IDataParameterCollection.set_Item(string parameterName, object value)
public DbParameter get_Item(int index)
public void set_Item(int index, DbParameter value)
public DbParameter get_Item(string parameterName)
public void set_Item(string parameterName, DbParameter value)
public int Add(object value)
public void AddRange(Array values)
public bool Contains(object value)
public bool Contains(string value)
public void CopyTo(Array array, int index)
public void Clear()
public IEnumerator GetEnumerator()
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
public int IndexOf(object value)
public int IndexOf(string parameterName)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
}
public System.Data.Common.DbProviderConfigurationHandler : object {
internal string settings
internal NameValueCollection CloneParent(NameValueCollection parentConfig)
public object Create(object parent, object configContext, XmlNode section)
internal object CreateStatic(object parent, object configContext, XmlNode section)
internal string RemoveAttribute(XmlNode node, string name)
}
public System.Data.Common.DbProviderFactories : object {
private string AssemblyQualifiedName
private string Instance
private string InvariantName
private string Name
private string Description
private ConnectionState _initState
private DataTable _providerTable
private object _lockobj
public DbProviderFactory GetFactory(string providerInvariantName)
public DbProviderFactory GetFactory(DataRow providerRow)
public DbProviderFactory GetFactory(DbConnection connection)
public DataTable GetFactoryClasses()
private DataTable IncludeFrameworkFactoryClasses(DataTable configDataTable)
private DataTable GetProviderTable()
private void Initialize()
}
public System.Data.Common.DbProviderFactoriesConfigurationHandler : object {
internal string sectionName
internal string providerGroup
internal string odbcProviderName
internal string odbcProviderDescription
internal string oledbProviderName
internal string oledbProviderDescription
internal string oracleclientProviderName
internal string oracleclientProviderNamespace
internal string oracleclientProviderDescription
internal string sqlclientProviderName
internal string sqlclientProviderDescription
internal string sqlclientPartialAssemblyQualifiedName
internal string oracleclientPartialAssemblyQualifiedName
public object Create(object parent, object configContext, XmlNode section)
internal object CreateStatic(object parent, object configContext, XmlNode section)
private void HandleProviders(DataSet config, object configContext, XmlNode section, string sectionName)
internal DataTable CreateProviderDataTable()
}
public System.Data.Common.DbProviderFactory : object {
public bool CanCreateDataSourceEnumerator
public bool get_CanCreateDataSourceEnumerator()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
public DbDataSourceEnumerator CreateDataSourceEnumerator()
}
internal System.Data.Common.DbProviderFactoryConfigSection : object {
private Type factType
private string name
private string invariantName
private string description
private string assemblyQualifiedName
public string Name
public string InvariantName
public string Description
public string AssemblyQualifiedName
public void .ctor(Type FactoryType, string FactoryName, string FactoryDescription)
public void .ctor(string FactoryName, string FactoryInvariantName, string FactoryDescription, string FactoryAssemblyQualifiedName)
public bool IsNull()
public string get_Name()
public string get_InvariantName()
public string get_Description()
public string get_AssemblyQualifiedName()
}
internal System.Data.Common.DbProvidersIndex : Enum {
public int value__
public DbProvidersIndex Odbc
public DbProvidersIndex OleDb
public DbProvidersIndex OracleClient
public DbProvidersIndex SqlClient
public DbProvidersIndex DbProvidersIndexCount
}
public System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
private bool _isProviderSpecificTypeProperty
public bool IsProviderSpecificTypeProperty
public void .ctor(bool isProviderSpecificTypeProperty)
public bool get_IsProviderSpecificTypeProperty()
}
internal System.Data.Common.DbSchemaRow : object {
internal string SchemaMappingUnsortedIndex
private DbSchemaTable schemaTable
private DataRow dataRow
internal DataRow DataRow
internal string ColumnName
internal int Size
internal string BaseColumnName
internal string BaseServerName
internal string BaseCatalogName
internal string BaseSchemaName
internal string BaseTableName
internal bool IsAutoIncrement
internal bool IsUnique
internal bool IsRowVersion
internal bool IsKey
internal bool IsExpression
internal bool IsHidden
internal bool IsLong
internal bool IsReadOnly
internal Type DataType
internal bool AllowDBNull
internal int UnsortedIndex
internal void .ctor(DbSchemaTable schemaTable, DataRow dataRow)
internal DbSchemaRow[] GetSortedSchemaRows(DataTable dataTable, bool returnProviderSpecificTypes)
internal DataRow get_DataRow()
internal string get_ColumnName()
internal int get_Size()
internal string get_BaseColumnName()
internal string get_BaseServerName()
internal string get_BaseCatalogName()
internal string get_BaseSchemaName()
internal string get_BaseTableName()
internal bool get_IsAutoIncrement()
internal bool get_IsUnique()
internal bool get_IsRowVersion()
internal bool get_IsKey()
internal bool get_IsExpression()
internal bool get_IsHidden()
internal bool get_IsLong()
internal bool get_IsReadOnly()
internal Type get_DataType()
internal bool get_AllowDBNull()
internal int get_UnsortedIndex()
}
internal System.Data.Common.DbSchemaTable : object {
private String[] DBCOLUMN_NAME
internal DataTable dataTable
private DataColumnCollection columns
private DataColumn[] columnCache
private bool _returnProviderSpecificTypes
internal DataColumn ColumnName
internal DataColumn Size
internal DataColumn BaseServerName
internal DataColumn BaseColumnName
internal DataColumn BaseTableName
internal DataColumn BaseCatalogName
internal DataColumn BaseSchemaName
internal DataColumn IsAutoIncrement
internal DataColumn IsUnique
internal DataColumn IsKey
internal DataColumn IsRowVersion
internal DataColumn AllowDBNull
internal DataColumn IsExpression
internal DataColumn IsHidden
internal DataColumn IsLong
internal DataColumn IsReadOnly
internal DataColumn UnsortedIndex
internal DataColumn DataType
internal void .ctor(DataTable dataTable, bool returnProviderSpecificTypes)
internal DataColumn get_ColumnName()
internal DataColumn get_Size()
internal DataColumn get_BaseServerName()
internal DataColumn get_BaseColumnName()
internal DataColumn get_BaseTableName()
internal DataColumn get_BaseCatalogName()
internal DataColumn get_BaseSchemaName()
internal DataColumn get_IsAutoIncrement()
internal DataColumn get_IsUnique()
internal DataColumn get_IsKey()
internal DataColumn get_IsRowVersion()
internal DataColumn get_AllowDBNull()
internal DataColumn get_IsExpression()
internal DataColumn get_IsHidden()
internal DataColumn get_IsLong()
internal DataColumn get_IsReadOnly()
internal DataColumn get_UnsortedIndex()
internal DataColumn get_DataType()
private DataColumn CachedDataColumn(ColumnEnum column)
private DataColumn CachedDataColumn(ColumnEnum column, ColumnEnum column2)
}
public System.Data.Common.DbTransaction : MarshalByRefObject {
private IDbConnection System.Data.IDbTransaction.Connection
public DbConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
public DbConnection get_Connection()
private IDbConnection System.Data.IDbTransaction.get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public void Commit()
public void Dispose()
protected void Dispose(bool disposing)
public void Rollback()
}
internal System.Data.Common.DbTypes : object {
internal Type TypeOfBoolean
internal Type TypeOfSByte
internal Type TypeOfChar
internal Type TypeOfInt16
internal Type TypeOfInt32
internal Type TypeOfInt64
internal Type TypeOfByte
internal Type TypeOfUInt16
internal Type TypeOfUInt32
internal Type TypeOfUInt64
internal Type TypeOfDouble
internal Type TypeOfSingle
internal Type TypeOfDecimal
internal Type TypeOfString
internal Type TypeOfDateTime
internal Type TypeOfObject
internal Type TypeOfGuid
internal Type TypeOfType
internal Type TypeOfByteArray
internal Type TypeOfFloat
internal Type TypeOfTimespan
}
internal System.Data.Common.DecimalStorage : DataStorage {
private decimal defaultValue
private Decimal[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.DoubleStorage : DataStorage {
private double defaultValue
private Double[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.ExceptionHelper : object {
internal ArgumentException InvalidSizeValue(int value)
internal void CheckEnumValue(Type enumType, object value)
internal ArgumentException InvalidEnumValueException(string enumeration, object value)
internal ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value)
internal ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value)
internal InvalidOperationException NoStoredProcedureExists(string procedureName)
internal ArgumentNullException ArgumentNull(string parameter)
internal InvalidOperationException TransactionRequired()
internal ArgumentOutOfRangeException InvalidOleDbType(int value)
internal ArgumentException InvalidDbType(int value)
internal InvalidOperationException DeriveParametersNotSupported(Type type, CommandType commandType)
internal InvalidOperationException ReaderClosed(string mehodName)
internal ArgumentOutOfRangeException InvalidSqlDbType(int value)
internal ArgumentException UnknownDataType(string type1, string type2)
internal InvalidOperationException TransactionNotInitialized()
internal InvalidOperationException TransactionNotUsable(Type type)
internal InvalidOperationException ParametersNotInitialized(int parameterPosition, string parameterName, string parameterType)
internal InvalidOperationException WrongParameterSize(string provider)
internal InvalidOperationException ConnectionNotOpened(string operationName, string connectionState)
internal InvalidOperationException ConnectionNotInitialized(string methodName)
internal InvalidOperationException OpenConnectionRequired(string methodName, object connectionState)
internal InvalidOperationException OpenedReaderExists()
internal InvalidOperationException ConnectionAlreadyOpen(object connectionState)
internal InvalidOperationException ConnectionClosed()
internal InvalidOperationException ConnectionStringNotInitialized()
internal InvalidOperationException ConnectionIsBusy(object commandType, object connectionState)
internal InvalidOperationException NotAllowedWhileConnectionOpen(string propertyName, object connectionState)
internal ArgumentException OleDbNoProviderSpecified()
internal ArgumentException InvalidValueForKey(string key)
internal InvalidOperationException ParameterSizeNotInitialized(int parameterIndex, string parameterName, string parameterType, int parameterSize)
internal ArgumentException InvalidUpdateStatus(UpdateStatus status)
internal InvalidOperationException UpdateRequiresCommand(string command)
internal DataException RowUpdatedError()
internal ArgumentNullException CollectionNoNullsAllowed(object collection, object objectsType)
internal ArgumentException CollectionAlreadyContains(object objectType, string propertyName, object propertyValue, object collection)
internal string GetExceptionMessage(string exceptionMessage, Object[] args)
internal string GetExceptionMessage(string exceptionMessage)
}
internal System.Data.Common.GreenMethods : object {
private string ExtensionAssemblyRef
private string SystemDataCommonDbProviderServices_TypeName
internal Type SystemDataCommonDbProviderServices_Type
private string SystemDataSqlClientSqlProviderServices_TypeName
private FieldInfo SystemDataSqlClientSqlProviderServices_Instance_FieldInfo
internal object SystemDataSqlClientSqlProviderServices_Instance()
private object SystemDataSqlClientSqlProviderServices_Instance_GetValue()
}
public System.Data.Common.GroupByBehavior : Enum {
public int value__
public GroupByBehavior Unknown
public GroupByBehavior NotSupported
public GroupByBehavior Unrelated
public GroupByBehavior MustContainAll
public GroupByBehavior ExactMatch
}
internal System.Data.Common.HandlerBase : object {
internal void CheckForChildNodes(XmlNode node)
private void CheckForNonElement(XmlNode node)
internal void CheckForUnrecognizedAttributes(XmlNode node)
internal bool IsIgnorableAlsoCheckForNonElement(XmlNode node)
internal string RemoveAttribute(XmlNode node, string name, bool required, bool allowEmpty)
internal DataSet CloneParent(DataSet parentConfig, bool insenstive)
}
public System.Data.Common.IdentifierCase : Enum {
public int value__
public IdentifierCase Unknown
public IdentifierCase Insensitive
public IdentifierCase Sensitive
}
internal System.Data.Common.Int16Storage : DataStorage {
private short defaultValue
private Int16[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.Int32Storage : DataStorage {
private int defaultValue
private Int32[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.Int64Storage : DataStorage {
private long defaultValue
private Int64[] values
internal void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.LoadAdapter : DataAdapter {
internal int FillFromReader(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords)
}
internal System.Data.Common.MultipartIdentifier : object {
private int MaxParts
internal int ServerIndex
internal int CatalogIndex
internal int SchemaIndex
internal int TableIndex
internal String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, string property, bool ThrowOnEmptyMultipartName)
private void IncrementStringCount(string name, String[] ary, Int32& position, string property)
private bool IsWhitespace(char ch)
internal String[] ParseMultipartIdentifier(string name, string leftQuote, string rightQuote, char separator, int limit, bool removequotes, string property, bool ThrowOnEmptyMultipartName)
}
internal System.Data.Common.NameValuePair : object {
private string _name
private string _value
private int _length
private NameValuePair _next
internal int Length
internal string Name
internal NameValuePair Next
internal string Value
internal void .ctor(string name, string value, int length)
internal int get_Length()
internal string get_Name()
internal NameValuePair get_Next()
internal void set_Next(NameValuePair value)
internal string get_Value()
}
internal System.Data.Common.NameValuePermission : object {
private string _value
private DBConnectionString _entry
private NameValuePermission[] _tree
internal NameValuePermission Default
private void .ctor(string keyword)
private void .ctor(string value, DBConnectionString entry)
private void .ctor(NameValuePermission permit)
private int System.IComparable.CompareTo(object a)
internal void AddEntry(NameValuePermission kvtree, ArrayList entries, DBConnectionString entry)
internal void Intersect(ArrayList entries, NameValuePermission target)
private void Add(NameValuePermission permit)
internal bool CheckValueForKeyPermit(DBConnectionString parsetable)
private NameValuePermission CheckKeyForValue(string keyInQuestion)
internal NameValuePermission CopyNameValue()
}
internal System.Data.Common.NativeMethods : object {
internal IntPtr MapViewOfFile(IntPtr hFileMappingObject, int dwDesiredAccess, int dwFileOffsetHigh, int dwFileOffsetLow, IntPtr dwNumberOfBytesToMap)
internal IntPtr OpenFileMappingA(int dwDesiredAccess, bool bInheritHandle, string lpName)
internal IntPtr CreateFileMappingA(IntPtr hFile, IntPtr pAttr, int flProtect, int dwMaximumSizeHigh, int dwMaximumSizeLow, string lpName)
internal bool UnmapViewOfFile(IntPtr lpBaseAddress)
internal bool CloseHandle(IntPtr handle)
internal bool AllocateAndInitializeSid(IntPtr pIdentifierAuthority, byte nSubAuthorityCount, int dwSubAuthority0, int dwSubAuthority1, int dwSubAuthority2, int dwSubAuthority3, int dwSubAuthority4, int dwSubAuthority5, int dwSubAuthority6, int dwSubAuthority7, IntPtr& pSid)
internal int GetLengthSid(IntPtr pSid)
internal bool InitializeAcl(IntPtr pAcl, int nAclLength, int dwAclRevision)
internal bool AddAccessDeniedAce(IntPtr pAcl, int dwAceRevision, int AccessMask, IntPtr pSid)
internal bool AddAccessAllowedAce(IntPtr pAcl, int dwAceRevision, UInt32 AccessMask, IntPtr pSid)
internal bool InitializeSecurityDescriptor(IntPtr pSecurityDescriptor, int dwRevision)
internal bool SetSecurityDescriptorDacl(IntPtr pSecurityDescriptor, bool bDaclPresent, IntPtr pDacl, bool bDaclDefaulted)
internal IntPtr FreeSid(IntPtr pSid)
}
internal System.Data.Common.ObjectStorage : DataStorage {
private object defaultValue
private Object[] values
private bool implementsIXmlSerializable
private object _tempAssemblyCacheLock
private Dictionary`2<KeyValuePair`2<Type, XmlRootAttribute>, XmlSerializer> _tempAssemblyCache
private XmlSerializerFactory _serializerFactory
internal void .ctor(DataColumn column, Type type)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo1, object value)
private int CompareTo(object valueNo1, object valueNo2)
private int CompareWithFamilies(object valueNo1, object valueNo2)
public void Copy(int recordNo1, int recordNo2)
public object Get(int recordNo)
private Families GetFamily(Type dataType)
public bool IsNull(int record)
public void Set(int recordNo, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
public string ConvertObjectToXml(object value)
public void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
internal void VerifyIDynamicMetaObjectProvider(Type type)
internal XmlSerializer GetXmlSerializer(Type type)
internal XmlSerializer GetXmlSerializer(Type type, XmlRootAttribute attribute)
}
internal System.Data.Common.ReadOnlyCollection`1 : object {
private T[] _items
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.Generic.ICollection<T>.IsReadOnly
public int Count
internal void .ctor(T[] items)
public void CopyTo(T[] array, int arrayIndex)
private void System.Collections.ICollection.CopyTo(Array array, int arrayIndex)
private IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
public IEnumerator GetEnumerator()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.Generic.ICollection<T>.get_IsReadOnly()
private void System.Collections.Generic.ICollection<T>.Add(T value)
private void System.Collections.Generic.ICollection<T>.Clear()
private bool System.Collections.Generic.ICollection<T>.Contains(T value)
private bool System.Collections.Generic.ICollection<T>.Remove(T value)
public int get_Count()
}
public System.Data.Common.RowUpdatedEventArgs : EventArgs {
private IDbCommand _command
private StatementType _statementType
private DataTableMapping _tableMapping
private Exception _errors
private DataRow _dataRow
private DataRow[] _dataRows
private UpdateStatus _status
private int _recordsAffected
public IDbCommand Command
public Exception Errors
public int RecordsAffected
public DataRow Row
internal DataRow[] Rows
public int RowCount
public StatementType StatementType
public UpdateStatus Status
public DataTableMapping TableMapping
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public IDbCommand get_Command()
public Exception get_Errors()
public void set_Errors(Exception value)
public int get_RecordsAffected()
public DataRow get_Row()
internal DataRow[] get_Rows()
public int get_RowCount()
public StatementType get_StatementType()
public UpdateStatus get_Status()
public void set_Status(UpdateStatus value)
public DataTableMapping get_TableMapping()
internal void AdapterInit(DataRow[] dataRows)
internal void AdapterInit(int recordsAffected)
public void CopyToRows(DataRow[] array)
public void CopyToRows(DataRow[] array, int arrayIndex)
}
public System.Data.Common.RowUpdatingEventArgs : EventArgs {
private IDbCommand _command
private StatementType _statementType
private DataTableMapping _tableMapping
private Exception _errors
private DataRow _dataRow
private UpdateStatus _status
protected IDbCommand BaseCommand
public IDbCommand Command
public Exception Errors
public DataRow Row
public StatementType StatementType
public UpdateStatus Status
public DataTableMapping TableMapping
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
public IDbCommand get_Command()
public void set_Command(IDbCommand value)
public Exception get_Errors()
public void set_Errors(Exception value)
public DataRow get_Row()
public StatementType get_StatementType()
public UpdateStatus get_Status()
public void set_Status(UpdateStatus value)
public DataTableMapping get_TableMapping()
}
internal System.Data.Common.SafeNativeMethods : object {
internal IntPtr CoTaskMemAlloc(IntPtr cb)
internal void CoTaskMemFree(IntPtr handle)
internal int GetUserDefaultLCID()
internal void ZeroMemory(IntPtr dest, IntPtr length)
internal IntPtr InterlockedExchangePointer(IntPtr lpAddress, IntPtr lpValue)
internal int GetComputerNameEx(int nameType, StringBuilder nameBuffer, Int32& bufferSize)
internal int GetCurrentProcessId()
internal IntPtr GetModuleHandle(string moduleName)
internal IntPtr GetProcAddress(IntPtr HModule, string funcName)
internal IntPtr LocalAlloc(int flags, IntPtr countOfBytes)
internal IntPtr LocalFree(IntPtr handle)
internal IntPtr SysAllocStringLen(string src, int len)
internal void SysFreeString(IntPtr bstr)
private void SetErrorInfo(int dwReserved, IntPtr pIErrorInfo)
internal int ReleaseSemaphore(IntPtr handle, int releaseCount, IntPtr previousCount)
internal int WaitForMultipleObjectsEx(UInt32 nCount, IntPtr lpHandles, bool bWaitAll, UInt32 dwMilliseconds, bool bAlertable)
internal int WaitForSingleObjectEx(IntPtr lpHandles, UInt32 dwMilliseconds, bool bAlertable)
internal void PropVariantClear(IntPtr pObject)
internal void VariantClear(IntPtr pObject)
}
internal System.Data.Common.SByteStorage : DataStorage {
private sbyte defaultValue
private SByte[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SchemaInfo : ValueType {
public string name
public string typeName
public Type type
}
public System.Data.Common.SchemaTableColumn : object {
public string ColumnName
public string ColumnOrdinal
public string ColumnSize
public string NumericPrecision
public string NumericScale
public string DataType
public string ProviderType
public string NonVersionedProviderType
public string IsLong
public string AllowDBNull
public string IsAliased
public string IsExpression
public string IsKey
public string IsUnique
public string BaseSchemaName
public string BaseTableName
public string BaseColumnName
}
public System.Data.Common.SchemaTableOptionalColumn : object {
public string ProviderSpecificDataType
public string IsAutoIncrement
public string IsHidden
public string IsReadOnly
public string IsRowVersion
public string BaseServerName
public string BaseCatalogName
public string AutoIncrementSeed
public string AutoIncrementStep
public string DefaultValue
public string Expression
public string BaseTableNamespace
public string BaseColumnNamespace
public string ColumnMapping
}
internal System.Data.Common.SingleStorage : DataStorage {
private float defaultValue
private Single[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlBinaryStorage : DataStorage {
private SqlBinary[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlBooleanStorage : DataStorage {
private SqlBoolean[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlBytesStorage : DataStorage {
private SqlBytes[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlByteStorage : DataStorage {
private SqlByte[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlCharsStorage : DataStorage {
private SqlChars[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlConvert : object {
public SqlByte ConvertToSqlByte(object value)
public SqlInt16 ConvertToSqlInt16(object value)
public SqlInt32 ConvertToSqlInt32(object value)
public SqlInt64 ConvertToSqlInt64(object value)
public SqlDouble ConvertToSqlDouble(object value)
public SqlDecimal ConvertToSqlDecimal(object value)
public SqlSingle ConvertToSqlSingle(object value)
public SqlMoney ConvertToSqlMoney(object value)
public SqlDateTime ConvertToSqlDateTime(object value)
public SqlBoolean ConvertToSqlBoolean(object value)
public SqlGuid ConvertToSqlGuid(object value)
public SqlBinary ConvertToSqlBinary(object value)
public SqlString ConvertToSqlString(object value)
public SqlChars ConvertToSqlChars(object value)
public SqlBytes ConvertToSqlBytes(object value)
public DateTimeOffset ConvertStringToDateTimeOffset(string value, IFormatProvider formatProvider)
public object ChangeTypeForDefaultValue(object value, Type type, IFormatProvider formatProvider)
public object ChangeType2(object value, StorageType stype, Type type, IFormatProvider formatProvider)
public object ChangeTypeForXML(object value, Type type)
}
internal System.Data.Common.SqlDateTimeStorage : DataStorage {
private SqlDateTime[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlDecimalStorage : DataStorage {
private SqlDecimal[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlDoubleStorage : DataStorage {
private SqlDouble[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlGuidStorage : DataStorage {
private SqlGuid[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlInt16Storage : DataStorage {
private SqlInt16[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlInt32Storage : DataStorage {
private SqlInt32[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlInt64Storage : DataStorage {
private SqlInt64[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlMoneyStorage : DataStorage {
private SqlMoney[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlSingleStorage : DataStorage {
private SqlSingle[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlStringStorage : DataStorage {
private SqlString[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] recordNos, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int Compare(SqlString valueNo1, SqlString valueNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public int GetStringLength(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlUdtStorage : DataStorage {
private Object[] values
private bool implementsIXmlSerializable
private bool implementsIComparable
private Dictionary`2<Type, object> TypeToNull
public void .ctor(DataColumn column, Type type)
private void .ctor(DataColumn column, Type type, object nullValue)
internal object GetStaticNullForUdtType(Type type)
public bool IsNull(int record)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo1, object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int recordNo)
public void Set(int recordNo, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
public string ConvertObjectToXml(object value)
public void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.SqlXmlStorage : DataStorage {
private SqlXml[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.StorageType : Enum {
public int value__
public StorageType Empty
public StorageType Object
public StorageType DBNull
public StorageType Boolean
public StorageType Char
public StorageType SByte
public StorageType Byte
public StorageType Int16
public StorageType UInt16
public StorageType Int32
public StorageType UInt32
public StorageType Int64
public StorageType UInt64
public StorageType Single
public StorageType Double
public StorageType Decimal
public StorageType DateTime
public StorageType TimeSpan
public StorageType String
public StorageType Guid
public StorageType ByteArray
public StorageType CharArray
public StorageType Type
public StorageType DateTimeOffset
public StorageType BigInteger
public StorageType Uri
public StorageType SqlBinary
public StorageType SqlBoolean
public StorageType SqlByte
public StorageType SqlBytes
public StorageType SqlChars
public StorageType SqlDateTime
public StorageType SqlDecimal
public StorageType SqlDouble
public StorageType SqlGuid
public StorageType SqlInt16
public StorageType SqlInt32
public StorageType SqlInt64
public StorageType SqlMoney
public StorageType SqlSingle
public StorageType SqlString
}
internal System.Data.Common.StringStorage : DataStorage {
private String[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] recordNos, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int recordNo)
public int GetStringLength(int record)
public bool IsNull(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
public System.Data.Common.SupportedJoinOperators : Enum {
public int value__
public SupportedJoinOperators None
public SupportedJoinOperators Inner
public SupportedJoinOperators LeftOuter
public SupportedJoinOperators RightOuter
public SupportedJoinOperators FullOuter
}
internal System.Data.Common.TimeSpanStorage : DataStorage {
private TimeSpan defaultValue
private TimeSpan[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
private TimeSpan ConvertToTimeSpan(object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.UInt16Storage : DataStorage {
private ushort defaultValue
private UInt16[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.UInt32Storage : DataStorage {
private UInt32 defaultValue
private UInt32[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.UInt64Storage : DataStorage {
private ulong defaultValue
private UInt64[] values
public void .ctor(DataColumn column)
public object Aggregate(Int32[] records, AggregateType kind)
public int Compare(int recordNo1, int recordNo2)
public int CompareValueTo(int recordNo, object value)
public object ConvertValue(object value)
public void Copy(int recordNo1, int recordNo2)
public object Get(int record)
public void Set(int record, object value)
public void SetCapacity(int capacity)
public object ConvertXmlToObject(string s)
public string ConvertObjectToXml(object value)
protected object GetEmptyStorage(int recordCount)
protected void CopyValue(int record, object store, BitArray nullbits, int storeIndex)
protected void SetStorage(object store, BitArray nullbits)
}
internal System.Data.Common.UnsafeNativeMethods : object {
internal RetCode SQLAllocHandle(SQL_HANDLE HandleType, IntPtr InputHandle, IntPtr& OutputHandle)
internal RetCode SQLAllocHandle(SQL_HANDLE HandleType, OdbcHandle InputHandle, IntPtr& OutputHandle)
internal RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, HandleRef TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind)
internal RetCode SQLBindCol(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, IntPtr TargetValue, IntPtr BufferLength, IntPtr StrLen_or_Ind)
internal RetCode SQLBindParameter(OdbcStatementHandle StatementHandle, ushort ParameterNumber, short ParamDirection, SQL_C SQLCType, short SQLType, IntPtr cbColDef, IntPtr ibScale, HandleRef rgbValue, IntPtr BufferLength, HandleRef StrLen_or_Ind)
internal RetCode SQLCancel(OdbcStatementHandle StatementHandle)
internal RetCode SQLCloseCursor(OdbcStatementHandle StatementHandle)
internal RetCode SQLColAttributeW(OdbcStatementHandle StatementHandle, short ColumnNumber, short FieldIdentifier, CNativeBuffer CharacterAttribute, short BufferLength, Int16& StringLength, IntPtr& NumericAttribute)
internal RetCode SQLColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string ColumnName, short NameLen4)
internal RetCode SQLDisconnect(IntPtr ConnectionHandle)
internal RetCode SQLDriverConnectW(OdbcConnectionHandle hdbc, IntPtr hwnd, string connectionstring, short cbConnectionstring, IntPtr connectionstringout, short cbConnectionstringoutMax, Int16& cbConnectionstringout, short fDriverCompletion)
internal RetCode SQLEndTran(SQL_HANDLE HandleType, IntPtr Handle, short CompletionType)
internal RetCode SQLExecDirectW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength)
internal RetCode SQLExecute(OdbcStatementHandle StatementHandle)
internal RetCode SQLFetch(OdbcStatementHandle StatementHandle)
internal RetCode SQLFreeHandle(SQL_HANDLE HandleType, IntPtr StatementHandle)
internal RetCode SQLFreeStmt(OdbcStatementHandle StatementHandle, STMT Option)
internal RetCode SQLGetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, Byte[] Value, int BufferLength, Int32& StringLength)
internal RetCode SQLGetData(OdbcStatementHandle StatementHandle, ushort ColumnNumber, SQL_C TargetType, CNativeBuffer TargetValue, IntPtr BufferLength, IntPtr& StrLen_or_Ind)
internal RetCode SQLGetDescFieldW(OdbcDescriptorHandle StatementHandle, short RecNumber, SQL_DESC FieldIdentifier, CNativeBuffer ValuePointer, int BufferLength, Int32& StringLength)
internal RetCode SQLGetDiagRecW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, StringBuilder rchState, Int32& NativeError, StringBuilder MessageText, short BufferLength, Int16& TextLength)
internal RetCode SQLGetDiagFieldW(SQL_HANDLE HandleType, OdbcHandle Handle, short RecNumber, short DiagIdentifier, StringBuilder rchState, short BufferLength, Int16& StringLength)
internal RetCode SQLGetFunctions(OdbcConnectionHandle hdbc, SQL_API fFunction, Int16& pfExists)
internal RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, Int16& pcbInfoValue)
internal RetCode SQLGetInfoW(OdbcConnectionHandle hdbc, SQL_INFO fInfoType, Byte[] rgbInfoValue, short cbInfoValueMax, IntPtr pcbInfoValue)
internal RetCode SQLGetStmtAttrW(OdbcStatementHandle StatementHandle, SQL_ATTR Attribute, IntPtr& Value, int BufferLength, Int32& StringLength)
internal RetCode SQLGetTypeInfo(OdbcStatementHandle StatementHandle, short fSqlType)
internal RetCode SQLMoreResults(OdbcStatementHandle StatementHandle)
internal RetCode SQLNumResultCols(OdbcStatementHandle StatementHandle, Int16& ColumnCount)
internal RetCode SQLPrepareW(OdbcStatementHandle StatementHandle, string StatementText, int TextLength)
internal RetCode SQLPrimaryKeysW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3)
internal RetCode SQLProcedureColumnsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3, string ColumnName, short NameLen4)
internal RetCode SQLProceduresW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string ProcName, short NameLen3)
internal RetCode SQLRowCount(OdbcStatementHandle StatementHandle, IntPtr& RowCount)
internal RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IDtcTransaction Value, int StringLength)
internal RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, string Value, int StringLength)
internal RetCode SQLSetConnectAttrW(OdbcConnectionHandle ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength)
internal RetCode SQLSetConnectAttrW(IntPtr ConnectionHandle, SQL_ATTR Attribute, IntPtr Value, int StringLength)
internal RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, HandleRef CharacterAttribute, int BufferLength)
internal RetCode SQLSetDescFieldW(OdbcDescriptorHandle StatementHandle, short ColumnNumber, SQL_DESC FieldIdentifier, IntPtr CharacterAttribute, int BufferLength)
internal RetCode SQLSetEnvAttr(OdbcEnvironmentHandle EnvironmentHandle, SQL_ATTR Attribute, IntPtr Value, SQL_IS StringLength)
internal RetCode SQLSetStmtAttrW(OdbcStatementHandle StatementHandle, int Attribute, IntPtr Value, int StringLength)
internal RetCode SQLSpecialColumnsW(OdbcStatementHandle StatementHandle, SQL_SPECIALCOLS IdentifierType, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, SQL_SCOPE Scope, SQL_NULLABILITY Nullable)
internal RetCode SQLStatisticsW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, short Unique, short Reserved)
internal RetCode SQLTablesW(OdbcStatementHandle StatementHandle, string CatalogName, short NameLen1, string SchemaName, short NameLen2, string TableName, short NameLen3, string TableType, short NameLen4)
internal OleDbHResult GetErrorInfo(int dwReserved, IErrorInfo& ppIErrorInfo)
internal UInt32 GetEffectiveRightsFromAclW(Byte[] pAcl, Trustee& pTrustee, UInt32& pAccessMask)
internal bool CheckTokenMembership(IntPtr tokenHandle, Byte[] sidToCheck, Boolean& isMember)
internal bool ConvertSidToStringSidW(IntPtr sid, IntPtr& stringSid)
internal int CreateWellKnownSid(int sidType, Byte[] domainSid, Byte[] resultSid, UInt32& resultSidLength)
internal bool GetTokenInformation(IntPtr tokenHandle, UInt32 token_class, IntPtr tokenStruct, UInt32 tokenInformationLength, UInt32& tokenString)
internal int lstrlenW(IntPtr ptr)
}
public System.Data.ConflictOption : Enum {
public int value__
public ConflictOption CompareAllSearchableValues
public ConflictOption CompareRowVersion
public ConflictOption OverwriteChanges
}
public System.Data.ConnectionState : Enum {
public int value__
public ConnectionState Closed
public ConnectionState Open
public ConnectionState Connecting
public ConnectionState Executing
public ConnectionState Fetching
public ConnectionState Broken
}
internal System.Data.ConstNode : ExpressionNode {
internal object val
internal void .ctor(DataTable table, ValueType type, object constant)
internal void .ctor(DataTable table, ValueType type, object constant, bool fParseQuotes)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal ExpressionNode Optimize()
private object SmallestDecimal(object constant)
private object SmallestNumeric(object constant)
}
public System.Data.Constraint : object {
internal string name
private string _schemaName
private bool inCollection
private DataSet dataSet
internal PropertyCollection extendedProperties
public string ConstraintName
internal string SchemaName
internal bool InCollection
public DataTable Table
public PropertyCollection ExtendedProperties
protected DataSet _DataSet
public string get_ConstraintName()
public void set_ConstraintName(string value)
internal string get_SchemaName()
internal void set_SchemaName(string value)
internal bool get_InCollection()
internal void set_InCollection(bool value)
public DataTable get_Table()
public PropertyCollection get_ExtendedProperties()
internal bool ContainsColumn(DataColumn column)
internal bool CanEnableConstraint()
internal Constraint Clone(DataSet destination)
internal Constraint Clone(DataSet destination, bool ignoreNSforTableLookup)
internal void CheckConstraint()
internal void CheckCanAddToCollection(ConstraintCollection constraint)
internal bool CanBeRemovedFromCollection(ConstraintCollection constraint, bool fThrowException)
internal void CheckConstraint(DataRow row, DataRowAction action)
internal void CheckState()
protected void CheckStateForProperty()
protected DataSet get__DataSet()
protected internal void SetDataSet(DataSet dataSet)
internal bool IsConstraintViolated()
public string ToString()
}
public System.Data.ConstraintCollection : InternalDataCollectionBase {
private DataTable table
private ArrayList list
private int defaultNameIndex
private CollectionChangeEventHandler onCollectionChanged
private Constraint[] delayLoadingConstraints
private bool fLoadForeignKeyConstraintsOnly
protected ArrayList List
public Constraint Item
internal DataTable Table
public Constraint Item
internal void .ctor(DataTable table)
protected ArrayList get_List()
public Constraint get_Item(int index)
internal DataTable get_Table()
public Constraint get_Item(string name)
public void Add(Constraint constraint)
internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign)
public Constraint Add(string name, DataColumn[] columns, bool primaryKey)
public Constraint Add(string name, DataColumn column, bool primaryKey)
public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn)
public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns)
public void AddRange(Constraint[] constraints)
private void AddUniqueConstraint(UniqueConstraint constraint)
private void AddForeignKeyConstraint(ForeignKeyConstraint constraint)
private bool AutoGenerated(Constraint constraint)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
private void ArrayAdd(Constraint constraint)
private void ArrayRemove(Constraint constraint)
internal string AssignName()
private void BaseAdd(Constraint constraint)
private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength)
private void BaseRemove(Constraint constraint)
public bool CanRemove(Constraint constraint)
internal bool CanRemove(Constraint constraint, bool fThrowException)
public void Clear()
public bool Contains(string name)
internal bool Contains(string name, bool caseSensitive)
public void CopyTo(Constraint[] array, int index)
internal Constraint FindConstraint(Constraint constraint)
internal UniqueConstraint FindKeyConstraint(DataColumn[] columns)
internal UniqueConstraint FindKeyConstraint(DataColumn column)
internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)
private bool CompareArrays(DataColumn[] a1, DataColumn[] a2)
public int IndexOf(Constraint constraint)
public int IndexOf(string constraintName)
internal int InternalIndexOf(string constraintName)
private string MakeName(int index)
private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
internal void RegisterName(string name)
public void Remove(Constraint constraint)
public void RemoveAt(int index)
public void Remove(string name)
internal void UnregisterName(string name)
internal void FinishInitConstraints()
}
internal System.Data.ConstraintConverter : ExpandableObjectConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Data.ConstraintEnumerator : object {
private IEnumerator tables
private IEnumerator constraints
private Constraint currentObject
protected Constraint CurrentObject
public void .ctor(DataSet dataSet)
public bool GetNext()
public Constraint GetConstraint()
protected bool IsValidCandidate(Constraint constraint)
protected Constraint get_CurrentObject()
}
public System.Data.ConstraintException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.ConstraintTable : object {
public DataTable table
public XmlSchemaIdentityConstraint constraint
public void .ctor(DataTable t, XmlSchemaIdentityConstraint c)
}
public System.Data.DataColumn : MarshalByValueComponent {
private bool allowNull
private string caption
private string _columnName
private Type dataType
private StorageType _storageType
internal object defaultValue
private DataSetDateTime _dateTimeMode
private DataExpression expression
private int maxLength
private int _ordinal
private bool readOnly
internal Index sortIndex
internal DataTable table
private bool unique
internal MappingType columnMapping
internal int _hashCode
internal int errors
private bool isSqlType
private bool implementsINullable
private bool implementsIChangeTracking
private bool implementsIRevertibleChangeTracking
private bool implementsIXMLSerializable
private bool defaultValueIsNull
internal List`1<DataColumn> dependentColumns
internal PropertyCollection extendedProperties
private PropertyChangedEventHandler onPropertyChangingDelegate
private DataStorage _storage
private AutoIncrementValue autoInc
internal string _columnUri
private string _columnPrefix
internal string encodedColumnName
internal string dttype
internal SimpleType simpleType
private int _objectTypeCount
private int _objectID
public bool AllowDBNull
public bool AutoIncrement
internal object AutoIncrementCurrent
internal AutoIncrementValue AutoInc
public long AutoIncrementSeed
public long AutoIncrementStep
public string Caption
public string ColumnName
internal string EncodedColumnName
internal IFormatProvider FormatProvider
internal CultureInfo Locale
internal int ObjectID
public string Prefix
internal bool Computed
internal DataExpression DataExpression
public Type DataType
public DataSetDateTime DateTimeMode
public object DefaultValue
internal bool DefaultValueIsNull
public string Expression
public PropertyCollection ExtendedProperties
internal bool HasData
internal bool ImplementsINullable
internal bool ImplementsIChangeTracking
internal bool ImplementsIRevertibleChangeTracking
internal bool IsCloneable
internal bool IsStringType
internal bool IsValueType
internal bool IsSqlType
public int MaxLength
public string Namespace
public int Ordinal
public bool ReadOnly
private Index SortIndex
public DataTable Table
internal object Item
public bool Unique
internal string XmlDataType
internal SimpleType SimpleType
public MappingType ColumnMapping
internal bool IsCustomType
internal bool ImplementsIXMLSerializable
public void .ctor(string columnName)
public void .ctor(string columnName, Type dataType)
public void .ctor(string columnName, Type dataType, string expr)
public void .ctor(string columnName, Type dataType, string expr, MappingType type)
private void UpdateColumnType(Type type, StorageType typeCode)
public bool get_AllowDBNull()
public void set_AllowDBNull(bool value)
public bool get_AutoIncrement()
public void set_AutoIncrement(bool value)
internal object get_AutoIncrementCurrent()
internal void set_AutoIncrementCurrent(object value)
internal AutoIncrementValue get_AutoInc()
public long get_AutoIncrementSeed()
public void set_AutoIncrementSeed(long value)
public long get_AutoIncrementStep()
public void set_AutoIncrementStep(long value)
public string get_Caption()
public void set_Caption(string value)
private void ResetCaption()
private bool ShouldSerializeCaption()
public string get_ColumnName()
public void set_ColumnName(string value)
internal string get_EncodedColumnName()
internal IFormatProvider get_FormatProvider()
internal CultureInfo get_Locale()
internal int get_ObjectID()
public string get_Prefix()
public void set_Prefix(string value)
internal string GetColumnValueAsString(DataRow row, DataRowVersion version)
internal bool get_Computed()
internal DataExpression get_DataExpression()
public Type get_DataType()
public void set_DataType(Type value)
public DataSetDateTime get_DateTimeMode()
public void set_DateTimeMode(DataSetDateTime value)
public object get_DefaultValue()
public void set_DefaultValue(object value)
internal bool get_DefaultValueIsNull()
internal void BindExpression()
public string get_Expression()
public void set_Expression(string value)
public PropertyCollection get_ExtendedProperties()
internal bool get_HasData()
internal bool get_ImplementsINullable()
internal bool get_ImplementsIChangeTracking()
internal bool get_ImplementsIRevertibleChangeTracking()
internal bool get_IsCloneable()
internal bool get_IsStringType()
internal bool get_IsValueType()
internal bool get_IsSqlType()
private void SetMaxLengthSimpleType()
public int get_MaxLength()
public void set_MaxLength(int value)
public string get_Namespace()
public void set_Namespace(string value)
private bool ShouldSerializeNamespace()
private void ResetNamespace()
public int get_Ordinal()
public void SetOrdinal(int ordinal)
internal void SetOrdinalInternal(int ordinal)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
private Index get_SortIndex()
public DataTable get_Table()
internal void SetTable(DataTable table)
private DataRow GetDataRow(int index)
internal object get_Item(int record)
internal void set_Item(int record, object value)
internal void InitializeRecord(int record)
internal void SetValue(int record, object value)
internal void FreeRecord(int record)
public bool get_Unique()
public void set_Unique(bool value)
internal void InternalUnique(bool value)
internal string get_XmlDataType()
internal void set_XmlDataType(string value)
internal SimpleType get_SimpleType()
internal void set_SimpleType(SimpleType value)
public MappingType get_ColumnMapping()
public void set_ColumnMapping(MappingType value)
internal void add_PropertyChanging(PropertyChangedEventHandler value)
internal void remove_PropertyChanging(PropertyChangedEventHandler value)
internal void CheckColumnConstraint(DataRow row, DataRowAction action)
internal bool CheckMaxLength()
internal void CheckMaxLength(DataRow dr)
protected internal void CheckNotAllowNull()
internal void CheckNullable(DataRow row)
protected void CheckUnique()
internal int Compare(int record1, int record2)
internal bool CompareValueTo(int record1, object value, bool checkType)
internal int CompareValueTo(int record1, object value)
internal object ConvertValue(object value)
internal void Copy(int srcRecordNo, int dstRecordNo)
internal DataColumn Clone()
internal DataRelation FindParentRelation()
internal object GetAggregateValue(Int32[] records, AggregateType kind)
private int GetStringLength(int record)
internal void Init(int record)
internal bool IsAutoIncrementType(Type dataType)
private bool IsColumnMappingValid(StorageType typeCode, MappingType mapping)
internal bool get_IsCustomType()
internal bool IsValueCustomTypeInstance(object value)
internal bool get_ImplementsIXMLSerializable()
internal bool IsNull(int record)
internal bool IsInRelation()
internal bool IsMaxLengthViolated()
internal bool IsNotAllowDBNullViolated()
internal void FinishInitInProgress()
protected void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected internal void RaisePropertyChanging(string name)
private void InsureStorage()
internal void SetCapacity(int capacity)
private bool ShouldSerializeDefaultValue()
internal void OnSetDataSet()
public string ToString()
internal object ConvertXmlToObject(string s)
internal object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib)
internal string ConvertObjectToXml(object value)
internal void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib)
internal object GetEmptyColumnStore(int recordCount)
internal void CopyValueIntoStore(int record, object store, BitArray nullbits, int storeIndex)
internal void SetStorage(object store, BitArray nullbits)
internal void AddDependentColumn(DataColumn expressionColumn)
internal void RemoveDependentColumn(DataColumn expressionColumn)
internal void HandleDependentColumnList(DataExpression oldExpression, DataExpression newExpression)
}
public System.Data.DataColumnChangeEventArgs : EventArgs {
private DataRow _row
private DataColumn _column
private object _proposedValue
public DataColumn Column
public DataRow Row
public object ProposedValue
internal void .ctor(DataRow row)
public void .ctor(DataRow row, DataColumn column, object value)
public DataColumn get_Column()
public DataRow get_Row()
public object get_ProposedValue()
public void set_ProposedValue(object value)
internal void InitializeColumnChangeEvent(DataColumn column, object value)
}
public System.Data.DataColumnChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataColumnChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataColumnCollection : InternalDataCollectionBase {
private DataTable table
private ArrayList _list
private int defaultNameIndex
private DataColumn[] delayedAddRangeColumns
private Dictionary`2<string, DataColumn> columnFromName
private CollectionChangeEventHandler onCollectionChangedDelegate
private CollectionChangeEventHandler onCollectionChangingDelegate
private CollectionChangeEventHandler onColumnPropertyChangedDelegate
private bool fInClear
private DataColumn[] columnsImplementingIChangeTracking
private int nColumnsImplementingIChangeTracking
private int nColumnsImplementingIRevertibleChangeTracking
protected ArrayList List
internal DataColumn[] ColumnsImplementingIChangeTracking
internal int ColumnsImplementingIChangeTrackingCount
internal int ColumnsImplementingIRevertibleChangeTrackingCount
public DataColumn Item
public DataColumn Item
internal DataColumn Item
internal void .ctor(DataTable table)
protected ArrayList get_List()
internal DataColumn[] get_ColumnsImplementingIChangeTracking()
internal int get_ColumnsImplementingIChangeTrackingCount()
internal int get_ColumnsImplementingIRevertibleChangeTrackingCount()
public DataColumn get_Item(int index)
public DataColumn get_Item(string name)
internal DataColumn get_Item(string name, string ns)
internal void EnsureAdditionalCapacity(int capacity)
public void Add(DataColumn column)
internal void AddAt(int index, DataColumn column)
public void AddRange(DataColumn[] columns)
public DataColumn Add(string columnName, Type type, string expression)
public DataColumn Add(string columnName, Type type)
public DataColumn Add(string columnName)
public DataColumn Add()
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
internal void add_CollectionChanging(CollectionChangeEventHandler value)
internal void remove_CollectionChanging(CollectionChangeEventHandler value)
internal void add_ColumnPropertyChanged(CollectionChangeEventHandler value)
internal void remove_ColumnPropertyChanged(CollectionChangeEventHandler value)
private void ArrayAdd(DataColumn column)
private void ArrayAdd(int index, DataColumn column)
private void ArrayRemove(DataColumn column)
internal string AssignName()
private void BaseAdd(DataColumn column)
private void BaseGroupSwitch(DataColumn[] oldArray, int oldLength, DataColumn[] newArray, int newLength)
private void BaseRemove(DataColumn column)
public bool CanRemove(DataColumn column)
internal bool CanRemove(DataColumn column, bool fThrowException)
private void CheckIChangeTracking(DataColumn column)
public void Clear()
public bool Contains(string name)
internal bool Contains(string name, bool caseSensitive)
public void CopyTo(DataColumn[] array, int index)
public int IndexOf(DataColumn column)
public int IndexOf(string columnName)
internal int IndexOfCaseInsensitive(string name)
internal void FinishInitCollection()
private string MakeName(int index)
internal void MoveTo(DataColumn column, int newPosition)
private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
private void OnCollectionChanging(CollectionChangeEventArgs ccevent)
internal void OnColumnPropertyChanged(CollectionChangeEventArgs ccevent)
internal void RegisterColumnName(string name, DataColumn column)
internal bool CanRegisterName(string name)
public void Remove(DataColumn column)
public void RemoveAt(int index)
public void Remove(string name)
internal void UnregisterName(string name)
private void AddColumnsImplementingIChangeTrackingList(DataColumn dataColumn)
private void RemoveColumnsImplementingIChangeTrackingList(DataColumn dataColumn)
}
internal System.Data.DataColumnPropertyDescriptor : PropertyDescriptor {
private DataColumn column
public AttributeCollection Attributes
internal DataColumn Column
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
public bool IsBrowsable
internal void .ctor(DataColumn dataColumn)
public AttributeCollection get_Attributes()
internal DataColumn get_Column()
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public bool Equals(object other)
public int GetHashCode()
public bool CanResetValue(object component)
public object GetValue(object component)
public void ResetValue(object component)
public void SetValue(object component, object value)
public bool ShouldSerializeValue(object component)
public bool get_IsBrowsable()
}
internal System.Data.DataError : object {
private string rowError
private int count
private ColumnError[] errorList
internal int initialCapacity
internal string Text
internal bool HasErrors
internal void .ctor(string rowError)
internal string get_Text()
internal void set_Text(string value)
internal bool get_HasErrors()
internal void SetColumnError(DataColumn column, string error)
internal string GetColumnError(DataColumn column)
internal void Clear(DataColumn column)
internal void Clear()
internal DataColumn[] GetColumnsInError()
private void SetText(string errorText)
internal int IndexOf(DataColumn column)
}
public System.Data.DataException : SystemException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string s, Exception innerException)
}
internal System.Data.DataExpression : object {
internal string originalExpression
private bool parsed
private bool bound
private ExpressionNode expr
private DataTable table
private StorageType _storageType
private Type _dataType
private DataColumn[] dependency
internal string Expression
internal ExpressionNode ExpressionNode
internal bool HasValue
internal void .ctor(DataTable table, string expression)
internal void .ctor(DataTable table, string expression, Type type)
internal string get_Expression()
internal ExpressionNode get_ExpressionNode()
internal bool get_HasValue()
internal void Bind(DataTable table)
internal bool DependsOn(DataColumn column)
internal object Evaluate()
internal object Evaluate(DataRow row, DataRowVersion version)
internal object Evaluate(DataRow[] rows)
internal object Evaluate(DataRow[] rows, DataRowVersion version)
public bool Invoke(DataRow row, DataRowVersion version)
internal DataColumn[] GetDependency()
internal bool IsTableAggregate()
internal bool IsUnknown(object value)
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool ToBoolean(object value)
}
internal System.Data.DataKey : ValueType {
private int maxColumns
private DataColumn[] columns
internal DataColumn[] ColumnsReference
internal bool HasValue
internal DataTable Table
internal void .ctor(DataColumn[] columns, bool copyColumns)
internal DataColumn[] get_ColumnsReference()
internal bool get_HasValue()
internal DataTable get_Table()
internal void CheckState()
internal bool ColumnsEqual(DataKey key)
internal bool ColumnsEqual(DataColumn[] column1, DataColumn[] column2)
internal bool ContainsColumn(DataColumn column)
public int GetHashCode()
public bool op_Equality(DataKey x, DataKey y)
public bool op_Inequality(DataKey x, DataKey y)
public bool Equals(object value)
internal bool Equals(DataKey value)
internal String[] GetColumnNames()
internal IndexField[] GetIndexDesc()
internal Object[] GetKeyValues(int record)
internal Index GetSortIndex()
internal Index GetSortIndex(DataViewRowState recordStates)
internal bool RecordsEqual(int record1, int record2)
internal DataColumn[] ToArray()
}
public System.Data.DataRelation : object {
private DataSet dataSet
internal PropertyCollection extendedProperties
internal string relationName
private PropertyChangedEventHandler onPropertyChangingDelegate
private DataKey childKey
private DataKey parentKey
private UniqueConstraint parentKeyConstraint
private ForeignKeyConstraint childKeyConstraint
internal String[] parentColumnNames
internal String[] childColumnNames
internal string parentTableName
internal string childTableName
internal string parentTableNamespace
internal string childTableNamespace
internal bool nested
internal bool createConstraints
private bool _checkMultipleNested
private int _objectTypeCount
private int _objectID
public DataColumn[] ChildColumns
internal DataColumn[] ChildColumnsReference
internal DataKey ChildKey
public DataTable ChildTable
public DataSet DataSet
internal String[] ParentColumnNames
internal String[] ChildColumnNames
public DataColumn[] ParentColumns
internal DataColumn[] ParentColumnsReference
internal DataKey ParentKey
public DataTable ParentTable
public string RelationName
public bool Nested
public UniqueConstraint ParentKeyConstraint
public ForeignKeyConstraint ChildKeyConstraint
public PropertyCollection ExtendedProperties
internal bool CheckMultipleNested
internal int ObjectID
public void .ctor(string relationName, DataColumn parentColumn, DataColumn childColumn)
public void .ctor(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints)
public void .ctor(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints)
public void .ctor(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested)
public void .ctor(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, String[] parentColumnNames, String[] childColumnNames, bool nested)
public DataColumn[] get_ChildColumns()
internal DataColumn[] get_ChildColumnsReference()
internal DataKey get_ChildKey()
public DataTable get_ChildTable()
public DataSet get_DataSet()
internal String[] get_ParentColumnNames()
internal String[] get_ChildColumnNames()
private bool IsKeyNull(Object[] values)
internal DataRow[] GetChildRows(DataKey parentKey, DataKey childKey, DataRow parentRow, DataRowVersion version)
internal DataRow[] GetParentRows(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version)
internal DataRow GetParentRow(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version)
internal void SetDataSet(DataSet dataSet)
internal void SetParentRowRecords(DataRow childRow, DataRow parentRow)
public DataColumn[] get_ParentColumns()
internal DataColumn[] get_ParentColumnsReference()
internal DataKey get_ParentKey()
public DataTable get_ParentTable()
public string get_RelationName()
public void set_RelationName(string value)
internal void CheckNamespaceValidityForNestedRelations(string ns)
internal void CheckNestedRelations()
public bool get_Nested()
public void set_Nested(bool value)
public UniqueConstraint get_ParentKeyConstraint()
internal void SetParentKeyConstraint(UniqueConstraint value)
public ForeignKeyConstraint get_ChildKeyConstraint()
public PropertyCollection get_ExtendedProperties()
internal bool get_CheckMultipleNested()
internal void set_CheckMultipleNested(bool value)
internal void SetChildKeyConstraint(ForeignKeyConstraint value)
internal void add_PropertyChanging(PropertyChangedEventHandler value)
internal void remove_PropertyChanging(PropertyChangedEventHandler value)
internal void CheckState()
protected void CheckStateForProperty()
private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints)
internal DataRelation Clone(DataSet destination)
protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected internal void RaisePropertyChanging(string name)
public string ToString()
internal void ValidateMultipleNestedRelations()
private bool IsAutoGenerated(DataColumn col)
internal int get_ObjectID()
}
public System.Data.DataRelationCollection : InternalDataCollectionBase {
private DataRelation inTransition
private int defaultNameIndex
private CollectionChangeEventHandler onCollectionChangedDelegate
private CollectionChangeEventHandler onCollectionChangingDelegate
private int _objectTypeCount
private int _objectID
internal int ObjectID
public DataRelation Item
public DataRelation Item
internal int get_ObjectID()
public DataRelation get_Item(int index)
public DataRelation get_Item(string name)
public void Add(DataRelation relation)
public void AddRange(DataRelation[] relations)
public DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns)
public DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints)
public DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns)
public DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn)
public DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints)
public DataRelation Add(DataColumn parentColumn, DataColumn childColumn)
protected void AddCore(DataRelation relation)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
internal void add_CollectionChanging(CollectionChangeEventHandler value)
internal void remove_CollectionChanging(CollectionChangeEventHandler value)
internal string AssignName()
public void Clear()
public bool Contains(string name)
public void CopyTo(DataRelation[] array, int index)
public int IndexOf(DataRelation relation)
public int IndexOf(string relationName)
internal int InternalIndexOf(string name)
protected DataSet GetDataSet()
private string MakeName(int index)
protected void OnCollectionChanged(CollectionChangeEventArgs ccevent)
protected void OnCollectionChanging(CollectionChangeEventArgs ccevent)
internal void RegisterName(string name)
public bool CanRemove(DataRelation relation)
public void Remove(DataRelation relation)
public void RemoveAt(int index)
public void Remove(string name)
protected void RemoveCore(DataRelation relation)
internal void UnregisterName(string name)
}
internal System.Data.DataRelationPropertyDescriptor : PropertyDescriptor {
private DataRelation relation
internal DataRelation Relation
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
internal void .ctor(DataRelation dataRelation)
internal DataRelation get_Relation()
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public bool Equals(object other)
public int GetHashCode()
public bool CanResetValue(object component)
public object GetValue(object component)
public void ResetValue(object component)
public void SetValue(object component, object value)
public bool ShouldSerializeValue(object component)
}
public System.Data.DataRow : object {
private DataTable _table
private DataColumnCollection _columns
internal int oldRecord
internal int newRecord
internal int tempRecord
internal long _rowID
internal DataRowAction _action
internal bool inChangingEvent
internal bool inDeletingEvent
internal bool inCascade
private DataColumn _lastChangedColumn
private int _countColumnChange
private DataError error
private object _element
private int _rbTreeNodeId
private int _objectTypeCount
internal int ObjectID
internal XmlBoundElement Element
internal DataColumn LastChangedColumn
internal bool HasPropertyChanged
internal int RBTreeNodeId
public string RowError
internal long rowID
public DataRowState RowState
public DataTable Table
public object Item
public object Item
public object Item
public object Item
public object Item
public object Item
public Object[] ItemArray
public bool HasErrors
protected internal void .ctor(DataRowBuilder builder)
internal XmlBoundElement get_Element()
internal void set_Element(XmlBoundElement value)
internal DataColumn get_LastChangedColumn()
internal void set_LastChangedColumn(DataColumn value)
internal bool get_HasPropertyChanged()
internal int get_RBTreeNodeId()
internal void set_RBTreeNodeId(int value)
public string get_RowError()
public void set_RowError(string value)
private void RowErrorChanged()
internal long get_rowID()
internal void set_rowID(long value)
public DataRowState get_RowState()
public DataTable get_Table()
public object get_Item(int columnIndex)
public void set_Item(int columnIndex, object value)
internal void CheckForLoops(DataRelation rel)
internal int GetNestedParentCount()
public object get_Item(string columnName)
public void set_Item(string columnName, object value)
public object get_Item(DataColumn column)
public void set_Item(DataColumn column, object value)
public object get_Item(int columnIndex, DataRowVersion version)
public object get_Item(string columnName, DataRowVersion version)
public object get_Item(DataColumn column, DataRowVersion version)
public Object[] get_ItemArray()
public void set_ItemArray(Object[] value)
public void AcceptChanges()
public void BeginEdit()
private bool BeginEditInternal()
public void CancelEdit()
private void CheckColumn(DataColumn column)
internal void CheckInTable()
public void Delete()
public void EndEdit()
public void SetColumnError(int columnIndex, string error)
public void SetColumnError(string columnName, string error)
public void SetColumnError(DataColumn column, string error)
public string GetColumnError(int columnIndex)
public string GetColumnError(string columnName)
public string GetColumnError(DataColumn column)
public void ClearErrors()
internal void ClearError(DataColumn column)
public bool get_HasErrors()
public DataColumn[] GetColumnsInError()
public DataRow[] GetChildRows(string relationName)
public DataRow[] GetChildRows(string relationName, DataRowVersion version)
public DataRow[] GetChildRows(DataRelation relation)
public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version)
internal DataColumn GetDataColumn(string columnName)
public DataRow GetParentRow(string relationName)
public DataRow GetParentRow(string relationName, DataRowVersion version)
public DataRow GetParentRow(DataRelation relation)
public DataRow GetParentRow(DataRelation relation, DataRowVersion version)
internal DataRow GetNestedParentRow(DataRowVersion version)
public DataRow[] GetParentRows(string relationName)
public DataRow[] GetParentRows(string relationName, DataRowVersion version)
public DataRow[] GetParentRows(DataRelation relation)
public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version)
internal Object[] GetColumnValues(DataColumn[] columns)
internal Object[] GetColumnValues(DataColumn[] columns, DataRowVersion version)
internal Object[] GetKeyValues(DataKey key)
internal Object[] GetKeyValues(DataKey key, DataRowVersion version)
internal int GetCurrentRecordNo()
internal int GetDefaultRecord()
internal int GetOriginalRecordNo()
private int GetProposedRecordNo()
internal int GetRecordFromVersion(DataRowVersion version)
internal DataRowVersion GetDefaultRowVersion(DataViewRowState viewState)
internal DataViewRowState GetRecordState(int record)
internal bool HasKeyChanged(DataKey key)
internal bool HasKeyChanged(DataKey key, DataRowVersion version1, DataRowVersion version2)
public bool HasVersion(DataRowVersion version)
internal bool HasChanges()
internal bool HaveValuesChanged(DataColumn[] columns)
internal bool HaveValuesChanged(DataColumn[] columns, DataRowVersion version1, DataRowVersion version2)
public bool IsNull(int columnIndex)
public bool IsNull(string columnName)
public bool IsNull(DataColumn column)
public bool IsNull(DataColumn column, DataRowVersion version)
public void RejectChanges()
internal void ResetLastChangedColumn()
internal void SetKeyValues(DataKey key, Object[] keyValues)
protected void SetNull(DataColumn column)
internal void SetNestedParentRow(DataRow parentRow, bool setNonNested)
public void SetParentRow(DataRow parentRow)
public void SetParentRow(DataRow parentRow, DataRelation relation)
internal void SetParentRowToDBNull()
internal void SetParentRowToDBNull(DataRelation relation)
public void SetAdded()
public void SetModified()
internal int CopyValuesIntoStore(ArrayList storeList, ArrayList nullbitList, int storeIndex)
private void VerifyValueFromStorage(DataColumn column, DataRowVersion version, object valueFromStorage)
}
public System.Data.DataRowAction : Enum {
public int value__
public DataRowAction Nothing
public DataRowAction Delete
public DataRowAction Change
public DataRowAction Rollback
public DataRowAction Commit
public DataRowAction Add
public DataRowAction ChangeOriginal
public DataRowAction ChangeCurrentAndOriginal
}
public System.Data.DataRowBuilder : object {
internal DataTable _table
internal int _record
internal void .ctor(DataTable table, int record)
}
public System.Data.DataRowChangeEventArgs : EventArgs {
private DataRow row
private DataRowAction action
public DataRow Row
public DataRowAction Action
public void .ctor(DataRow row, DataRowAction action)
public DataRow get_Row()
public DataRowAction get_Action()
}
public System.Data.DataRowChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataRowChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataRowCollection : InternalDataCollectionBase {
private DataTable table
private DataRowTree list
internal int nullInList
public int Count
public DataRow Item
internal void .ctor(DataTable table)
public int get_Count()
public DataRow get_Item(int index)
public void Add(DataRow row)
public void InsertAt(DataRow row, int pos)
internal void DiffInsertAt(DataRow row, int pos)
public int IndexOf(DataRow row)
internal DataRow AddWithColumnEvents(Object[] values)
public DataRow Add(Object[] values)
internal void ArrayAdd(DataRow row)
internal void ArrayInsert(DataRow row, int pos)
internal void ArrayClear()
internal void ArrayRemove(DataRow row)
public DataRow Find(object key)
public DataRow Find(Object[] keys)
public void Clear()
public bool Contains(object key)
public bool Contains(Object[] keys)
public void CopyTo(Array ar, int index)
public void CopyTo(DataRow[] array, int index)
public IEnumerator GetEnumerator()
public void Remove(DataRow row)
public void RemoveAt(int index)
}
internal System.Data.DataRowCreatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataRow r)
public IAsyncResult BeginInvoke(object sender, DataRow r, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataRowState : Enum {
public int value__
public DataRowState Detached
public DataRowState Unchanged
public DataRowState Added
public DataRowState Deleted
public DataRowState Modified
}
public System.Data.DataRowVersion : Enum {
public int value__
public DataRowVersion Original
public DataRowVersion Current
public DataRowVersion Proposed
public DataRowVersion Default
}
public System.Data.DataRowView : object {
private DataView dataView
private DataRow _row
private bool delayBeginEdit
private PropertyDescriptorCollection zeroPropertyDescriptorCollection
private PropertyChangedEventHandler onPropertyChanged
private string System.ComponentModel.IDataErrorInfo.Item
private string System.ComponentModel.IDataErrorInfo.Error
public DataView DataView
internal int ObjectID
public object Item
public object Item
public DataRowVersion RowVersion
private DataRowVersion RowVersionDefault
public DataRow Row
public bool IsNew
public bool IsEdit
internal void .ctor(DataView dataView, DataRow row)
public bool Equals(object other)
public int GetHashCode()
public DataView get_DataView()
internal int get_ObjectID()
public object get_Item(int ndx)
public void set_Item(int ndx, object value)
public object get_Item(string property)
public void set_Item(string property, object value)
private string System.ComponentModel.IDataErrorInfo.get_Item(string colName)
private string System.ComponentModel.IDataErrorInfo.get_Error()
public DataRowVersion get_RowVersion()
private DataRowVersion get_RowVersionDefault()
internal int GetRecord()
internal bool HasRecord()
internal object GetColumnValue(DataColumn column)
internal void SetColumnValue(DataColumn column, object value)
public DataView CreateChildView(DataRelation relation, bool followParent)
public DataView CreateChildView(DataRelation relation)
public DataView CreateChildView(string relationName, bool followParent)
public DataView CreateChildView(string relationName)
public DataRow get_Row()
public void BeginEdit()
public void CancelEdit()
public void EndEdit()
public bool get_IsNew()
public bool get_IsEdit()
public void Delete()
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
public void add_PropertyChanged(PropertyChangedEventHandler value)
public void remove_PropertyChanged(PropertyChangedEventHandler value)
internal void RaisePropertyChangedEvent(string propName)
}
public System.Data.DataSet : MarshalByValueComponent {
private DataViewManager defaultViewManager
private DataTableCollection tableCollection
private DataRelationCollection relationCollection
internal PropertyCollection extendedProperties
private string dataSetName
private string _datasetPrefix
internal string namespaceURI
private bool enforceConstraints
private string KEY_XMLSCHEMA
private string KEY_XMLDIFFGRAM
private bool _caseSensitive
private CultureInfo _culture
private bool _cultureUserSet
internal bool fInReadXml
internal bool fInLoadDiffgram
internal bool fTopLevelTable
internal bool fInitInProgress
internal bool fEnableCascading
internal bool fIsSchemaLoading
private bool fBoundToDocument
private PropertyChangedEventHandler onPropertyChangingDelegate
private MergeFailedEventHandler onMergeFailed
private DataRowCreatedEventHandler onDataRowCreated
private DataSetClearEventhandler onClearFunctionCalled
private EventHandler onInitialized
internal DataTable[] zeroTables
internal string mainTableName
private SerializationFormat _remotingFormat
private object _defaultViewManagerLock
private int _objectTypeCount
private int _objectID
private XmlSchemaComplexType schemaTypeForWSDL
internal bool UseDataSetSchemaOnly
internal bool UdtIsWrapped
private bool System.ComponentModel.IListSource.ContainsListCollection
public SerializationFormat RemotingFormat
public SchemaSerializationMode SchemaSerializationMode
public bool CaseSensitive
public DataViewManager DefaultViewManager
public bool EnforceConstraints
public string DataSetName
public string Namespace
public string Prefix
public PropertyCollection ExtendedProperties
public bool HasErrors
public bool IsInitialized
public CultureInfo Locale
public ISite Site
public DataRelationCollection Relations
public DataTableCollection Tables
internal bool FBoundToDocument
internal string MainTableName
internal int ObjectID
public void .ctor(string dataSetName)
protected void .ctor(SerializationInfo info, StreamingContext context)
protected void .ctor(SerializationInfo info, StreamingContext context, bool ConstructSchema)
public SerializationFormat get_RemotingFormat()
public void set_RemotingFormat(SerializationFormat value)
public SchemaSerializationMode get_SchemaSerializationMode()
public void set_SchemaSerializationMode(SchemaSerializationMode value)
protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context)
protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context)
protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader)
protected void GetSerializationData(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
protected void InitializeDerivedDataSet()
private void SerializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat)
internal void DeserializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode)
private void DeserializeDataSetSchema(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode)
private void DeserializeDataSetData(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat)
private void SerializeDataSetProperties(SerializationInfo info, StreamingContext context)
private void DeserializeDataSetProperties(SerializationInfo info, StreamingContext context)
private void SerializeRelations(SerializationInfo info, StreamingContext context)
private void DeserializeRelations(SerializationInfo info, StreamingContext context)
internal void FailedEnableConstraints()
public bool get_CaseSensitive()
public void set_CaseSensitive(bool value)
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
public DataViewManager get_DefaultViewManager()
public bool get_EnforceConstraints()
public void set_EnforceConstraints(bool value)
internal void RestoreEnforceConstraints(bool value)
internal void EnableConstraints()
public string get_DataSetName()
public void set_DataSetName(string value)
public string get_Namespace()
public void set_Namespace(string value)
public string get_Prefix()
public void set_Prefix(string value)
public PropertyCollection get_ExtendedProperties()
public bool get_HasErrors()
public bool get_IsInitialized()
public CultureInfo get_Locale()
public void set_Locale(CultureInfo value)
internal void SetLocaleValue(CultureInfo value, bool userSet)
internal bool ShouldSerializeLocale()
public ISite get_Site()
public void set_Site(ISite value)
public DataRelationCollection get_Relations()
protected bool ShouldSerializeRelations()
private void ResetRelations()
public DataTableCollection get_Tables()
protected bool ShouldSerializeTables()
private void ResetTables()
internal bool get_FBoundToDocument()
internal void set_FBoundToDocument(bool value)
public void AcceptChanges()
internal void add_PropertyChanging(PropertyChangedEventHandler value)
internal void remove_PropertyChanging(PropertyChangedEventHandler value)
public void add_MergeFailed(MergeFailedEventHandler value)
public void remove_MergeFailed(MergeFailedEventHandler value)
internal void add_DataRowCreated(DataRowCreatedEventHandler value)
internal void remove_DataRowCreated(DataRowCreatedEventHandler value)
internal void add_ClearFunctionCalled(DataSetClearEventhandler value)
internal void remove_ClearFunctionCalled(DataSetClearEventhandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
public void BeginInit()
public void EndInit()
public void Clear()
public DataSet Clone()
public DataSet Copy()
internal int EstimatedXmlStringSize()
public DataSet GetChanges()
public DataSet GetChanges(DataRowState rowStates)
private void MarkModifiedRows(TableChanges[] bitMatrix, DataRowState rowStates)
private void MarkRelatedRowsAsModified(TableChanges[] bitMatrix, DataRow row)
private IList System.ComponentModel.IListSource.GetList()
internal string GetRemotingDiffGram(DataTable table)
public string GetXml()
public string GetXmlSchema()
internal string GetXmlSchemaForRemoting(DataTable table)
public bool HasChanges()
public bool HasChanges(DataRowState rowStates)
public void InferXmlSchema(XmlReader reader, String[] nsArray)
public void InferXmlSchema(Stream stream, String[] nsArray)
public void InferXmlSchema(TextReader reader, String[] nsArray)
public void InferXmlSchema(string fileName, String[] nsArray)
public void ReadXmlSchema(XmlReader reader)
internal void ReadXmlSchema(XmlReader reader, bool denyResolving)
internal bool MoveToElement(XmlReader reader, int depth)
private void MoveToElement(XmlReader reader)
internal void ReadEndElement(XmlReader reader)
internal void ReadXSDSchema(XmlReader reader, bool denyResolving)
internal void ReadXDRSchema(XmlReader reader)
public void ReadXmlSchema(Stream stream)
public void ReadXmlSchema(TextReader reader)
public void ReadXmlSchema(string fileName)
public void WriteXmlSchema(Stream stream)
public void WriteXmlSchema(Stream stream, Converter`2<Type, string> multipleTargetConverter)
public void WriteXmlSchema(string fileName)
public void WriteXmlSchema(string fileName, Converter`2<Type, string> multipleTargetConverter)
public void WriteXmlSchema(TextWriter writer)
public void WriteXmlSchema(TextWriter writer, Converter`2<Type, string> multipleTargetConverter)
public void WriteXmlSchema(XmlWriter writer)
public void WriteXmlSchema(XmlWriter writer, Converter`2<Type, string> multipleTargetConverter)
private void WriteXmlSchema(string fileName, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter)
private void WriteXmlSchema(Stream stream, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter)
private void WriteXmlSchema(TextWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter)
private void WriteXmlSchema(XmlWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter)
public XmlReadMode ReadXml(XmlReader reader)
internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving)
public XmlReadMode ReadXml(Stream stream)
public XmlReadMode ReadXml(TextReader reader)
public XmlReadMode ReadXml(string fileName)
internal void InferSchema(XmlDocument xdoc, String[] excludedNamespaces, XmlReadMode mode)
private bool IsEmpty()
private void ReadXmlDiffgram(XmlReader reader)
public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode)
internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving)
public XmlReadMode ReadXml(Stream stream, XmlReadMode mode)
public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode)
public XmlReadMode ReadXml(string fileName, XmlReadMode mode)
public void WriteXml(Stream stream)
public void WriteXml(TextWriter writer)
public void WriteXml(XmlWriter writer)
public void WriteXml(string fileName)
public void WriteXml(Stream stream, XmlWriteMode mode)
public void WriteXml(TextWriter writer, XmlWriteMode mode)
public void WriteXml(XmlWriter writer, XmlWriteMode mode)
public void WriteXml(string fileName, XmlWriteMode mode)
internal DataRelationCollection GetParentRelations(DataTable table)
public void Merge(DataSet dataSet)
public void Merge(DataSet dataSet, bool preserveChanges)
public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction)
public void Merge(DataTable table)
public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction)
public void Merge(DataRow[] rows)
public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction)
protected void OnPropertyChanging(PropertyChangedEventArgs pcevent)
internal void OnMergeFailed(MergeFailedEventArgs mfevent)
internal void RaiseMergeFailed(DataTable table, string conflict, MissingSchemaAction missingSchemaAction)
internal void OnDataRowCreated(DataRow row)
internal void OnClearFunctionCalled(DataTable table)
private void OnInitialized()
protected internal void OnRemoveTable(DataTable table)
internal void OnRemovedTable(DataTable table)
protected void OnRemoveRelation(DataRelation relation)
internal void OnRemoveRelationHack(DataRelation relation)
protected internal void RaisePropertyChanging(string name)
internal DataTable[] TopLevelTables()
internal DataTable[] TopLevelTables(bool forSchema)
public void RejectChanges()
public void Reset()
internal bool ValidateCaseConstraint()
internal bool ValidateLocaleConstraint()
internal DataTable FindTable(DataTable baseTable, PropertyDescriptor[] props, int propStart)
protected void ReadXmlSerializable(XmlReader reader)
protected XmlSchema GetSchemaSerializable()
public XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet)
private bool PublishLegacyWSDL()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables)
public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables)
public void Load(IDataReader reader, LoadOption loadOption, String[] tables)
public DataTableReader CreateDataReader()
public DataTableReader CreateDataReader(DataTable[] dataTables)
internal string get_MainTableName()
internal void set_MainTableName(string value)
internal int get_ObjectID()
}
internal System.Data.DataSetClearEventhandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataTable table)
public IAsyncResult BeginInvoke(object sender, DataTable table, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataSetDateTime : Enum {
public int value__
public DataSetDateTime Local
public DataSetDateTime Unspecified
public DataSetDateTime UnspecifiedLocal
public DataSetDateTime Utc
}
public System.Data.DataSetSchemaImporterExtension : SchemaImporterExtension {
private Hashtable importedTypes
public string ImportSchemaType(string name, string schemaNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
internal XmlSchemaElement FindDataSetElement(XmlSchema schema)
internal string GenerateTypedDataSet(XmlSchemaElement element, XmlSchemas schemas, CodeNamespace codeNamespace, StringCollection references, CodeDomProvider codeProvider)
internal bool IsDataSet(XmlSchemaElement e)
}
public System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
private bool replaced
public string Description
public void .ctor(string description)
public string get_Description()
}
public System.Data.DataTable : MarshalByValueComponent {
private DataSet dataSet
private DataView defaultView
internal long nextRowID
internal DataRowCollection rowCollection
internal DataColumnCollection columnCollection
private ConstraintCollection constraintCollection
private int elementColumnCount
internal DataRelationCollection parentRelationsCollection
internal DataRelationCollection childRelationsCollection
internal RecordManager recordManager
internal List`1<Index> indexes
private List`1<Index> shadowIndexes
private int shadowCount
internal PropertyCollection extendedProperties
private string tableName
internal string tableNamespace
private string tablePrefix
internal DataExpression displayExpression
internal bool fNestedInDataset
private CultureInfo _culture
private bool _cultureUserSet
private CompareInfo _compareInfo
private CompareOptions _compareFlags
private IFormatProvider _formatProvider
private StringComparer _hashCodeProvider
private bool _caseSensitive
private bool _caseSensitiveUserSet
internal string encodedTableName
internal DataColumn xmlText
internal DataColumn _colUnique
internal bool textOnly
internal decimal minOccurs
internal decimal maxOccurs
internal bool repeatableElement
private object typeName
private Int32[] zeroIntegers
internal DataColumn[] zeroColumns
internal DataRow[] zeroRows
internal UniqueConstraint primaryKey
internal IndexField[] zeroIndexField
internal IndexField[] _primaryIndex
private DataColumn[] delayedSetPrimaryKey
private Index loadIndex
private Index loadIndexwithOriginalAdded
private Index loadIndexwithCurrentDeleted
private int _suspendIndexEvents
private bool savedEnforceConstraints
private bool inDataLoad
private bool initialLoad
private bool schemaLoading
private bool enforceConstraints
internal bool _suspendEnforceConstraints
protected internal bool fInitInProgress
private bool inLoad
internal bool fInLoadDiffgram
private byte _isTypedDataTable
private DataRow[] EmptyDataRowArray
private PropertyDescriptorCollection propertyDescriptorCollectionCache
private DataRelation[] EmptyArrayDataRelation
private DataRelation[] _nestedParentRelations
internal List`1<DataColumn> dependentColumns
private bool mergingData
private DataRowChangeEventHandler onRowChangedDelegate
private DataRowChangeEventHandler onRowChangingDelegate
private DataRowChangeEventHandler onRowDeletingDelegate
private DataRowChangeEventHandler onRowDeletedDelegate
private DataColumnChangeEventHandler onColumnChangedDelegate
private DataColumnChangeEventHandler onColumnChangingDelegate
private DataTableClearEventHandler onTableClearingDelegate
private DataTableClearEventHandler onTableClearedDelegate
private DataTableNewRowEventHandler onTableNewRowDelegate
private PropertyChangedEventHandler onPropertyChangingDelegate
private EventHandler onInitialized
private DataRowBuilder rowBuilder
private string KEY_XMLSCHEMA
private string KEY_XMLDIFFGRAM
private string KEY_NAME
internal List`1<DataView> delayedViews
private List`1<DataViewListener> _dataViewListeners
internal Hashtable rowDiffId
internal ReaderWriterLock indexesLock
internal int ukColumnPositionForInference
private SerializationFormat _remotingFormat
private int _objectTypeCount
private int _objectID
private bool System.ComponentModel.IListSource.ContainsListCollection
public bool CaseSensitive
internal bool AreIndexEventsSuspended
public bool IsInitialized
private bool IsTypedDataTable
internal bool SelfNested
internal List`1<Index> LiveIndexes
public SerializationFormat RemotingFormat
internal int UKColumnPositionForInference
public DataRelationCollection ChildRelations
public DataColumnCollection Columns
private CompareInfo CompareInfo
public ConstraintCollection Constraints
public DataSet DataSet
public DataView DefaultView
public string DisplayExpression
internal string DisplayExpressionInternal
internal bool EnforceConstraints
internal bool SuspendEnforceConstraints
public PropertyCollection ExtendedProperties
internal IFormatProvider FormatProvider
public bool HasErrors
public CultureInfo Locale
public int MinimumCapacity
internal int RecordCapacity
internal int ElementColumnCount
public DataRelationCollection ParentRelations
internal bool MergingData
internal DataRelation[] NestedParentRelations
internal bool SchemaLoading
internal int NestedParentsCount
public DataColumn[] PrimaryKey
public DataRowCollection Rows
public string TableName
internal string EncodedTableName
public string Namespace
public string Prefix
internal DataColumn XmlText
internal decimal MaxOccurs
internal decimal MinOccurs
public ISite Site
internal bool NeedColumnChangeEvents
internal XmlQualifiedName TypeName
internal Hashtable RowDiffId
internal int ObjectID
public void .ctor(string tableName)
public void .ctor(string tableName, string tableNamespace)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void GetObjectData(SerializationInfo info, StreamingContext context)
private void SerializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat)
internal void DeserializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat)
internal void SerializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable)
internal void DeserializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable)
internal void SerializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints)
internal void DeserializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints)
internal void SerializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex)
internal void DeserializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex)
internal void SerializeTableData(SerializationInfo info, StreamingContext context, int serIndex)
internal void DeserializeTableData(SerializationInfo info, StreamingContext context, int serIndex)
private DataRowState ConvertToRowState(BitArray bitStates, int bitIndex)
internal void GetRowAndColumnErrors(int rowIndex, Hashtable rowErrors, Hashtable colErrors)
private void ConvertToRowError(int rowIndex, Hashtable rowErrors, Hashtable colErrors)
public bool get_CaseSensitive()
public void set_CaseSensitive(bool value)
internal bool get_AreIndexEventsSuspended()
internal void RestoreIndexEvents(bool forceReset)
internal void SuspendIndexEvents()
public bool get_IsInitialized()
private bool get_IsTypedDataTable()
internal bool SetCaseSensitiveValue(bool isCaseSensitive, bool userSet, bool resetIndexes)
private void ResetCaseSensitive()
internal bool ShouldSerializeCaseSensitive()
internal bool get_SelfNested()
internal List`1<Index> get_LiveIndexes()
public SerializationFormat get_RemotingFormat()
public void set_RemotingFormat(SerializationFormat value)
internal int get_UKColumnPositionForInference()
internal void set_UKColumnPositionForInference(int value)
public DataRelationCollection get_ChildRelations()
public DataColumnCollection get_Columns()
private void ResetColumns()
private CompareInfo get_CompareInfo()
public ConstraintCollection get_Constraints()
private void ResetConstraints()
public DataSet get_DataSet()
internal void SetDataSet(DataSet dataSet)
public DataView get_DefaultView()
public string get_DisplayExpression()
public void set_DisplayExpression(string value)
internal string get_DisplayExpressionInternal()
internal bool get_EnforceConstraints()
internal void set_EnforceConstraints(bool value)
internal bool get_SuspendEnforceConstraints()
internal void set_SuspendEnforceConstraints(bool value)
internal void EnableConstraints()
public PropertyCollection get_ExtendedProperties()
internal IFormatProvider get_FormatProvider()
public bool get_HasErrors()
public CultureInfo get_Locale()
public void set_Locale(CultureInfo value)
internal bool SetLocaleValue(CultureInfo culture, bool userSet, bool resetIndexes)
internal bool ShouldSerializeLocale()
public int get_MinimumCapacity()
public void set_MinimumCapacity(int value)
internal int get_RecordCapacity()
internal int get_ElementColumnCount()
internal void set_ElementColumnCount(int value)
public DataRelationCollection get_ParentRelations()
internal bool get_MergingData()
internal void set_MergingData(bool value)
internal DataRelation[] get_NestedParentRelations()
internal bool get_SchemaLoading()
internal void CacheNestedParent()
private DataRelation[] FindNestedParentRelations()
internal int get_NestedParentsCount()
public DataColumn[] get_PrimaryKey()
public void set_PrimaryKey(DataColumn[] value)
private bool ShouldSerializePrimaryKey()
private void ResetPrimaryKey()
public DataRowCollection get_Rows()
public string get_TableName()
public void set_TableName(string value)
internal string get_EncodedTableName()
private string GetInheritedNamespace(List`1<DataTable> visitedTables)
public string get_Namespace()
public void set_Namespace(string value)
internal bool IsNamespaceInherited()
internal void CheckCascadingNamespaceConflict(string realNamespace)
internal void CheckNamespaceValidityForNestedRelations(string realNamespace)
internal void CheckNamespaceValidityForNestedParentRelations(string ns, DataTable parentTable)
internal void DoRaiseNamespaceChange()
private bool ShouldSerializeNamespace()
private void ResetNamespace()
public void BeginInit()
public void EndInit()
public string get_Prefix()
public void set_Prefix(string value)
internal DataColumn get_XmlText()
internal void set_XmlText(DataColumn value)
internal decimal get_MaxOccurs()
internal void set_MaxOccurs(decimal value)
internal decimal get_MinOccurs()
internal void set_MinOccurs(decimal value)
internal void SetKeyValues(DataKey key, Object[] keyValues, int record)
internal DataRow FindByIndex(Index ndx, Object[] key)
internal DataRow FindMergeTarget(DataRow row, DataKey key, Index ndx)
private void SetMergeRecords(DataRow row, int newRecord, int oldRecord, DataRowAction action)
internal DataRow MergeRow(DataRow row, DataRow targetRow, bool preserveChanges, Index idxSearch)
public void AcceptChanges()
protected DataTable CreateInstance()
public DataTable Clone()
internal DataTable Clone(DataSet cloneDS)
private DataTable IncrementalCloneTo(DataTable sourceTable, DataTable targetTable)
private DataTable CloneHierarchy(DataTable sourceTable, DataSet ds, Hashtable visitedMap)
private DataTable CloneTo(DataTable clone, DataSet cloneDS, bool skipExpressionColumns)
public DataTable Copy()
public void add_ColumnChanging(DataColumnChangeEventHandler value)
public void remove_ColumnChanging(DataColumnChangeEventHandler value)
public void add_ColumnChanged(DataColumnChangeEventHandler value)
public void remove_ColumnChanged(DataColumnChangeEventHandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
internal void add_PropertyChanging(PropertyChangedEventHandler value)
internal void remove_PropertyChanging(PropertyChangedEventHandler value)
public void add_RowChanged(DataRowChangeEventHandler value)
public void remove_RowChanged(DataRowChangeEventHandler value)
public void add_RowChanging(DataRowChangeEventHandler value)
public void remove_RowChanging(DataRowChangeEventHandler value)
public void add_RowDeleting(DataRowChangeEventHandler value)
public void remove_RowDeleting(DataRowChangeEventHandler value)
public void add_RowDeleted(DataRowChangeEventHandler value)
public void remove_RowDeleted(DataRowChangeEventHandler value)
public void add_TableClearing(DataTableClearEventHandler value)
public void remove_TableClearing(DataTableClearEventHandler value)
public void add_TableCleared(DataTableClearEventHandler value)
public void remove_TableCleared(DataTableClearEventHandler value)
public void add_TableNewRow(DataTableNewRowEventHandler value)
public void remove_TableNewRow(DataTableNewRowEventHandler value)
public ISite get_Site()
public void set_Site(ISite value)
internal DataRow AddRecords(int oldRecord, int newRecord)
internal void AddRow(DataRow row)
internal void AddRow(DataRow row, int proposedID)
internal void InsertRow(DataRow row, int proposedID, int pos)
internal void InsertRow(DataRow row, long proposedID, int pos, bool fireEvent)
internal void CheckNotModifying(DataRow row)
public void Clear()
internal void Clear(bool clearAll)
internal void CascadeAll(DataRow row, DataRowAction action)
internal void CommitRow(DataRow row)
internal int Compare(string s1, string s2)
internal int Compare(string s1, string s2, CompareInfo comparer)
internal int IndexOf(string s1, string s2)
internal bool IsSuffix(string s1, string s2)
public object Compute(string expression, string filter)
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
internal void CopyRow(DataTable table, DataRow row)
internal void DeleteRow(DataRow row)
private void CheckPrimaryKey()
internal DataRow FindByPrimaryKey(Object[] values)
internal DataRow FindByPrimaryKey(object value)
private DataRow FindRow(DataKey key, Object[] values)
private DataRow FindRow(DataKey key, object value)
internal string FormatSortString(IndexField[] indexDesc)
internal void FreeRecord(Int32& record)
public DataTable GetChanges()
public DataTable GetChanges(DataRowState rowStates)
public DataRow[] GetErrors()
internal Index GetIndex(IndexField[] indexDesc)
internal Index GetIndex(string sort, DataViewRowState recordStates, IFilter rowFilter)
internal Index GetIndex(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter)
private IList System.ComponentModel.IListSource.GetList()
internal List`1<DataViewListener> GetListeners()
internal int GetSpecialHashCode(string name)
public void ImportRow(DataRow row)
internal void InsertRow(DataRow row, long proposedID)
private IndexField[] NewIndexDesc(DataKey key)
internal int NewRecord()
internal int NewUninitializedRecord()
internal int NewRecordFromArray(Object[] value)
internal int NewRecord(int sourceRecord)
internal DataRow NewEmptyRow()
private DataRow NewUninitializedRow()
public DataRow NewRow()
internal DataRow CreateEmptyRow()
private void NewRowCreated(DataRow row)
internal DataRow NewRow(int record)
protected DataRow NewRowFromBuilder(DataRowBuilder builder)
protected Type GetRowType()
protected internal DataRow[] NewRowArray(int size)
internal bool get_NeedColumnChangeEvents()
protected internal void OnColumnChanging(DataColumnChangeEventArgs e)
protected internal void OnColumnChanged(DataColumnChangeEventArgs e)
protected void OnPropertyChanging(PropertyChangedEventArgs pcevent)
internal void OnRemoveColumnInternal(DataColumn column)
protected void OnRemoveColumn(DataColumn column)
private DataRowChangeEventArgs OnRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction)
private DataRowChangeEventArgs OnRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction)
protected void OnRowChanged(DataRowChangeEventArgs e)
protected void OnRowChanging(DataRowChangeEventArgs e)
protected void OnRowDeleting(DataRowChangeEventArgs e)
protected void OnRowDeleted(DataRowChangeEventArgs e)
protected void OnTableCleared(DataTableClearEventArgs e)
protected void OnTableClearing(DataTableClearEventArgs e)
protected void OnTableNewRow(DataTableNewRowEventArgs e)
private void OnInitialized()
internal IndexField[] ParseSortString(string sortString)
internal void RaisePropertyChanging(string name)
internal void RecordChanged(int record)
internal void RecordChanged(Int32[] oldIndex, Int32[] newIndex)
internal void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState)
internal void RecordStateChanged(int record1, DataViewRowState oldState1, DataViewRowState newState1, int record2, DataViewRowState oldState2, DataViewRowState newState2)
internal Int32[] RemoveRecordFromIndexes(DataRow row, DataRowVersion version)
internal Int32[] InsertRecordToIndexes(DataRow row, DataRowVersion version)
internal void SilentlySetValue(DataRow dr, DataColumn dc, DataRowVersion version, object newValue)
public void RejectChanges()
internal void RemoveRow(DataRow row, bool check)
public void Reset()
internal void ResetIndexes()
internal void ResetInternalIndexes(DataColumn column)
internal void RollbackRow(DataRow row)
private DataRowChangeEventArgs RaiseRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction)
private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction)
private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction, bool fireEvent)
public DataRow[] Select()
public DataRow[] Select(string filterExpression)
public DataRow[] Select(string filterExpression, string sort)
public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates)
internal void SetNewRecord(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool fireEvent, bool suppressEnsurePropertyChanged)
private void SetNewRecordWorker(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool suppressEnsurePropertyChanged, int position, bool fireEvent, Exception& deferredException)
internal void SetOldRecord(DataRow row, int proposedRecord)
private void RestoreShadowIndexes()
private void SetShadowIndexes()
internal void ShadowIndexCopy()
public string ToString()
public void BeginLoadData()
public void EndLoadData()
public DataRow LoadDataRow(Object[] values, bool fAcceptChanges)
public DataRow LoadDataRow(Object[] values, LoadOption loadOption)
internal DataRow UpdatingAdd(Object[] values)
internal bool UpdatingCurrent(DataRow row, DataRowAction action)
internal DataColumn AddUniqueKey(int position)
internal DataColumn AddUniqueKey()
internal DataColumn AddForeignKey(DataColumn parentKey)
internal void UpdatePropertyDescriptorCollectionCache()
internal PropertyDescriptorCollection GetPropertyDescriptorCollection(Attribute[] attributes)
internal XmlQualifiedName get_TypeName()
internal void set_TypeName(XmlQualifiedName value)
public void Merge(DataTable table)
public void Merge(DataTable table, bool preserveChanges)
public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction)
public void Load(IDataReader reader)
public void Load(IDataReader reader, LoadOption loadOption)
public void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler)
private DataRow LoadRow(Object[] values, LoadOption loadOption, Index searchIndex)
private void SetDataRowWithLoadOption(DataRow dataRow, int recordNo, LoadOption loadOption, bool checkReadOnly)
public DataTableReader CreateDataReader()
public void WriteXml(Stream stream)
public void WriteXml(Stream stream, bool writeHierarchy)
public void WriteXml(TextWriter writer)
public void WriteXml(TextWriter writer, bool writeHierarchy)
public void WriteXml(XmlWriter writer)
public void WriteXml(XmlWriter writer, bool writeHierarchy)
public void WriteXml(string fileName)
public void WriteXml(string fileName, bool writeHierarchy)
public void WriteXml(Stream stream, XmlWriteMode mode)
public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(TextWriter writer, XmlWriteMode mode)
public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(XmlWriter writer, XmlWriteMode mode)
public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(string fileName, XmlWriteMode mode)
public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy)
public void WriteXmlSchema(Stream stream)
public void WriteXmlSchema(Stream stream, bool writeHierarchy)
public void WriteXmlSchema(TextWriter writer)
public void WriteXmlSchema(TextWriter writer, bool writeHierarchy)
private bool CheckForClosureOnExpressions(DataTable dt, bool writeHierarchy)
private bool CheckForClosureOnExpressionTables(List`1<DataTable> tableList)
public void WriteXmlSchema(XmlWriter writer)
public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy)
public void WriteXmlSchema(string fileName)
public void WriteXmlSchema(string fileName, bool writeHierarchy)
public XmlReadMode ReadXml(Stream stream)
public XmlReadMode ReadXml(TextReader reader)
public XmlReadMode ReadXml(string fileName)
public XmlReadMode ReadXml(XmlReader reader)
private void RestoreConstraint(bool originalEnforceConstraint)
private bool IsEmptyXml(XmlReader reader)
internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving)
internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving)
internal void ReadEndElement(XmlReader reader)
internal void ReadXDRSchema(XmlReader reader)
internal bool MoveToElement(XmlReader reader, int depth)
private void ReadXmlDiffgram(XmlReader reader)
internal void ReadXSDSchema(XmlReader reader, bool denyResolving)
public void ReadXmlSchema(Stream stream)
public void ReadXmlSchema(TextReader reader)
public void ReadXmlSchema(string fileName)
public void ReadXmlSchema(XmlReader reader)
internal void ReadXmlSchema(XmlReader reader, bool denyResolving)
private void CreateTableList(DataTable currentTable, List`1<DataTable> tableList)
private void CreateRelationList(List`1<DataTable> tableList, List`1<DataRelation> relationList)
public XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
protected XmlSchema GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
protected void ReadXmlSerializable(XmlReader reader)
internal Hashtable get_RowDiffId()
internal int get_ObjectID()
internal void AddDependentColumn(DataColumn expressionColumn)
internal void RemoveDependentColumn(DataColumn expressionColumn)
internal void EvaluateExpressions()
internal void EvaluateExpressions(DataRow row, DataRowAction action, List`1<DataRow> cachedRows)
internal void EvaluateExpressions(DataColumn column)
internal void EvaluateDependentExpressions(DataColumn column)
internal void EvaluateDependentExpressions(List`1<DataColumn> columns, DataRow row, DataRowVersion version, List`1<DataRow> cachedRows)
}
public System.Data.DataTableClearEventArgs : EventArgs {
private DataTable dataTable
public DataTable Table
public string TableName
public string TableNamespace
public void .ctor(DataTable dataTable)
public DataTable get_Table()
public string get_TableName()
public string get_TableNamespace()
}
public System.Data.DataTableClearEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataTableClearEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataTableCollection : InternalDataCollectionBase {
private DataSet dataSet
private ArrayList _list
private int defaultNameIndex
private DataTable[] delayedAddRangeTables
private CollectionChangeEventHandler onCollectionChangedDelegate
private CollectionChangeEventHandler onCollectionChangingDelegate
private int _objectTypeCount
private int _objectID
protected ArrayList List
internal int ObjectID
public DataTable Item
public DataTable Item
public DataTable Item
internal void .ctor(DataSet dataSet)
protected ArrayList get_List()
internal int get_ObjectID()
public DataTable get_Item(int index)
public DataTable get_Item(string name)
public DataTable get_Item(string name, string tableNamespace)
internal DataTable GetTable(string name, string ns)
internal DataTable GetTableSmart(string name, string ns)
public void Add(DataTable table)
public void AddRange(DataTable[] tables)
public DataTable Add(string name)
public DataTable Add(string name, string tableNamespace)
public DataTable Add()
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
public void add_CollectionChanging(CollectionChangeEventHandler value)
public void remove_CollectionChanging(CollectionChangeEventHandler value)
private void ArrayAdd(DataTable table)
internal string AssignName()
private void BaseAdd(DataTable table)
private void BaseGroupSwitch(DataTable[] oldArray, int oldLength, DataTable[] newArray, int newLength)
private void BaseRemove(DataTable table)
public bool CanRemove(DataTable table)
internal bool CanRemove(DataTable table, bool fThrowException)
public void Clear()
public bool Contains(string name)
public bool Contains(string name, string tableNamespace)
internal bool Contains(string name, string tableNamespace, bool checkProperty, bool caseSensitive)
internal bool Contains(string name, bool caseSensitive)
public void CopyTo(DataTable[] array, int index)
public int IndexOf(DataTable table)
public int IndexOf(string tableName)
public int IndexOf(string tableName, string tableNamespace)
internal int IndexOf(string tableName, string tableNamespace, bool chekforNull)
internal void ReplaceFromInference(List`1<DataTable> tableList)
internal int InternalIndexOf(string tableName)
internal int InternalIndexOf(string tableName, string tableNamespace)
internal void FinishInitCollection()
private string MakeName(int index)
private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
private void OnCollectionChanging(CollectionChangeEventArgs ccevent)
internal void RegisterName(string name, string tbNamespace)
public void Remove(DataTable table)
public void RemoveAt(int index)
public void Remove(string name)
public void Remove(string name, string tableNamespace)
internal void UnregisterName(string name)
}
public System.Data.DataTableNewRowEventArgs : EventArgs {
private DataRow dataRow
public DataRow Row
public void .ctor(DataRow dataRow)
public DataRow get_Row()
}
public System.Data.DataTableNewRowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataTableNewRowEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.DataTablePropertyDescriptor : PropertyDescriptor {
private DataTable table
public DataTable Table
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
internal void .ctor(DataTable dataTable)
public DataTable get_Table()
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public bool Equals(object other)
public int GetHashCode()
public bool CanResetValue(object component)
public object GetValue(object component)
public void ResetValue(object component)
public void SetValue(object component, object value)
public bool ShouldSerializeValue(object component)
}
public System.Data.DataTableReader : DbDataReader {
private DataTable[] tables
private bool isOpen
private DataTable schemaTable
private int tableCounter
private int rowCounter
private DataTable currentDataTable
private DataRow currentDataRow
private bool hasRows
private bool reachEORows
private bool currentRowRemoved
private bool schemaIsChanged
private bool started
private bool readerIsInvalid
private DataTableReaderListener listener
private bool tableCleared
private bool ReaderIsInvalid
private bool IsSchemaChanged
internal DataTable CurrentDataTable
public int Depth
public bool IsClosed
public int RecordsAffected
public bool HasRows
public object Item
public object Item
public int FieldCount
public void .ctor(DataTable dataTable)
public void .ctor(DataTable[] dataTables)
private bool get_ReaderIsInvalid()
private void set_ReaderIsInvalid(bool value)
private bool get_IsSchemaChanged()
private void set_IsSchemaChanged(bool value)
internal DataTable get_CurrentDataTable()
private void init()
public void Close()
public DataTable GetSchemaTable()
public bool NextResult()
public bool Read()
public int get_Depth()
public bool get_IsClosed()
public int get_RecordsAffected()
public bool get_HasRows()
public object get_Item(int ordinal)
public object get_Item(string name)
public int get_FieldCount()
public Type GetProviderSpecificFieldType(int ordinal)
public object GetProviderSpecificValue(int ordinal)
public int GetProviderSpecificValues(Object[] values)
public bool GetBoolean(int ordinal)
public byte GetByte(int ordinal)
public long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int ordinal)
public long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int ordinal)
public DateTime GetDateTime(int ordinal)
public decimal GetDecimal(int ordinal)
public double GetDouble(int ordinal)
public Type GetFieldType(int ordinal)
public float GetFloat(int ordinal)
public Guid GetGuid(int ordinal)
public short GetInt16(int ordinal)
public int GetInt32(int ordinal)
public long GetInt64(int ordinal)
public string GetName(int ordinal)
public int GetOrdinal(string name)
public string GetString(int ordinal)
public object GetValue(int ordinal)
public int GetValues(Object[] values)
public bool IsDBNull(int ordinal)
public IEnumerator GetEnumerator()
internal DataTable GetSchemaTableFromDataTable(DataTable table)
private void ValidateOpen(string caller)
private void ValidateReader()
private void ValidateState(string caller)
private void ValidateRow(int rowPosition)
internal void SchemaChanged()
internal void DataTableCleared()
internal void DataChanged(DataRowChangeEventArgs args)
}
internal System.Data.DataTableReaderListener : object {
private DataTable currentDataTable
private bool isSubscribed
private WeakReference readerWeak
internal void .ctor(DataTableReader reader)
internal void CleanUp()
internal void UpdataTable(DataTable datatable)
private void SubscribeEvents()
private void UnSubscribeEvents()
private void DataTableCleared(object sender, DataTableClearEventArgs e)
private void SchemaChanged(object sender, CollectionChangeEventArgs e)
private void DataChanged(object sender, DataRowChangeEventArgs args)
}
internal System.Data.DataTableTypeConverter : ReferenceConverter {
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
internal System.Data.DataTextReader : XmlReader {
private XmlReader _xmlreader
public XmlReaderSettings Settings
public XmlNodeType NodeType
public string Name
public string LocalName
public string NamespaceURI
public string Prefix
public bool HasValue
public string Value
public int Depth
public string BaseURI
public bool IsEmptyElement
public bool IsDefault
public char QuoteChar
public XmlSpace XmlSpace
public string XmlLang
public int AttributeCount
public bool EOF
public ReadState ReadState
public XmlNameTable NameTable
public bool CanResolveEntity
public bool CanReadBinaryContent
public bool CanReadValueChunk
private void .ctor(XmlReader input)
internal XmlReader CreateReader(XmlReader xr)
public XmlReaderSettings get_Settings()
public XmlNodeType get_NodeType()
public string get_Name()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Prefix()
public bool get_HasValue()
public string get_Value()
public int get_Depth()
public string get_BaseURI()
public bool get_IsEmptyElement()
public bool get_IsDefault()
public char get_QuoteChar()
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public int get_AttributeCount()
public string GetAttribute(string name)
public string GetAttribute(string localName, string namespaceURI)
public string GetAttribute(int i)
public bool MoveToAttribute(string name)
public bool MoveToAttribute(string localName, string namespaceURI)
public void MoveToAttribute(int i)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToElement()
public bool ReadAttributeValue()
public bool Read()
public bool get_EOF()
public void Close()
public ReadState get_ReadState()
public void Skip()
public XmlNameTable get_NameTable()
public string LookupNamespace(string prefix)
public bool get_CanResolveEntity()
public void ResolveEntity()
public bool get_CanReadBinaryContent()
public int ReadContentAsBase64(Byte[] buffer, int index, int count)
public int ReadElementContentAsBase64(Byte[] buffer, int index, int count)
public int ReadContentAsBinHex(Byte[] buffer, int index, int count)
public int ReadElementContentAsBinHex(Byte[] buffer, int index, int count)
public bool get_CanReadValueChunk()
public string ReadString()
}
internal System.Data.DataTextWriter : XmlWriter {
private XmlWriter _xmltextWriter
internal Stream BaseStream
public WriteState WriteState
public XmlSpace XmlSpace
public string XmlLang
private void .ctor(XmlWriter w)
internal XmlWriter CreateWriter(XmlWriter xw)
internal Stream get_BaseStream()
public void WriteStartDocument()
public void WriteStartDocument(bool standalone)
public void WriteEndDocument()
public void WriteDocType(string name, string pubid, string sysid, string subset)
public void WriteStartElement(string prefix, string localName, string ns)
public void WriteEndElement()
public void WriteFullEndElement()
public void WriteStartAttribute(string prefix, string localName, string ns)
public void WriteEndAttribute()
public void WriteCData(string text)
public void WriteComment(string text)
public void WriteProcessingInstruction(string name, string text)
public void WriteEntityRef(string name)
public void WriteCharEntity(char ch)
public void WriteWhitespace(string ws)
public void WriteString(string text)
public void WriteSurrogateCharEntity(char lowChar, char highChar)
public void WriteChars(Char[] buffer, int index, int count)
public void WriteRaw(Char[] buffer, int index, int count)
public void WriteRaw(string data)
public void WriteBase64(Byte[] buffer, int index, int count)
public void WriteBinHex(Byte[] buffer, int index, int count)
public WriteState get_WriteState()
public void Close()
public void Flush()
public void WriteName(string name)
public void WriteQualifiedName(string localName, string ns)
public string LookupPrefix(string ns)
public XmlSpace get_XmlSpace()
public string get_XmlLang()
public void WriteNmToken(string name)
}
public System.Data.DataView : MarshalByValueComponent {
private DataViewManager dataViewManager
private DataTable table
private bool locked
private Index index
private Dictionary`2<string, Index> findIndexes
private string sort
private Comparison`1<DataRow> _comparison
private IFilter rowFilter
private DataViewRowState recordStates
private bool shouldOpen
private bool open
private bool allowNew
private bool allowEdit
private bool allowDelete
private bool applyDefaultSort
internal DataRow addNewRow
private ListChangedEventArgs addNewMoved
private ListChangedEventHandler onListChanged
private EventHandler onInitialized
internal ListChangedEventArgs ResetEventArgs
private DataTable delayedTable
private string delayedRowFilter
private string delayedSort
private DataViewRowState delayedRecordStates
private bool fInitInProgress
private bool fEndInitInProgress
private Dictionary`2<DataRow, DataRowView> rowViewCache
private Dictionary`2<DataRow, DataRowView> rowViewBuffer
private DataViewListener dvListener
private int _objectTypeCount
private int _objectID
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private object System.Collections.IList.Item
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private bool System.ComponentModel.IBindingList.AllowNew
private bool System.ComponentModel.IBindingList.AllowEdit
private bool System.ComponentModel.IBindingList.AllowRemove
private bool System.ComponentModel.IBindingList.SupportsChangeNotification
private bool System.ComponentModel.IBindingList.SupportsSearching
private bool System.ComponentModel.IBindingList.SupportsSorting
private bool System.ComponentModel.IBindingList.IsSorted
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
private ListSortDirection System.ComponentModel.IBindingList.SortDirection
private string System.ComponentModel.IBindingListView.Filter
private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions
private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting
private bool System.ComponentModel.IBindingListView.SupportsFiltering
public bool AllowDelete
public bool ApplyDefaultSort
public bool AllowEdit
public bool AllowNew
public int Count
private int CountFromIndex
public DataViewManager DataViewManager
public bool IsInitialized
protected bool IsOpen
public string RowFilter
internal Predicate`1<DataRow> RowPredicate
public DataViewRowState RowStateFilter
public string Sort
internal Comparison`1<DataRow> SortComparison
public DataTable Table
public DataRowView Item
internal int ObjectID
internal void .ctor(DataTable table, bool locked)
public void .ctor(DataTable table)
public void .ctor(DataTable table, string RowFilter, string Sort, DataViewRowState RowState)
internal void .ctor(DataTable table, Predicate`1<DataRow> predicate, Comparison`1<DataRow> comparison, DataViewRowState RowState)
public bool get_AllowDelete()
public void set_AllowDelete(bool value)
public bool get_ApplyDefaultSort()
public void set_ApplyDefaultSort(bool value)
public bool get_AllowEdit()
public void set_AllowEdit(bool value)
public bool get_AllowNew()
public void set_AllowNew(bool value)
public int get_Count()
private int get_CountFromIndex()
public DataViewManager get_DataViewManager()
public bool get_IsInitialized()
protected bool get_IsOpen()
private bool System.Collections.ICollection.get_IsSynchronized()
public string get_RowFilter()
public void set_RowFilter(string value)
internal Predicate`1<DataRow> get_RowPredicate()
internal void set_RowPredicate(Predicate`1<DataRow> value)
public DataViewRowState get_RowStateFilter()
public void set_RowStateFilter(DataViewRowState value)
public string get_Sort()
public void set_Sort(string value)
internal Comparison`1<DataRow> get_SortComparison()
internal void set_SortComparison(Comparison`1<DataRow> value)
private void ResetSort()
private bool ShouldSerializeSort()
private object System.Collections.ICollection.get_SyncRoot()
public DataTable get_Table()
public void set_Table(DataTable value)
private object System.Collections.IList.get_Item(int recordIndex)
private void System.Collections.IList.set_Item(int recordIndex, object value)
public DataRowView get_Item(int recordIndex)
public DataRowView AddNew()
public void BeginInit()
public void EndInit()
private void CheckOpen()
private void CheckSort(string sort)
protected void Close()
public void CopyTo(Array array, int index)
private void CopyTo(DataRowView[] array, int index)
public void Delete(int index)
internal void Delete(DataRow row)
protected void Dispose(bool disposing)
public int Find(object key)
internal int FindByKey(object key)
public int Find(Object[] key)
internal int FindByKey(Object[] key)
public DataRowView[] FindRows(object key)
public DataRowView[] FindRows(Object[] key)
internal DataRowView[] FindRowsByKey(Object[] key)
internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key)
internal DataRowView[] GetDataRowViewFromRange(Range range)
internal void FinishAddNew(bool success)
public IEnumerator GetEnumerator()
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
internal int IndexOf(DataRowView rowview)
private int IndexOfDataRowView(DataRowView rowview)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
internal Index GetFindIndex(string column, bool keepIndex)
private bool System.ComponentModel.IBindingList.get_AllowNew()
private object System.ComponentModel.IBindingList.AddNew()
private bool System.ComponentModel.IBindingList.get_AllowEdit()
private bool System.ComponentModel.IBindingList.get_AllowRemove()
private bool System.ComponentModel.IBindingList.get_SupportsChangeNotification()
private bool System.ComponentModel.IBindingList.get_SupportsSearching()
private bool System.ComponentModel.IBindingList.get_SupportsSorting()
private bool System.ComponentModel.IBindingList.get_IsSorted()
private PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty()
internal PropertyDescriptor GetSortProperty()
private ListSortDirection System.ComponentModel.IBindingList.get_SortDirection()
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
private void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction)
private int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key)
private void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.RemoveSort()
private void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts)
private string CreateSortString(PropertyDescriptor property, ListSortDirection direction)
private void System.ComponentModel.IBindingListView.RemoveFilter()
private string System.ComponentModel.IBindingListView.get_Filter()
private void System.ComponentModel.IBindingListView.set_Filter(string value)
private ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions()
internal ListSortDescriptionCollection GetSortDescriptions()
private bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting()
private bool System.ComponentModel.IBindingListView.get_SupportsFiltering()
private string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors)
private PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors)
internal IFilter GetFilter()
private int GetRecord(int recordIndex)
internal DataRow GetRow(int index)
private DataRowView GetRowView(int record)
private DataRowView GetRowView(DataRow dr)
protected void IndexListChanged(object sender, ListChangedEventArgs e)
internal void IndexListChangedInternal(ListChangedEventArgs e)
internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove)
protected void OnListChanged(ListChangedEventArgs e)
private void OnInitialized()
protected void Open()
protected void Reset()
internal void ResetRowViewCache()
internal void SetDataViewManager(DataViewManager dataViewManager)
internal void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter)
internal void SetIndex2(string newSort, DataViewRowState newRowStates, IFilter newRowFilter, bool fireEvent)
protected void UpdateIndex()
protected void UpdateIndex(bool force)
internal void UpdateIndex(bool force, bool fireEvent)
internal void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e)
internal void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e)
protected void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e)
internal void ColumnCollectionChangedInternal(object sender, CollectionChangeEventArgs e)
public DataTable ToTable()
public DataTable ToTable(string tableName)
public DataTable ToTable(bool distinct, String[] columnNames)
public DataTable ToTable(string tableName, bool distinct, String[] columnNames)
private bool RowExist(List`1<Object[]> arraylist, Object[] objectArray)
public bool Equals(DataView view)
internal int get_ObjectID()
}
internal System.Data.DataViewListener : object {
private WeakReference _dvWeak
private DataTable _table
private Index _index
internal int ObjectID
internal void .ctor(DataView dv)
private void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e)
private void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e)
private void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e)
internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove)
internal void IndexListChanged(ListChangedEventArgs e)
internal void RegisterMetaDataEvents(DataTable table)
internal void UnregisterMetaDataEvents()
private void UnregisterMetaDataEvents(bool updateListeners)
internal void RegisterListChangedEvent(Index index)
internal void UnregisterListChangedEvent()
private void CleanUp(bool updateListeners)
private void RegisterListener(DataTable table)
}
public System.Data.DataViewManager : MarshalByValueComponent {
private DataViewSettingCollection dataViewSettingsCollection
private DataSet dataSet
private DataViewManagerListItemTypeDescriptor item
private bool locked
internal int nViews
private ListChangedEventHandler onListChanged
private NotSupportedException NotSupported
private int System.Collections.ICollection.Count
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
private bool System.ComponentModel.IBindingList.AllowNew
private bool System.ComponentModel.IBindingList.AllowEdit
private bool System.ComponentModel.IBindingList.AllowRemove
private bool System.ComponentModel.IBindingList.SupportsChangeNotification
private bool System.ComponentModel.IBindingList.SupportsSearching
private bool System.ComponentModel.IBindingList.SupportsSorting
private bool System.ComponentModel.IBindingList.IsSorted
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
private ListSortDirection System.ComponentModel.IBindingList.SortDirection
public DataSet DataSet
public DataViewSettingCollection DataViewSettings
public string DataViewSettingCollectionString
public void .ctor(DataSet dataSet)
internal void .ctor(DataSet dataSet, bool locked)
public DataSet get_DataSet()
public void set_DataSet(DataSet value)
public DataViewSettingCollection get_DataViewSettings()
public string get_DataViewSettingCollectionString()
public void set_DataViewSettingCollectionString(string value)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.ICollection.get_Count()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private bool System.ComponentModel.IBindingList.get_AllowNew()
private object System.ComponentModel.IBindingList.AddNew()
private bool System.ComponentModel.IBindingList.get_AllowEdit()
private bool System.ComponentModel.IBindingList.get_AllowRemove()
private bool System.ComponentModel.IBindingList.get_SupportsChangeNotification()
private bool System.ComponentModel.IBindingList.get_SupportsSearching()
private bool System.ComponentModel.IBindingList.get_SupportsSorting()
private bool System.ComponentModel.IBindingList.get_IsSorted()
private PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty()
private ListSortDirection System.ComponentModel.IBindingList.get_SortDirection()
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
private void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction)
private int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key)
private void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.RemoveSort()
private string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors)
private PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors)
public DataView CreateDataView(DataTable table)
protected void OnListChanged(ListChangedEventArgs e)
protected void TableCollectionChanged(object sender, CollectionChangeEventArgs e)
protected void RelationCollectionChanged(object sender, CollectionChangeEventArgs e)
}
internal System.Data.DataViewManagerListItemTypeDescriptor : object {
private DataViewManager dataViewManager
private PropertyDescriptorCollection propsCollection
internal void .ctor(DataViewManager dataViewManager)
internal void Reset()
internal DataView GetDataView(DataTable table)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
}
public System.Data.DataViewRowState : Enum {
public int value__
public DataViewRowState None
public DataViewRowState Unchanged
public DataViewRowState Added
public DataViewRowState Deleted
public DataViewRowState ModifiedCurrent
public DataViewRowState ModifiedOriginal
public DataViewRowState OriginalRows
public DataViewRowState CurrentRows
}
public System.Data.DataViewSetting : object {
private DataViewManager dataViewManager
private DataTable table
private string sort
private string rowFilter
private DataViewRowState rowStateFilter
private bool applyDefaultSort
public bool ApplyDefaultSort
public DataViewManager DataViewManager
public DataTable Table
public string RowFilter
public DataViewRowState RowStateFilter
public string Sort
internal void .ctor(string sort, string rowFilter, DataViewRowState rowStateFilter)
public bool get_ApplyDefaultSort()
public void set_ApplyDefaultSort(bool value)
public DataViewManager get_DataViewManager()
internal void SetDataViewManager(DataViewManager dataViewManager)
public DataTable get_Table()
internal void SetDataTable(DataTable table)
public string get_RowFilter()
public void set_RowFilter(string value)
public DataViewRowState get_RowStateFilter()
public void set_RowStateFilter(DataViewRowState value)
public string get_Sort()
public void set_Sort(string value)
}
public System.Data.DataViewSettingCollection : object {
private DataViewManager dataViewManager
private Hashtable list
public DataViewSetting Item
public DataViewSetting Item
public DataViewSetting Item
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
internal void .ctor(DataViewManager dataViewManager)
public DataViewSetting get_Item(DataTable table)
public void set_Item(DataTable table, DataViewSetting value)
private DataTable GetTable(string tableName)
private DataTable GetTable(int index)
public DataViewSetting get_Item(string tableName)
public DataViewSetting get_Item(int index)
public void set_Item(int index, DataViewSetting value)
public void CopyTo(Array ar, int index)
public void CopyTo(DataViewSetting[] ar, int index)
public int get_Count()
public IEnumerator GetEnumerator()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
internal void Remove(DataTable table)
}
public System.Data.DBConcurrencyException : SystemException {
private DataRow[] _dataRows
public DataRow Row
public int RowCount
public void .ctor(string message)
public void .ctor(string message, Exception inner)
public void .ctor(string message, Exception inner, DataRow[] dataRows)
private void .ctor(SerializationInfo si, StreamingContext sc)
public void GetObjectData(SerializationInfo si, StreamingContext context)
public DataRow get_Row()
public void set_Row(DataRow value)
public int get_RowCount()
public void CopyToRows(DataRow[] array)
public void CopyToRows(DataRow[] array, int arrayIndex)
}
public System.Data.DbType : Enum {
public int value__
public DbType AnsiString
public DbType Binary
public DbType Byte
public DbType Boolean
public DbType Currency
public DbType Date
public DbType DateTime
public DbType Decimal
public DbType Double
public DbType Guid
public DbType Int16
public DbType Int32
public DbType Int64
public DbType Object
public DbType SByte
public DbType Single
public DbType String
public DbType Time
public DbType UInt16
public DbType UInt32
public DbType UInt64
public DbType VarNumeric
public DbType AnsiStringFixedLength
public DbType StringFixedLength
public DbType Xml
public DbType DateTime2
public DbType DateTimeOffset
}
internal System.Data.DefaultValueTypeConverter : StringConverter {
private string nullString
private string dbNullString
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
}
public System.Data.DeletedRowInaccessibleException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.DuplicateNameException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.EvaluateException : InvalidExpressionException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.ExceptionBuilder : object {
private void TraceException(string trace, Exception e)
internal void TraceExceptionAsReturnValue(Exception e)
internal void TraceExceptionForCapture(Exception e)
internal void TraceExceptionWithoutRethrow(Exception e)
internal ArgumentException _Argument(string error)
internal ArgumentException _Argument(string paramName, string error)
internal ArgumentException _Argument(string error, Exception innerException)
private ArgumentNullException _ArgumentNull(string paramName, string msg)
internal ArgumentOutOfRangeException _ArgumentOutOfRange(string paramName, string msg)
private IndexOutOfRangeException _IndexOutOfRange(string error)
private InvalidOperationException _InvalidOperation(string error)
private InvalidEnumArgumentException _InvalidEnumArgumentException(string error)
private InvalidEnumArgumentException _InvalidEnumArgumentException(T value)
private DataException _Data(string error)
private void ThrowDataException(string error, Exception innerException)
private ConstraintException _Constraint(string error)
private InvalidConstraintException _InvalidConstraint(string error)
private DeletedRowInaccessibleException _DeletedRowInaccessible(string error)
private DuplicateNameException _DuplicateName(string error)
private InRowChangingEventException _InRowChangingEvent(string error)
private MissingPrimaryKeyException _MissingPrimaryKey(string error)
private NoNullAllowedException _NoNullAllowed(string error)
private ReadOnlyException _ReadOnly(string error)
private RowNotInTableException _RowNotInTable(string error)
private VersionNotFoundException _VersionNotFound(string error)
public Exception ArgumentNull(string paramName)
public Exception ArgumentOutOfRange(string paramName)
public Exception BadObjectPropertyAccess(string error)
public Exception ArgumentContainsNull(string paramName)
public Exception CannotModifyCollection()
public Exception CaseInsensitiveNameConflict(string name)
public Exception NamespaceNameConflict(string name)
public Exception InvalidOffsetLength()
public Exception ColumnNotInTheTable(string column, string table)
public Exception ColumnNotInAnyTable()
public Exception ColumnOutOfRange(int index)
public Exception ColumnOutOfRange(string column)
public Exception CannotAddColumn1(string column)
public Exception CannotAddColumn2(string column)
public Exception CannotAddColumn3()
public Exception CannotAddColumn4(string column)
public Exception CannotAddDuplicate(string column)
public Exception CannotAddDuplicate2(string table)
public Exception CannotAddDuplicate3(string table)
public Exception CannotRemoveColumn()
public Exception CannotRemovePrimaryKey()
public Exception CannotRemoveChildKey(string relation)
public Exception CannotRemoveConstraint(string constraint, string table)
public Exception CannotRemoveExpression(string column, string expression)
public Exception ColumnNotInTheUnderlyingTable(string column, string table)
public Exception InvalidOrdinal(string name, int ordinal)
public Exception AddPrimaryKeyConstraint()
public Exception NoConstraintName()
public Exception ConstraintViolation(string constraint)
public Exception ConstraintNotInTheTable(string constraint)
public string KeysToString(Object[] keys)
public string UniqueConstraintViolationText(DataColumn[] columns, Object[] values)
public Exception ConstraintViolation(DataColumn[] columns, Object[] values)
public Exception ConstraintOutOfRange(int index)
public Exception DuplicateConstraint(string constraint)
public Exception DuplicateConstraintName(string constraint)
public Exception NeededForForeignKeyConstraint(UniqueConstraint key, ForeignKeyConstraint fk)
public Exception UniqueConstraintViolation()
public Exception ConstraintForeignTable()
public Exception ConstraintParentValues()
public Exception ConstraintAddFailed(DataTable table)
public Exception ConstraintRemoveFailed()
public Exception FailedCascadeDelete(string constraint)
public Exception FailedCascadeUpdate(string constraint)
public Exception FailedClearParentTable(string table, string constraint, string childTable)
public Exception ForeignKeyViolation(string constraint, Object[] keys)
public Exception RemoveParentRow(ForeignKeyConstraint constraint)
public string MaxLengthViolationText(string columnName)
public string NotAllowDBNullViolationText(string columnName)
public Exception CantAddConstraintToMultipleNestedTable(string tableName)
public Exception AutoIncrementAndExpression()
public Exception AutoIncrementAndDefaultValue()
public Exception AutoIncrementSeed()
public Exception CantChangeDataType()
public Exception NullDataType()
public Exception ColumnNameRequired()
public Exception DefaultValueAndAutoIncrement()
public Exception DefaultValueDataType(string column, Type defaultType, Type columnType, Exception inner)
public Exception DefaultValueColumnDataType(string column, Type defaultType, Type columnType, Exception inner)
public Exception ExpressionAndUnique()
public Exception ExpressionAndReadOnly()
public Exception ExpressionAndConstraint(DataColumn column, Constraint constraint)
public Exception ExpressionInConstraint(DataColumn column)
public Exception ExpressionCircular()
public Exception NonUniqueValues(string column)
public Exception NullKeyValues(string column)
public Exception NullValues(string column)
public Exception ReadOnlyAndExpression()
public Exception ReadOnly(string column)
public Exception UniqueAndExpression()
public Exception SetFailed(object value, DataColumn column, Type type, Exception innerException)
public Exception CannotSetToNull(DataColumn column)
public Exception LongerThanMaxLength(DataColumn column)
public Exception CannotSetMaxLength(DataColumn column, int value)
public Exception CannotSetMaxLength2(DataColumn column)
public Exception CannotSetSimpleContentType(string columnName, Type type)
public Exception CannotSetSimpleContent(string columnName, Type type)
public Exception CannotChangeNamespace(string columnName)
public Exception HasToBeStringType(DataColumn column)
public Exception AutoIncrementCannotSetIfHasData(string typeName)
public Exception INullableUDTwithoutStaticNull(string typeName)
public Exception IComparableNotImplemented(string typeName)
public Exception UDTImplementsIChangeTrackingButnotIRevertible(string typeName)
public Exception SetAddedAndModifiedCalledOnnonUnchanged()
public Exception InvalidDataColumnMapping(Type type)
public Exception CannotSetDateTimeModeForNonDateTimeColumns()
public Exception InvalidDateTimeMode(DataSetDateTime mode)
public Exception CantChangeDateTimeMode(DataSetDateTime oldValue, DataSetDateTime newValue)
public Exception ColumnTypeNotSupported()
public Exception SetFailed(string name)
public Exception SetDataSetFailed()
public Exception SetRowStateFilter()
public Exception CanNotSetDataSet()
public Exception CanNotUseDataViewManager()
public Exception CanNotSetTable()
public Exception CanNotUse()
public Exception CanNotBindTable()
public Exception SetTable()
public Exception SetIListObject()
public Exception AddNewNotAllowNull()
public Exception NotOpen()
public Exception CreateChildView()
public Exception CanNotDelete()
public Exception CanNotEdit()
public Exception GetElementIndex(int index)
public Exception AddExternalObject()
public Exception CanNotClear()
public Exception InsertExternalObject()
public Exception RemoveExternalObject()
public Exception PropertyNotFound(string property, string table)
public Exception ColumnToSortIsOutOfRange(string column)
public Exception KeyTableMismatch()
public Exception KeyNoColumns()
public Exception KeyTooManyColumns(int cols)
public Exception KeyDuplicateColumns(string columnName)
public Exception RelationDataSetMismatch()
public Exception NoRelationName()
public Exception ColumnsTypeMismatch()
public Exception KeyLengthMismatch()
public Exception KeyLengthZero()
public Exception ForeignRelation()
public Exception KeyColumnsIdentical()
public Exception RelationForeignTable(string t1, string t2)
public Exception GetParentRowTableMismatch(string t1, string t2)
public Exception SetParentRowTableMismatch(string t1, string t2)
public Exception RelationForeignRow()
public Exception RelationNestedReadOnly()
public Exception TableCantBeNestedInTwoTables(string tableName)
public Exception LoopInNestedRelations(string tableName)
public Exception RelationDoesNotExist()
public Exception ParentRowNotInTheDataSet()
public Exception ParentOrChildColumnsDoNotHaveDataSet()
public Exception InValidNestedRelation(string childTableName)
public Exception InvalidParentNamespaceinNestedRelation(string childTableName)
public Exception RowNotInTheDataSet()
public Exception RowNotInTheTable()
public Exception EditInRowChanging()
public Exception EndEditInRowChanging()
public Exception BeginEditInRowChanging()
public Exception CancelEditInRowChanging()
public Exception DeleteInRowDeleting()
public Exception ValueArrayLength()
public Exception NoCurrentData()
public Exception NoOriginalData()
public Exception NoProposedData()
public Exception RowRemovedFromTheTable()
public Exception DeletedRowInaccessible()
public Exception RowAlreadyDeleted()
public Exception RowEmpty()
public Exception InvalidRowVersion()
public Exception RowOutOfRange()
public Exception RowOutOfRange(int index)
public Exception RowInsertOutOfRange(int index)
public Exception RowInsertTwice(int index, string tableName)
public Exception RowInsertMissing(string tableName)
public Exception RowAlreadyRemoved()
public Exception MultipleParents()
public Exception InvalidRowState(DataRowState state)
public Exception InvalidRowBitPattern()
internal Exception SetDataSetNameToEmpty()
internal Exception SetDataSetNameConflicting(string name)
public Exception DataSetUnsupportedSchema(string ns)
public Exception MergeMissingDefinition(string obj)
public Exception TablesInDifferentSets()
public Exception RelationAlreadyExists()
public Exception RowAlreadyInOtherCollection()
public Exception RowAlreadyInTheCollection()
public Exception TableMissingPrimaryKey()
public Exception RecordStateRange()
public Exception IndexKeyLength(int length, int keyLength)
public Exception RemovePrimaryKey(DataTable table)
public Exception RelationAlreadyInOtherDataSet()
public Exception RelationAlreadyInTheDataSet()
public Exception RelationNotInTheDataSet(string relation)
public Exception RelationOutOfRange(object index)
public Exception DuplicateRelation(string relation)
public Exception RelationTableNull()
public Exception RelationDataSetNull()
public Exception RelationTableWasRemoved()
public Exception ParentTableMismatch()
public Exception ChildTableMismatch()
public Exception EnforceConstraint()
public Exception CaseLocaleMismatch()
public Exception CannotChangeCaseLocale()
public Exception CannotChangeCaseLocale(Exception innerException)
public Exception CannotChangeSchemaSerializationMode()
public Exception InvalidSchemaSerializationMode(Type enumType, string mode)
public Exception InvalidRemotingFormat(SerializationFormat mode)
public Exception TableForeignPrimaryKey()
public Exception TableCannotAddToSimpleContent()
public Exception NoTableName()
public Exception MultipleTextOnlyColumns()
public Exception InvalidSortString(string sort)
public Exception DuplicateTableName(string table)
public Exception DuplicateTableName2(string table, string ns)
public Exception SelfnestedDatasetConflictingName(string table)
public Exception DatasetConflictingName(string table)
public Exception TableAlreadyInOtherDataSet()
public Exception TableAlreadyInTheDataSet()
public Exception TableOutOfRange(int index)
public Exception TableNotInTheDataSet(string table)
public Exception TableInRelation()
public Exception TableInConstraint(DataTable table, Constraint constraint)
public Exception CanNotSerializeDataTableHierarchy()
public Exception CanNotRemoteDataTable()
public Exception CanNotSetRemotingFormat()
public Exception CanNotSerializeDataTableWithEmptyName()
public Exception TableNotFound(string tableName)
public Exception AggregateException(AggregateType aggregateType, Type type)
public Exception InvalidStorageType(TypeCode typecode)
public Exception RangeArgument(int min, int max)
public Exception NullRange()
public Exception NegativeMinimumCapacity()
public Exception ProblematicChars(char charValue)
public Exception StorageSetFailed()
public Exception SimpleTypeNotSupported()
public Exception MissingAttribute(string attribute)
public Exception MissingAttribute(string element, string attribute)
public Exception InvalidAttributeValue(string name, string value)
public Exception AttributeValues(string name, string value1, string value2)
public Exception ElementTypeNotFound(string name)
public Exception RelationParentNameMissing(string rel)
public Exception RelationChildNameMissing(string rel)
public Exception RelationTableKeyMissing(string rel)
public Exception RelationChildKeyMissing(string rel)
public Exception UndefinedDatatype(string name)
public Exception DatatypeNotDefined()
public Exception MismatchKeyLength()
public Exception InvalidField(string name)
public Exception InvalidSelector(string name)
public Exception CircularComplexType(string name)
public Exception CannotInstantiateAbstract(string name)
public Exception InvalidKey(string name)
public Exception DiffgramMissingTable(string name)
public Exception DiffgramMissingSQL()
public Exception DuplicateConstraintRead(string str)
public Exception ColumnTypeConflict(string name)
public Exception CannotConvert(string name, string type)
public Exception MissingRefer(string name)
public Exception InvalidPrefix(string name)
public Exception CanNotDeserializeObjectType()
public Exception IsDataSetAttributeMissingInSchema()
public Exception TooManyIsDataSetAtributeInSchema()
public Exception NestedCircular(string name)
public Exception MultipleParentRows(string tableQName)
public Exception PolymorphismNotSupported(string typeName)
public Exception DataTableInferenceNotSupported()
internal void ThrowMultipleTargetConverter(Exception innerException)
public Exception DuplicateDeclaration(string name)
public Exception FoundEntity()
public Exception MergeFailed(string name)
public DataException ConvertFailed(Type type1, Type type2)
public Exception InvalidDataTableReader(string tableName)
public Exception DataTableReaderSchemaIsInvalid(string tableName)
public Exception CannotCreateDataReaderOnEmptyDataSet()
public Exception DataTableReaderArgumentIsEmpty()
public Exception ArgumentContainsNullValue()
public Exception InvalidCurrentRowInDataTableReader()
public Exception EmptyDataTableReader(string tableName)
internal Exception InvalidDuplicateNamedSimpleTypeDelaration(string stName, string errorStr)
internal Exception InternalRBTreeError(RBTreeError internalError)
public Exception EnumeratorModified()
}
internal System.Data.ExpressionNode : object {
private DataTable _table
internal IFormatProvider FormatProvider
internal bool IsSqlColumn
protected DataTable table
protected void .ctor(DataTable table)
internal IFormatProvider get_FormatProvider()
internal bool get_IsSqlColumn()
protected DataTable get_table()
protected void BindTable(DataTable table)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal ExpressionNode Optimize()
internal bool DependsOn(DataColumn column)
internal bool IsInteger(StorageType type)
internal bool IsIntegerSql(StorageType type)
internal bool IsSigned(StorageType type)
internal bool IsSignedSql(StorageType type)
internal bool IsUnsigned(StorageType type)
internal bool IsUnsignedSql(StorageType type)
internal bool IsNumeric(StorageType type)
internal bool IsNumericSql(StorageType type)
internal bool IsFloat(StorageType type)
internal bool IsFloatSql(StorageType type)
}
internal System.Data.ExpressionParser : object {
private int Empty
private int Scalar
private int Expr
private ReservedWords[] reservedwords
private char Escape
private char DecimalSeparator
private char ListSeparator
private char ExponentL
private char ExponentU
internal Char[] text
internal int pos
internal int start
internal Tokens token
internal int op
internal OperatorInfo[] ops
internal int topOperator
internal int topNode
private DataTable _table
private int MaxPredicates
internal ExpressionNode[] NodeStack
internal int prevOperand
internal ExpressionNode expression
internal void .ctor(DataTable table)
internal void LoadExpression(string data)
internal void StartScan()
internal ExpressionNode Parse()
private ExpressionNode ParseAggregateArgument(FunctionId aggregate)
private ExpressionNode NodePop()
private ExpressionNode NodePeek()
private void NodePush(ExpressionNode node)
private void BuildExpression(int pri)
internal void CheckToken(Tokens token)
internal Tokens Scan()
private void ScanNumeric()
private void ScanName()
private void ScanName(char chEnd, char esc, string charsToEscape)
private void ScanDate()
private void ScanBinaryConstant()
private void ScanReserved()
private void ScanString(char escape)
internal void ScanToken(Tokens token)
private void ScanWhite()
private bool IsWhiteSpace(char ch)
private bool IsAlphaNumeric(char ch)
private bool IsDigit(char ch)
private bool IsAlpha(char ch)
}
internal System.Data.ExprException : object {
private OverflowException _Overflow(string error)
private InvalidExpressionException _Expr(string error)
private SyntaxErrorException _Syntax(string error)
private EvaluateException _Eval(string error)
private EvaluateException _Eval(string error, Exception innerException)
public Exception InvokeArgument()
public Exception NYI(string moreinfo)
public Exception MissingOperand(OperatorInfo before)
public Exception MissingOperator(string token)
public Exception TypeMismatch(string expr)
public Exception FunctionArgumentOutOfRange(string arg, string func)
public Exception ExpressionTooComplex()
public Exception UnboundName(string name)
public Exception InvalidString(string str)
public Exception UndefinedFunction(string name)
public Exception SyntaxError()
public Exception FunctionArgumentCount(string name)
public Exception MissingRightParen()
public Exception UnknownToken(string token, int position)
public Exception UnknownToken(Tokens tokExpected, Tokens tokCurr, int position)
public Exception DatatypeConvertion(Type type1, Type type2)
public Exception DatavalueConvertion(object value, Type type, Exception innerException)
public Exception InvalidName(string name)
public Exception InvalidDate(string date)
public Exception NonConstantArgument()
public Exception InvalidPattern(string pat)
public Exception InWithoutParentheses()
public Exception InWithoutList()
public Exception InvalidIsSyntax()
public Exception Overflow(Type type)
public Exception ArgumentType(string function, int arg, Type type)
public Exception ArgumentTypeInteger(string function, int arg)
public Exception TypeMismatchInBinop(int op, Type type1, Type type2)
public Exception AmbiguousBinop(int op, Type type1, Type type2)
public Exception UnsupportedOperator(int op)
public Exception InvalidNameBracketing(string name)
public Exception MissingOperandBefore(string op)
public Exception TooManyRightParentheses()
public Exception UnresolvedRelation(string name, string expr)
internal EvaluateException BindFailure(string relationName)
public Exception AggregateArgument()
public Exception AggregateUnbound(string expr)
public Exception EvalNoContext()
public Exception ExpressionUnbound(string expr)
public Exception ComputeNotAggregate(string expr)
public Exception FilterConvertion(string expr)
public Exception LookupArgument()
public Exception InvalidType(string typeName)
public Exception InvalidHoursArgument()
public Exception InvalidMinutesArgument()
public Exception InvalidTimeZoneRange()
public Exception MismatchKindandTimeSpan()
public Exception UnsupportedDataType(Type type)
}
public System.Data.FillErrorEventArgs : EventArgs {
private bool continueFlag
private DataTable dataTable
private Exception errors
private Object[] values
public bool Continue
public DataTable DataTable
public Exception Errors
public Object[] Values
public void .ctor(DataTable dataTable, Object[] values)
public bool get_Continue()
public void set_Continue(bool value)
public DataTable get_DataTable()
public Exception get_Errors()
public void set_Errors(Exception value)
public Object[] get_Values()
}
public System.Data.FillErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FillErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.ForeignKeyConstraint : Constraint {
internal Rule Rule_Default
internal AcceptRejectRule AcceptRejectRule_Default
internal Rule deleteRule
internal Rule updateRule
internal AcceptRejectRule acceptRejectRule
private DataKey childKey
private DataKey parentKey
internal string constraintName
internal String[] parentColumnNames
internal String[] childColumnNames
internal string parentTableName
internal string parentTableNamespace
internal DataKey ChildKey
public DataColumn[] Columns
public DataTable Table
internal String[] ParentColumnNames
internal String[] ChildColumnNames
public AcceptRejectRule AcceptRejectRule
public Rule DeleteRule
public DataColumn[] RelatedColumns
internal DataColumn[] RelatedColumnsReference
internal DataKey ParentKey
public DataTable RelatedTable
public Rule UpdateRule
public void .ctor(DataColumn parentColumn, DataColumn childColumn)
public void .ctor(string constraintName, DataColumn parentColumn, DataColumn childColumn)
public void .ctor(DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule)
public void .ctor(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule)
internal DataKey get_ChildKey()
public DataColumn[] get_Columns()
public DataTable get_Table()
internal String[] get_ParentColumnNames()
internal String[] get_ChildColumnNames()
internal void CheckCanAddToCollection(ConstraintCollection constraints)
internal bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException)
internal bool IsKeyNull(Object[] values)
internal bool IsConstraintViolated()
internal bool CanEnableConstraint()
internal void CascadeCommit(DataRow row)
internal void CascadeDelete(DataRow row)
internal void CascadeRollback(DataRow row)
internal void CascadeUpdate(DataRow row)
internal void CheckCanClearParentTable(DataTable table)
internal void CheckCanRemoveParentRow(DataRow row)
internal void CheckCascade(DataRow row, DataRowAction action)
internal void CheckConstraint(DataRow childRow, DataRowAction action)
private void NonVirtualCheckState()
internal void CheckState()
public AcceptRejectRule get_AcceptRejectRule()
public void set_AcceptRejectRule(AcceptRejectRule value)
internal bool ContainsColumn(DataColumn column)
internal Constraint Clone(DataSet destination)
internal Constraint Clone(DataSet destination, bool ignorNSforTableLookup)
internal ForeignKeyConstraint Clone(DataTable destination)
private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns)
public Rule get_DeleteRule()
public void set_DeleteRule(Rule value)
public bool Equals(object key)
public int GetHashCode()
public DataColumn[] get_RelatedColumns()
internal DataColumn[] get_RelatedColumnsReference()
internal DataKey get_ParentKey()
internal DataRelation FindParentRelation()
public DataTable get_RelatedTable()
public Rule get_UpdateRule()
public void set_UpdateRule(Rule value)
}
internal System.Data.ForeignKeyConstraintEnumerator : ConstraintEnumerator {
public void .ctor(DataSet dataSet)
protected bool IsValidCandidate(Constraint constraint)
public ForeignKeyConstraint GetForeignKeyConstraint()
}
internal System.Data.Function : object {
internal string name
internal FunctionId id
internal Type result
internal bool IsValidateArguments
internal bool IsVariantArgumentList
internal int argumentCount
internal Type[] parameters
internal String[] FunctionName
internal void .ctor(string name, FunctionId id, Type result, bool IsValidateArguments, bool IsVariantArgumentList, int argumentCount, Type a1, Type a2, Type a3)
}
internal System.Data.FunctionId : Enum {
public int value__
public FunctionId none
public FunctionId Ascii
public FunctionId Char
public FunctionId Charindex
public FunctionId Difference
public FunctionId Len
public FunctionId Lower
public FunctionId LTrim
public FunctionId Patindex
public FunctionId Replicate
public FunctionId Reverse
public FunctionId Right
public FunctionId RTrim
public FunctionId Soundex
public FunctionId Space
public FunctionId Str
public FunctionId Stuff
public FunctionId Substring
public FunctionId Upper
public FunctionId IsNull
public FunctionId Iif
public FunctionId Convert
public FunctionId cInt
public FunctionId cBool
public FunctionId cDate
public FunctionId cDbl
public FunctionId cStr
public FunctionId Abs
public FunctionId Acos
public FunctionId In
public FunctionId Trim
public FunctionId Sum
public FunctionId Avg
public FunctionId Min
public FunctionId Max
public FunctionId Count
public FunctionId StDev
public FunctionId Var
public FunctionId DateTimeOffset
}
internal System.Data.FunctionNode : ExpressionNode {
internal string name
internal int info
internal int argumentCount
internal int initialCapacity
internal ExpressionNode[] arguments
private Function[] funcs
internal FunctionId Aggregate
internal bool IsAggregate
internal void .ctor(DataTable table, string name)
internal void AddArgument(ExpressionNode argument)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
private Type GetDataType(ExpressionNode node)
private object EvalFunction(FunctionId id, Object[] argumentValues, DataRow row, DataRowVersion version)
internal FunctionId get_Aggregate()
internal bool get_IsAggregate()
internal void Check()
}
public System.Data.IColumnMapping {
public string DataSetColumn
public string SourceColumn
public string get_DataSetColumn()
public void set_DataSetColumn(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
}
public System.Data.IColumnMappingCollection {
public object Item
public object get_Item(string index)
public void set_Item(string index, object value)
public IColumnMapping Add(string sourceColumnName, string dataSetColumnName)
public bool Contains(string sourceColumnName)
public IColumnMapping GetByDataSetColumn(string dataSetColumnName)
public int IndexOf(string sourceColumnName)
public void RemoveAt(string sourceColumnName)
}
public System.Data.IDataAdapter {
public MissingMappingAction MissingMappingAction
public MissingSchemaAction MissingSchemaAction
public ITableMappingCollection TableMappings
public MissingMappingAction get_MissingMappingAction()
public void set_MissingMappingAction(MissingMappingAction value)
public MissingSchemaAction get_MissingSchemaAction()
public void set_MissingSchemaAction(MissingSchemaAction value)
public ITableMappingCollection get_TableMappings()
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
public int Fill(DataSet dataSet)
public IDataParameter[] GetFillParameters()
public int Update(DataSet dataSet)
}
public System.Data.IDataParameter {
public DbType DbType
public ParameterDirection Direction
public bool IsNullable
public string ParameterName
public string SourceColumn
public DataRowVersion SourceVersion
public object Value
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public string get_ParameterName()
public void set_ParameterName(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
}
public System.Data.IDataParameterCollection {
public object Item
public object get_Item(string parameterName)
public void set_Item(string parameterName, object value)
public bool Contains(string parameterName)
public int IndexOf(string parameterName)
public void RemoveAt(string parameterName)
}
public System.Data.IDataReader {
public int Depth
public bool IsClosed
public int RecordsAffected
public int get_Depth()
public bool get_IsClosed()
public int get_RecordsAffected()
public void Close()
public DataTable GetSchemaTable()
public bool NextResult()
public bool Read()
}
public System.Data.IDataRecord {
public int FieldCount
public object Item
public object Item
public int get_FieldCount()
public object get_Item(int i)
public object get_Item(string name)
public string GetName(int i)
public string GetDataTypeName(int i)
public Type GetFieldType(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public int GetOrdinal(string name)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
public char GetChar(int i)
public long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public float GetFloat(int i)
public double GetDouble(int i)
public string GetString(int i)
public decimal GetDecimal(int i)
public DateTime GetDateTime(int i)
public IDataReader GetData(int i)
public bool IsDBNull(int i)
}
public System.Data.IDbCommand {
public IDbConnection Connection
public IDbTransaction Transaction
public string CommandText
public int CommandTimeout
public CommandType CommandType
public IDataParameterCollection Parameters
public UpdateRowSource UpdatedRowSource
public IDbConnection get_Connection()
public void set_Connection(IDbConnection value)
public IDbTransaction get_Transaction()
public void set_Transaction(IDbTransaction value)
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public IDataParameterCollection get_Parameters()
public void Prepare()
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public void Cancel()
public IDbDataParameter CreateParameter()
public int ExecuteNonQuery()
public IDataReader ExecuteReader()
public IDataReader ExecuteReader(CommandBehavior behavior)
public object ExecuteScalar()
}
public System.Data.IDbConnection {
public string ConnectionString
public int ConnectionTimeout
public string Database
public ConnectionState State
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public string get_Database()
public ConnectionState get_State()
public IDbTransaction BeginTransaction()
public IDbTransaction BeginTransaction(IsolationLevel il)
public void Close()
public void ChangeDatabase(string databaseName)
public IDbCommand CreateCommand()
public void Open()
}
public System.Data.IDbDataAdapter {
public IDbCommand SelectCommand
public IDbCommand InsertCommand
public IDbCommand UpdateCommand
public IDbCommand DeleteCommand
public IDbCommand get_SelectCommand()
public void set_SelectCommand(IDbCommand value)
public IDbCommand get_InsertCommand()
public void set_InsertCommand(IDbCommand value)
public IDbCommand get_UpdateCommand()
public void set_UpdateCommand(IDbCommand value)
public IDbCommand get_DeleteCommand()
public void set_DeleteCommand(IDbCommand value)
}
public System.Data.IDbDataParameter {
public byte Precision
public byte Scale
public int Size
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
}
public System.Data.IDbTransaction {
public IDbConnection Connection
public IsolationLevel IsolationLevel
public IDbConnection get_Connection()
public IsolationLevel get_IsolationLevel()
public void Commit()
public void Rollback()
}
internal System.Data.IFilter {
public bool Invoke(DataRow row, DataRowVersion version)
}
internal System.Data.Index : object {
private int DoNotReplaceCompareRecord
private int ReplaceNewRecordForCompare
private int ReplaceOldRecordForCompare
private DataTable table
internal IndexField[] IndexFields
private Comparison`1<DataRow> _comparison
private DataViewRowState recordStates
private WeakReference rowFilter
private IndexTree records
private int recordCount
private int refCount
private Listeners`1<DataViewListener> _listeners
private bool suspendEvents
private Object[] zeroObjects
private bool isSharable
private bool _hasRemoteAggregate
internal int MaskBits
private int _objectTypeCount
private int _objectID
private Func`2<DataViewListener, DataViewListener, bool> <>f__am$cache0
private Action`4<DataViewListener, DataViewListener, ListChangedEventArgs, bool, bool> <>f__am$cache1
internal bool HasRemoteAggregate
internal int ObjectID
public DataViewRowState RecordStates
public IFilter RowFilter
public bool HasDuplicates
public int RecordCount
public bool IsSharable
public int RefCount
private bool DoListChanged
internal DataTable Table
public void .ctor(DataTable table, IndexField[] indexFields, DataViewRowState recordStates, IFilter rowFilter)
public void .ctor(DataTable table, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter)
private void .ctor(DataTable table, IndexField[] indexFields, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter)
private IndexField[] GetAllFields(DataColumnCollection columns)
public bool Equal(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter)
internal bool get_HasRemoteAggregate()
internal int get_ObjectID()
public DataViewRowState get_RecordStates()
public IFilter get_RowFilter()
public int GetRecord(int recordIndex)
public bool get_HasDuplicates()
public int get_RecordCount()
public bool get_IsSharable()
private bool AcceptRecord(int record)
private bool AcceptRecord(int record, IFilter filter)
internal void ListChangedAdd(DataViewListener listener)
internal void ListChangedRemove(DataViewListener listener)
public int get_RefCount()
public void AddRef()
public int RemoveRef()
private void ApplyChangeAction(int record, int action, int changeRecord)
public bool CheckUnique()
private int CompareRecords(int record1, int record2)
private int CompareDataRows(int record1, int record2)
private int CompareDuplicateRecords(int record1, int record2)
private int CompareRecordToKey(int record1, Object[] vals)
public void DeleteRecordFromIndex(int recordIndex)
private void DeleteRecord(int recordIndex)
private void DeleteRecord(int recordIndex, bool fireEvent)
public RBTreeEnumerator<int> GetEnumerator(int startIndex)
public int GetIndex(int record)
private int GetIndex(int record, int changeRecord)
public Object[] GetUniqueKeyValues()
public int FindRecord(int record)
public int FindRecordByKey(object key)
public int FindRecordByKey(Object[] key)
private int FindNodeByKey(object originalKey)
private int FindNodeByKeys(Object[] originalKey)
private int FindNodeByKeyRecord(int record)
internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key)
private Range GetRangeFromNode(int nodeId)
public Range FindRecords(object key)
public Range FindRecords(Object[] key)
internal void FireResetEvent()
private int GetChangeAction(DataViewRowState oldState, DataViewRowState newState)
private int GetReplaceAction(DataViewRowState oldState)
public DataRow GetRow(int i)
public DataRow[] GetRows(Object[] values)
public DataRow[] GetRows(Range range)
private void InitRecords(IFilter filter)
public int InsertRecordToIndex(int record)
private int InsertRecord(int record, bool fireEvent)
public bool IsKeyInIndex(object key)
public bool IsKeyInIndex(Object[] key)
public bool IsKeyRecordInIndex(int record)
private bool get_DoListChanged()
private void OnListChanged(ListChangedType changedType, int newIndex, int oldIndex)
private void OnListChanged(ListChangedType changedType, int index)
private void OnListChanged(ListChangedEventArgs e)
private void MaintainDataView(ListChangedType changedType, int record, bool trackAddRemove)
public void Reset()
public void RecordChanged(int record)
public void RecordChanged(int oldIndex, int newIndex)
public void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState)
public void RecordStateChanged(int oldRecord, DataViewRowState oldOldState, DataViewRowState oldNewState, int newRecord, DataViewRowState newOldState, DataViewRowState newNewState)
internal DataTable get_Table()
private void GetUniqueKeyValues(List`1<Object[]> list, int curNodeId)
internal int IndexOfReference(List`1<T> list, T item)
internal bool ContainsReference(List`1<T> list, T item)
private bool <Index>m__0(DataViewListener listener)
private void <OnListChanged>m__1(DataViewListener listener, ListChangedEventArgs args, bool arg2, bool arg3)
}
internal System.Data.IndexField : ValueType {
public DataColumn Column
public bool IsDescending
internal void .ctor(DataColumn column, bool isDescending)
public bool op_Equality(IndexField if1, IndexField if2)
public bool op_Inequality(IndexField if1, IndexField if2)
public bool Equals(object obj)
public int GetHashCode()
}
public System.Data.InRowChangingEventException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.InternalDataCollectionBase : object {
internal CollectionChangeEventArgs RefreshEventArgs
public int Count
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
protected ArrayList List
public int get_Count()
public void CopyTo(Array ar, int index)
public IEnumerator GetEnumerator()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
internal int NamesEqual(string s1, string s2, bool fCaseSensitive, CultureInfo locale)
public object get_SyncRoot()
protected ArrayList get_List()
}
public System.Data.InvalidConstraintException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.InvalidExpressionException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.IsolationLevel : Enum {
public int value__
public IsolationLevel Unspecified
public IsolationLevel Chaos
public IsolationLevel ReadUncommitted
public IsolationLevel ReadCommitted
public IsolationLevel RepeatableRead
public IsolationLevel Serializable
public IsolationLevel Snapshot
}
public System.Data.ITableMapping {
public IColumnMappingCollection ColumnMappings
public string DataSetTable
public string SourceTable
public IColumnMappingCollection get_ColumnMappings()
public string get_DataSetTable()
public void set_DataSetTable(string value)
public string get_SourceTable()
public void set_SourceTable(string value)
}
public System.Data.ITableMappingCollection {
public object Item
public object get_Item(string index)
public void set_Item(string index, object value)
public ITableMapping Add(string sourceTableName, string dataSetTableName)
public bool Contains(string sourceTableName)
public ITableMapping GetByDataSetTable(string dataSetTableName)
public int IndexOf(string sourceTableName)
public void RemoveAt(string sourceTableName)
}
public System.Data.KeyRestrictionBehavior : Enum {
public int value__
public KeyRestrictionBehavior AllowOnly
public KeyRestrictionBehavior PreventUsage
}
internal System.Data.Keywords : object {
internal string DFF
internal string DFFNS
internal string DIFFGRAM
internal string DIFFID
internal string DIFFPID
internal string HASCHANGES
internal string HASERRORS
internal string ROWORDER
internal string MSD_ERRORS
internal string CHANGES
internal string MODIFIED
internal string INSERTED
internal string MSD
internal string MSDNS
internal string MSD_ACCEPTREJECTRULE
internal string MSD_ALLOWDBNULL
internal string MSD_CHILD
internal string MSD_CHILDKEY
internal string MSD_CHILDTABLENS
internal string MSD_COLUMNNAME
internal string MSD_CONSTRAINTNAME
internal string MSD_CONSTRAINTONLY
internal string MSD_CASESENSITIVE
internal string MSD_DATASETNAME
internal string MSD_DATASETNAMESPACE
internal string MSD_DATATYPE
internal string MSD_DEFAULTVALUE
internal string MSD_DELETERULE
internal string MSD_ERROR
internal string MSD_ISDATASET
internal string MSD_ISNESTED
internal string MSD_LOCALE
internal string MSD_USECURRENTLOCALE
internal string MSD_ORDINAL
internal string MSD_PARENT
internal string MSD_PARENTKEY
internal string MSD_PRIMARYKEY
internal string MSD_RELATION
internal string MSD_RELATIONNAME
internal string MSD_UPDATERULE
internal char MSD_KEYFIELDSEP
internal char MSD_KEYFIELDOLDSEP
internal string MSD_REL_PREFIX
internal string MSD_FK_PREFIX
internal string MSD_MAINDATATABLE
internal string MSD_TABLENS
internal string MSD_PARENTTABLENS
internal string MSD_INSTANCETYPE
internal string MSD_EXCLUDESCHEMA
internal string MSD_INCLUDESCHEMA
internal string MSD_FRAGMENTCOUNT
internal string MSD_SCHEMASERIALIZATIONMODE
internal string DTNS
internal string DT_TYPE
internal string DT_VALUES
internal string XDRNS
internal string XDR_ATTRIBUTE
internal string XDR_ATTRIBUTETYPE
internal string XDR_DATATYPE
internal string XDR_DESCRIPTION
internal string XDR_ELEMENT
internal string XDR_ELEMENTTYPE
internal string XDR_GROUP
internal string XDR_SCHEMA
internal string XSDNS
internal string XSD_NS_START
internal string XSD_XMLNS_NS
internal string XSD_PREFIX
internal string XSD_PREFIXCOLON
internal string XSD_ANNOTATION
internal string XSD_APPINFO
internal string XSD_ATTRIBUTE
internal string XSD_SIMPLETYPE
internal string XSD_ELEMENT
internal string XSD_COMPLEXTYPE
internal string XSD_SCHEMA
internal string XSD_PATTERN
internal string XSD_LENGTH
internal string XSD_MAXLENGTH
internal string XSD_MINLENGTH
internal string XSD_ENUMERATION
internal string XSD_MININCLUSIVE
internal string XSD_MINEXCLUSIVE
internal string XSD_MAXINCLUSIVE
internal string XSD_MAXEXCLUSIVE
internal string XSD_NAMESPACE
internal string XSD_NILLABLE
internal string XSD_IMPORT
internal string XSD_SELECTOR
internal string XSD_FIELD
internal string XSD_UNIQUE
internal string XSD_KEY
internal string XSD_KEYREF
internal string XSD_DATATYPE
internal string XSD_ALL
internal string XSD_SEQUENCE
internal string XSD_ENCODING
internal string XSD_EXTENSION
internal string XSD_SIMPLECONTENT
internal string XSD_XPATH
internal string XSD_ATTRIBUTEFORMDEFAULT
internal string XSD_ELEMENTFORMDEFAULT
internal string XSD_SCHEMALOCATION
internal string XSD_CHOICE
internal string XSD_RESTRICTION
internal string XSD_ANYTYPE
internal string XSINS
internal string XSI_NIL
internal string XSI
internal string XML_XMLNS
internal string UPDGNS
internal string UPDG
internal string SQL_SYNC
internal string SQL_BEFORE
internal string SQL_AFTER
internal string SQL_ID
internal string SQL_UNCHANGED
internal string ATTRIBUTE
internal string CONTENT
internal string DEFAULT
internal string XSDID
internal string MINOCCURS
internal string MAXOCCURS
internal string MODEL
internal string NAME
internal string NULLABLE
internal string ORDER
internal string REQUIRED
internal string REF
internal string BASE
internal string TARGETNAMESPACE
internal string TYPE
internal string XMLNS
internal string XMLNS_XSD
internal string XMLNS_XSI
internal string XMLNS_MSDATA
internal string XMLNS_MSPROP
internal string XMLNS_MSTNS
internal string MSTNS_PREFIX
internal string SPACE
internal string PRESERVE
internal string VALUE
internal string REFER
internal string USE
internal string PROHIBITED
internal string POSITIVEINFINITY
internal string NEGATIVEINFINITY
internal string QUALIFIED
internal string UNQUALIFIED
internal string APP
internal string CLOSED
internal string CURRENT
internal string DOCUMENTELEMENT
internal string FALSE
internal string FIXED
internal string FORM
internal string ENCODING
internal string ELEMENTONLY
internal string ELTONLY
internal string EMPTY
internal string MANY
internal string MIXED
internal string NO
internal string NOTATION
internal string OCCURS
internal string ONE_OR_MORE
internal string ONE
internal string ONE_DIGIT
internal string ONCE
internal string OPTIONAL
internal string OPEN
internal string ORIGINAL
internal string RANGE
internal string SEQ
internal string STAR
internal string TRUE
internal string TEXTONLY
internal string VERSION
internal string XML
internal string X_SCHEMA
internal string YES
internal string ZERO_DIGIT
internal string ZERO_OR_MORE
internal string USEDATASETSCHEMAONLY
internal string UDTCOLUMNVALUEWRAPPED
internal string TYPEINSTANCE
internal string MSPROPNS
internal string WS_DATASETFULLQNAME
internal string WS_VERSION
}
internal System.Data.LikeNode : BinaryNode {
internal int match_left
internal int match_right
internal int match_middle
internal int match_exact
internal int match_all
private int kind
private string pattern
internal void .ctor(DataTable table, int op, ExpressionNode left, ExpressionNode right)
internal object Eval(DataRow row, DataRowVersion version)
internal string AnalyzePattern(string pat)
}
internal System.Data.Listeners`1 : object {
private List`1<TElem> listeners
private Func`2<TElem, TElem, bool> filter
private int ObjectID
private int _listenerReaderCount
internal bool HasListeners
internal void .ctor(int ObjectID, Func`2<TElem, TElem, bool> notifyFilter)
internal bool get_HasListeners()
internal void Add(TElem listener)
internal int IndexOfReference(TElem listener)
internal void Remove(TElem listener)
internal void Notify(T1 arg1, T2 arg2, T3 arg3, Action`4<TElem, TElem, T1, T2, T3> action)
private void RemoveNullListeners(int nullIndex)
}
public System.Data.LoadOption : Enum {
public int value__
public LoadOption OverwriteChanges
public LoadOption PreserveChanges
public LoadOption Upsert
}
internal System.Data.LocalDBAPI : object {
private string const_localDbPrefix
private string const_partialTrustFlagKey
private PermissionSet _fullTrust
private bool _partialTrustFlagChecked
private bool _partialTrustAllowed
internal string GetLocalDbInstanceNameFromServerName(string serverName)
}
internal System.Data.LookupNode : ExpressionNode {
private string relationName
private string columnName
private DataColumn column
private DataRelation relation
internal void .ctor(DataTable table, string columnName, string relationName)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
}
public System.Data.MappingType : Enum {
public int value__
public MappingType Element
public MappingType Attribute
public MappingType SimpleContent
public MappingType Hidden
}
public System.Data.MergeFailedEventArgs : EventArgs {
private DataTable table
private string conflict
public DataTable Table
public string Conflict
public void .ctor(DataTable table, string conflict)
public DataTable get_Table()
public string get_Conflict()
}
public System.Data.MergeFailedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MergeFailedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.Merger : object {
private DataSet dataSet
private DataTable dataTable
private bool preserveChanges
private MissingSchemaAction missingSchemaAction
private bool isStandAlonetable
private bool _IgnoreNSforTableLookup
internal void .ctor(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal void .ctor(DataTable dataTable, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal void MergeDataSet(DataSet source)
internal void MergeTable(DataTable src)
private void MergeTable(DataTable src, DataTable dst)
internal void MergeRows(DataRow[] rows)
private DataTable MergeSchema(DataTable table)
private void MergeTableData(DataTable src)
private void MergeConstraints(DataSet source)
private void MergeConstraints(DataTable table)
private void MergeRelation(DataRelation relation)
private void MergeExtendedProperties(PropertyCollection src, PropertyCollection dst)
private DataKey GetSrcKey(DataTable src, DataTable dst)
}
public System.Data.MissingMappingAction : Enum {
public int value__
public MissingMappingAction Passthrough
public MissingMappingAction Ignore
public MissingMappingAction Error
}
public System.Data.MissingPrimaryKeyException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.MissingSchemaAction : Enum {
public int value__
public MissingSchemaAction Add
public MissingSchemaAction Ignore
public MissingSchemaAction Error
public MissingSchemaAction AddWithKey
}
internal System.Data.NameNode : ExpressionNode {
internal char open
internal char close
internal string name
internal bool found
internal bool type
internal DataColumn column
internal bool IsSqlColumn
internal void .ctor(DataTable table, Char[] text, int start, int pos)
internal void .ctor(DataTable table, string name)
internal bool get_IsSqlColumn()
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] records)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
internal string ParseName(Char[] text, int start, int pos)
}
internal System.Data.NewDiffgramGen : object {
internal XmlDocument _doc
internal DataSet _ds
internal DataTable _dt
internal XmlWriter _xmlw
private bool fBefore
private bool fErrors
internal Hashtable rowsOrder
private ArrayList _tables
private bool _writeHierarchy
internal void .ctor(DataSet ds)
internal void .ctor(DataTable dt, bool writeHierarchy)
private void CreateTableHierarchy(DataTable dt)
private void DoAssignments(ArrayList tables)
private bool EmptyData()
internal void Save(XmlWriter xmlw)
internal void Save(XmlWriter xmlw, DataTable table)
private void GenerateTable(DataTable table)
private void GenerateTableErrors(DataTable table)
private void GenerateRow(DataRow row)
private void GenerateColumn(DataRow row, DataColumn col, DataRowVersion version)
internal string QualifiedName(string prefix, string name)
}
internal System.Data.Nodes : Enum {
public int value__
public Nodes Noop
public Nodes Unop
public Nodes UnopSpec
public Nodes Binop
public Nodes BinopSpec
public Nodes Zop
public Nodes Call
public Nodes Const
public Nodes Name
public Nodes Paren
public Nodes Conv
}
public System.Data.NoNullAllowedException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.Odbc.CMDWrapper : object {
private OdbcStatementHandle _stmt
private OdbcStatementHandle _keyinfostmt
internal OdbcDescriptorHandle _hdesc
internal CNativeBuffer _nativeParameterBuffer
internal CNativeBuffer _dataReaderBuf
private OdbcConnection _connection
private bool _canceling
internal bool _hasBoundColumns
internal bool _ssKeyInfoModeOn
internal bool _ssKeyInfoModeOff
internal bool Canceling
internal OdbcConnection Connection
internal bool HasBoundColumns
internal OdbcStatementHandle StatementHandle
internal OdbcStatementHandle KeyInfoStatement
internal void .ctor(OdbcConnection connection)
internal bool get_Canceling()
internal void set_Canceling(bool value)
internal OdbcConnection get_Connection()
internal void set_HasBoundColumns(bool value)
internal OdbcStatementHandle get_StatementHandle()
internal OdbcStatementHandle get_KeyInfoStatement()
internal void CreateKeyInfoStatementHandle()
internal void CreateStatementHandle()
internal void Dispose()
private void DisposeDescriptorHandle()
internal void DisposeStatementHandle()
internal void DisposeKeyInfoStatementHandle()
internal void FreeStatementHandle(STMT stmt)
internal void FreeKeyInfoStatementHandle(STMT stmt)
internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute)
internal string GetDiagSqlState()
internal void StatementErrorHandler(RetCode retcode)
internal void UnbindStmtColumns()
}
internal System.Data.Odbc.CNativeBuffer : DbBuffer {
internal short ShortLength
internal void .ctor(int initialSize)
internal short get_ShortLength()
internal object MarshalToManaged(int offset, SQL_C sqlctype, int cb)
internal void MarshalToNative(int offset, object value, SQL_C sqlctype, int sizeorprecision, int valueOffset)
internal HandleRef PtrOffset(int offset, int length)
internal void WriteODBCDateTime(int offset, DateTime value)
}
internal System.Data.Odbc.CStringTokenizer : object {
private StringBuilder _token
private string _sqlstatement
private char _quote
private char _escape
private int _len
private int _idx
internal int CurrentPosition
internal void .ctor(string text, char quote, char escape)
internal int get_CurrentPosition()
internal string NextToken()
private int GetTokenFromBracket(int curidx)
private int GetTokenFromQuote(int curidx)
private bool IsValidNameChar(char ch)
internal int FindTokenIndex(string tokenString)
internal bool StartsWith(string tokenString)
}
internal System.Data.Odbc.DbCache : object {
private Boolean[] _isBadValue
private DbSchemaInfo[] _schema
private Object[] _values
private OdbcDataReader _record
internal int _count
internal bool _randomaccess
internal object Item
internal int Count
internal Object[] Values
internal void .ctor(OdbcDataReader record, int count)
internal object get_Item(int i)
internal void set_Item(int i, object value)
internal int get_Count()
internal void InvalidateValue(int i)
internal Object[] get_Values()
internal object AccessIndex(int i)
internal DbSchemaInfo GetSchema(int i)
internal void FlushValues()
}
internal System.Data.Odbc.DbSchemaInfo : object {
internal string _name
internal string _typename
internal Type _type
internal Nullable`1<SQL_TYPE> _dbtype
internal object _scale
internal object _precision
internal int _columnlength
internal int _valueOffset
internal int _lengthOffset
internal SQL_C _sqlctype
internal SQL_TYPE _sql_type
}
internal System.Data.Odbc.ODBC : object {
internal string Pwd
internal Exception ConnectionClosed()
internal Exception OpenConnectionNoOwner()
internal Exception UnknownSQLType(SQL_TYPE sqltype)
internal Exception ConnectionStringTooLong()
internal ArgumentException GetSchemaRestrictionRequired()
internal ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value)
internal ArgumentOutOfRangeException NotSupportedCommandType(CommandType value)
internal ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value)
internal InvalidOperationException NoMappingForSqlTransactionLevel(int value)
internal Exception NegativeArgument()
internal Exception CantSetPropertyOnOpenConnection()
internal Exception CantEnableConnectionpooling(RetCode retcode)
internal Exception CantAllocateEnvironmentHandle(RetCode retcode)
internal Exception FailedToGetDescriptorHandle(RetCode retcode)
internal Exception NotInTransaction()
internal Exception UnknownOdbcType(OdbcType odbctype)
internal void TraceODBC(int level, string method, RetCode retcode)
internal short ShortStringLength(string inputString)
}
internal System.Data.Odbc.ODBC32 : object {
internal short SQL_COMMIT
internal short SQL_ROLLBACK
internal IntPtr SQL_AUTOCOMMIT_OFF
internal IntPtr SQL_AUTOCOMMIT_ON
private int SIGNED_OFFSET
private int UNSIGNED_OFFSET
internal short SQL_ALL_TYPES
internal IntPtr SQL_HANDLE_NULL
internal int SQL_NULL_DATA
internal int SQL_NO_TOTAL
internal int SQL_DEFAULT_PARAM
internal int COLUMN_NAME
internal int COLUMN_TYPE
internal int DATA_TYPE
internal int COLUMN_SIZE
internal int DECIMAL_DIGITS
internal int NUM_PREC_RADIX
internal IntPtr SQL_OV_ODBC3
internal int SQL_NTS
internal IntPtr SQL_CP_OFF
internal IntPtr SQL_CP_ONE_PER_DRIVER
internal IntPtr SQL_CP_ONE_PER_HENV
internal int SQL_CD_TRUE
internal int SQL_CD_FALSE
internal int SQL_DTC_DONE
internal int SQL_IS_POINTER
internal int SQL_IS_PTR
internal int MAX_CONNECTION_STRING_LENGTH
internal short SQL_DIAG_SQLSTATE
internal short SQL_RESULT_COL
internal string RetcodeToString(RetCode retcode)
internal OdbcErrorCollection GetDiagErrors(string source, OdbcHandle hrHandle, RetCode retcode)
internal void GetDiagErrors(OdbcErrorCollection errors, string source, OdbcHandle hrHandle, RetCode retcode)
}
public System.Data.Odbc.OdbcCommand : DbCommand {
private int _objectTypeCount
internal int ObjectID
private string _commandText
private CommandType _commandType
private int _commandTimeout
private UpdateRowSource _updatedRowSource
private bool _designTimeInvisible
private bool _isPrepared
private OdbcConnection _connection
private OdbcTransaction _transaction
private WeakReference weakDataReaderReference
private CMDWrapper _cmdWrapper
private OdbcParameterCollection _parameterCollection
private ConnectionState cmdState
internal bool Canceling
public string CommandText
public int CommandTimeout
public CommandType CommandType
public OdbcConnection Connection
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public bool DesignTimeVisible
internal bool HasParameters
public OdbcParameterCollection Parameters
public OdbcTransaction Transaction
public UpdateRowSource UpdatedRowSource
public void .ctor(string cmdText)
public void .ctor(string cmdText, OdbcConnection connection)
public void .ctor(string cmdText, OdbcConnection connection, OdbcTransaction transaction)
private void DisposeDeadDataReader()
private void DisposeDataReader()
internal void DisconnectFromDataReaderAndConnection()
protected void Dispose(bool disposing)
internal bool get_Canceling()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public void ResetCommandTimeout()
private bool ShouldSerializeCommandTimeout()
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public OdbcConnection get_Connection()
public void set_Connection(OdbcConnection value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
internal bool get_HasParameters()
public OdbcParameterCollection get_Parameters()
public OdbcTransaction get_Transaction()
public void set_Transaction(OdbcTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
internal OdbcDescriptorHandle GetDescriptorHandle(SQL_ATTR attribute)
internal CMDWrapper GetStatementHandle()
public void Cancel()
private object System.ICloneable.Clone()
internal bool RecoverFromConnection()
private void CloseCommandWrapper()
internal void CloseFromConnection()
internal void CloseFromDataReader()
public OdbcParameter CreateParameter()
protected DbParameter CreateDbParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public int ExecuteNonQuery()
public OdbcDataReader ExecuteReader()
public OdbcDataReader ExecuteReader(CommandBehavior behavior)
internal OdbcDataReader ExecuteReaderFromSQLMethod(Object[] methodArguments, SQL_API method)
private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader)
private OdbcDataReader ExecuteReaderObject(CommandBehavior behavior, string method, bool needReader, Object[] methodArguments, SQL_API odbcApiMethod)
public object ExecuteScalar()
internal string GetDiagSqlState()
private void PropertyChanging()
public void Prepare()
private void TrySetStatementAttribute(OdbcStatementHandle stmt, SQL_ATTR stmtAttribute, IntPtr value)
private void ValidateOpenConnection(string methodName)
private void ValidateConnectionAndTransaction(string method)
}
public System.Data.Odbc.OdbcCommandBuilder : DbCommandBuilder {
public OdbcDataAdapter DataAdapter
public void .ctor(OdbcDataAdapter adapter)
public OdbcDataAdapter get_DataAdapter()
public void set_DataAdapter(OdbcDataAdapter value)
private void OdbcRowUpdatingHandler(object sender, OdbcRowUpdatingEventArgs ruevent)
public OdbcCommand GetInsertCommand()
public OdbcCommand GetInsertCommand(bool useColumnsForParameterNames)
public OdbcCommand GetUpdateCommand()
public OdbcCommand GetUpdateCommand(bool useColumnsForParameterNames)
public OdbcCommand GetDeleteCommand()
public OdbcCommand GetDeleteCommand(bool useColumnsForParameterNames)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause)
public void DeriveParameters(OdbcCommand command)
private OdbcParameter[] DeriveParametersFromStoredProcedure(OdbcConnection connection, OdbcCommand command)
public string QuoteIdentifier(string unquotedIdentifier)
public string QuoteIdentifier(string unquotedIdentifier, OdbcConnection connection)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
public string UnquoteIdentifier(string quotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier, OdbcConnection connection)
}
public System.Data.Odbc.OdbcConnection : DbConnection {
private DbConnectionFactory _connectionFactory
internal CodeAccessPermission ExecutePermission
private DbConnectionOptions _userConnectionOptions
private DbConnectionPoolGroup _poolGroup
private DbConnectionInternal _innerConnection
private int _closeCount
private int _objectTypeCount
internal int ObjectID
private int connectionTimeout
private OdbcInfoMessageEventHandler infoMessageEventHandler
private WeakReference weakTransaction
private OdbcConnectionHandle _connectionHandle
private ConnectionState _extraState
internal int CloseCount
internal DbConnectionFactory ConnectionFactory
internal DbConnectionOptions ConnectionOptions
internal DbConnectionInternal InnerConnection
internal DbConnectionPoolGroup PoolGroup
internal DbConnectionOptions UserConnectionOptions
internal OdbcConnectionHandle ConnectionHandle
public string ConnectionString
public int ConnectionTimeout
public string Database
public string DataSource
public string ServerVersion
public ConnectionState State
internal OdbcConnectionPoolGroupProviderInfo ProviderInfo
internal ConnectionState InternalState
internal bool IsOpen
internal OdbcTransaction LocalTransaction
public string Driver
internal bool IsV3Driver
public void .ctor(string connectionString)
private void .ctor(OdbcConnection connection)
private void CopyFrom(OdbcConnection connection)
internal int get_CloseCount()
internal DbConnectionFactory get_ConnectionFactory()
internal DbConnectionOptions get_ConnectionOptions()
private string ConnectionString_Get()
private void ConnectionString_Set(string value)
private void ConnectionString_Set(DbConnectionPoolKey key)
internal DbConnectionInternal get_InnerConnection()
internal DbConnectionPoolGroup get_PoolGroup()
internal void set_PoolGroup(DbConnectionPoolGroup value)
internal DbConnectionOptions get_UserConnectionOptions()
internal void Abort(Exception e)
internal void AddWeakReference(object value, int tag)
protected DbCommand CreateDbCommand()
private CodeAccessPermission CreateExecutePermission()
protected void Dispose(bool disposing)
private void EnlistDistributedTransactionHelper(ITransaction transaction)
public void EnlistTransaction(Transaction transaction)
private DbMetaDataFactory GetMetaDataFactory(DbConnectionInternal internalConnection)
internal DbMetaDataFactory GetMetaDataFactoryInternal(DbConnectionInternal internalConnection)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
internal void NotifyWeakReference(int message)
internal void PermissionDemand()
internal void RemoveWeakReference(object value)
internal void SetInnerConnectionEvent(DbConnectionInternal to)
internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from)
internal void SetInnerConnectionTo(DbConnectionInternal to)
internal void VerifyExecutePermission()
internal OdbcConnectionHandle get_ConnectionHandle()
internal void set_ConnectionHandle(OdbcConnectionHandle value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public void set_ConnectionTimeout(int value)
public string get_Database()
public string get_DataSource()
public string get_ServerVersion()
public ConnectionState get_State()
internal OdbcConnectionPoolGroupProviderInfo get_ProviderInfo()
internal ConnectionState get_InternalState()
internal bool get_IsOpen()
internal OdbcTransaction get_LocalTransaction()
internal void set_LocalTransaction(OdbcTransaction value)
public string get_Driver()
internal bool get_IsV3Driver()
public void add_InfoMessage(OdbcInfoMessageEventHandler value)
public void remove_InfoMessage(OdbcInfoMessageEventHandler value)
internal char EscapeChar(string method)
internal string QuoteChar(string method)
public OdbcTransaction BeginTransaction()
public OdbcTransaction BeginTransaction(IsolationLevel isolevel)
private void RollbackDeadTransaction()
public void ChangeDatabase(string value)
internal void CheckState(string method)
private object System.ICloneable.Clone()
internal bool ConnectionIsAlive(Exception innerException)
public OdbcCommand CreateCommand()
internal OdbcStatementHandle CreateStatementHandle()
public void Close()
private void DisposeMe(bool disposing)
public void EnlistDistributedTransaction(ITransaction transaction)
internal string GetConnectAttrString(SQL_ATTR attribute)
internal int GetConnectAttr(SQL_ATTR attribute, HANDLER handler)
private string GetDiagSqlState()
internal RetCode GetInfoInt16Unhandled(SQL_INFO info, Int16& resultValue)
internal RetCode GetInfoInt32Unhandled(SQL_INFO info, Int32& resultValue)
private int GetInfoInt32Unhandled(SQL_INFO infotype)
internal string GetInfoStringUnhandled(SQL_INFO info)
private string GetInfoStringUnhandled(SQL_INFO info, bool handleError)
internal Exception HandleErrorNoThrow(OdbcHandle hrHandle, RetCode retcode)
internal void HandleError(OdbcHandle hrHandle, RetCode retcode)
public void Open()
private void OnInfoMessage(OdbcInfoMessageEventArgs args)
public void ReleaseObjectPool()
internal OdbcTransaction SetStateExecuting(string method, OdbcTransaction transaction)
internal void SetSupportedType(SQL_TYPE sqltype)
internal void FlagRestrictedSqlBindType(SQL_TYPE sqltype)
internal void FlagUnsupportedConnectAttr(SQL_ATTR Attribute)
internal void FlagUnsupportedStmtAttr(SQL_ATTR Attribute)
internal void FlagUnsupportedColAttr(SQL_DESC v3FieldId, SQL_COLUMN v2FieldId)
internal bool SQLGetFunctions(SQL_API odbcFunction)
internal bool TestTypeSupport(SQL_TYPE sqltype)
internal bool TestRestrictedSqlBindType(SQL_TYPE sqltype)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
internal OdbcTransaction Open_BeginTransaction(IsolationLevel isolevel)
internal void Open_ChangeDatabase(string value)
internal void Open_EnlistTransaction(Transaction transaction)
internal string Open_GetServerVersion()
}
internal System.Data.Odbc.OdbcConnectionFactory : DbConnectionFactory {
private string _MetaData
private string _defaultMetaDataXml
public OdbcConnectionFactory SingletonInstance
public DbProviderFactory ProviderFactory
public DbProviderFactory get_ProviderFactory()
protected DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)
protected DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous)
protected DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions)
internal DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions)
protected DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory)
internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection)
internal DbConnectionInternal GetInnerConnection(DbConnection connection)
protected int GetObjectId(DbConnection connection)
internal void PermissionDemand(DbConnection outerConnection)
internal void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup)
internal void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to)
internal bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from)
internal void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to)
}
internal System.Data.Odbc.OdbcConnectionHandle : OdbcHandle {
private HandleState _handleState
internal void .ctor(OdbcConnection connection, OdbcConnectionString constr, OdbcEnvironmentHandle environmentHandle)
private RetCode AutoCommitOff()
internal RetCode BeginTransaction(IsolationLevel& isolevel)
internal RetCode CompleteTransaction(short transactionOperation)
private RetCode CompleteTransaction(short transactionOperation, IntPtr handle)
private RetCode Connect(string connectionString)
protected bool ReleaseHandle()
internal RetCode GetConnectionAttribute(SQL_ATTR attribute, Byte[] buffer, Int32& cbActual)
internal RetCode GetFunctions(SQL_API fFunction, Int16& fExists)
internal RetCode GetInfo2(SQL_INFO info, Byte[] buffer, Int16& cbActual)
internal RetCode GetInfo1(SQL_INFO info, Byte[] buffer)
internal RetCode SetConnectionAttribute2(SQL_ATTR attribute, IntPtr value, int length)
internal RetCode SetConnectionAttribute3(SQL_ATTR attribute, string buffer, int length)
internal RetCode SetConnectionAttribute4(SQL_ATTR attribute, IDtcTransaction transaction, int length)
}
internal System.Data.Odbc.OdbcConnectionOpen : DbConnectionInternal {
internal OdbcConnection OuterConnection
public string ServerVersion
internal void .ctor(OdbcConnection outerConnection, OdbcConnectionString connectionOptions)
internal OdbcConnection get_OuterConnection()
public string get_ServerVersion()
protected void Activate(Transaction transaction)
public DbTransaction BeginTransaction(IsolationLevel isolevel)
internal OdbcTransaction BeginOdbcTransaction(IsolationLevel isolevel)
public void ChangeDatabase(string value)
protected DbReferenceCollection CreateReferenceCollection()
protected void Deactivate()
public void EnlistTransaction(Transaction transaction)
}
internal System.Data.Odbc.OdbcConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
private string _driverName
private string _driverVersion
private string _quoteChar
private char _escapeChar
private bool _hasQuoteChar
private bool _hasEscapeChar
private bool _isV3Driver
private int _supportedSQLTypes
private int _testedSQLTypes
private int _restrictedSQLBindTypes
private bool _noCurrentCatalog
private bool _noConnectionDead
private bool _noQueryTimeout
private bool _noSqlSoptSSNoBrowseTable
private bool _noSqlSoptSSHiddenColumns
private bool _noSqlCASSColumnKey
private bool _noSqlPrimaryKeys
internal string DriverName
internal string DriverVersion
internal bool HasQuoteChar
internal bool HasEscapeChar
internal string QuoteChar
internal char EscapeChar
internal bool IsV3Driver
internal int SupportedSQLTypes
internal int TestedSQLTypes
internal int RestrictedSQLBindTypes
internal bool NoCurrentCatalog
internal bool NoConnectionDead
internal bool NoQueryTimeout
internal bool NoSqlSoptSSNoBrowseTable
internal bool NoSqlSoptSSHiddenColumns
internal bool NoSqlCASSColumnKey
internal bool NoSqlPrimaryKeys
internal string get_DriverName()
internal void set_DriverName(string value)
internal string get_DriverVersion()
internal void set_DriverVersion(string value)
internal bool get_HasQuoteChar()
internal bool get_HasEscapeChar()
internal string get_QuoteChar()
internal void set_QuoteChar(string value)
internal char get_EscapeChar()
internal void set_EscapeChar(char value)
internal bool get_IsV3Driver()
internal void set_IsV3Driver(bool value)
internal int get_SupportedSQLTypes()
internal void set_SupportedSQLTypes(int value)
internal int get_TestedSQLTypes()
internal void set_TestedSQLTypes(int value)
internal int get_RestrictedSQLBindTypes()
internal void set_RestrictedSQLBindTypes(int value)
internal bool get_NoCurrentCatalog()
internal void set_NoCurrentCatalog(bool value)
internal bool get_NoConnectionDead()
internal void set_NoConnectionDead(bool value)
internal bool get_NoQueryTimeout()
internal void set_NoQueryTimeout(bool value)
internal bool get_NoSqlSoptSSNoBrowseTable()
internal void set_NoSqlSoptSSNoBrowseTable(bool value)
internal bool get_NoSqlSoptSSHiddenColumns()
internal void set_NoSqlSoptSSHiddenColumns(bool value)
internal bool get_NoSqlCASSColumnKey()
internal void set_NoSqlCASSColumnKey(bool value)
internal bool get_NoSqlPrimaryKeys()
internal void set_NoSqlPrimaryKeys(bool value)
}
internal System.Data.Odbc.OdbcConnectionString : DbConnectionOptions {
private string _expandedConnectionString
internal void .ctor(string connectionString, bool validate)
protected internal PermissionSet CreatePermissionSet()
protected internal string Expand()
}
public System.Data.Odbc.OdbcConnectionStringBuilder : DbConnectionStringBuilder {
private String[] _validKeywords
private Dictionary`2<string, Keywords> _keywords
private String[] _knownKeywords
private string _dsn
private string _driver
public object Item
public string Driver
public string Dsn
public ICollection Keys
public void .ctor(string connectionString)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public string get_Driver()
public void set_Driver(string value)
public string get_Dsn()
public void set_Dsn(string value)
public ICollection get_Keys()
public void Clear()
public bool ContainsKey(string keyword)
private string ConvertToString(object value)
private object GetAt(Keywords index)
public bool Remove(string keyword)
private void Reset(Keywords index)
private void SetValue(string keyword, string value)
public bool TryGetValue(string keyword, Object& value)
}
public System.Data.Odbc.OdbcDataAdapter : DbDataAdapter {
private object EventRowUpdated
private object EventRowUpdating
private OdbcCommand _deleteCommand
private OdbcCommand _insertCommand
private OdbcCommand _selectCommand
private OdbcCommand _updateCommand
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
public OdbcCommand DeleteCommand
public OdbcCommand InsertCommand
public OdbcCommand SelectCommand
public OdbcCommand UpdateCommand
public void .ctor(OdbcCommand selectCommand)
public void .ctor(string selectCommandText, OdbcConnection selectConnection)
public void .ctor(string selectCommandText, string selectConnectionString)
private void .ctor(OdbcDataAdapter from)
public OdbcCommand get_DeleteCommand()
public void set_DeleteCommand(OdbcCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
public OdbcCommand get_InsertCommand()
public void set_InsertCommand(OdbcCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
public OdbcCommand get_SelectCommand()
public void set_SelectCommand(OdbcCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
public OdbcCommand get_UpdateCommand()
public void set_UpdateCommand(OdbcCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
public void add_RowUpdated(OdbcRowUpdatedEventHandler value)
public void remove_RowUpdated(OdbcRowUpdatedEventHandler value)
public void add_RowUpdating(OdbcRowUpdatingEventHandler value)
public void remove_RowUpdating(OdbcRowUpdatingEventHandler value)
private object System.ICloneable.Clone()
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
}
public System.Data.Odbc.OdbcDataReader : DbDataReader {
private OdbcCommand command
private int recordAffected
private FieldNameLookup _fieldNameLookup
private DbCache dataCache
private HasRowsStatus _hasRows
private bool _isClosed
private bool _isRead
private bool _isValidResult
private bool _noMoreResults
private bool _noMoreRows
private bool _skipReadOnce
private int _hiddenColumns
private CommandBehavior _commandBehavior
private int _row
private int _column
private long _sequentialBytesRead
private int _objectTypeCount
internal int ObjectID
private MetaData[] metadata
private DataTable schemaTable
private string _cmdText
private CMDWrapper _cmdWrapper
private CNativeBuffer Buffer
private OdbcConnection Connection
internal OdbcCommand Command
private OdbcStatementHandle StatementHandle
private OdbcStatementHandle KeyInfoStatementHandle
internal bool IsCancelingCommand
internal bool IsNonCancelingCommand
public int Depth
public int FieldCount
public bool HasRows
public bool IsClosed
public int RecordsAffected
public object Item
public object Item
internal void .ctor(OdbcCommand command, CMDWrapper cmdWrapper, CommandBehavior commandbehavior)
private CNativeBuffer get_Buffer()
private OdbcConnection get_Connection()
internal OdbcCommand get_Command()
internal void set_Command(OdbcCommand value)
private OdbcStatementHandle get_StatementHandle()
private OdbcStatementHandle get_KeyInfoStatementHandle()
internal bool IsBehavior(CommandBehavior behavior)
internal bool get_IsCancelingCommand()
internal bool get_IsNonCancelingCommand()
public int get_Depth()
public int get_FieldCount()
public bool get_HasRows()
internal RetCode FieldCountNoThrow(Int16& cColsAffected)
public bool get_IsClosed()
private SQLLEN GetRowCount()
internal int CalculateRecordsAffected(int cRowsAffected)
public int get_RecordsAffected()
public object get_Item(int i)
public object get_Item(string value)
public void Close()
private void Close(bool disposing)
protected void Dispose(bool disposing)
public string GetDataTypeName(int i)
public IEnumerator GetEnumerator()
public Type GetFieldType(int i)
public string GetName(int i)
public int GetOrdinal(string value)
private int IndexOf(string value)
private bool IsCommandBehavior(CommandBehavior condition)
internal object GetValue(int i, TypeMap typemap)
public object GetValue(int i)
public int GetValues(Object[] values)
private TypeMap GetSqlType(int i)
public bool IsDBNull(int i)
public byte GetByte(int i)
private object internalGetByte(int i)
public char GetChar(int i)
private object internalGetChar(int i)
public short GetInt16(int i)
private object internalGetInt16(int i)
public int GetInt32(int i)
private object internalGetInt32(int i)
public long GetInt64(int i)
private object internalGetInt64(int i)
public bool GetBoolean(int i)
private object internalGetBoolean(int i)
public float GetFloat(int i)
private object internalGetFloat(int i)
public DateTime GetDate(int i)
private object internalGetDate(int i)
public DateTime GetDateTime(int i)
private object internalGetDateTime(int i)
public decimal GetDecimal(int i)
private object internalGetDecimal(int i)
public double GetDouble(int i)
private object internalGetDouble(int i)
public Guid GetGuid(int i)
private object internalGetGuid(int i)
public string GetString(int i)
private object internalGetString(int i)
public TimeSpan GetTime(int i)
private object internalGetTime(int i)
private void SetCurrentRowColumnInfo(int row, int column)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
private long GetBytesOrChars(int i, long dataIndex, Array buffer, bool isCharsBuffer, int bufferIndex, int length)
private int readBytesOrCharsSequentialAccess(int i, Array buffer, bool isCharsBuffer, int bufferIndex, long bytesOrCharsLength)
private object internalGetBytes(int i)
private SQLLEN GetColAttribute(int iColumn, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler)
private string GetColAttributeStr(int i, SQL_DESC v3FieldId, SQL_COLUMN v2FieldId, HANDLER handler)
private string GetDescFieldStr(int i, SQL_DESC attribute, HANDLER handler)
private bool QueryFieldInfo(int i, SQL_C sqlctype, Int32& cbLengthOrIndicator)
private bool GetData(int i, SQL_C sqlctype)
private bool GetData(int i, SQL_C sqlctype, int cb, Int32& cbLengthOrIndicator)
public bool Read()
internal void FirstResult()
public bool NextResult()
private bool NextResult(bool disposing, bool allresults)
private void BuildMetaDataInfo()
private DataTable NewSchemaTable()
public DataTable GetSchemaTable()
internal int RetrieveKeyInfo(bool needkeyinfo, QualifiedTableName qualifiedTableName, bool quoted)
private int RetrieveKeyInfoFromStatistics(QualifiedTableName qualifiedTableName, bool quoted)
internal bool SameIndexColumn(string currentindexname, string indexname, int ordinal, int ncols)
internal int GetOrdinalFromBaseColName(string columnname)
internal int GetOrdinalFromBaseColName(string columnname, string tablename)
internal string GetTableNameFromCommandText()
internal void SetBaseTableNames(QualifiedTableName qualifiedTableName)
}
internal System.Data.Odbc.OdbcDescriptorHandle : OdbcHandle {
internal void .ctor(OdbcStatementHandle statementHandle, SQL_ATTR attribute)
internal RetCode GetDescriptionField(int i, SQL_DESC attribute, CNativeBuffer buffer, Int32& numericAttribute)
internal RetCode SetDescriptionField1(short ordinal, SQL_DESC type, IntPtr value)
internal RetCode SetDescriptionField2(short ordinal, SQL_DESC type, HandleRef value)
}
internal System.Data.Odbc.OdbcEnvironment : object {
private object _globalEnvironmentHandle
private object _globalEnvironmentHandleLock
internal OdbcEnvironmentHandle GetGlobalEnvironmentHandle()
internal void ReleaseObjectPool()
}
public System.Data.Odbc.OdbcError : object {
internal string _message
internal string _state
internal int _nativeerror
internal string _source
public string Message
public string SQLState
public int NativeError
public string Source
internal void .ctor(string source, string message, string state, int nativeerror)
public string get_Message()
public string get_SQLState()
public int get_NativeError()
public string get_Source()
internal void SetSource(string Source)
public string ToString()
}
public System.Data.Odbc.OdbcErrorCollection : object {
private ArrayList _items
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public int Count
public OdbcError Item
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public int get_Count()
public OdbcError get_Item(int i)
internal void Add(OdbcError error)
public void CopyTo(Array array, int i)
public void CopyTo(OdbcError[] array, int i)
public IEnumerator GetEnumerator()
internal void SetSource(string Source)
}
public System.Data.Odbc.OdbcException : DbException {
private OdbcErrorCollection odbcErrors
private RETCODE _retcode
public OdbcErrorCollection Errors
public string Source
internal void .ctor(string message, OdbcErrorCollection errors)
private void .ctor(SerializationInfo si, StreamingContext sc)
internal OdbcException CreateException(OdbcErrorCollection errors, RetCode retcode)
public OdbcErrorCollection get_Errors()
public void GetObjectData(SerializationInfo si, StreamingContext context)
public string get_Source()
}
public System.Data.Odbc.OdbcFactory : DbProviderFactory {
public OdbcFactory Instance
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
internal System.Data.Odbc.OdbcHandle : SafeHandle {
private SQL_HANDLE _handleType
private OdbcHandle _parentHandle
internal SQL_HANDLE HandleType
public bool IsInvalid
protected void .ctor(SQL_HANDLE handleType, OdbcHandle parentHandle)
internal void .ctor(OdbcStatementHandle parentHandle, SQL_ATTR attribute)
internal SQL_HANDLE get_HandleType()
public bool get_IsInvalid()
protected bool ReleaseHandle()
internal RetCode GetDiagnosticField(String& sqlState)
internal RetCode GetDiagnosticRecord(short record, String& sqlState, StringBuilder message, Int32& nativeError, Int16& cchActual)
}
public System.Data.Odbc.OdbcInfoMessageEventArgs : EventArgs {
private OdbcErrorCollection _errors
public OdbcErrorCollection Errors
public string Message
internal void .ctor(OdbcErrorCollection errors)
public OdbcErrorCollection get_Errors()
public string get_Message()
public string ToString()
}
public System.Data.Odbc.OdbcInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.Odbc.OdbcMetaDataCollectionNames : object {
public string Columns
public string Indexes
public string Procedures
public string ProcedureColumns
public string ProcedureParameters
public string Tables
public string Views
}
public System.Data.Odbc.OdbcMetaDataColumnNames : object {
public string BooleanFalseLiteral
public string BooleanTrueLiteral
public string SQLType
}
internal System.Data.Odbc.OdbcMetaDataFactory : DbMetaDataFactory {
private string _collectionName
private string _populationMechanism
private string _prepareCollection
private SchemaFunctionName[] _schemaMapping
internal Char[] KeywordSeparatorChar
internal void .ctor(Stream XMLStream, string serverVersion, string serverVersionNormalized, OdbcConnection connection)
private object BooleanFromODBC(object odbcSource)
private OdbcCommand GetCommand(OdbcConnection connection)
private DataTable DataTableFromDataReader(IDataReader reader, string tableName)
private void DataTableFromDataReaderDataTypes(DataTable dataTypesTable, OdbcDataReader dataReader, OdbcConnection connection)
private DataTable DataTableFromDataReaderIndex(IDataReader reader, string tableName, string restrictionIndexName)
private DataTable DataTableFromDataReaderProcedureColumns(IDataReader reader, string tableName, bool isColumn)
private DataTable DataTableFromDataReaderProcedures(IDataReader reader, string tableName, short procedureType)
private void FillOutRestrictions(int restrictionsCount, String[] restrictions, Object[] allRestrictions, string collectionName)
private DataTable GetColumnsCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetDataSourceInformationCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetDataTypesCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetIndexCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetProcedureColumnsCollection(String[] restrictions, OdbcConnection connection, bool isColumns)
private DataTable GetProceduresCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetReservedWordsCollection(String[] restrictions, OdbcConnection connection)
private DataTable GetTablesCollection(String[] restrictions, OdbcConnection connection, bool isTables)
private bool IncludeIndexRow(object rowIndexName, string restrictionIndexName, short rowIndexType)
private DataTable NewDataTableFromReader(IDataReader reader, Object[]& values, string tableName)
protected DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection)
}
public System.Data.Odbc.OdbcParameter : DbParameter {
private object _value
private object _parent
private ParameterDirection _direction
private int _size
private int _offset
private string _sourceColumn
private DataRowVersion _sourceVersion
private bool _sourceColumnNullMapping
private bool _isNullable
private object _coercedValue
private bool _hasChanged
private bool _userSpecifiedType
private TypeMap _typemap
private TypeMap _bindtype
private string _parameterName
private byte _precision
private byte _scale
private bool _hasScale
private SQL_C _boundSqlCType
private SQL_TYPE _boundParameterType
private int _boundSize
private int _boundScale
private IntPtr _boundBuffer
private IntPtr _boundIntbuffer
private TypeMap _originalbindtype
private byte _internalPrecision
private bool _internalShouldSerializeSize
private int _internalSize
private ParameterDirection _internalDirection
private byte _internalScale
private int _internalOffset
internal bool _internalUserSpecifiedType
private object _internalValue
private int _preparedOffset
private int _preparedSize
private int _preparedBufferSize
private object _preparedValue
private int _preparedIntOffset
private int _preparedValueOffset
private SQL_C _prepared_Sql_C_Type
private object CoercedValue
public ParameterDirection Direction
public bool IsNullable
public int Offset
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
public DbType DbType
public OdbcType OdbcType
internal bool HasChanged
internal bool UserSpecifiedType
public string ParameterName
public byte Precision
internal byte PrecisionInternal
public byte Scale
internal byte ScaleInternal
public object Value
private void .ctor(OdbcParameter source)
public void .ctor(string name, object value)
public void .ctor(string name, OdbcType type)
public void .ctor(string name, OdbcType type, int size)
public void .ctor(string name, OdbcType type, int size, string sourcecolumn)
public void .ctor(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value)
public void .ctor(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value)
private object get_CoercedValue()
private void set_CoercedValue(object value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public int get_Offset()
public void set_Offset(int value)
public int get_Size()
public void set_Size(int value)
private void ResetSize()
private bool ShouldSerializeSize()
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
private void CloneHelperCore(OdbcParameter destination)
internal void CopyTo(DbParameter destination)
internal object CompareExchangeParent(object value, object comparand)
internal void ResetParent()
public string ToString()
private byte ValuePrecisionCore(object value)
private byte ValueScaleCore(object value)
private int ValueSizeCore(object value)
public DbType get_DbType()
public void set_DbType(DbType value)
public void ResetDbType()
public OdbcType get_OdbcType()
public void set_OdbcType(OdbcType value)
public void ResetOdbcType()
internal void set_HasChanged(bool value)
internal bool get_UserSpecifiedType()
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
internal byte get_PrecisionInternal()
internal void set_PrecisionInternal(byte value)
private bool ShouldSerializePrecision()
public byte get_Scale()
public void set_Scale(byte value)
internal byte get_ScaleInternal()
internal void set_ScaleInternal(byte value)
private bool ShouldSerializeScale()
private bool ShouldSerializeScale(byte scale)
private int GetColumnSize(object value, int offset, int ordinal)
private int GetValueSize(object value, int offset)
private int GetParameterSize(object value, int offset, int ordinal)
private byte GetParameterPrecision(object value)
private byte GetParameterScale(object value)
private object System.ICloneable.Clone()
private void CopyParameterInternal()
private void CloneHelper(OdbcParameter destination)
internal void ClearBinding()
internal void PrepareForBind(OdbcCommand command, short ordinal, Int32& parameterBufferSize)
internal void Bind(OdbcStatementHandle hstmt, OdbcCommand command, short ordinal, CNativeBuffer parameterBuffer, bool allowReentrance)
internal void GetOutputValue(CNativeBuffer parameterBuffer)
private object ProcessAndGetParameterValue()
private void PropertyChanging()
private void PropertyTypeChanging()
internal void SetInputValue(object value, SQL_C sql_c_type, int cbsize, int sizeorprecision, int offset, CNativeBuffer parameterBuffer)
private SQL_PARAM SqlDirectionFromParameterDirection()
public object get_Value()
public void set_Value(object value)
private byte ValuePrecision(object value)
private byte ValueScale(object value)
private int ValueSize(object value)
}
public System.Data.Odbc.OdbcParameterCollection : DbParameterCollection {
private List`1<OdbcParameter> _items
private bool _rebindCollection
private Type ItemType
public int Count
private List`1<OdbcParameter> InnerList
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
internal bool RebindCollection
public OdbcParameter Item
public OdbcParameter Item
public int get_Count()
private List`1<OdbcParameter> get_InnerList()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public int Add(object value)
public void AddRange(Array values)
private int CheckName(string parameterName)
public void Clear()
public bool Contains(object value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
private int IndexOf(IEnumerable items, string parameterName)
public int IndexOf(string parameterName)
public int IndexOf(object value)
public void Insert(int index, object value)
private void RangeCheck(int index)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
private void RemoveIndex(int index)
private void Replace(int index, object newValue)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
private void Validate(int index, object value)
private void ValidateType(object value)
internal bool get_RebindCollection()
internal void set_RebindCollection(bool value)
public OdbcParameter get_Item(int index)
public void set_Item(int index, OdbcParameter value)
public OdbcParameter get_Item(string parameterName)
public void set_Item(string parameterName, OdbcParameter value)
public OdbcParameter Add(OdbcParameter value)
public OdbcParameter Add(string parameterName, object value)
public OdbcParameter AddWithValue(string parameterName, object value)
public OdbcParameter Add(string parameterName, OdbcType odbcType)
public OdbcParameter Add(string parameterName, OdbcType odbcType, int size)
public OdbcParameter Add(string parameterName, OdbcType odbcType, int size, string sourceColumn)
public void AddRange(OdbcParameter[] values)
internal void Bind(OdbcCommand command, CMDWrapper cmdWrapper, CNativeBuffer parameterBuffer)
internal int CalcParameterBufferSize(OdbcCommand command)
internal void ClearBindings()
public bool Contains(string value)
public bool Contains(OdbcParameter value)
public void CopyTo(OdbcParameter[] array, int index)
private void OnChange()
internal void GetOutputValues(CMDWrapper cmdWrapper)
public int IndexOf(OdbcParameter value)
public void Insert(int index, OdbcParameter value)
public void Remove(OdbcParameter value)
}
public System.Data.Odbc.OdbcPermission : DBDataPermission {
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
private void .ctor(OdbcPermission permission)
internal void .ctor(OdbcPermissionAttribute permissionAttribute)
internal void .ctor(OdbcConnectionString constr)
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
public IPermission Copy()
}
public System.Data.Odbc.OdbcPermissionAttribute : DBDataPermissionAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
internal System.Data.Odbc.OdbcReferenceCollection : DbReferenceCollection {
internal int Closing
internal int Recover
internal int CommandTag
public void Add(object value, int tag)
protected void NotifyItem(int message, int tag, object value)
public void Remove(object value)
}
public System.Data.Odbc.OdbcRowUpdatedEventArgs : RowUpdatedEventArgs {
public OdbcCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OdbcCommand get_Command()
}
public System.Data.Odbc.OdbcRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.Odbc.OdbcRowUpdatingEventArgs : RowUpdatingEventArgs {
public OdbcCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OdbcCommand get_Command()
public void set_Command(OdbcCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.Odbc.OdbcRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.Odbc.OdbcStatementHandle : OdbcHandle {
internal void .ctor(OdbcConnectionHandle connectionHandle)
internal RetCode BindColumn2(int columnNumber, SQL_C targetType, HandleRef buffer, IntPtr length, IntPtr srLen_or_Ind)
internal RetCode BindColumn3(int columnNumber, SQL_C targetType, IntPtr srLen_or_Ind)
internal RetCode BindParameter(short ordinal, short parameterDirection, SQL_C sqlctype, SQL_TYPE sqltype, IntPtr cchSize, IntPtr scale, HandleRef buffer, IntPtr bufferLength, HandleRef intbuffer)
internal RetCode Cancel()
internal RetCode CloseCursor()
internal RetCode ColumnAttribute(int columnNumber, short fieldIdentifier, CNativeBuffer characterAttribute, Int16& stringLength, SQLLEN& numericAttribute)
internal RetCode Columns(string tableCatalog, string tableSchema, string tableName, string columnName)
internal RetCode Execute()
internal RetCode ExecuteDirect(string commandText)
internal RetCode Fetch()
internal RetCode FreeStatement(STMT stmt)
internal RetCode GetData(int index, SQL_C sqlctype, CNativeBuffer buffer, int cb, IntPtr& cbActual)
internal RetCode GetStatementAttribute(SQL_ATTR attribute, IntPtr& value, Int32& stringLength)
internal RetCode GetTypeInfo(short fSqlType)
internal RetCode MoreResults()
internal RetCode NumberOfResultColumns(Int16& columnsAffected)
internal RetCode Prepare(string commandText)
internal RetCode PrimaryKeys(string catalogName, string schemaName, string tableName)
internal RetCode Procedures(string procedureCatalog, string procedureSchema, string procedureName)
internal RetCode ProcedureColumns(string procedureCatalog, string procedureSchema, string procedureName, string columnName)
internal RetCode RowCount(SQLLEN& rowCount)
internal RetCode SetStatementAttribute(SQL_ATTR attribute, IntPtr value, SQL_IS stringLength)
internal RetCode SpecialColumns(string quotedTable)
internal RetCode Statistics(string tableCatalog, string tableSchema, string tableName, short unique, short accuracy)
internal RetCode Statistics(string tableName)
internal RetCode Tables(string tableCatalog, string tableSchema, string tableName, string tableType)
}
public System.Data.Odbc.OdbcTransaction : DbTransaction {
private OdbcConnection _connection
private IsolationLevel _isolevel
private OdbcConnectionHandle _handle
public OdbcConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
internal void .ctor(OdbcConnection connection, IsolationLevel isolevel, OdbcConnectionHandle handle)
public OdbcConnection get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public void Commit()
protected void Dispose(bool disposing)
public void Rollback()
}
public System.Data.Odbc.OdbcType : Enum {
public int value__
public OdbcType BigInt
public OdbcType Binary
public OdbcType Bit
public OdbcType Char
public OdbcType DateTime
public OdbcType Decimal
public OdbcType Numeric
public OdbcType Double
public OdbcType Image
public OdbcType Int
public OdbcType NChar
public OdbcType NText
public OdbcType NVarChar
public OdbcType Real
public OdbcType UniqueIdentifier
public OdbcType SmallDateTime
public OdbcType SmallInt
public OdbcType Text
public OdbcType Timestamp
public OdbcType TinyInt
public OdbcType VarBinary
public OdbcType VarChar
public OdbcType Date
public OdbcType Time
}
internal System.Data.Odbc.SQLLEN : ValueType {
private IntPtr _value
internal void .ctor(int value)
internal void .ctor(long value)
internal void .ctor(IntPtr value)
public SQLLEN op_Implicit(int value)
public SQLLEN op_Explicit(long value)
public int op_Implicit(SQLLEN value)
public long op_Explicit(SQLLEN value)
public long ToInt64()
}
internal System.Data.Odbc.TypeMap : object {
private TypeMap _BigInt
private TypeMap _Binary
private TypeMap _Bit
internal TypeMap _Char
private TypeMap _DateTime
private TypeMap _Date
private TypeMap _Time
private TypeMap _Decimal
private TypeMap _Double
internal TypeMap _Image
private TypeMap _Int
private TypeMap _NChar
internal TypeMap _NText
private TypeMap _Numeric
internal TypeMap _NVarChar
private TypeMap _Real
private TypeMap _UniqueId
private TypeMap _SmallDT
private TypeMap _SmallInt
internal TypeMap _Text
private TypeMap _Timestamp
private TypeMap _TinyInt
private TypeMap _VarBinary
internal TypeMap _VarChar
private TypeMap _Variant
private TypeMap _UDT
private TypeMap _XML
internal OdbcType _odbcType
internal DbType _dbType
internal Type _type
internal SQL_TYPE _sql_type
internal SQL_C _sql_c
internal SQL_C _param_sql_c
internal int _bufferSize
internal int _columnSize
internal bool _signType
private void .ctor(OdbcType odbcType, DbType dbType, Type type, SQL_TYPE sql_type, SQL_C sql_c, SQL_C param_sql_c, int bsize, int csize, bool signType)
internal TypeMap FromOdbcType(OdbcType odbcType)
internal TypeMap FromDbType(DbType dbType)
internal TypeMap FromSystemType(Type dataType)
internal TypeMap FromSqlType(SQL_TYPE sqltype)
internal TypeMap UpgradeSignedType(TypeMap typeMap, bool unsigned)
}
internal System.Data.OleDb.Bindings : object {
private tagDBPARAMBINDINFO[] _bindInfo
private tagDBBINDING[] _dbbindings
private tagDBCOLUMNACCESS[] _dbcolumns
private OleDbParameter[] _parameters
private int _collectionChangeID
private OleDbDataReader _dataReader
private ColumnBinding[] _columnBindings
private RowBinding _rowBinding
private int _index
private int _count
private int _dataBufferSize
private bool _ifIRowsetElseIRow
private bool _forceRebind
private bool _needToReset
internal tagDBPARAMBINDINFO[] BindInfo
internal tagDBCOLUMNACCESS[] DBColumnAccess
internal int CurrentIndex
internal bool ForceRebind
internal IntPtr DataSourceType
internal IntPtr Name
internal IntPtr ParamSize
internal int Flags
internal IntPtr Ordinal
internal int Part
internal int ParamIO
internal int MaxLen
internal int DbType
internal byte Precision
internal byte Scale
private void .ctor(int count)
internal void .ctor(OleDbParameter[] parameters, int collectionChangeID)
internal void .ctor(OleDbDataReader dataReader, bool ifIRowsetElseIRow, int count)
internal tagDBPARAMBINDINFO[] get_BindInfo()
internal tagDBCOLUMNACCESS[] get_DBColumnAccess()
internal void set_CurrentIndex(int value)
internal ColumnBinding[] ColumnBindings()
internal OleDbParameter[] Parameters()
internal RowBinding RowBinding()
internal bool get_ForceRebind()
internal void set_ForceRebind(bool value)
internal void set_DataSourceType(IntPtr value)
internal void set_Name(IntPtr value)
internal IntPtr get_ParamSize()
internal void set_ParamSize(IntPtr value)
internal void set_Flags(int value)
internal void set_Ordinal(IntPtr value)
internal void set_Part(int value)
internal void set_ParamIO(int value)
internal void set_MaxLen(int value)
internal int get_DbType()
internal void set_DbType(int value)
internal void set_Precision(byte value)
internal void set_Scale(byte value)
internal int AllocateForAccessor(OleDbDataReader dataReader, int indexStart, int indexForAccessor)
internal void ApplyInputParameters()
internal void ApplyOutputParameters()
internal bool AreParameterBindingsInvalid(OleDbParameterCollection collection)
internal void CleanupBindings()
internal void CloseFromConnection()
internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags)
public void Dispose()
internal void GuidKindName(Guid guid, int eKind, IntPtr propid)
internal void ParameterStatus(StringBuilder builder)
}
internal System.Data.OleDb.ChapterHandle : WrappedIUnknown {
internal ChapterHandle DB_NULL_HCHAPTER
private IntPtr _chapterHandle
internal IntPtr HChapter
private void .ctor(IntPtr chapter)
private void .ctor(object chapteredRowset, RowBinding binding, int valueOffset)
internal ChapterHandle CreateChapterHandle(object chapteredRowset, RowBinding binding, int valueOffset)
internal ChapterHandle CreateChapterHandle(IntPtr chapter)
internal IntPtr get_HChapter()
protected bool ReleaseHandle()
}
internal System.Data.OleDb.ColumnBinding : object {
private OleDbDataReader _dataReader
private RowBinding _rowbinding
private Bindings _bindings
private OleDbParameter _parameter
private int _parameterChangeID
private int _offsetStatus
private int _offsetLength
private int _offsetValue
private int _ordinal
private int _maxLen
private short _wType
private byte _precision
private int _index
private int _indexForAccessor
private int _indexWithinAccessor
private bool _ifIRowsetElseIRow
private int _valueBindingOffset
private int _valueBindingSize
internal StringMemHandle _sptr
private GCHandle _pinnedBuffer
private object _value
internal Bindings Bindings
internal RowBinding RowBinding
internal int ColumnBindingOrdinal
private int ColumnBindingMaxLen
private byte ColumnBindingPrecision
private short DbType
private Type ExpectedType
internal int Index
internal int IndexForAccessor
internal int IndexWithinAccessor
private int ValueBindingOffset
private int ValueBindingSize
internal int ValueOffset
internal void .ctor(OleDbDataReader dataReader, int index, int indexForAccessor, int indexWithinAccessor, OleDbParameter parameter, RowBinding rowbinding, Bindings bindings, tagDBBINDING binding, int offset, bool ifIRowsetElseIRow)
internal Bindings get_Bindings()
internal RowBinding get_RowBinding()
internal int get_ColumnBindingOrdinal()
private int get_ColumnBindingMaxLen()
private byte get_ColumnBindingPrecision()
private short get_DbType()
private Type get_ExpectedType()
internal int get_Index()
internal int get_IndexForAccessor()
internal int get_IndexWithinAccessor()
private int get_ValueBindingOffset()
private int get_ValueBindingSize()
internal int get_ValueOffset()
private OleDbDataReader DataReader()
internal bool IsParameterBindingInvalid(OleDbParameter parameter)
internal bool IsValueNull()
private int LengthValue()
private void LengthValue(int value)
internal OleDbParameter Parameter()
internal void ResetValue()
internal DBStatus StatusValue()
internal void StatusValue(DBStatus value)
internal void SetOffset(int offset)
internal void SetSize(int size)
private void SetValueDBNull()
private void SetValueEmpty()
internal object Value()
internal void Value(object value)
internal bool Value_BOOL()
private void Value_BOOL(bool value)
private string Value_BSTR()
private void Value_BSTR(string value)
private Byte[] Value_ByRefBYTES()
private void Value_ByRefBYTES(Byte[] value)
private string Value_ByRefWSTR()
private void Value_ByRefWSTR(string value)
private void Value_ByRefWSTR(Char[] value)
private Byte[] Value_BYTES()
private void Value_BYTES(Byte[] value)
private decimal Value_CY()
private void Value_CY(decimal value)
private DateTime Value_DATE()
private void Value_DATE(DateTime value)
private DateTime Value_DBDATE()
private void Value_DBDATE(DateTime value)
private TimeSpan Value_DBTIME()
private void Value_DBTIME(TimeSpan value)
private DateTime Value_DBTIMESTAMP()
private void Value_DBTIMESTAMP(DateTime value)
private decimal Value_DECIMAL()
private void Value_DECIMAL(decimal value)
private int Value_ERROR()
private void Value_ERROR(int value)
private DateTime Value_FILETIME()
private void Value_FILETIME(DateTime value)
internal Guid Value_GUID()
private void Value_GUID(Guid value)
internal OleDbDataReader Value_HCHAPTER()
private sbyte Value_I1()
private void Value_I1(sbyte value)
internal short Value_I2()
private void Value_I2(short value)
private int Value_I4()
private void Value_I4(int value)
private long Value_I8()
private void Value_I8(long value)
private object Value_IDISPATCH()
private void Value_IDISPATCH(object value)
private object Value_IUNKNOWN()
private void Value_IUNKNOWN(object value)
private decimal Value_NUMERIC()
private void Value_NUMERIC(decimal value)
private float Value_R4()
private void Value_R4(float value)
private double Value_R8()
private void Value_R8(double value)
private byte Value_UI1()
private void Value_UI1(byte value)
internal ushort Value_UI2()
private void Value_UI2(ushort value)
internal UInt32 Value_UI4()
private void Value_UI4(UInt32 value)
internal ulong Value_UI8()
private void Value_UI8(ulong value)
private string Value_WSTR()
private void Value_WSTR(string value)
private void Value_WSTR(Char[] value)
private object Value_VARIANT()
private void Value_VARIANT(object value)
internal bool ValueBoolean()
internal Byte[] ValueByteArray()
internal byte ValueByte()
internal OleDbDataReader ValueChapter()
internal DateTime ValueDateTime()
internal decimal ValueDecimal()
internal Guid ValueGuid()
internal short ValueInt16()
internal int ValueInt32()
internal long ValueInt64()
internal float ValueSingle()
internal double ValueDouble()
internal string ValueString()
private object ValueVariant()
private Exception CheckTypeValueStatusValue()
private Exception CheckTypeValueStatusValue(Type expectedType)
}
internal System.Data.OleDb.DataSourceWrapper : WrappedIUnknown {
internal OleDbHResult InitializeAndCreateSession(OleDbConnectionString constr, SessionWrapper& sessionWrapper)
internal IDBInfoWrapper IDBInfo(OleDbConnectionInternal connection)
internal IDBPropertiesWrapper IDBProperties(OleDbConnectionInternal connection)
}
internal System.Data.OleDb.DBBindStatus : Enum {
public int value__
public DBBindStatus OK
public DBBindStatus BADORDINAL
public DBBindStatus UNSUPPORTEDCONVERSION
public DBBindStatus BADBINDINFO
public DBBindStatus BADSTORAGEFLAGS
public DBBindStatus NOINTERFACE
public DBBindStatus MULTIPLESTORAGE
}
internal System.Data.OleDb.DBPropSet : SafeHandle {
private int propertySetCount
private Exception lastErrorFromProvider
public bool IsInvalid
internal int PropertySetCount
internal void .ctor(int propertysetCount)
internal void .ctor(IDBProperties properties, PropertyIDSet propidset, OleDbHResult& hr)
internal void .ctor(IRowsetInfo properties, PropertyIDSet propidset, OleDbHResult& hr)
internal void .ctor(ICommandProperties properties, PropertyIDSet propidset, OleDbHResult& hr)
private void SetLastErrorInfo(OleDbHResult lastErrorHr)
public bool get_IsInvalid()
protected bool ReleaseHandle()
internal int get_PropertySetCount()
internal tagDBPROP[] GetPropertySet(int index, Guid& propertyset)
internal void SetPropertySet(int index, Guid propertySet, tagDBPROP[] properties)
internal DBPropSet CreateProperty(Guid propertySet, int propertyId, bool required, object value)
}
internal System.Data.OleDb.DBStatus : Enum {
public int value__
public DBStatus S_OK
public DBStatus E_BADACCESSOR
public DBStatus E_CANTCONVERTVALUE
public DBStatus S_ISNULL
public DBStatus S_TRUNCATED
public DBStatus E_SIGNMISMATCH
public DBStatus E_DATAOVERFLOW
public DBStatus E_CANTCREATE
public DBStatus E_UNAVAILABLE
public DBStatus E_PERMISSIONDENIED
public DBStatus E_INTEGRITYVIOLATION
public DBStatus E_SCHEMAVIOLATION
public DBStatus E_BADSTATUS
public DBStatus S_DEFAULT
public DBStatus S_CELLEMPTY
public DBStatus S_IGNORE
public DBStatus E_DOESNOTEXIST
public DBStatus E_INVALIDURL
public DBStatus E_RESOURCELOCKED
public DBStatus E_RESOURCEEXISTS
public DBStatus E_CANNOTCOMPLETE
public DBStatus E_VOLUMENOTFOUND
public DBStatus E_OUTOFSPACE
public DBStatus S_CANNOTDELETESOURCE
public DBStatus E_READONLY
public DBStatus E_RESOURCEOUTOFSCOPE
public DBStatus S_ALREADYEXISTS
public DBStatus E_CANCELED
public DBStatus E_NOTCOLLECTION
public DBStatus S_ROWSETCOLUMN
}
internal System.Data.OleDb.DualCoTaskMem : SafeHandle {
private IntPtr handle2
public bool IsInvalid
internal void .ctor(IDBInfo dbInfo, Int32[] literals, Int32& literalCount, IntPtr& literalInfo, OleDbHResult& hr)
internal void .ctor(IColumnsInfo columnsInfo, IntPtr& columnCount, IntPtr& columnInfos, OleDbHResult& hr)
internal void .ctor(IDBSchemaRowset dbSchemaRowset, Int32& schemaCount, IntPtr& schemaGuids, IntPtr& schemaRestrictions, OleDbHResult& hr)
internal void .ctor(IColumnsRowset icolumnsRowset, IntPtr& cOptColumns, OleDbHResult& hr)
public bool get_IsInvalid()
protected bool ReleaseHandle()
}
internal System.Data.OleDb.IDBInfoWrapper : ValueType {
private object _unknown
private IDBInfo _value
internal IDBInfo Value
internal void .ctor(object unknown)
internal IDBInfo get_Value()
public void Dispose()
}
internal System.Data.OleDb.IDBPropertiesWrapper : ValueType {
private object _unknown
private IDBProperties _value
internal IDBProperties Value
internal void .ctor(object unknown)
internal IDBProperties get_Value()
public void Dispose()
}
internal System.Data.OleDb.IDBSchemaRowsetWrapper : ValueType {
private object _unknown
private IDBSchemaRowset _value
internal IDBSchemaRowset Value
internal void .ctor(object unknown)
internal IDBSchemaRowset get_Value()
public void Dispose()
}
internal System.Data.OleDb.IOpenRowsetWrapper : ValueType {
private object _unknown
private IOpenRowset _value
internal IOpenRowset Value
internal void .ctor(object unknown)
internal IOpenRowset get_Value()
public void Dispose()
}
internal System.Data.OleDb.ITransactionJoinWrapper : ValueType {
private object _unknown
private ITransactionJoin _value
internal ITransactionJoin Value
internal void .ctor(object unknown)
internal ITransactionJoin get_Value()
public void Dispose()
}
internal System.Data.OleDb.MetaData : object {
internal Bindings bindings
internal ColumnBinding columnBinding
internal string columnName
internal Guid guid
internal int kind
internal IntPtr propid
internal string idname
internal NativeDBType type
internal IntPtr ordinal
internal int size
internal int flags
internal byte precision
internal byte scale
internal bool isAutoIncrement
internal bool isUnique
internal bool isKeyColumn
internal bool isHidden
internal string baseSchemaName
internal string baseCatalogName
internal string baseTableName
internal string baseColumnName
private int System.IComparable.CompareTo(object obj)
}
internal System.Data.OleDb.NativeDBType : object {
internal short EMPTY
internal short NULL
internal short I2
internal short I4
internal short R4
internal short R8
internal short CY
internal short DATE
internal short BSTR
internal short IDISPATCH
internal short ERROR
internal short BOOL
internal short VARIANT
internal short IUNKNOWN
internal short DECIMAL
internal short I1
internal short UI1
internal short UI2
internal short UI4
internal short I8
internal short UI8
internal short FILETIME
internal short DBUTCDATETIME
internal short DBTIME_EX
internal short GUID
internal short BYTES
internal short STR
internal short WSTR
internal short NUMERIC
internal short UDT
internal short DBDATE
internal short DBTIME
internal short DBTIMESTAMP
internal short HCHAPTER
internal short PROPVARIANT
internal short VARNUMERIC
internal short XML
internal short VECTOR
internal short ARRAY
internal short BYREF
internal short RESERVED
internal short HighMask
private string S_BINARY
private string S_BOOL
private string S_BSTR
private string S_CHAR
private string S_CY
private string S_DATE
private string S_DBDATE
private string S_DBTIME
private string S_DBTIMESTAMP
private string S_DECIMAL
private string S_ERROR
private string S_FILETIME
private string S_GUID
private string S_I1
private string S_I2
private string S_I4
private string S_I8
private string S_IDISPATCH
private string S_IUNKNOWN
private string S_LONGVARBINARY
private string S_LONGVARCHAR
private string S_NUMERIC
private string S_PROPVARIANT
private string S_R4
private string S_R8
private string S_UDT
private string S_UI1
private string S_UI2
private string S_UI4
private string S_UI8
private string S_VARBINARY
private string S_VARCHAR
private string S_VARIANT
private string S_VARNUMERIC
private string S_WCHAR
private string S_WVARCHAR
private string S_WLONGVARCHAR
private string S_XML
private NativeDBType D_Binary
private NativeDBType D_Boolean
private NativeDBType D_BSTR
private NativeDBType D_Char
private NativeDBType D_Currency
private NativeDBType D_Date
private NativeDBType D_DBDate
private NativeDBType D_DBTime
private NativeDBType D_DBTimeStamp
private NativeDBType D_Decimal
private NativeDBType D_Error
private NativeDBType D_Filetime
private NativeDBType D_Guid
private NativeDBType D_TinyInt
private NativeDBType D_SmallInt
private NativeDBType D_Integer
private NativeDBType D_BigInt
private NativeDBType D_IDispatch
private NativeDBType D_IUnknown
private NativeDBType D_LongVarBinary
private NativeDBType D_LongVarChar
private NativeDBType D_Numeric
private NativeDBType D_PropVariant
private NativeDBType D_Single
private NativeDBType D_Double
private NativeDBType D_UnsignedTinyInt
private NativeDBType D_UnsignedSmallInt
private NativeDBType D_UnsignedInt
private NativeDBType D_UnsignedBigInt
private NativeDBType D_VarBinary
private NativeDBType D_VarChar
private NativeDBType D_Variant
private NativeDBType D_VarNumeric
private NativeDBType D_WChar
private NativeDBType D_VarWChar
private NativeDBType D_LongVarWChar
private NativeDBType D_Chapter
private NativeDBType D_Empty
private NativeDBType D_Xml
private NativeDBType D_Udt
internal NativeDBType Default
internal byte MaximumDecimalPrecision
private int FixedDbPart
private int VarblDbPart
internal OleDbType enumOleDbType
internal DbType enumDbType
internal short dbType
internal short wType
internal Type dataType
internal int dbPart
internal bool isfixed
internal bool islong
internal byte maxpre
internal int fixlen
internal string dataSourceType
internal StringMemHandle dbString
internal bool IsVariableLength
private void .ctor(byte maxpre, int fixlen, bool isfixed, bool islong, OleDbType enumOleDbType, short dbType, string dbstring, Type dataType, short wType, DbType enumDbType)
internal bool HasHighBit(short value)
internal bool get_IsVariableLength()
internal NativeDBType FromDataType(OleDbType enumOleDbType)
internal NativeDBType FromSystemType(object value)
internal NativeDBType FromDbType(DbType dbType)
internal NativeDBType FromDBType(short dbType, bool isLong, bool isFixed)
}
internal System.Data.OleDb.ODB : object {
internal int ADODB_AlreadyClosedError
internal int ADODB_NextResultError
internal int InternalStateExecuting
internal int InternalStateFetching
internal int InternalStateClosed
internal int ExecutedIMultipleResults
internal int ExecutedIRowset
internal int ExecutedIRow
internal int PrepareICommandText
internal int InternalStateExecutingNot
internal int InternalStateFetchingNot
internal int InternalStateConnecting
internal int InternalStateOpen
internal int LargeDataSize
internal int CacheIncrement
internal IntPtr DBRESULTFLAG_DEFAULT
internal short VARIANT_TRUE
internal short VARIANT_FALSE
internal int CLSCTX_ALL
internal int MaxProgIdLength
internal int DBLITERAL_CATALOG_SEPARATOR
internal int DBLITERAL_QUOTE_PREFIX
internal int DBLITERAL_QUOTE_SUFFIX
internal int DBLITERAL_SCHEMA_SEPARATOR
internal int DBLITERAL_TABLE_NAME
internal int DBPROP_ACCESSORDER
internal int DBPROP_AUTH_CACHE_AUTHINFO
internal int DBPROP_AUTH_ENCRYPT_PASSWORD
internal int DBPROP_AUTH_INTEGRATED
internal int DBPROP_AUTH_MASK_PASSWORD
internal int DBPROP_AUTH_PASSWORD
internal int DBPROP_AUTH_PERSIST_ENCRYPTED
internal int DBPROP_AUTH_PERSIST_SENSITIVE_AUTHINFO
internal int DBPROP_AUTH_USERID
internal int DBPROP_CATALOGLOCATION
internal int DBPROP_COMMANDTIMEOUT
internal int DBPROP_CONNECTIONSTATUS
internal int DBPROP_CURRENTCATALOG
internal int DBPROP_DATASOURCENAME
internal int DBPROP_DBMSNAME
internal int DBPROP_DBMSVER
internal int DBPROP_GROUPBY
internal int DBPROP_HIDDENCOLUMNS
internal int DBPROP_IColumnsRowset
internal int DBPROP_IDENTIFIERCASE
internal int DBPROP_INIT_ASYNCH
internal int DBPROP_INIT_BINDFLAGS
internal int DBPROP_INIT_CATALOG
internal int DBPROP_INIT_DATASOURCE
internal int DBPROP_INIT_GENERALTIMEOUT
internal int DBPROP_INIT_HWND
internal int DBPROP_INIT_IMPERSONATION_LEVEL
internal int DBPROP_INIT_LCID
internal int DBPROP_INIT_LOCATION
internal int DBPROP_INIT_LOCKOWNER
internal int DBPROP_INIT_MODE
internal int DBPROP_INIT_OLEDBSERVICES
internal int DBPROP_INIT_PROMPT
internal int DBPROP_INIT_PROTECTION_LEVEL
internal int DBPROP_INIT_PROVIDERSTRING
internal int DBPROP_INIT_TIMEOUT
internal int DBPROP_IRow
internal int DBPROP_MAXROWS
internal int DBPROP_MULTIPLERESULTS
internal int DBPROP_ORDERBYCOLUNSINSELECT
internal int DBPROP_PROVIDERFILENAME
internal int DBPROP_QUOTEDIDENTIFIERCASE
internal int DBPROP_RESETDATASOURCE
internal int DBPROP_SQLSUPPORT
internal int DBPROP_UNIQUEROWS
internal int DBPROPSTATUS_OK
internal int DBPROPSTATUS_NOTSUPPORTED
internal int DBPROPSTATUS_BADVALUE
internal int DBPROPSTATUS_BADOPTION
internal int DBPROPSTATUS_BADCOLUMN
internal int DBPROPSTATUS_NOTALLSETTABLE
internal int DBPROPSTATUS_NOTSETTABLE
internal int DBPROPSTATUS_NOTSET
internal int DBPROPSTATUS_CONFLICTING
internal int DBPROPSTATUS_NOTAVAILABLE
internal int DBPROPOPTIONS_REQUIRED
internal int DBPROPOPTIONS_OPTIONAL
internal int DBPROPFLAGS_WRITE
internal int DBPROPFLAGS_SESSION
internal int DBPROPVAL_AO_RANDOM
internal int DBPROPVAL_CL_END
internal int DBPROPVAL_CL_START
internal int DBPROPVAL_CS_COMMUNICATIONFAILURE
internal int DBPROPVAL_CS_INITIALIZED
internal int DBPROPVAL_CS_UNINITIALIZED
internal int DBPROPVAL_GB_COLLATE
internal int DBPROPVAL_GB_CONTAINS_SELECT
internal int DBPROPVAL_GB_EQUALS_SELECT
internal int DBPROPVAL_GB_NO_RELATION
internal int DBPROPVAL_GB_NOT_SUPPORTED
internal int DBPROPVAL_IC_LOWER
internal int DBPROPVAL_IC_MIXED
internal int DBPROPVAL_IC_SENSITIVE
internal int DBPROPVAL_IC_UPPER
internal int DBPROPVAL_IN_ALLOWNULL
internal int DBPROPVAL_MR_NOTSUPPORTED
internal int DBPROPVAL_RD_RESETALL
internal int DBPROPVAL_OS_RESOURCEPOOLING
internal int DBPROPVAL_OS_TXNENLISTMENT
internal int DBPROPVAL_OS_CLIENTCURSOR
internal int DBPROPVAL_OS_AGR_AFTERSESSION
internal int DBPROPVAL_SQL_ODBC_MINIMUM
internal int DBPROPVAL_SQL_ESCAPECLAUSES
internal int DBKIND_GUID_NAME
internal int DBKIND_GUID_PROPID
internal int DBKIND_NAME
internal int DBKIND_PGUID_NAME
internal int DBKIND_PGUID_PROPID
internal int DBKIND_PROPID
internal int DBKIND_GUID
internal int DBCOLUMNFLAGS_ISBOOKMARK
internal int DBCOLUMNFLAGS_ISLONG
internal int DBCOLUMNFLAGS_ISFIXEDLENGTH
internal int DBCOLUMNFLAGS_ISNULLABLE
internal int DBCOLUMNFLAGS_ISROWSET
internal int DBCOLUMNFLAGS_ISROW
internal int DBCOLUMNFLAGS_ISROWSET_DBCOLUMNFLAGS_ISROW
internal int DBCOLUMNFLAGS_ISLONG_DBCOLUMNFLAGS_ISSTREAM
internal int DBCOLUMNFLAGS_ISROWID_DBCOLUMNFLAGS_ISROWVER
internal int DBCOLUMNFLAGS_WRITE_DBCOLUMNFLAGS_WRITEUNKNOWN
internal int DBCOLUMNFLAGS_ISNULLABLE_DBCOLUMNFLAGS_MAYBENULL
internal int DBACCESSOR_ROWDATA
internal int DBACCESSOR_PARAMETERDATA
internal int DBPARAMTYPE_INPUT
internal int DBPARAMTYPE_INPUTOUTPUT
internal int DBPARAMTYPE_OUTPUT
internal int DBPARAMTYPE_RETURNVALUE
internal int ParameterDirectionFlag
internal UInt32 DB_UNSEARCHABLE
internal UInt32 DB_LIKE_ONLY
internal UInt32 DB_ALL_EXCEPT_LIKE
internal UInt32 DB_SEARCHABLE
internal IntPtr DB_INVALID_HACCESSOR
internal IntPtr DB_NULL_HCHAPTER
internal IntPtr DB_NULL_HROW
internal int SizeOf_tagDBBINDING
internal int SizeOf_tagDBCOLUMNINFO
internal int SizeOf_tagDBLITERALINFO
internal int SizeOf_tagDBPROPSET
internal int SizeOf_tagDBPROP
internal int SizeOf_tagDBPROPINFOSET
internal int SizeOf_tagDBPROPINFO
internal int SizeOf_tagDBPROPIDSET
internal int SizeOf_Guid
internal int SizeOf_Variant
internal int OffsetOf_tagDBPROP_Status
internal int OffsetOf_tagDBPROP_Value
internal int OffsetOf_tagDBPROPSET_Properties
internal int OffsetOf_tagDBPROPINFO_Value
internal int OffsetOf_tagDBPROPIDSET_PropertySet
internal int OffsetOf_tagDBLITERALINFO_it
internal int OffsetOf_tagDBBINDING_obValue
internal int OffsetOf_tagDBBINDING_wType
internal Guid IID_NULL
internal Guid IID_IUnknown
internal Guid IID_IDBInitialize
internal Guid IID_IDBCreateSession
internal Guid IID_IDBCreateCommand
internal Guid IID_ICommandText
internal Guid IID_IMultipleResults
internal Guid IID_IRow
internal Guid IID_IRowset
internal Guid IID_ISQLErrorInfo
internal Guid CLSID_DataLinks
internal Guid DBGUID_DEFAULT
internal Guid DBGUID_ROWSET
internal Guid DBGUID_ROW
internal Guid DBGUID_ROWDEFAULTSTREAM
internal Guid CLSID_MSDASQL
internal object DBCOL_SPECIALCOL
internal Char[] ErrorTrimCharacters
internal string Asynchronous_Processing
internal string AttachDBFileName
internal string Connect_Timeout
internal string Data_Source
internal string File_Name
internal string Initial_Catalog
internal string Password
internal string Persist_Security_Info
internal string Provider
internal string Pwd
internal string User_ID
internal string Current_Catalog
internal string DBMS_Version
internal string Properties
internal string DataLinks_CLSID
internal string OLEDB_SERVICES
internal string DefaultDescription_MSDASQL
internal string MSDASQL
internal string MSDASQLdot
internal string _Add
internal string _Keyword
internal string _Name
internal string _Value
internal string DBCOLUMN_BASECATALOGNAME
internal string DBCOLUMN_BASECOLUMNNAME
internal string DBCOLUMN_BASESCHEMANAME
internal string DBCOLUMN_BASETABLENAME
internal string DBCOLUMN_COLUMNSIZE
internal string DBCOLUMN_FLAGS
internal string DBCOLUMN_GUID
internal string DBCOLUMN_IDNAME
internal string DBCOLUMN_ISAUTOINCREMENT
internal string DBCOLUMN_ISUNIQUE
internal string DBCOLUMN_KEYCOLUMN
internal string DBCOLUMN_NAME
internal string DBCOLUMN_NUMBER
internal string DBCOLUMN_PRECISION
internal string DBCOLUMN_PROPID
internal string DBCOLUMN_SCALE
internal string DBCOLUMN_TYPE
internal string DBCOLUMN_TYPEINFO
internal string PRIMARY_KEY
internal string UNIQUE
internal string COLUMN_NAME
internal string NULLS
internal string INDEX_NAME
internal string PARAMETER_NAME
internal string ORDINAL_POSITION
internal string PARAMETER_TYPE
internal string IS_NULLABLE
internal string DATA_TYPE
internal string CHARACTER_MAXIMUM_LENGTH
internal string NUMERIC_PRECISION
internal string NUMERIC_SCALE
internal string TYPE_NAME
internal string ORDINAL_POSITION_ASC
internal string SchemaGuids
internal string Schema
internal string RestrictionSupport
internal string DbInfoKeywords
internal string Keyword
internal void CommandParameterStatus(StringBuilder builder, int index, DBStatus status)
internal Exception CommandParameterStatus(string value, Exception inner)
internal Exception UninitializedParameters(int index, OleDbType dbtype)
internal Exception BadStatus_ParamAcc(int index, DBBindStatus status)
internal Exception NoProviderSupportForParameters(string provider, Exception inner)
internal Exception NoProviderSupportForSProcResetParameters(string provider)
internal void PropsetSetFailure(StringBuilder builder, string description, OleDbPropertyStatus status)
internal Exception PropsetSetFailure(string value, Exception inner)
internal ArgumentException SchemaRowsetsNotSupported(string provider)
internal OleDbException NoErrorInformation(string provider, OleDbHResult hr, Exception inner)
internal InvalidOperationException MDACNotAvailable(Exception inner)
internal ArgumentException MSDASQLNotSupported()
internal InvalidOperationException CommandTextNotSupported(string provider, Exception inner)
internal InvalidOperationException PossiblePromptNotUserInteractive()
internal InvalidOperationException ProviderUnavailable(string provider, Exception inner)
internal InvalidOperationException TransactionsNotSupported(string provider, Exception inner)
internal ArgumentException AsynchronousNotSupported()
internal ArgumentException NoProviderSpecified()
internal ArgumentException InvalidProviderSpecified()
internal ArgumentException InvalidRestrictionsDbInfoKeywords(string parameter)
internal ArgumentException InvalidRestrictionsDbInfoLiteral(string parameter)
internal ArgumentException InvalidRestrictionsSchemaGuids(string parameter)
internal ArgumentException NotSupportedSchemaTable(Guid schema, OleDbConnection connection)
internal Exception InvalidOleDbType(OleDbType value)
internal InvalidOperationException BadAccessor()
internal InvalidCastException ConversionRequired()
internal InvalidCastException CantConvertValue()
internal InvalidOperationException SignMismatch(Type type)
internal InvalidOperationException DataOverflow(Type type)
internal InvalidOperationException CantCreate(Type type)
internal InvalidOperationException Unavailable(Type type)
internal InvalidOperationException UnexpectedStatusValue(DBStatus status)
internal InvalidOperationException GVtUnknown(int wType)
internal InvalidOperationException SVtUnknown(int wType)
internal InvalidOperationException BadStatusRowAccessor(int i, DBBindStatus rowStatus)
internal InvalidOperationException ThreadApartmentState(Exception innerException)
internal ArgumentException Fill_NotADODB(string parameter)
internal ArgumentException Fill_EmptyRecordSet(string parameter, Exception innerException)
internal ArgumentException Fill_EmptyRecord(string parameter, Exception innerException)
internal string NoErrorMessage(OleDbHResult errorcode)
internal string FailedGetDescription(OleDbHResult errorcode)
internal string FailedGetSource(OleDbHResult errorcode)
internal InvalidOperationException DBBindingGetVector()
internal OleDbHResult GetErrorDescription(IErrorInfo errorInfo, OleDbHResult hresult, String& message)
internal ArgumentException ISourcesRowsetNotSupported()
internal InvalidOperationException IDBInfoNotSupported()
internal string ELookup(OleDbHResult hr)
}
public System.Data.OleDb.OleDbCommand : DbCommand {
private string _commandText
private CommandType _commandType
private int _commandTimeout
private UpdateRowSource _updatedRowSource
private bool _designTimeInvisible
private OleDbConnection _connection
private OleDbTransaction _transaction
private int _objectTypeCount
internal int ObjectID
private OleDbParameterCollection _parameters
private ICommandText _icommandText
private CommandBehavior commandBehavior
private Bindings _dbBindings
internal bool canceling
private bool _isPrepared
private bool _executeQuery
private bool _trackingForClose
private bool _hasDataReader
private IntPtr _recordsAffected
private int _changeID
private int _lastChangeID
private Bindings ParameterBindings
public string CommandText
public int CommandTimeout
public CommandType CommandType
public OleDbConnection Connection
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public bool DesignTimeVisible
public OleDbParameterCollection Parameters
public OleDbTransaction Transaction
public UpdateRowSource UpdatedRowSource
public void .ctor(string cmdText)
public void .ctor(string cmdText, OleDbConnection connection)
public void .ctor(string cmdText, OleDbConnection connection, OleDbTransaction transaction)
private void .ctor(OleDbCommand from)
private Bindings get_ParameterBindings()
private void set_ParameterBindings(Bindings value)
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public void ResetCommandTimeout()
private bool ShouldSerializeCommandTimeout()
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public OleDbConnection get_Connection()
public void set_Connection(OleDbConnection value)
private void ResetConnection()
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public OleDbParameterCollection get_Parameters()
private bool HasParameters()
public OleDbTransaction get_Transaction()
public void set_Transaction(OleDbTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
private IAccessor IAccessor()
internal ICommandProperties ICommandProperties()
private ICommandPrepare ICommandPrepare()
private ICommandWithParameters ICommandWithParameters()
private void CreateAccessor()
private void ApplyParameterBindings(ICommandWithParameters commandWithParameters, tagDBPARAMBINDINFO[] bindInfo)
public void Cancel()
public OleDbCommand Clone()
private object System.ICloneable.Clone()
internal void CloseCommandFromConnection(bool canceling)
internal void CloseInternal()
internal void CloseFromDataReader(Bindings bindings)
private void CloseInternalCommand()
private void CloseInternalParameters()
public OleDbParameter CreateParameter()
protected DbParameter CreateDbParameter()
protected void Dispose(bool disposing)
public OleDbDataReader ExecuteReader()
private IDataReader System.Data.IDbCommand.ExecuteReader()
public OleDbDataReader ExecuteReader(CommandBehavior behavior)
private IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior)
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
private OleDbDataReader ExecuteReaderInternal(CommandBehavior behavior, string method)
private int ExecuteCommand(CommandBehavior behavior, Object& executeResult)
private int ExecuteCommandText(Object& executeResult)
private int ExecuteCommandTextForMultpleResults(tagDBPARAMS dbParams, Object& executeResult)
private int ExecuteCommandTextForSingleResult(tagDBPARAMS dbParams, Object& executeResult)
private int ExecuteCommandTextForSingleRow(tagDBPARAMS dbParams, Object& executeResult)
private void ExecuteCommandTextErrorHandling(OleDbHResult hr)
private Exception ExecuteCommandTextSpecialErrorHandling(OleDbHResult hr, Exception e)
public int ExecuteNonQuery()
public object ExecuteScalar()
private int ExecuteTableDirect(CommandBehavior behavior, Object& executeResult)
private string ExpandCommandText()
private string ExpandOdbcMaximumToText(string sproctext, int parameterCount)
private string ExpandOdbcMinimumToText(string sproctext, int parameterCount)
private string ExpandStoredProcedureToText(string sproctext)
private void ParameterCleanup()
private bool InitializeCommand(CommandBehavior behavior, bool throwifnotsupported)
private void PropertyChanging()
public void Prepare()
private void PrepareCommandText(int expectedExecutionCount)
private void ProcessResults(OleDbHResult hr)
private void ProcessResultsNoReset(OleDbHResult hr)
internal object GetPropertyValue(Guid propertySet, int propertyID)
private bool PropertiesOnCommand(bool throwNotSupported)
private DBPropSet CommandPropertySets()
internal Bindings TakeBindingOwnerShip()
private void ValidateConnection(string method)
private void ValidateConnectionAndTransaction(string method)
}
public System.Data.OleDb.OleDbCommandBuilder : DbCommandBuilder {
public OleDbDataAdapter DataAdapter
public void .ctor(OleDbDataAdapter adapter)
public OleDbDataAdapter get_DataAdapter()
public void set_DataAdapter(OleDbDataAdapter value)
private void OleDbRowUpdatingHandler(object sender, OleDbRowUpdatingEventArgs ruevent)
public OleDbCommand GetInsertCommand()
public OleDbCommand GetInsertCommand(bool useColumnsForParameterNames)
public OleDbCommand GetUpdateCommand()
public OleDbCommand GetUpdateCommand(bool useColumnsForParameterNames)
public OleDbCommand GetDeleteCommand()
public OleDbCommand GetDeleteCommand(bool useColumnsForParameterNames)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause)
public void DeriveParameters(OleDbCommand command)
private OleDbParameter[] DeriveParametersFromStoredProcedure(OleDbConnection connection, OleDbCommand command)
private ParameterDirection ConvertToParameterDirection(int value)
public string QuoteIdentifier(string unquotedIdentifier)
public string QuoteIdentifier(string unquotedIdentifier, OleDbConnection connection)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
public string UnquoteIdentifier(string quotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier, OleDbConnection connection)
}
public System.Data.OleDb.OleDbConnection : DbConnection {
private DbConnectionFactory _connectionFactory
internal CodeAccessPermission ExecutePermission
private DbConnectionOptions _userConnectionOptions
private DbConnectionPoolGroup _poolGroup
private DbConnectionInternal _innerConnection
private int _closeCount
private int _objectTypeCount
internal int ObjectID
private object EventInfoMessage
internal int CloseCount
internal DbConnectionFactory ConnectionFactory
internal DbConnectionOptions ConnectionOptions
internal DbConnectionInternal InnerConnection
internal DbConnectionPoolGroup PoolGroup
internal DbConnectionOptions UserConnectionOptions
public string ConnectionString
private OleDbConnectionString OleDbConnectionStringValue
public int ConnectionTimeout
public string Database
public string DataSource
internal bool IsOpen
internal OleDbTransaction LocalTransaction
public string Provider
internal OleDbConnectionPoolGroupProviderInfo ProviderInfo
public string ServerVersion
public ConnectionState State
public void .ctor(string connectionString)
private void .ctor(OleDbConnection connection)
private void CopyFrom(OleDbConnection connection)
internal int get_CloseCount()
internal DbConnectionFactory get_ConnectionFactory()
internal DbConnectionOptions get_ConnectionOptions()
private string ConnectionString_Get()
private void ConnectionString_Set(string value)
private void ConnectionString_Set(DbConnectionPoolKey key)
internal DbConnectionInternal get_InnerConnection()
internal DbConnectionPoolGroup get_PoolGroup()
internal void set_PoolGroup(DbConnectionPoolGroup value)
internal DbConnectionOptions get_UserConnectionOptions()
internal void Abort(Exception e)
internal void AddWeakReference(object value, int tag)
protected DbCommand CreateDbCommand()
private CodeAccessPermission CreateExecutePermission()
protected void Dispose(bool disposing)
private void EnlistDistributedTransactionHelper(ITransaction transaction)
public void EnlistTransaction(Transaction transaction)
private DbMetaDataFactory GetMetaDataFactory(DbConnectionInternal internalConnection)
internal DbMetaDataFactory GetMetaDataFactoryInternal(DbConnectionInternal internalConnection)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
internal void NotifyWeakReference(int message)
internal void PermissionDemand()
internal void RemoveWeakReference(object value)
internal void SetInnerConnectionEvent(DbConnectionInternal to)
internal bool SetInnerConnectionFrom(DbConnectionInternal to, DbConnectionInternal from)
internal void SetInnerConnectionTo(DbConnectionInternal to)
internal void VerifyExecutePermission()
public string get_ConnectionString()
public void set_ConnectionString(string value)
private OleDbConnectionString get_OleDbConnectionStringValue()
public int get_ConnectionTimeout()
public string get_Database()
public string get_DataSource()
internal bool get_IsOpen()
internal void set_LocalTransaction(OleDbTransaction value)
public string get_Provider()
internal OleDbConnectionPoolGroupProviderInfo get_ProviderInfo()
public string get_ServerVersion()
public ConnectionState get_State()
public void ResetState()
public void add_InfoMessage(OleDbInfoMessageEventHandler value)
public void remove_InfoMessage(OleDbInfoMessageEventHandler value)
internal ICommandText ICommandText()
private IDBPropertiesWrapper IDBProperties()
internal IOpenRowsetWrapper IOpenRowset()
internal int SqlSupport()
internal bool SupportMultipleResults()
internal bool SupportIRow(OleDbCommand cmd)
internal int QuotedIdentifierCase()
public OleDbTransaction BeginTransaction()
public OleDbTransaction BeginTransaction(IsolationLevel isolationLevel)
public void ChangeDatabase(string value)
internal void CheckStateOpen(string method)
private object System.ICloneable.Clone()
public void Close()
public OleDbCommand CreateCommand()
private void DisposeMe(bool disposing)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public void EnlistDistributedTransaction(ITransaction transaction)
internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID)
internal object GetDataSourceValue(Guid propertySet, int propertyID)
private OleDbConnectionInternal GetOpenConnection()
internal void GetLiteralQuotes(string method, String& quotePrefix, String& quoteSuffix)
public DataTable GetOleDbSchemaTable(Guid schema, Object[] restrictions)
internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions)
internal bool HasLiveReader(OleDbCommand cmd)
internal void OnInfoMessage(IErrorInfo errorInfo, OleDbHResult errorCode)
public void Open()
internal void SetDataSourcePropertyValue(Guid propertySet, int propertyID, string description, bool required, object value)
internal bool SupportSchemaRowset(Guid schema)
internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method)
internal Exception ProcessResults(OleDbHResult hresult, OleDbConnection connection, object src)
public void ReleaseObjectPool()
private void ResetState(OleDbConnection connection)
}
internal System.Data.OleDb.OleDbConnectionFactory : DbConnectionFactory {
private string _metaDataXml
private string _defaultMetaDataXml
public OleDbConnectionFactory SingletonInstance
public DbProviderFactory ProviderFactory
public DbProviderFactory get_ProviderFactory()
protected DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)
protected DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous)
protected DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory)
protected DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions connectionOptions)
internal DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions)
internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection)
internal DbConnectionInternal GetInnerConnection(DbConnection connection)
protected int GetObjectId(DbConnection connection)
internal void PermissionDemand(DbConnection outerConnection)
internal void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup)
internal void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to)
internal bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from)
internal void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to)
}
internal System.Data.OleDb.OleDbConnectionInternal : DbConnectionInternal {
private OleDbServicesWrapper modreq(System.Runtime.CompilerServices.IsVolatile) idataInitialize
private object dataInitializeLock
internal OleDbConnectionString ConnectionString
private DataSourceWrapper _datasrcwrp
private SessionWrapper _sessionwrp
private WeakReference weakTransaction
private bool _unEnlistDuringDeactivate
internal OleDbConnection Connection
internal bool HasSession
internal OleDbTransaction LocalTransaction
private string Provider
public string ServerVersion
internal void .ctor(OleDbConnectionString constr, OleDbConnection connection)
internal OleDbConnection get_Connection()
internal bool get_HasSession()
internal OleDbTransaction get_LocalTransaction()
internal void set_LocalTransaction(OleDbTransaction value)
private string get_Provider()
public string get_ServerVersion()
internal IDBPropertiesWrapper IDBProperties()
internal IOpenRowsetWrapper IOpenRowset()
private IDBInfoWrapper IDBInfo()
internal IDBSchemaRowsetWrapper IDBSchemaRowset()
internal ITransactionJoinWrapper ITransactionJoin()
internal ICommandText ICommandText()
protected void Activate(Transaction transaction)
public DbTransaction BeginTransaction(IsolationLevel isolationLevel)
protected DbReferenceCollection CreateReferenceCollection()
protected void Deactivate()
public void Dispose()
public void EnlistTransaction(Transaction transaction)
internal void EnlistTransactionInternal(Transaction transaction)
internal object GetDataSourceValue(Guid propertySet, int propertyID)
internal object GetDataSourcePropertyValue(Guid propertySet, int propertyID)
internal DataTable BuildInfoLiterals()
internal DataTable BuildInfoKeywords()
internal bool AddInfoKeywordsToTable(DataTable table, DataColumn keyword)
internal DataTable BuildSchemaGuids()
internal string GetLiteralInfo(int literal)
internal SchemaSupport[] GetSchemaRowsetInformation()
internal DataTable GetSchemaRowset(Guid schema, Object[] restrictions)
internal bool HasLiveReader(OleDbCommand cmd)
private void ProcessResults(OleDbHResult hr)
internal bool SupportSchemaRowset(Guid schema)
private object CreateInstanceDataLinks()
private OleDbServicesWrapper GetObjectPool()
private void VersionCheck()
private void SetMTAApartmentState()
public void ReleaseObjectPool()
internal OleDbTransaction ValidateTransaction(OleDbTransaction transaction, string method)
internal Dictionary`2<string, OleDbPropertyInfo> GetPropertyInfo(Guid[] propertySets)
}
internal System.Data.OleDb.OleDbConnectionPoolGroupProviderInfo : DbConnectionPoolGroupProviderInfo {
private bool _hasQuoteFix
private string _quotePrefix
private string _quoteSuffix
internal bool HasQuoteFix
internal string QuotePrefix
internal string QuoteSuffix
internal bool get_HasQuoteFix()
internal string get_QuotePrefix()
internal string get_QuoteSuffix()
internal void SetQuoteFix(string prefix, string suffix)
}
internal System.Data.OleDb.OleDbConnectionString : DbConnectionOptions {
internal bool PossiblePrompt
internal string ActualConnectionString
private string _expandedConnectionString
internal SchemaSupport[] _schemaSupport
internal int _sqlSupport
internal bool _supportMultipleResults
internal bool _supportIRow
internal bool _hasSqlSupport
internal bool _hasSupportMultipleResults
internal bool _hasSupportIRow
private int _oledbServices
internal IUnknownQueryInterface DangerousDataSourceIUnknownQueryInterface
internal IDBInitializeInitialize DangerousIDBInitializeInitialize
internal IDBCreateSessionCreateSession DangerousIDBCreateSessionCreateSession
internal IDBCreateCommandCreateCommand DangerousIDBCreateCommandCreateCommand
internal bool HaveQueriedForCreateCommand
internal int ConnectTimeout
internal string DataSource
internal string InitialCatalog
internal string Provider
internal int OleDbServices
internal SchemaSupport[] SchemaSupport
private int UdlPoolSize
internal void .ctor(string connectionString, bool validate)
internal int get_ConnectTimeout()
internal string get_DataSource()
internal string get_InitialCatalog()
internal string get_Provider()
internal int get_OleDbServices()
internal SchemaSupport[] get_SchemaSupport()
internal void set_SchemaSupport(SchemaSupport[] value)
protected internal PermissionSet CreatePermissionSet()
protected internal string Expand()
internal int GetSqlSupport(OleDbConnection connection)
internal bool GetSupportIRow(OleDbConnection connection, OleDbCommand command)
internal bool GetSupportMultipleResults(OleDbConnection connection)
private int get_UdlPoolSize()
private string LoadStringFromStorage(string udlfilename)
private string LoadStringFromFileStorage(string udlfilename)
private string ValidateConnectionString(string connectionString)
internal bool IsMSDASQL(string progid)
private void ValidateProvider(string progid)
internal void ReleaseObjectPool()
}
public System.Data.OleDb.OleDbConnectionStringBuilder : DbConnectionStringBuilder {
private String[] _validKeywords
private Dictionary`2<string, Keywords> _keywords
private String[] _knownKeywords
private Dictionary`2<string, OleDbPropertyInfo> _propertyInfo
private string _fileName
private string _dataSource
private string _provider
private int _oleDbServices
private bool _persistSecurityInfo
public object Item
public string DataSource
public string FileName
public int OleDbServices
public bool PersistSecurityInfo
public string Provider
public ICollection Keys
public void .ctor(string connectionString)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public string get_DataSource()
public void set_DataSource(string value)
public string get_FileName()
public void set_FileName(string value)
public int get_OleDbServices()
public void set_OleDbServices(int value)
public bool get_PersistSecurityInfo()
public void set_PersistSecurityInfo(bool value)
public string get_Provider()
public void set_Provider(string value)
public ICollection get_Keys()
public bool ContainsKey(string keyword)
private bool ConvertToBoolean(object value)
private int ConvertToInt32(object value)
private string ConvertToString(object value)
public void Clear()
private object GetAt(Keywords index)
public bool Remove(string keyword)
private void Reset(Keywords index)
private void ClearPropertyDescriptors()
private void RestartProvider()
private void SetValue(string keyword, bool value)
private void SetValue(string keyword, int value)
private void SetValue(string keyword, string value)
public bool TryGetValue(string keyword, Object& value)
private Dictionary`2<string, OleDbPropertyInfo> GetProviderInfo(string provider)
protected void GetProperties(Hashtable propertyDescriptors)
}
public System.Data.OleDb.OleDbDataAdapter : DbDataAdapter {
private object EventRowUpdated
private object EventRowUpdating
private OleDbCommand _deleteCommand
private OleDbCommand _insertCommand
private OleDbCommand _selectCommand
private OleDbCommand _updateCommand
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
public OleDbCommand DeleteCommand
public OleDbCommand InsertCommand
public OleDbCommand SelectCommand
public OleDbCommand UpdateCommand
public void .ctor(OleDbCommand selectCommand)
public void .ctor(string selectCommandText, string selectConnectionString)
public void .ctor(string selectCommandText, OleDbConnection selectConnection)
private void .ctor(OleDbDataAdapter from)
public OleDbCommand get_DeleteCommand()
public void set_DeleteCommand(OleDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
public OleDbCommand get_InsertCommand()
public void set_InsertCommand(OleDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
public OleDbCommand get_SelectCommand()
public void set_SelectCommand(OleDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
public OleDbCommand get_UpdateCommand()
public void set_UpdateCommand(OleDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
public void add_RowUpdated(OleDbRowUpdatedEventHandler value)
public void remove_RowUpdated(OleDbRowUpdatedEventHandler value)
public void add_RowUpdating(OleDbRowUpdatingEventHandler value)
public void remove_RowUpdating(OleDbRowUpdatingEventHandler value)
private object System.ICloneable.Clone()
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
internal void FillDataTable(OleDbDataReader dataReader, DataTable[] dataTables)
public int Fill(DataTable dataTable, object ADODBRecordSet)
public int Fill(DataSet dataSet, object ADODBRecordSet, string srcTable)
private int FillFromADODB(object data, object adodb, string srcTable, bool multipleResults)
private int FillFromRecordset(object data, ADORecordsetConstruction recordset, string srcTable, Boolean& incrementResultCount)
private int FillFromRecord(object data, ADORecordConstruction record, string srcTable)
private void FillClose(bool isrecordset, object value)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
private string GetSourceTableName(string srcTable, int index)
}
public System.Data.OleDb.OleDbDataReader : DbDataReader {
private CommandBehavior _commandBehavior
private int _objectTypeCount
internal int ObjectID
private OleDbConnection _connection
private OleDbCommand _command
private Bindings _parameterBindings
private IMultipleResults _imultipleResults
private IRowset _irowset
private IRow _irow
private ChapterHandle _chapterHandle
private int _depth
private bool _isClosed
private bool _isRead
private bool _hasRows
private bool _hasRowsReadCheck
private long _sequentialBytesRead
private int _sequentialOrdinal
private Bindings[] _bindings
private int _nextAccessorForRetrieval
private int _nextValueForRetrieval
private IntPtr _recordsAffected
private bool _useIColumnsRowset
private bool _sequentialAccess
private bool _singleRow
private IntPtr _rowHandleFetchCount
private RowHandleBuffer _rowHandleNativeBuffer
private IntPtr _rowFetchedCount
private int _currentRow
private DataTable _dbSchemaTable
private int _visibleFieldCount
private MetaData[] _metadata
private FieldNameLookup _fieldNameLookup
internal OleDbCommand Command
public int Depth
public int FieldCount
public bool HasRows
public bool IsClosed
private MetaData[] MetaData
public int RecordsAffected
public object Item
public object Item
public int VisibleFieldCount
internal void .ctor(OleDbConnection connection, OleDbCommand command, int depth, CommandBehavior commandBehavior)
private void Initialize()
internal void InitializeIMultipleResults(object result)
internal void InitializeIRowset(object result, ChapterHandle chapterHandle, IntPtr recordsAffected)
internal void InitializeIRow(object result, IntPtr recordsAffected)
internal OleDbCommand get_Command()
public int get_Depth()
public int get_FieldCount()
public bool get_HasRows()
public bool get_IsClosed()
private MetaData[] get_MetaData()
public int get_RecordsAffected()
public object get_Item(int index)
public object get_Item(string name)
private IAccessor IAccessor()
private IRowsetInfo IRowsetInfo()
private IRowset IRowset()
private IRow IRow()
public DataTable GetSchemaTable()
internal void BuildMetaInfo()
private DataTable BuildSchemaTable(MetaData[] metadata)
private void BuildSchemaTableInfo(object handle, bool filterITypeInfo, bool filterChapters)
private void BuildSchemaTableInfoTable(int columnCount, IntPtr columnInfos, bool filterITypeInfo, bool filterChapters)
private void BuildSchemaTableRowset(object handle)
public void Close()
internal void CloseReaderFromConnection(bool canceling)
private void DisposeManagedRowset()
private void DisposeNativeMultipleResults()
private void DisposeNativeRowset()
private void DisposeNativeRow()
private void DisposeOpenResults()
public bool GetBoolean(int ordinal)
public byte GetByte(int ordinal)
private ColumnBinding DoSequentialCheck(int ordinal, long dataIndex, string method)
public long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length)
public char GetChar(int ordinal)
public OleDbDataReader GetData(int ordinal)
protected DbDataReader GetDbDataReader(int ordinal)
internal OleDbDataReader ResetChapter(int bindingIndex, int index, RowBinding rowbinding, int valueOffset)
private OleDbDataReader GetDataForReader(IntPtr ordinal, RowBinding rowbinding, int valueOffset)
public string GetDataTypeName(int index)
public DateTime GetDateTime(int ordinal)
public decimal GetDecimal(int ordinal)
public double GetDouble(int ordinal)
public IEnumerator GetEnumerator()
public Type GetFieldType(int index)
public float GetFloat(int ordinal)
public Guid GetGuid(int ordinal)
public short GetInt16(int ordinal)
public int GetInt32(int ordinal)
public long GetInt64(int ordinal)
public string GetName(int index)
public int GetOrdinal(string name)
public string GetString(int ordinal)
public TimeSpan GetTimeSpan(int ordinal)
private MetaData DoValueCheck(int ordinal)
private ColumnBinding GetColumnBinding(int ordinal)
private ColumnBinding GetValueBinding(MetaData info)
public object GetValue(int ordinal)
public int GetValues(Object[] values)
private bool IsCommandBehavior(CommandBehavior condition)
public bool IsDBNull(int ordinal)
private void ProcessResults(OleDbHResult hr)
private IntPtr AddRecordsAffected(IntPtr recordsAffected, IntPtr affected)
public int get_VisibleFieldCount()
internal void HasRowsRead()
internal OleDbException NextResults(IMultipleResults imultipleResults, OleDbConnection connection, OleDbCommand command, IntPtr& recordsAffected)
private void NextResultsInfinite()
public bool NextResult()
public bool Read()
private bool ReadRow()
private bool ReadRowset()
private void ReleaseCurrentRow()
private void CreateAccessors(bool allowMultipleAccessor)
private Bindings[] CreateBindingsFromMetaData(bool allowMultipleAccessor)
private void GetRowHandles()
private void GetRowDataFromHandle()
private void ReleaseRowHandles()
private object GetPropertyValue(int propertyId)
private object GetPropertyOnRowset(Guid propertySet, int propertyID)
private void GetRowValue()
private int IndexOf(Hashtable hash, string name)
private void AppendSchemaInfo()
private int AppendSchemaPrimaryKey(Hashtable baseColumnNames, Object[] restrictions)
private void AppendSchemaUniqueIndexAsKey(Hashtable baseColumnNames, Object[] restrictions)
private MetaData FindMetaData(string name)
internal void DumpToSchemaTable(IRowset rowset)
internal void GenerateSchemaTable(OleDbDataReader dataReader, object handle, CommandBehavior behavior)
private bool DoColumnDropFilter(int flags)
private bool IsLong(int flags)
private bool IsFixed(int flags)
private bool IsRowVersion(int flags)
private bool AllowDBNull(int flags)
private bool AllowDBNullMaybeNull(int flags)
private bool IsReadOnly(int flags)
}
public System.Data.OleDb.OleDbEnumerator : object {
public DataTable GetElements()
public OleDbDataReader GetEnumerator(Type type)
internal OleDbDataReader GetEnumeratorFromType(Type type)
private OleDbDataReader GetEnumeratorReader(object value)
public OleDbDataReader GetRootEnumerator()
}
public System.Data.OleDb.OleDbError : object {
private string message
private string source
private string sqlState
private int nativeError
public string Message
public int NativeError
public string Source
public string SQLState
internal void .ctor(IErrorRecords errorRecords, int index)
public string get_Message()
public int get_NativeError()
public string get_Source()
public string get_SQLState()
public string ToString()
}
public System.Data.OleDb.OleDbErrorCollection : object {
private ArrayList items
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public int Count
public OleDbError Item
internal void .ctor(IErrorInfo errorInfo)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public int get_Count()
public OleDbError get_Item(int index)
internal void AddRange(ICollection c)
public void CopyTo(Array array, int index)
public void CopyTo(OleDbError[] array, int index)
public IEnumerator GetEnumerator()
}
public System.Data.OleDb.OleDbException : DbException {
private OleDbErrorCollection oledbErrors
public int ErrorCode
public OleDbErrorCollection Errors
internal void .ctor(string message, OleDbHResult errorCode, Exception inner)
internal void .ctor(OleDbException previous, Exception inner)
private void .ctor(string message, Exception inner, string source, OleDbHResult errorCode, OleDbErrorCollection errors)
private void .ctor(SerializationInfo si, StreamingContext sc)
public void GetObjectData(SerializationInfo si, StreamingContext context)
public int get_ErrorCode()
public OleDbErrorCollection get_Errors()
internal bool ShouldSerializeErrors()
internal OleDbException CreateException(IErrorInfo errorInfo, OleDbHResult errorCode, Exception inner)
internal OleDbException CombineExceptions(List`1<OleDbException> exceptions)
}
public System.Data.OleDb.OleDbFactory : DbProviderFactory {
public OleDbFactory Instance
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
internal System.Data.OleDb.OleDbHResult : Enum {
public int value__
public OleDbHResult CO_E_CLASSSTRING
public OleDbHResult REGDB_E_CLASSNOTREG
public OleDbHResult CO_E_NOTINITIALIZED
public OleDbHResult S_OK
public OleDbHResult S_FALSE
public OleDbHResult E_UNEXPECTED
public OleDbHResult E_NOTIMPL
public OleDbHResult E_OUTOFMEMORY
public OleDbHResult E_INVALIDARG
public OleDbHResult E_NOINTERFACE
public OleDbHResult E_POINTER
public OleDbHResult E_HANDLE
public OleDbHResult E_ABORT
public OleDbHResult E_FAIL
public OleDbHResult E_ACCESSDENIED
public OleDbHResult DB_E_BADACCESSORHANDLE
public OleDbHResult DB_E_ROWLIMITEXCEEDED
public OleDbHResult DB_E_REOLEDBNLYACCESSOR
public OleDbHResult DB_E_SCHEMAVIOLATION
public OleDbHResult DB_E_BADROWHANDLE
public OleDbHResult DB_E_OBJECTOPEN
public OleDbHResult DB_E_BADCHAPTER
public OleDbHResult DB_E_CANTCONVERTVALUE
public OleDbHResult DB_E_BADBINDINFO
public OleDbHResult DB_SEC_E_PERMISSIONDENIED
public OleDbHResult DB_E_NOTAREFERENCECOLUMN
public OleDbHResult DB_E_LIMITREJECTED
public OleDbHResult DB_E_NOCOMMAND
public OleDbHResult DB_E_COSTLIMIT
public OleDbHResult DB_E_BADBOOKMARK
public OleDbHResult DB_E_BADLOCKMODE
public OleDbHResult DB_E_PARAMNOTOPTIONAL
public OleDbHResult DB_E_BADCOLUMNID
public OleDbHResult DB_E_BADRATIO
public OleDbHResult DB_E_BADVALUES
public OleDbHResult DB_E_ERRORSINCOMMAND
public OleDbHResult DB_E_CANTCANCEL
public OleDbHResult DB_E_DIALECTNOTSUPPORTED
public OleDbHResult DB_E_DUPLICATEDATASOURCE
public OleDbHResult DB_E_CANNOTRESTART
public OleDbHResult DB_E_NOTFOUND
public OleDbHResult DB_E_NEWLYINSERTED
public OleDbHResult DB_E_CANNOTFREE
public OleDbHResult DB_E_GOALREJECTED
public OleDbHResult DB_E_UNSUPPORTEDCONVERSION
public OleDbHResult DB_E_BADSTARTPOSITION
public OleDbHResult DB_E_NOQUERY
public OleDbHResult DB_E_NOTREENTRANT
public OleDbHResult DB_E_ERRORSOCCURRED
public OleDbHResult DB_E_NOAGGREGATION
public OleDbHResult DB_E_DELETEDROW
public OleDbHResult DB_E_CANTFETCHBACKWARDS
public OleDbHResult DB_E_ROWSNOTRELEASED
public OleDbHResult DB_E_BADSTORAGEFLAG
public OleDbHResult DB_E_BADCOMPAREOP
public OleDbHResult DB_E_BADSTATUSVALUE
public OleDbHResult DB_E_CANTSCROLLBACKWARDS
public OleDbHResult DB_E_BADREGIONHANDLE
public OleDbHResult DB_E_NONCONTIGUOUSRANGE
public OleDbHResult DB_E_INVALIDTRANSITION
public OleDbHResult DB_E_NOTASUBREGION
public OleDbHResult DB_E_MULTIPLESTATEMENTS
public OleDbHResult DB_E_INTEGRITYVIOLATION
public OleDbHResult DB_E_BADTYPENAME
public OleDbHResult DB_E_ABORTLIMITREACHED
public OleDbHResult DB_E_ROWSETINCOMMAND
public OleDbHResult DB_E_CANTTRANSLATE
public OleDbHResult DB_E_DUPLICATEINDEXID
public OleDbHResult DB_E_NOINDEX
public OleDbHResult DB_E_INDEXINUSE
public OleDbHResult DB_E_NOTABLE
public OleDbHResult DB_E_CONCURRENCYVIOLATION
public OleDbHResult DB_E_BADCOPY
public OleDbHResult DB_E_BADPRECISION
public OleDbHResult DB_E_BADSCALE
public OleDbHResult DB_E_BADTABLEID
public OleDbHResult DB_E_BADTYPE
public OleDbHResult DB_E_DUPLICATECOLUMNID
public OleDbHResult DB_E_DUPLICATETABLEID
public OleDbHResult DB_E_TABLEINUSE
public OleDbHResult DB_E_NOLOCALE
public OleDbHResult DB_E_BADRECORDNUM
public OleDbHResult DB_E_BOOKMARKSKIPPED
public OleDbHResult DB_E_BADPROPERTYVALUE
public OleDbHResult DB_E_INVALID
public OleDbHResult DB_E_BADACCESSORFLAGS
public OleDbHResult DB_E_BADSTORAGEFLAGS
public OleDbHResult DB_E_BYREFACCESSORNOTSUPPORTED
public OleDbHResult DB_E_NULLACCESSORNOTSUPPORTED
public OleDbHResult DB_E_NOTPREPARED
public OleDbHResult DB_E_BADACCESSORTYPE
public OleDbHResult DB_E_WRITEONLYACCESSOR
public OleDbHResult DB_SEC_E_AUTH_FAILED
public OleDbHResult DB_E_CANCELED
public OleDbHResult DB_E_CHAPTERNOTRELEASED
public OleDbHResult DB_E_BADSOURCEHANDLE
public OleDbHResult DB_E_PARAMUNAVAILABLE
public OleDbHResult DB_E_ALREADYINITIALIZED
public OleDbHResult DB_E_NOTSUPPORTED
public OleDbHResult DB_E_MAXPENDCHANGESEXCEEDED
public OleDbHResult DB_E_BADORDINAL
public OleDbHResult DB_E_PENDINGCHANGES
public OleDbHResult DB_E_DATAOVERFLOW
public OleDbHResult DB_E_BADHRESULT
public OleDbHResult DB_E_BADLOOKUPID
public OleDbHResult DB_E_BADDYNAMICERRORID
public OleDbHResult DB_E_PENDINGINSERT
public OleDbHResult DB_E_BADCONVERTFLAG
public OleDbHResult DB_E_BADPARAMETERNAME
public OleDbHResult DB_E_MULTIPLESTORAGE
public OleDbHResult DB_E_CANTFILTER
public OleDbHResult DB_E_CANTORDER
public OleDbHResult MD_E_BADTUPLE
public OleDbHResult MD_E_BADCOORDINATE
public OleDbHResult MD_E_INVALIDAXIS
public OleDbHResult MD_E_INVALIDCELLRANGE
public OleDbHResult DB_E_NOCOLUMN
public OleDbHResult DB_E_COMMANDNOTPERSISTED
public OleDbHResult DB_E_DUPLICATEID
public OleDbHResult DB_E_OBJECTCREATIONLIMITREACHED
public OleDbHResult DB_E_BADINDEXID
public OleDbHResult DB_E_BADINITSTRING
public OleDbHResult DB_E_NOPROVIDERSREGISTERED
public OleDbHResult DB_E_MISMATCHEDPROVIDER
public OleDbHResult DB_E_BADCOMMANDID
public OleDbHResult SEC_E_BADTRUSTEEID
public OleDbHResult SEC_E_NOTRUSTEEID
public OleDbHResult SEC_E_NOMEMBERSHIPSUPPORT
public OleDbHResult SEC_E_INVALIDOBJECT
public OleDbHResult SEC_E_NOOWNER
public OleDbHResult SEC_E_INVALIDACCESSENTRYLIST
public OleDbHResult SEC_E_INVALIDOWNER
public OleDbHResult SEC_E_INVALIDACCESSENTRY
public OleDbHResult DB_E_BADCONSTRAINTTYPE
public OleDbHResult DB_E_BADCONSTRAINTFORM
public OleDbHResult DB_E_BADDEFERRABILITY
public OleDbHResult DB_E_BADMATCHTYPE
public OleDbHResult DB_E_BADUPDATEDELETERULE
public OleDbHResult DB_E_BADCONSTRAINTID
public OleDbHResult DB_E_BADCOMMANDFLAGS
public OleDbHResult DB_E_OBJECTMISMATCH
public OleDbHResult DB_E_NOSOURCEOBJECT
public OleDbHResult DB_E_RESOURCELOCKED
public OleDbHResult DB_E_NOTCOLLECTION
public OleDbHResult DB_E_REOLEDBNLY
public OleDbHResult DB_E_ASYNCNOTSUPPORTED
public OleDbHResult DB_E_CANNOTCONNECT
public OleDbHResult DB_E_TIMEOUT
public OleDbHResult DB_E_RESOURCEEXISTS
public OleDbHResult DB_E_RESOURCEOUTOFSCOPE
public OleDbHResult DB_E_DROPRESTRICTED
public OleDbHResult DB_E_DUPLICATECONSTRAINTID
public OleDbHResult DB_E_OUTOFSPACE
public OleDbHResult DB_SEC_E_SAFEMODE_DENIED
public OleDbHResult DB_S_ROWLIMITEXCEEDED
public OleDbHResult DB_S_COLUMNTYPEMISMATCH
public OleDbHResult DB_S_TYPEINFOOVERRIDDEN
public OleDbHResult DB_S_BOOKMARKSKIPPED
public OleDbHResult DB_S_NONEXTROWSET
public OleDbHResult DB_S_ENDOFROWSET
public OleDbHResult DB_S_COMMANDREEXECUTED
public OleDbHResult DB_S_BUFFERFULL
public OleDbHResult DB_S_NORESULT
public OleDbHResult DB_S_CANTRELEASE
public OleDbHResult DB_S_GOALCHANGED
public OleDbHResult DB_S_UNWANTEDOPERATION
public OleDbHResult DB_S_DIALECTIGNORED
public OleDbHResult DB_S_UNWANTEDPHASE
public OleDbHResult DB_S_UNWANTEDREASON
public OleDbHResult DB_S_ASYNCHRONOUS
public OleDbHResult DB_S_COLUMNSCHANGED
public OleDbHResult DB_S_ERRORSRETURNED
public OleDbHResult DB_S_BADROWHANDLE
public OleDbHResult DB_S_DELETEDROW
public OleDbHResult DB_S_TOOMANYCHANGES
public OleDbHResult DB_S_STOPLIMITREACHED
public OleDbHResult DB_S_LOCKUPGRADED
public OleDbHResult DB_S_PROPERTIESCHANGED
public OleDbHResult DB_S_ERRORSOCCURRED
public OleDbHResult DB_S_PARAMUNAVAILABLE
public OleDbHResult DB_S_MULTIPLECHANGES
public OleDbHResult DB_S_NOTSINGLETON
public OleDbHResult DB_S_NOROWSPECIFICCOLUMNS
public OleDbHResult XACT_E_FIRST
public OleDbHResult XACT_E_LAST
public OleDbHResult XACT_S_FIRST
public OleDbHResult XACT_S_LAST
public OleDbHResult XACT_E_ALREADYOTHERSINGLEPHASE
public OleDbHResult XACT_E_CANTRETAIN
public OleDbHResult XACT_E_COMMITFAILED
public OleDbHResult XACT_E_COMMITPREVENTED
public OleDbHResult XACT_E_HEURISTICABORT
public OleDbHResult XACT_E_HEURISTICCOMMIT
public OleDbHResult XACT_E_HEURISTICDAMAGE
public OleDbHResult XACT_E_HEURISTICDANGER
public OleDbHResult XACT_E_ISOLATIONLEVEL
public OleDbHResult XACT_E_NOASYNC
public OleDbHResult XACT_E_NOENLIST
public OleDbHResult XACT_E_NOISORETAIN
public OleDbHResult XACT_E_NORESOURCE
public OleDbHResult XACT_E_NOTCURRENT
public OleDbHResult XACT_E_NOTRANSACTION
public OleDbHResult XACT_E_NOTSUPPORTED
public OleDbHResult XACT_E_UNKNOWNRMGRID
public OleDbHResult XACT_E_WRONGSTATE
public OleDbHResult XACT_E_WRONGUOW
public OleDbHResult XACT_E_XTIONEXISTS
public OleDbHResult XACT_E_NOIMPORTOBJECT
public OleDbHResult XACT_E_INVALIDCOOKIE
public OleDbHResult XACT_E_INDOUBT
public OleDbHResult XACT_E_NOTIMEOUT
public OleDbHResult XACT_E_ALREADYINPROGRESS
public OleDbHResult XACT_E_ABORTED
public OleDbHResult XACT_E_LOGFULL
public OleDbHResult XACT_E_TMNOTAVAILABLE
public OleDbHResult XACT_E_CONNECTION_DOWN
public OleDbHResult XACT_E_CONNECTION_DENIED
public OleDbHResult XACT_E_REENLISTTIMEOUT
public OleDbHResult XACT_E_TIP_CONNECT_FAILED
public OleDbHResult XACT_E_TIP_PROTOCOL_ERROR
public OleDbHResult XACT_E_TIP_PULL_FAILED
public OleDbHResult XACT_E_DEST_TMNOTAVAILABLE
public OleDbHResult XACT_E_CLERKNOTFOUND
public OleDbHResult XACT_E_CLERKEXISTS
public OleDbHResult XACT_E_RECOVERYINPROGRESS
public OleDbHResult XACT_E_TRANSACTIONCLOSED
public OleDbHResult XACT_E_INVALIDLSN
public OleDbHResult XACT_E_REPLAYREQUEST
public OleDbHResult XACT_S_ASYNC
public OleDbHResult XACT_S_DEFECT
public OleDbHResult XACT_S_REOLEDBNLY
public OleDbHResult XACT_S_SOMENORETAIN
public OleDbHResult XACT_S_OKINFORM
public OleDbHResult XACT_S_MADECHANGESCONTENT
public OleDbHResult XACT_S_MADECHANGESINFORM
public OleDbHResult XACT_S_ALLNORETAIN
public OleDbHResult XACT_S_ABORTING
public OleDbHResult XACT_S_SINGLEPHASE
public OleDbHResult STG_E_INVALIDFUNCTION
public OleDbHResult STG_E_FILENOTFOUND
public OleDbHResult STG_E_PATHNOTFOUND
public OleDbHResult STG_E_TOOMANYOPENFILES
public OleDbHResult STG_E_ACCESSDENIED
public OleDbHResult STG_E_INVALIDHANDLE
public OleDbHResult STG_E_INSUFFICIENTMEMORY
public OleDbHResult STG_E_INVALIDPOINTER
public OleDbHResult STG_E_NOMOREFILES
public OleDbHResult STG_E_DISKISWRITEPROTECTED
public OleDbHResult STG_E_SEEKERROR
public OleDbHResult STG_E_WRITEFAULT
public OleDbHResult STG_E_READFAULT
public OleDbHResult STG_E_SHAREVIOLATION
public OleDbHResult STG_E_LOCKVIOLATION
public OleDbHResult STG_E_FILEALREADYEXISTS
public OleDbHResult STG_E_INVALIDPARAMETER
public OleDbHResult STG_E_MEDIUMFULL
public OleDbHResult STG_E_PROPSETMISMATCHED
public OleDbHResult STG_E_ABNORMALAPIEXIT
public OleDbHResult STG_E_INVALIDHEADER
public OleDbHResult STG_E_INVALIDNAME
public OleDbHResult STG_E_UNKNOWN
public OleDbHResult STG_E_UNIMPLEMENTEDFUNCTION
public OleDbHResult STG_E_INVALIDFLAG
public OleDbHResult STG_E_INUSE
public OleDbHResult STG_E_NOTCURRENT
public OleDbHResult STG_E_REVERTED
public OleDbHResult STG_E_CANTSAVE
public OleDbHResult STG_E_OLDFORMAT
public OleDbHResult STG_E_OLDDLL
public OleDbHResult STG_E_SHAREREQUIRED
public OleDbHResult STG_E_NOTFILEBASEDSTORAGE
public OleDbHResult STG_E_EXTANTMARSHALLINGS
public OleDbHResult STG_E_DOCFILECORRUPT
public OleDbHResult STG_E_BADBASEADDRESS
public OleDbHResult STG_E_INCOMPLETE
public OleDbHResult STG_E_TERMINATED
public OleDbHResult STG_S_CONVERTED
public OleDbHResult STG_S_BLOCK
public OleDbHResult STG_S_RETRYNOW
public OleDbHResult STG_S_MONITORING
}
public System.Data.OleDb.OleDbInfoMessageEventArgs : EventArgs {
private OleDbException exception
public int ErrorCode
public OleDbErrorCollection Errors
public string Message
public string Source
internal void .ctor(OleDbException exception)
public int get_ErrorCode()
public OleDbErrorCollection get_Errors()
internal bool ShouldSerializeErrors()
public string get_Message()
public string get_Source()
public string ToString()
}
public System.Data.OleDb.OleDbInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbLiteral : Enum {
public int value__
public OleDbLiteral Invalid
public OleDbLiteral Binary_Literal
public OleDbLiteral Catalog_Name
public OleDbLiteral Catalog_Separator
public OleDbLiteral Char_Literal
public OleDbLiteral Column_Alias
public OleDbLiteral Column_Name
public OleDbLiteral Correlation_Name
public OleDbLiteral Cursor_Name
public OleDbLiteral Escape_Percent_Prefix
public OleDbLiteral Escape_Underscore_Prefix
public OleDbLiteral Index_Name
public OleDbLiteral Like_Percent
public OleDbLiteral Like_Underscore
public OleDbLiteral Procedure_Name
public OleDbLiteral Quote_Prefix
public OleDbLiteral Schema_Name
public OleDbLiteral Table_Name
public OleDbLiteral Text_Command
public OleDbLiteral User_Name
public OleDbLiteral View_Name
public OleDbLiteral Cube_Name
public OleDbLiteral Dimension_Name
public OleDbLiteral Hierarchy_Name
public OleDbLiteral Level_Name
public OleDbLiteral Member_Name
public OleDbLiteral Property_Name
public OleDbLiteral Schema_Separator
public OleDbLiteral Quote_Suffix
public OleDbLiteral Escape_Percent_Suffix
public OleDbLiteral Escape_Underscore_Suffix
}
public System.Data.OleDb.OleDbMetaDataCollectionNames : object {
public string Catalogs
public string Collations
public string Columns
public string Indexes
public string Procedures
public string ProcedureColumns
public string ProcedureParameters
public string Tables
public string Views
}
public System.Data.OleDb.OleDbMetaDataColumnNames : object {
public string BooleanFalseLiteral
public string BooleanTrueLiteral
public string NativeDataType
public string DateTimeDigits
}
internal System.Data.OleDb.OleDbMetaDataFactory : DbMetaDataFactory {
private string _collectionName
private string _populationMechanism
private string _prepareCollection
private SchemaRowsetName[] _schemaMapping
internal void .ctor(Stream XMLStream, string serverVersion, string serverVersionNormalized, SchemaSupport[] schemaSupport)
private string BuildRegularExpression(string invalidChars, string invalidStartingChars)
private DataTable GetDataSourceInformationTable(OleDbConnection connection, OleDbConnectionInternal internalConnection)
private DataTable GetDataTypesTable(OleDbConnection connection)
private DataTable GetReservedWordsTable(OleDbConnectionInternal internalConnection)
protected DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection)
private void SetIdentifierCase(string columnName, int propertyID, DataRow row, OleDbConnection connection)
}
public System.Data.OleDb.OleDbParameter : DbParameter {
private object _value
private object _parent
private ParameterDirection _direction
private int _size
private int _offset
private string _sourceColumn
private DataRowVersion _sourceVersion
private bool _sourceColumnNullMapping
private bool _isNullable
private object _coercedValue
private NativeDBType _metaType
private int _changeID
private string _parameterName
private byte _precision
private byte _scale
private bool _hasScale
private NativeDBType _coerceMetaType
private object CoercedValue
public ParameterDirection Direction
public bool IsNullable
public int Offset
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
internal int ChangeID
public DbType DbType
public OleDbType OleDbType
public string ParameterName
public byte Precision
internal byte PrecisionInternal
public byte Scale
internal byte ScaleInternal
public object Value
private void .ctor(OleDbParameter source)
public void .ctor(string name, object value)
public void .ctor(string name, OleDbType dataType)
public void .ctor(string name, OleDbType dataType, int size)
public void .ctor(string name, OleDbType dataType, int size, string srcColumn)
public void .ctor(string parameterName, OleDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value)
public void .ctor(string parameterName, OleDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value)
private object get_CoercedValue()
private void set_CoercedValue(object value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public int get_Offset()
public void set_Offset(int value)
public int get_Size()
public void set_Size(int value)
private void ResetSize()
private bool ShouldSerializeSize()
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
private void CloneHelperCore(OleDbParameter destination)
internal void CopyTo(DbParameter destination)
internal object CompareExchangeParent(object value, object comparand)
internal void ResetParent()
public string ToString()
private byte ValuePrecisionCore(object value)
private byte ValueScaleCore(object value)
private int ValueSizeCore(object value)
internal int get_ChangeID()
public DbType get_DbType()
public void set_DbType(DbType value)
public void ResetDbType()
public OleDbType get_OleDbType()
public void set_OleDbType(OleDbType value)
private bool ShouldSerializeOleDbType()
public void ResetOleDbType()
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
internal byte get_PrecisionInternal()
internal void set_PrecisionInternal(byte value)
private bool ShouldSerializePrecision()
public byte get_Scale()
public void set_Scale(byte value)
internal byte get_ScaleInternal()
internal void set_ScaleInternal(byte value)
private bool ShouldSerializeScale()
private bool ShouldSerializeScale(byte scale)
private object System.ICloneable.Clone()
private void CloneHelper(OleDbParameter destination)
private void PropertyChanging()
private void PropertyTypeChanging()
internal bool BindParameter(int index, Bindings bindings)
private object CoerceValue(object value, NativeDBType destinationType)
private NativeDBType GetBindType(object value)
internal object GetCoercedValue()
internal bool IsParameterComputed()
internal void Prepare(OleDbCommand cmd)
public object get_Value()
public void set_Value(object value)
private byte ValuePrecision(object value)
private byte ValueScale(object value)
private int ValueSize(object value)
private int GetBindDirection(ParameterDirection direction)
private int GetBindFlags(ParameterDirection direction)
}
public System.Data.OleDb.OleDbParameterCollection : DbParameterCollection {
private List`1<OleDbParameter> _items
private int _changeID
private Type ItemType
public int Count
private List`1<OleDbParameter> InnerList
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
internal int ChangeID
public OleDbParameter Item
public OleDbParameter Item
public int get_Count()
private List`1<OleDbParameter> get_InnerList()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public int Add(object value)
public void AddRange(Array values)
private int CheckName(string parameterName)
public void Clear()
public bool Contains(object value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
private int IndexOf(IEnumerable items, string parameterName)
public int IndexOf(string parameterName)
public int IndexOf(object value)
public void Insert(int index, object value)
private void RangeCheck(int index)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
private void RemoveIndex(int index)
private void Replace(int index, object newValue)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
private void Validate(int index, object value)
private void ValidateType(object value)
internal int get_ChangeID()
public OleDbParameter get_Item(int index)
public void set_Item(int index, OleDbParameter value)
public OleDbParameter get_Item(string parameterName)
public void set_Item(string parameterName, OleDbParameter value)
public OleDbParameter Add(OleDbParameter value)
public OleDbParameter Add(string parameterName, object value)
public OleDbParameter AddWithValue(string parameterName, object value)
public OleDbParameter Add(string parameterName, OleDbType oleDbType)
public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size)
public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size, string sourceColumn)
public void AddRange(OleDbParameter[] values)
public bool Contains(string value)
public bool Contains(OleDbParameter value)
public void CopyTo(OleDbParameter[] array, int index)
public int IndexOf(OleDbParameter value)
public void Insert(int index, OleDbParameter value)
private void OnChange()
public void Remove(OleDbParameter value)
}
public System.Data.OleDb.OleDbPermission : DBDataPermission {
private String[] _providerRestriction
private string _providers
public string Provider
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
private void .ctor(OleDbPermission permission)
internal void .ctor(OleDbPermissionAttribute permissionAttribute)
internal void .ctor(OleDbConnectionString constr)
public string get_Provider()
public void set_Provider(string value)
public IPermission Copy()
}
public System.Data.OleDb.OleDbPermissionAttribute : DBDataPermissionAttribute {
private string _providers
public string Provider
public void .ctor(SecurityAction action)
public string get_Provider()
public void set_Provider(string value)
public IPermission CreatePermission()
}
internal System.Data.OleDb.OleDbPropertyInfo : object {
public Guid _propertySet
public int _propertyID
public string _description
public string _lowercase
public Type _type
public int _flags
public int _vtype
public object _supportedValues
public object _defaultValue
}
internal System.Data.OleDb.OleDbPropertySetGuid : object {
internal Guid Column
internal Guid DataSource
internal Guid DataSourceInfo
internal Guid DBInit
internal Guid Index
internal Guid PropertiesInError
internal Guid Rowset
internal Guid Session
internal Guid Stream
internal Guid Table
internal Guid Trustee
internal Guid View
internal Guid DataSourceAll
internal Guid DataSourceInfoAll
internal Guid DBInitAll
internal Guid ColumnAll
internal Guid ConstraintAll
internal Guid IndexAll
internal Guid RowsetAll
internal Guid SessionAll
internal Guid StreamAll
internal Guid TableAll
internal Guid TrusteeAll
internal Guid ViewAll
}
internal System.Data.OleDb.OleDbPropertyStatus : Enum {
public int value__
public OleDbPropertyStatus Ok
public OleDbPropertyStatus NotSupported
public OleDbPropertyStatus BadValue
public OleDbPropertyStatus BadOption
public OleDbPropertyStatus BadColumn
public OleDbPropertyStatus NotAllSettable
public OleDbPropertyStatus NotSettable
public OleDbPropertyStatus NotSet
public OleDbPropertyStatus Conflicting
public OleDbPropertyStatus NotAvailable
}
internal System.Data.OleDb.OleDbReferenceCollection : DbReferenceCollection {
internal int Closing
internal int Canceling
internal int CommandTag
internal int DataReaderTag
public void Add(object value, int tag)
protected void NotifyItem(int message, int tag, object value)
public void Remove(object value)
}
public System.Data.OleDb.OleDbRowUpdatedEventArgs : RowUpdatedEventArgs {
public OleDbCommand Command
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OleDbCommand get_Command()
}
public System.Data.OleDb.OleDbRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbRowUpdatingEventArgs : RowUpdatingEventArgs {
public OleDbCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OleDbCommand get_Command()
public void set_Command(OleDbCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.OleDb.OleDbRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbSchemaGuid : object {
public Guid Tables_Info
public Guid Trustee
public Guid Assertions
public Guid Catalogs
public Guid Character_Sets
public Guid Collations
public Guid Columns
public Guid Check_Constraints
public Guid Constraint_Column_Usage
public Guid Constraint_Table_Usage
public Guid Key_Column_Usage
public Guid Referential_Constraints
public Guid Table_Constraints
public Guid Column_Domain_Usage
public Guid Indexes
public Guid Column_Privileges
public Guid Table_Privileges
public Guid Usage_Privileges
public Guid Procedures
public Guid Schemata
public Guid Sql_Languages
public Guid Statistics
public Guid Tables
public Guid Translations
public Guid Provider_Types
public Guid Views
public Guid View_Column_Usage
public Guid View_Table_Usage
public Guid Procedure_Parameters
public Guid Foreign_Keys
public Guid Primary_Keys
public Guid Procedure_Columns
public Guid Table_Statistics
public Guid Check_Constraints_By_Table
public Guid SchemaGuids
public Guid DbInfoKeywords
public Guid DbInfoLiterals
internal string GetTextFromValue(Guid guid)
}
internal System.Data.OleDb.OleDbServicesWrapper : WrappedIUnknown {
private IDataInitializeGetDataSource DangerousIDataInitializeGetDataSource
internal void .ctor(object unknown)
internal void GetDataSource(OleDbConnectionString constr, DataSourceWrapper& datasrcWrapper)
}
public System.Data.OleDb.OleDbTransaction : DbTransaction {
private OleDbTransaction _parentTransaction
private IsolationLevel _isolationLevel
private WeakReference _nestedTransaction
private WrappedTransaction _transaction
internal OleDbConnection _parentConnection
private int _objectTypeCount
internal int _objectID
public OleDbConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
internal int ObjectID
internal OleDbTransaction Parent
internal void .ctor(OleDbConnection connection, OleDbTransaction transaction, IsolationLevel isolevel)
public OleDbConnection get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
internal int get_ObjectID()
internal OleDbTransaction get_Parent()
public OleDbTransaction Begin(IsolationLevel isolevel)
public OleDbTransaction Begin()
internal void BeginInternal(ITransactionLocal transaction)
public void Commit()
private void CommitInternal()
protected void Dispose(bool disposing)
private void DisposeManaged()
private void ProcessResults(OleDbHResult hr)
public void Rollback()
internal OleDbHResult RollbackInternal(bool exceptionHandling)
internal OleDbTransaction TransactionLast(OleDbTransaction head)
internal OleDbTransaction TransactionUpdate(OleDbTransaction transaction)
}
public System.Data.OleDb.OleDbType : Enum {
public int value__
public OleDbType BigInt
public OleDbType Binary
public OleDbType Boolean
public OleDbType BSTR
public OleDbType Char
public OleDbType Currency
public OleDbType Date
public OleDbType DBDate
public OleDbType DBTime
public OleDbType DBTimeStamp
public OleDbType Decimal
public OleDbType Double
public OleDbType Empty
public OleDbType Error
public OleDbType Filetime
public OleDbType Guid
public OleDbType IDispatch
public OleDbType Integer
public OleDbType IUnknown
public OleDbType LongVarBinary
public OleDbType LongVarChar
public OleDbType LongVarWChar
public OleDbType Numeric
public OleDbType PropVariant
public OleDbType Single
public OleDbType SmallInt
public OleDbType TinyInt
public OleDbType UnsignedBigInt
public OleDbType UnsignedInt
public OleDbType UnsignedSmallInt
public OleDbType UnsignedTinyInt
public OleDbType VarBinary
public OleDbType VarChar
public OleDbType Variant
public OleDbType VarNumeric
public OleDbType VarWChar
public OleDbType WChar
}
internal System.Data.OleDb.PropertyIDSet : DbBuffer {
private int PropertyIDSetAndValueSize
private int PropertyIDSetSize
private int _count
internal int Count
internal void .ctor(Guid propertySet, int propertyID)
internal void .ctor(Guid[] propertySets)
internal int get_Count()
}
internal System.Data.OleDb.PropertyInfoSet : SafeHandle {
private int setCount
private IntPtr descBuffer
public bool IsInvalid
internal void .ctor(IDBProperties idbProperties, PropertyIDSet propIDSet)
public bool get_IsInvalid()
internal Dictionary`2<string, OleDbPropertyInfo> GetValues()
protected bool ReleaseHandle()
internal Type FromVtType(int vartype)
}
internal System.Data.OleDb.RowBinding : DbBuffer {
private int _bindingCount
private int _headerLength
private int _dataLength
private int _emptyStringOffset
private IAccessor _iaccessor
private IntPtr _accessorHandle
private bool _needToReset
private bool _haveData
private void .ctor(int bindingCount, int headerLength, int dataLength, int length, bool needToReset)
internal RowBinding CreateBuffer(int bindingCount, int databuffersize, bool needToReset)
internal void StartDataBlock()
internal int BindingCount()
internal IntPtr DangerousGetAccessorHandle()
internal IntPtr DangerousGetDataPtr()
internal IntPtr DangerousGetDataPtr(int valueOffset)
internal OleDbHResult CreateAccessor(IAccessor iaccessor, int flags, ColumnBinding[] bindings)
internal ColumnBinding[] SetBindings(OleDbDataReader dataReader, Bindings bindings, int indexStart, int indexForAccessor, OleDbParameter[] parameters, tagDBBINDING[] dbbindings, bool ifIRowsetElseIRow)
internal int AlignDataSize(int value)
internal object GetVariantValue(int offset)
internal void SetVariantValue(int offset, object value)
internal void SetBstrValue(int offset, string value)
internal void SetByRefValue(int offset, IntPtr pinnedValue)
internal void CloseFromConnection()
internal void Dispose()
internal void ResetValues()
private void ResetValues(IntPtr buffer, object iaccessor)
private void FreeChapter(IntPtr buffer, int valueOffset, object iaccessor)
private void FreeBstr(IntPtr buffer, int valueOffset)
private void FreeCoTaskMem(IntPtr buffer, int valueOffset)
private void FreeVariant(IntPtr buffer, int valueOffset)
private void FreePropVariant(IntPtr buffer, int valueOffset)
internal IntPtr InterlockedExchangePointer(int offset)
protected bool ReleaseHandle()
}
internal System.Data.OleDb.RowHandleBuffer : DbBuffer {
internal void .ctor(IntPtr rowHandleFetchCount)
internal IntPtr GetRowHandle(int index)
}
internal System.Data.OleDb.SchemaSupport : ValueType {
internal Guid _schemaRowset
internal int _restrictions
}
internal System.Data.OleDb.SessionWrapper : WrappedIUnknown {
private IDBCreateCommandCreateCommand DangerousIDBCreateCommandCreateCommand
internal void QueryInterfaceIDBCreateCommand(OleDbConnectionString constr)
internal void VerifyIDBCreateCommand(OleDbConnectionString constr)
internal OleDbHResult CreateCommand(Object& icommandText)
internal IDBSchemaRowsetWrapper IDBSchemaRowset(OleDbConnectionInternal connection)
internal IOpenRowsetWrapper IOpenRowset(OleDbConnectionInternal connection)
internal ITransactionJoinWrapper ITransactionJoin(OleDbConnectionInternal connection)
}
internal System.Data.OleDb.StringMemHandle : DbBuffer {
internal void .ctor(string value)
}
internal System.Data.OleDb.tagDBBINDING : object {
internal IntPtr iOrdinal
internal IntPtr obValue
internal IntPtr obLength
internal IntPtr obStatus
internal IntPtr pTypeInfo
internal IntPtr pObject
internal IntPtr pBindExt
internal int dwPart
internal int dwMemOwner
internal int eParamIO
internal IntPtr cbMaxLen
internal int dwFlags
internal short wType
internal byte bPrecision
internal byte bScale
}
internal System.Data.OleDb.tagDBCOLUMNACCESS : ValueType {
internal IntPtr pData
internal tagDBIDX columnid
internal IntPtr cbDataLen
internal int dwStatus
internal IntPtr cbMaxLen
internal IntPtr dwReserved
internal short wType
internal byte bPrecision
internal byte bScale
}
internal System.Data.OleDb.tagDBCOLUMNINFO : object {
internal string pwszName
internal IntPtr pTypeInfo
internal IntPtr iOrdinal
internal int dwFlags
internal IntPtr ulColumnSize
internal short wType
internal byte bPrecision
internal byte bScale
internal tagDBIDX columnid
}
internal System.Data.OleDb.tagDBID : object {
internal Guid uGuid
internal int eKind
internal IntPtr ulPropid
}
internal System.Data.OleDb.tagDBIDX : ValueType {
internal Guid uGuid
internal int eKind
internal IntPtr ulPropid
}
internal System.Data.OleDb.tagDBLITERALINFO : object {
internal string pwszLiteralValue
internal string pwszInvalidChars
internal string pwszInvalidStartingChars
internal int it
internal int fSupported
internal int cchMaxLen
}
internal System.Data.OleDb.tagDBPARAMBINDINFO : ValueType {
internal IntPtr pwszDataSourceType
internal IntPtr pwszName
internal IntPtr ulParamSize
internal int dwFlags
internal byte bPrecision
internal byte bScale
}
internal System.Data.OleDb.tagDBPARAMS : object {
internal IntPtr pData
internal int cParamSets
internal IntPtr hAccessor
}
internal System.Data.OleDb.tagDBPROP : object {
internal int dwPropertyID
internal int dwOptions
internal OleDbPropertyStatus dwStatus
internal tagDBIDX columnid
internal object vValue
internal void .ctor(int propertyID, bool required, object value)
}
internal System.Data.OleDb.tagDBPROPIDSET : ValueType {
internal IntPtr rgPropertyIDs
internal int cPropertyIDs
internal Guid guidPropertySet
}
internal System.Data.OleDb.tagDBPROPINFO : object {
internal string pwszDescription
internal int dwPropertyID
internal int dwFlags
internal short vtType
internal object vValue
}
internal System.Data.OleDb.tagDBPROPINFOSET : object {
internal IntPtr rgPropertyInfos
internal int cPropertyInfos
internal Guid guidPropertySet
}
internal System.Data.OleDb.tagDBPROPSET : object {
internal IntPtr rgProperties
internal int cProperties
internal Guid guidPropertySet
internal void .ctor(int propertyCount, Guid propertySet)
}
public System.Data.OperationAbortedException : SystemException {
private void .ctor(string message, Exception innerException)
private void .ctor(SerializationInfo si, StreamingContext sc)
internal OperationAbortedException Aborted(Exception inner)
}
internal System.Data.OperatorInfo : object {
internal Nodes type
internal int op
internal int priority
internal void .ctor(Nodes type, int op, int pri)
}
internal System.Data.Operators : object {
internal int Noop
internal int Negative
internal int UnaryPlus
internal int Not
internal int BetweenAnd
internal int In
internal int Between
internal int EqualTo
internal int GreaterThen
internal int LessThen
internal int GreaterOrEqual
internal int LessOrEqual
internal int NotEqual
internal int Is
internal int Like
internal int Plus
internal int Minus
internal int Multiply
internal int Divide
internal int Modulo
internal int BitwiseAnd
internal int BitwiseOr
internal int BitwiseXor
internal int BitwiseNot
internal int And
internal int Or
internal int Proc
internal int Iff
internal int Qual
internal int Dot
internal int Null
internal int True
internal int False
internal int Date
internal int GenUniqueId
internal int GenGUID
internal int GUID
internal int IsNot
internal int priStart
internal int priSubstr
internal int priParen
internal int priLow
internal int priImp
internal int priEqv
internal int priXor
internal int priOr
internal int priAnd
internal int priNot
internal int priIs
internal int priBetweenInLike
internal int priBetweenAnd
internal int priRelOp
internal int priConcat
internal int priContains
internal int priPlusMinus
internal int priMod
internal int priIDiv
internal int priMulDiv
internal int priNeg
internal int priExp
internal int priProc
internal int priDot
internal int priMax
private Int32[] priority
private String[] Looks
internal bool IsArithmetical(int op)
internal bool IsLogical(int op)
internal bool IsRelational(int op)
internal int Priority(int op)
internal string ToString(int op)
}
public System.Data.ParameterDirection : Enum {
public int value__
public ParameterDirection Input
public ParameterDirection Output
public ParameterDirection InputOutput
public ParameterDirection ReturnValue
}
internal System.Data.ParentForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
private DataTable table
public void .ctor(DataSet dataSet, DataTable inTable)
protected bool IsValidCandidate(Constraint constraint)
}
internal System.Data.PrimaryKeyTypeConverter : ReferenceConverter {
public bool GetPropertiesSupported(ITypeDescriptorContext context)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
public System.Data.PropertyAttributes : Enum {
public int value__
public PropertyAttributes NotSupported
public PropertyAttributes Required
public PropertyAttributes Optional
public PropertyAttributes Read
public PropertyAttributes Write
}
public System.Data.PropertyCollection : Hashtable {
protected void .ctor(SerializationInfo info, StreamingContext context)
public object Clone()
}
internal System.Data.ProviderBase.DataReaderContainer : object {
protected IDataReader _dataReader
protected int _fieldCount
internal int FieldCount
internal bool ReturnProviderSpecificTypes
protected int VisibleFieldCount
protected void .ctor(IDataReader dataReader)
internal DataReaderContainer Create(IDataReader dataReader, bool returnProviderSpecificTypes)
internal int get_FieldCount()
internal bool get_ReturnProviderSpecificTypes()
protected int get_VisibleFieldCount()
internal Type GetFieldType(int ordinal)
internal object GetValue(int ordinal)
internal int GetValues(Object[] values)
internal string GetName(int ordinal)
internal DataTable GetSchemaTable()
internal bool NextResult()
internal bool Read()
}
internal System.Data.ProviderBase.DbBuffer : SafeHandle {
internal int LMEM_FIXED
internal int LMEM_MOVEABLE
internal int LMEM_ZEROINIT
private int _bufferLength
private int BaseOffset
public bool IsInvalid
internal int Length
private void .ctor(int initialSize, bool zeroBuffer)
protected void .ctor(int initialSize)
protected void .ctor(IntPtr invalidHandleValue, bool ownsHandle)
private int get_BaseOffset()
public bool get_IsInvalid()
internal int get_Length()
internal string PtrToStringUni(int offset)
internal string PtrToStringUni(int offset, int length)
internal byte ReadByte(int offset)
internal Byte[] ReadBytes(int offset, int length)
internal Byte[] ReadBytes(int offset, Byte[] destination, int startIndex, int length)
internal char ReadChar(int offset)
internal Char[] ReadChars(int offset, Char[] destination, int startIndex, int length)
internal double ReadDouble(int offset)
internal short ReadInt16(int offset)
internal void ReadInt16Array(int offset, Int16[] destination, int startIndex, int length)
internal int ReadInt32(int offset)
internal void ReadInt32Array(int offset, Int32[] destination, int startIndex, int length)
internal long ReadInt64(int offset)
internal IntPtr ReadIntPtr(int offset)
internal float ReadSingle(int offset)
protected bool ReleaseHandle()
private void StructureToPtr(int offset, object structure)
internal void WriteByte(int offset, byte value)
internal void WriteBytes(int offset, Byte[] source, int startIndex, int length)
internal void WriteCharArray(int offset, Char[] source, int startIndex, int length)
internal void WriteDouble(int offset, double value)
internal void WriteInt16(int offset, short value)
internal void WriteInt16Array(int offset, Int16[] source, int startIndex, int length)
internal void WriteInt32(int offset, int value)
internal void WriteInt32Array(int offset, Int32[] source, int startIndex, int length)
internal void WriteInt64(int offset, long value)
internal void WriteIntPtr(int offset, IntPtr value)
internal void WriteSingle(int offset, float value)
internal void ZeroMemory()
internal Guid ReadGuid(int offset)
internal void WriteGuid(int offset, Guid value)
internal DateTime ReadDate(int offset)
internal void WriteDate(int offset, DateTime value)
internal TimeSpan ReadTime(int offset)
internal void WriteTime(int offset, TimeSpan value)
internal DateTime ReadDateTime(int offset)
internal void WriteDateTime(int offset, DateTime value)
internal decimal ReadNumeric(int offset)
internal void WriteNumeric(int offset, decimal value, byte precision)
protected void ValidateCheck(int offset, int count)
protected void Validate(int offset, int count)
}
internal System.Data.ProviderBase.DbConnectionBusy : DbConnectionClosed {
protected void .ctor(ConnectionState state)
internal bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
}
internal System.Data.ProviderBase.DbConnectionClosed : DbConnectionInternal {
public string ServerVersion
protected void .ctor(ConnectionState state, bool hidePassword, bool allowSetConnectionString)
public string get_ServerVersion()
protected void Activate(Transaction transaction)
public DbTransaction BeginTransaction(IsolationLevel il)
public void ChangeDatabase(string database)
internal void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)
protected void Deactivate()
public void EnlistTransaction(Transaction transaction)
protected internal DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions)
protected DbReferenceCollection CreateReferenceCollection()
internal bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
}
internal System.Data.ProviderBase.DbConnectionClosedBusy : DbConnectionBusy {
internal DbConnectionInternal SingletonInstance
}
internal System.Data.ProviderBase.DbConnectionClosedConnecting : DbConnectionBusy {
internal DbConnectionInternal SingletonInstance
internal void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)
internal bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
internal bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
}
internal System.Data.ProviderBase.DbConnectionClosedNeverOpened : DbConnectionClosed {
internal DbConnectionInternal SingletonInstance
}
internal System.Data.ProviderBase.DbConnectionClosedPreviouslyOpened : DbConnectionClosed {
internal DbConnectionInternal SingletonInstance
internal bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
}
internal System.Data.ProviderBase.DbConnectionFactory : object {
private Dictionary`2<DbConnectionPoolKey, DbConnectionPoolGroup> _connectionPoolGroups
private List`1<DbConnectionPool> _poolsToRelease
private List`1<DbConnectionPoolGroup> _poolGroupsToRelease
private DbConnectionPoolCounters _performanceCounters
private Timer _pruningTimer
private int PruningDueTime
private int PruningPeriod
private int _objectTypeCount
internal int _objectID
private int s_pendingOpenNonPooledNext
private Task`1[] s_pendingOpenNonPooled
private Task`1<DbConnectionInternal> s_completedTask
internal DbConnectionPoolCounters PerformanceCounters
public DbProviderFactory ProviderFactory
internal int ObjectID
protected void .ctor(DbConnectionPoolCounters performanceCounters)
internal DbConnectionPoolCounters get_PerformanceCounters()
public DbProviderFactory get_ProviderFactory()
internal int get_ObjectID()
public void ClearAllPools()
public void ClearPool(DbConnection connection)
public void ClearPool(DbConnectionPoolKey key)
internal DbConnectionPoolProviderInfo CreateConnectionPoolProviderInfo(DbConnectionOptions connectionOptions)
protected DbMetaDataFactory CreateMetaDataFactory(DbConnectionInternal internalConnection, Boolean& cacheMetaDataFactory)
internal DbConnectionInternal CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)
internal DbConnectionInternal CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
internal DbConnectionPoolGroupProviderInfo CreateConnectionPoolGroupProviderInfo(DbConnectionOptions connectionOptions)
private Timer CreatePruningTimer()
protected DbConnectionOptions FindConnectionOptions(DbConnectionPoolKey key)
private Task`1<DbConnectionInternal> GetCompletedTask()
internal bool TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal& connection)
private DbConnectionPool GetConnectionPool(DbConnection owningObject, DbConnectionPoolGroup connectionPoolGroup)
internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolOptions, DbConnectionOptions& userConnectionOptions)
internal DbMetaDataFactory GetMetaDataFactory(DbConnectionPoolGroup connectionPoolGroup, DbConnectionInternal internalConnection)
private void PruneConnectionPoolGroups(object state)
internal void QueuePoolForRelease(DbConnectionPool pool, bool clearing)
internal void QueuePoolGroupForRelease(DbConnectionPoolGroup poolGroup)
protected DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
protected DbConnectionInternal CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection)
protected DbConnectionOptions CreateConnectionOptions(string connectionString, DbConnectionOptions previous)
protected DbConnectionPoolGroupOptions CreateConnectionPoolGroupOptions(DbConnectionOptions options)
internal DbConnectionPoolGroup GetConnectionPoolGroup(DbConnection connection)
internal DbConnectionInternal GetInnerConnection(DbConnection connection)
protected int GetObjectId(DbConnection connection)
internal void PermissionDemand(DbConnection outerConnection)
internal void SetConnectionPoolGroup(DbConnection outerConnection, DbConnectionPoolGroup poolGroup)
internal void SetInnerConnectionEvent(DbConnection owningObject, DbConnectionInternal to)
internal bool SetInnerConnectionFrom(DbConnection owningObject, DbConnectionInternal to, DbConnectionInternal from)
internal void SetInnerConnectionTo(DbConnection owningObject, DbConnectionInternal to)
}
internal System.Data.ProviderBase.DbConnectionInternal : object {
private int _objectTypeCount
internal int _objectID
internal StateChangeEventArgs StateChangeClosed
internal StateChangeEventArgs StateChangeOpen
private bool _allowSetConnectionString
private bool _hidePassword
private ConnectionState _state
private WeakReference _owningObject
private DbConnectionPool _connectionPool
private DbConnectionPoolCounters _performanceCounters
private DbReferenceCollection _referenceCollection
private int _pooledCount
private bool _connectionIsDoomed
private bool _cannotBePooled
private bool _isInStasis
private DateTime _createTime
private Transaction _enlistedTransaction
private Transaction _enlistedTransactionOriginal
internal bool AllowSetConnectionString
internal bool CanBePooled
protected internal Transaction EnlistedTransaction
protected bool EnlistedTransactionDisposed
internal bool IsTxRootWaitingForTxEnd
protected bool UnbindOnTransactionCompletion
protected internal bool IsNonPoolableTransactionRoot
internal bool IsTransactionRoot
protected internal bool IsConnectionDoomed
internal bool IsEmancipated
internal bool IsInPool
internal int ObjectID
protected internal object Owner
internal DbConnectionPool Pool
protected DbConnectionPoolCounters PerformanceCounters
protected bool ReadyToPrepareTransaction
protected internal DbReferenceCollection ReferenceCollection
public string ServerVersion
public string ServerVersionNormalized
public bool ShouldHidePassword
public ConnectionState State
internal void .ctor(ConnectionState state, bool hidePassword, bool allowSetConnectionString)
internal bool get_AllowSetConnectionString()
internal bool get_CanBePooled()
protected internal Transaction get_EnlistedTransaction()
protected internal void set_EnlistedTransaction(Transaction value)
protected bool get_EnlistedTransactionDisposed()
internal bool get_IsTxRootWaitingForTxEnd()
protected bool get_UnbindOnTransactionCompletion()
protected internal bool get_IsNonPoolableTransactionRoot()
internal bool get_IsTransactionRoot()
protected internal bool get_IsConnectionDoomed()
internal bool get_IsEmancipated()
internal bool get_IsInPool()
internal int get_ObjectID()
protected internal object get_Owner()
internal DbConnectionPool get_Pool()
protected DbConnectionPoolCounters get_PerformanceCounters()
protected bool get_ReadyToPrepareTransaction()
protected internal DbReferenceCollection get_ReferenceCollection()
public string get_ServerVersion()
public string get_ServerVersionNormalized()
public bool get_ShouldHidePassword()
public ConnectionState get_State()
protected void Activate(Transaction transaction)
internal void ActivateConnection(Transaction transaction)
internal void AddWeakReference(object value, int tag)
public DbTransaction BeginTransaction(IsolationLevel il)
public void ChangeDatabase(string value)
internal void CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)
internal void PrepareForReplaceConnection()
protected void PrepareForCloseConnection()
protected object ObtainAdditionalLocksForClose()
protected void ReleaseAdditionalLocksForClose(object lockToken)
protected DbReferenceCollection CreateReferenceCollection()
protected void Deactivate()
internal void DeactivateConnection()
internal void DelegatedTransactionEnded()
public void Dispose()
protected internal void DoNotPoolThisConnection()
protected internal void DoomThisConnection()
public void EnlistTransaction(Transaction transaction)
protected internal DataTable GetSchema(DbConnectionFactory factory, DbConnectionPoolGroup poolGroup, DbConnection outerConnection, string collectionName, String[] restrictions)
internal void MakeNonPooledObject(object owningObject, DbConnectionPoolCounters performanceCounters)
internal void MakePooledConnection(DbConnectionPool connectionPool)
internal void NotifyWeakReference(int message)
internal void OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)
internal bool TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
internal bool TryReplaceConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
protected bool TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions)
internal void PrePush(object expectedOwner)
internal void PostPop(object newOwner)
internal void RemoveWeakReference(object value)
protected void CleanupTransactionOnCompletion(Transaction transaction)
internal void DetachCurrentTransactionIfEnded()
internal void DetachTransaction(Transaction transaction, bool isExplicitlyReleasing)
internal void CleanupConnectionOnTransactionCompletion(Transaction transaction)
private void TransactionCompletedEvent(object sender, TransactionEventArgs e)
private void TransactionOutcomeEnlist(Transaction transaction)
internal void SetInStasis()
private void TerminateStasis(bool returningToPool)
internal bool IsConnectionAlive(bool throwOnException)
}
internal System.Data.ProviderBase.DbConnectionOpenBusy : DbConnectionBusy {
internal DbConnectionInternal SingletonInstance
}
internal System.Data.ProviderBase.DbConnectionPool : object {
internal ApiGroup PoolerTracePoints
private int MAX_Q_SIZE
private int SEMAPHORE_HANDLE
private int ERROR_HANDLE
private int CREATION_HANDLE
private int BOGUS_HANDLE
private int WAIT_OBJECT_0
private int WAIT_TIMEOUT
private int WAIT_ABANDONED
private int WAIT_FAILED
private int ERROR_WAIT_DEFAULT
private Random _random
private int _cleanupWait
private DbConnectionPoolIdentity _identity
private DbConnectionFactory _connectionFactory
private DbConnectionPoolGroup _connectionPoolGroup
private DbConnectionPoolGroupOptions _connectionPoolGroupOptions
private DbConnectionPoolProviderInfo _connectionPoolProviderInfo
private ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> _pooledDbAuthenticationContexts
private State _state
private ConcurrentStack`1<DbConnectionInternal> _stackOld
private ConcurrentStack`1<DbConnectionInternal> _stackNew
private ConcurrentQueue`1<PendingGetConnection> _pendingOpens
private int _pendingOpensWaiting
private WaitCallback _poolCreateRequest
private int _waitCount
private PoolWaitHandles _waitHandles
private Exception _resError
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _errorOccurred
private int _errorWait
private Timer _errorTimer
private Timer _cleanupTimer
private TransactedConnectionPool _transactedConnectionPool
private List`1<DbConnectionInternal> _objectList
private int _totalObjects
private int _objectTypeCount
internal int _objectID
private int CreationTimeout
internal int Count
internal DbConnectionFactory ConnectionFactory
internal bool ErrorOccurred
private bool HasTransactionAffinity
internal TimeSpan LoadBalanceTimeout
private bool NeedToReplenish
internal DbConnectionPoolIdentity Identity
internal bool IsRunning
private int MaxPoolSize
private int MinPoolSize
internal int ObjectID
internal DbConnectionPoolCounters PerformanceCounters
internal DbConnectionPoolGroup PoolGroup
internal DbConnectionPoolGroupOptions PoolGroupOptions
internal DbConnectionPoolProviderInfo ProviderInfo
internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> AuthenticationContexts
internal bool UseLoadBalancing
private bool UsingIntegrateSecurity
internal void .ctor(DbConnectionFactory connectionFactory, DbConnectionPoolGroup connectionPoolGroup, DbConnectionPoolIdentity identity, DbConnectionPoolProviderInfo connectionPoolProviderInfo)
private int get_CreationTimeout()
internal int get_Count()
internal DbConnectionFactory get_ConnectionFactory()
internal bool get_ErrorOccurred()
private bool get_HasTransactionAffinity()
internal TimeSpan get_LoadBalanceTimeout()
private bool get_NeedToReplenish()
internal DbConnectionPoolIdentity get_Identity()
internal bool get_IsRunning()
private int get_MaxPoolSize()
private int get_MinPoolSize()
internal int get_ObjectID()
internal DbConnectionPoolCounters get_PerformanceCounters()
internal DbConnectionPoolGroup get_PoolGroup()
internal DbConnectionPoolGroupOptions get_PoolGroupOptions()
internal DbConnectionPoolProviderInfo get_ProviderInfo()
internal ConcurrentDictionary`2<DbConnectionPoolAuthenticationContextKey, DbConnectionPoolAuthenticationContext> get_AuthenticationContexts()
internal bool get_UseLoadBalancing()
private bool get_UsingIntegrateSecurity()
private void CleanupCallback(object state)
internal void Clear()
private Timer CreateCleanupTimer()
private DbConnectionInternal CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
private void DeactivateObject(DbConnectionInternal obj)
internal void DestroyObject(DbConnectionInternal obj)
private void ErrorCallback(object state)
private Exception TryCloneCachedException()
private void WaitForPendingOpen()
internal bool TryGetConnection(DbConnection owningObject, TaskCompletionSource`1<DbConnectionInternal> retry, DbConnectionOptions userOptions, DbConnectionInternal& connection)
private bool TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal& connection)
private void PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction)
internal DbConnectionInternal ReplaceConnection(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
private DbConnectionInternal GetFromGeneralPool()
private DbConnectionInternal GetFromTransactedPool(Transaction& transaction)
private void PoolCreateRequest(object state)
internal void PutNewObject(DbConnectionInternal obj)
internal void PutObject(DbConnectionInternal obj, object owningObject)
internal void PutObjectFromTransactedPool(DbConnectionInternal obj)
private void QueuePoolCreateRequest()
private bool ReclaimEmancipatedObjects()
internal void Startup()
internal void Shutdown()
internal void TransactionEnded(Transaction transaction, DbConnectionInternal transactedObject)
private DbConnectionInternal UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
}
internal System.Data.ProviderBase.DbConnectionPoolAuthenticationContext : object {
private int STATUS_LOCKED
private int STATUS_UNLOCKED
private Byte[] _accessToken
private DateTime _expirationTime
private int _isUpdateInProgress
internal Byte[] AccessToken
internal DateTime ExpirationTime
internal void .ctor(Byte[] accessToken, DateTime expirationTime)
internal DbConnectionPoolAuthenticationContext ChooseAuthenticationContextToUpdate(DbConnectionPoolAuthenticationContext context1, DbConnectionPoolAuthenticationContext context2)
internal Byte[] get_AccessToken()
internal DateTime get_ExpirationTime()
internal bool LockToUpdate()
internal void ReleaseLockToUpdate()
}
internal System.Data.ProviderBase.DbConnectionPoolAuthenticationContextKey : object {
private string _stsAuthority
private string _servicePrincipalName
private int _hashCode
internal string StsAuthority
internal string ServicePrincipalName
internal void .ctor(string stsAuthority, string servicePrincipalName)
internal string get_StsAuthority()
internal string get_ServicePrincipalName()
public bool Equals(object obj)
public int GetHashCode()
private int ComputeHashCode()
}
internal System.Data.ProviderBase.DbConnectionPoolCounters : object {
private int CounterInstanceNameMaxLength
internal Counter HardConnectsPerSecond
internal Counter HardDisconnectsPerSecond
internal Counter SoftConnectsPerSecond
internal Counter SoftDisconnectsPerSecond
internal Counter NumberOfNonPooledConnections
internal Counter NumberOfPooledConnections
internal Counter NumberOfActiveConnectionPoolGroups
internal Counter NumberOfInactiveConnectionPoolGroups
internal Counter NumberOfActiveConnectionPools
internal Counter NumberOfInactiveConnectionPools
internal Counter NumberOfActiveConnections
internal Counter NumberOfFreeConnections
internal Counter NumberOfStasisConnections
internal Counter NumberOfReclaimedConnections
protected void .ctor(string categoryName, string categoryHelp)
private string GetAssemblyName()
private string GetInstanceName()
public void Dispose()
private void SafeDispose(Counter counter)
private void ExceptionEventHandler(object sender, UnhandledExceptionEventArgs e)
private void ExitEventHandler(object sender, EventArgs e)
private void UnloadEventHandler(object sender, EventArgs e)
}
internal System.Data.ProviderBase.DbConnectionPoolCountersNoCounters : DbConnectionPoolCounters {
public DbConnectionPoolCountersNoCounters SingletonInstance
}
internal System.Data.ProviderBase.DbConnectionPoolGroup : object {
private DbConnectionOptions _connectionOptions
private DbConnectionPoolKey _poolKey
private DbConnectionPoolGroupOptions _poolGroupOptions
private ConcurrentDictionary`2<DbConnectionPoolIdentity, DbConnectionPool> _poolCollection
private int _state
private DbConnectionPoolGroupProviderInfo _providerInfo
private DbMetaDataFactory _metaDataFactory
private int _objectTypeCount
internal int _objectID
private int PoolGroupStateActive
private int PoolGroupStateIdle
private int PoolGroupStateDisabled
internal DbConnectionOptions ConnectionOptions
internal DbConnectionPoolKey PoolKey
internal DbConnectionPoolGroupProviderInfo ProviderInfo
internal bool IsDisabled
internal int ObjectID
internal DbConnectionPoolGroupOptions PoolGroupOptions
internal DbMetaDataFactory MetaDataFactory
internal void .ctor(DbConnectionOptions connectionOptions, DbConnectionPoolKey key, DbConnectionPoolGroupOptions poolGroupOptions)
internal DbConnectionOptions get_ConnectionOptions()
internal DbConnectionPoolKey get_PoolKey()
internal DbConnectionPoolGroupProviderInfo get_ProviderInfo()
internal void set_ProviderInfo(DbConnectionPoolGroupProviderInfo value)
internal bool get_IsDisabled()
internal int get_ObjectID()
internal DbConnectionPoolGroupOptions get_PoolGroupOptions()
internal DbMetaDataFactory get_MetaDataFactory()
internal void set_MetaDataFactory(DbMetaDataFactory value)
internal int Clear()
internal DbConnectionPool GetConnectionPool(DbConnectionFactory connectionFactory)
private bool MarkPoolGroupAsActive()
internal bool Prune()
}
internal System.Data.ProviderBase.DbConnectionPoolGroupOptions : object {
private bool _poolByIdentity
private int _minPoolSize
private int _maxPoolSize
private int _creationTimeout
private TimeSpan _loadBalanceTimeout
private bool _hasTransactionAffinity
private bool _useLoadBalancing
public int CreationTimeout
public bool HasTransactionAffinity
public TimeSpan LoadBalanceTimeout
public int MaxPoolSize
public int MinPoolSize
public bool PoolByIdentity
public bool UseLoadBalancing
public void .ctor(bool poolByIdentity, int minPoolSize, int maxPoolSize, int creationTimeout, int loadBalanceTimeout, bool hasTransactionAffinity)
public int get_CreationTimeout()
public bool get_HasTransactionAffinity()
public TimeSpan get_LoadBalanceTimeout()
public int get_MaxPoolSize()
public int get_MinPoolSize()
public bool get_PoolByIdentity()
public bool get_UseLoadBalancing()
}
internal System.Data.ProviderBase.DbConnectionPoolGroupProviderInfo : object {
private DbConnectionPoolGroup _poolGroup
internal DbConnectionPoolGroup PoolGroup
internal DbConnectionPoolGroup get_PoolGroup()
internal void set_PoolGroup(DbConnectionPoolGroup value)
}
internal System.Data.ProviderBase.DbConnectionPoolIdentity : object {
private int E_NotImpersonationToken
private int Win32_CheckTokenMembership
private int Win32_GetTokenInformation_1
private int Win32_GetTokenInformation_2
private int Win32_ConvertSidToStringSidW
private int Win32_CreateWellKnownSid
public DbConnectionPoolIdentity NoIdentity
private Byte[] NetworkSid
private DbConnectionPoolIdentity _lastIdentity
private string _sidString
private bool _isRestricted
private bool _isNetwork
private int _hashCode
internal bool IsRestricted
internal bool IsNetwork
private void .ctor(string sidString, bool isRestricted, bool isNetwork)
internal bool get_IsRestricted()
internal bool get_IsNetwork()
private Byte[] CreateWellKnownSid(WellKnownSidType sidType)
public bool Equals(object value)
internal WindowsIdentity GetCurrentWindowsIdentity()
private IntPtr GetWindowsIdentityToken(WindowsIdentity identity)
internal DbConnectionPoolIdentity GetCurrent()
public int GetHashCode()
private void IntegratedSecurityError(int caller)
}
internal System.Data.ProviderBase.DbMetaDataFactory : object {
private DataSet _metaDataCollectionsDataSet
private string _normalizedServerVersion
private string _serverVersionString
private string _collectionName
private string _populationMechanism
private string _populationString
private string _maximumVersion
private string _minimumVersion
private string _dataSourceProductVersionNormalized
private string _dataSourceProductVersion
private string _restrictionDefault
private string _restrictionNumber
private string _numberOfRestrictions
private string _restrictionName
private string _parameterName
private string _dataTable
private string _sqlCommand
private string _prepareCollection
protected DataSet CollectionDataSet
protected string ServerVersion
protected string ServerVersionNormalized
public void .ctor(Stream xmlStream, string serverVersion, string normalizedServerVersion)
protected DataSet get_CollectionDataSet()
protected string get_ServerVersion()
protected string get_ServerVersionNormalized()
protected DataTable CloneAndFilterCollection(string collectionName, String[] hiddenColumnNames)
public void Dispose()
protected void Dispose(bool disposing)
private DataTable ExecuteCommand(DataRow requestedCollectionRow, String[] restrictions, DbConnection connection)
private DataColumn[] FilterColumns(DataTable sourceTable, String[] hiddenColumnNames, DataColumnCollection destinationColumns)
internal DataRow FindMetaDataCollectionRow(string collectionName)
private void FixUpVersion(DataTable dataSourceInfoTable)
private string GetParameterName(string neededCollectionName, int neededRestrictionNumber)
public DataTable GetSchema(DbConnection connection, string collectionName, String[] restrictions)
private bool IncludeThisColumn(DataColumn sourceColumn, String[] hiddenColumnNames)
private void LoadDataSetFromXml(Stream XmlStream)
protected DataTable PrepareCollection(string collectionName, String[] restrictions, DbConnection connection)
private bool SupportedByCurrentVersion(DataRow requestedCollectionRow)
}
internal System.Data.ProviderBase.DbReferenceCollection : object {
private int LockPollTime
private int DefaultCollectionSize
private CollectionEntry[] _items
private object _itemLock
private int _optimisticCount
private int _lastItemIndex
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isNotifying
public void Add(object value, int tag)
protected void AddItem(object value, int tag)
internal T FindItem(int tag, Func`2<T, bool> filterMethod)
public void Notify(int message)
protected void NotifyItem(int message, int tag, object value)
public void Remove(object value)
protected void RemoveItem(object value)
private void TryEnterItemLock(Boolean& lockObtained)
private void ExitItemLockIfNeeded(bool lockObtained)
}
internal System.Data.ProviderBase.FieldNameLookup : object {
private Hashtable _fieldNameLookup
private String[] _fieldNames
private CompareInfo _compareInfo
private int _defaultLocaleID
public void .ctor(String[] fieldNames, int defaultLocaleID)
public void .ctor(ReadOnlyCollection`1<string> columnNames, int defaultLocaleID)
public void .ctor(IDataRecord reader, int defaultLocaleID)
public int GetOrdinal(string fieldName)
public int IndexOfName(string fieldName)
public int IndexOf(string fieldName)
private int LinearIndexOf(string fieldName, CompareOptions compareOptions)
private void GenerateLookup()
}
internal System.Data.ProviderBase.SchemaMapping : object {
private int MapExactMatch
private int MapDifferentSize
private int MapReorderedValues
private int MapChapters
private int MapChaptersReordered
private int SqlXml
private int XmlDocument
private DataSet _dataSet
private DataTable _dataTable
private DataAdapter _adapter
private DataReaderContainer _dataReader
private DataTable _schemaTable
private DataTableMapping _tableMapping
private String[] _fieldNames
private Object[] _readerDataValues
private Object[] _mappedDataValues
private Int32[] _indexMap
private Boolean[] _chapterMap
private Int32[] _xmlMap
private int _mappedMode
private int _mappedLength
private LoadOption _loadOption
internal DataReaderContainer DataReader
internal DataTable DataTable
internal Object[] DataValues
internal void .ctor(DataAdapter adapter, DataSet dataset, DataTable datatable, DataReaderContainer dataReader, bool keyInfo, SchemaType schemaType, string sourceTableName, bool gettingData, DataColumn parentChapterColumn, object parentChapterValue)
internal DataReaderContainer get_DataReader()
internal DataTable get_DataTable()
internal Object[] get_DataValues()
internal void ApplyToDataRow(DataRow dataRow)
private void MappedChapterIndex()
private void MappedChapter()
private void MappedIndex()
private void MappedValues()
private Object[] GetMappedValues()
internal void LoadDataRowWithClear()
internal void LoadDataRow()
private void FreeDataRowChapters()
internal int LoadDataRowChapters(DataRow dataRow)
private Int32[] CreateIndexMap(int count, int index)
private String[] GenerateFieldNames(DataReaderContainer dataReader)
private DataColumn[] ResizeColumnArray(DataColumn[] rgcol, int len)
private void AddItemToAllowRollback(List`1& items, object value)
private void RollbackAddedItems(List`1<object> items)
private Object[] SetupSchemaWithoutKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue)
private Object[] SetupSchemaWithKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue)
private void AddAdditionalProperties(DataColumn targetColumn, DataRow schemaRow)
private void AddRelation(DataColumn parentChapterColumn, DataColumn chapterColumn)
private Object[] SetupMapping(int count, DataColumnCollection columnCollection, DataColumn chapterColumn, object chapterValue)
}
internal System.Data.ProviderBase.TimeoutTimer : object {
private long _timerExpire
private bool _isInfiniteTimeout
internal long InfiniteTimeout
internal bool IsExpired
internal bool IsInfinite
internal long LegacyTimerExpire
internal long MillisecondsRemaining
internal TimeoutTimer StartSecondsTimeout(int seconds)
internal TimeoutTimer StartMillisecondsTimeout(long milliseconds)
internal void SetTimeoutSeconds(int seconds)
internal bool get_IsExpired()
internal bool get_IsInfinite()
internal long get_LegacyTimerExpire()
internal long get_MillisecondsRemaining()
}
internal System.Data.ProviderBase.WrappedIUnknown : SafeHandle {
public bool IsInvalid
internal void .ctor(object unknown)
public bool get_IsInvalid()
internal object ComWrapper()
protected bool ReleaseHandle()
}
internal System.Data.Range : ValueType {
private int min
private int max
private bool isNotNull
public int Count
public bool IsNull
public int Max
public int Min
public void .ctor(int min, int max)
public int get_Count()
public bool get_IsNull()
public int get_Max()
public int get_Min()
internal void CheckNull()
}
internal System.Data.RBTree`1 : object {
internal int DefaultPageSize
internal int NIL
private TreePage[] _pageTable
private Int32[] _pageTableMap
private int _inUsePageCount
private int nextFreePageLine
public int root
private int _version
private int _inUseNodeCount
private int _inUseSatelliteTreeCount
private TreeAccessMethod _accessMethod
public int Count
public bool HasDuplicates
public K Item
protected void .ctor(TreeAccessMethod accessMethod)
protected int CompareNode(K record1, K record2)
protected int CompareSateliteTreeNode(K record1, K record2)
private void InitTree()
private void FreePage(TreePage<K> page)
private TreePage<K> AllocPage(int size)
private void MarkPageFull(TreePage<K> page)
private void MarkPageFree(TreePage<K> page)
private int GetIntValueFromBitMap(UInt32 bitMap)
private void FreeNode(int nodeId)
private int GetIndexOfPageWithFreeSlot(bool allocatedPage)
public int get_Count()
public bool get_HasDuplicates()
private int GetNewNode(K key)
private int Successor(int x_id)
private bool Successor(Int32& nodeId, Int32& mainTreeNodeId)
private int Minimum(int x_id)
private int LeftRotate(int root_id, int x_id, int mainTreeNode)
private int RightRotate(int root_id, int x_id, int mainTreeNode)
private int RBInsert(int root_id, int x_id, int mainTreeNodeID, int position, bool append)
public void UpdateNodeKey(K currentKey, K newKey)
public K DeleteByIndex(int i)
public int RBDelete(int z_id)
private int RBDeleteX(int root_id, int z_id, int mainTreeNodeID)
private int RBDeleteFixup(int root_id, int x_id, int px_id, int mainTreeNodeID)
private int SearchSubTree(int root_id, K key)
public int Search(K key)
public K get_Item(int index)
private NodePath<K> GetNodeByKey(K key)
public int GetIndexByKey(K key)
public int GetIndexByNode(int node)
private int GetIndexByNodePath(NodePath<K> path)
private int ComputeIndexByNode(int nodeId)
private int ComputeIndexWithSatelliteByNode(int nodeId)
private NodePath<K> GetNodeByIndex(int userIndex)
private int ComputeNodeByIndex(int index, Int32& satelliteRootId)
private int ComputeNodeByIndex(int x_id, int index)
public int Insert(K item)
public int Add(K item)
public IEnumerator GetEnumerator()
public int IndexOf(int nodeId, K item)
public int Insert(int position, K item)
public int InsertAt(int position, K item, bool append)
public void RemoveAt(int position)
public void Clear()
public void CopyTo(Array array, int index)
public void CopyTo(K[] array, int index)
private void SetRight(int nodeId, int rightNodeId)
private void SetLeft(int nodeId, int leftNodeId)
private void SetParent(int nodeId, int parentNodeId)
private void SetColor(int nodeId, NodeColor<K> color)
private void SetKey(int nodeId, K key)
private void SetNext(int nodeId, int nextNodeId)
private void SetSubTreeSize(int nodeId, int size)
private void IncreaseSize(int nodeId)
private void RecomputeSize(int nodeId)
private void DecreaseSize(int nodeId)
private void VerifySize(int nodeId, int size)
public int Right(int nodeId)
public int Left(int nodeId)
public int Parent(int nodeId)
private NodeColor<K> color(int nodeId)
public int Next(int nodeId)
public int SubTreeSize(int nodeId)
public K Key(int nodeId)
}
internal System.Data.RBTreeError : Enum {
public int value__
public RBTreeError InvalidPageSize
public RBTreeError PagePositionInSlotInUse
public RBTreeError NoFreeSlots
public RBTreeError InvalidStateinInsert
public RBTreeError InvalidNextSizeInDelete
public RBTreeError InvalidStateinDelete
public RBTreeError InvalidNodeSizeinDelete
public RBTreeError InvalidStateinEndDelete
public RBTreeError CannotRotateInvalidsuccessorNodeinDelete
public RBTreeError IndexOutOFRangeinGetNodeByIndex
public RBTreeError RBDeleteFixup
public RBTreeError UnsupportedAccessMethod1
public RBTreeError UnsupportedAccessMethod2
public RBTreeError UnsupportedAccessMethodInNonNillRootSubtree
public RBTreeError AttachedNodeWithZerorbTreeNodeId
public RBTreeError CompareNodeInDataRowTree
public RBTreeError CompareSateliteTreeNodeInDataRowTree
public RBTreeError NestedSatelliteTreeEnumerator
}
public System.Data.ReadOnlyException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.RecordManager : object {
private DataTable table
private int lastFreeRecord
private int minimumCapacity
private int recordCapacity
private List`1<int> freeRecordList
private DataRow[] rows
internal int LastFreeRecord
internal int MinimumCapacity
internal int RecordCapacity
internal DataRow Item
internal void .ctor(DataTable table)
private void GrowRecordCapacity()
internal int get_LastFreeRecord()
internal int get_MinimumCapacity()
internal void set_MinimumCapacity(int value)
internal int get_RecordCapacity()
internal void set_RecordCapacity(int value)
internal int NewCapacity(int capacity)
private int NormalizedMinimumCapacity(int capacity)
internal int NewRecordBase()
internal void FreeRecord(Int32& record)
internal void Clear(bool clearAll)
internal DataRow get_Item(int record)
internal void set_Item(int record, DataRow value)
internal void SetKeyValues(int record, DataKey key, Object[] keyValues)
internal int ImportRecord(DataTable src, int record)
internal int CopyRecord(DataTable src, int record, int copy)
internal void SetRowCache(DataRow[] newRows)
internal void VerifyRecord(int record)
internal void VerifyRecord(int record, DataRow row)
}
internal System.Data.RelatedView : DataView {
private Nullable`1<DataKey> parentKey
private DataKey childKey
private DataRowView parentRowView
private Object[] filterValues
public void .ctor(DataColumn[] columns, Object[] values)
public void .ctor(DataRowView parentRowView, DataKey parentKey, DataColumn[] childKeyColumns)
private Object[] GetParentValues()
public bool Invoke(DataRow row, DataRowVersion version)
internal IFilter GetFilter()
public DataRowView AddNew()
internal void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter)
public bool Equals(DataView dv)
private bool CompareArray(Object[] value1, Object[] value2)
}
internal System.Data.RelationshipConverter : ExpandableObjectConverter {
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
}
internal System.Data.Res : object {
public string ADP_Ascending
public string ADP_CollectionIndexInt32
public string ADP_CollectionIndexString
public string ADP_CollectionInvalidType
public string ADP_CollectionIsNotParent
public string ADP_CollectionIsParent
public string ADP_CollectionNullValue
public string ADP_CollectionRemoveInvalidObject
public string ADP_CollectionUniqueValue
public string ADP_ConnectionAlreadyOpen
public string ADP_ConnectionStateMsg_Closed
public string ADP_ConnectionStateMsg_Connecting
public string ADP_ConnectionStateMsg_Open
public string ADP_ConnectionStateMsg_OpenExecuting
public string ADP_ConnectionStateMsg_OpenFetching
public string ADP_ConnectionStateMsg
public string ADP_ConnectionStringSyntax
public string ADP_DataReaderClosed
public string ADP_DelegatedTransactionPresent
public string ADP_Descending
public string ADP_EmptyString
public string ADP_InternalConnectionError
public string ADP_InvalidDataDirectory
public string ADP_InvalidEnumerationValue
public string ADP_InvalidKey
public string ADP_InvalidOffsetValue
public string ADP_InvalidValue
public string ADP_InvalidXMLBadVersion
public string ADP_NoConnectionString
public string ADP_NonCLSException
public string ADP_NotAPermissionElement
public string ADP_OpenConnectionPropertySet
public string ADP_PendingAsyncOperation
public string ADP_PermissionTypeMismatch
public string ADP_PooledOpenTimeout
public string ADP_NonPooledOpenTimeout
public string ADP_InvalidMixedUsageOfSecureAndClearCredential
public string ADP_InvalidMixedUsageOfSecureCredentialAndIntegratedSecurity
public string ADP_InvalidMixedUsageOfSecureCredentialAndContextConnection
public string ADP_MustBeReadOnly
public string DataCategory_Data
public string DataCategory_StateChange
public string DataCategory_Update
public string DbCommand_CommandTimeout
public string DbConnection_State
public string DbConnection_StateChange
public string DbParameter_DbType
public string DbParameter_Direction
public string DbParameter_IsNullable
public string DbParameter_Offset
public string DbParameter_ParameterName
public string DbParameter_Size
public string DbParameter_SourceColumn
public string DbParameter_SourceVersion
public string DbParameter_SourceColumnNullMapping
public string DbParameter_Value
public string MDF_QueryFailed
public string MDF_TooManyRestrictions
public string MDF_InvalidRestrictionValue
public string MDF_UndefinedCollection
public string MDF_UndefinedPopulationMechanism
public string MDF_UnsupportedVersion
public string MDF_MissingDataSourceInformationColumn
public string MDF_IncorrectNumberOfDataSourceInformationRows
public string MDF_MissingRestrictionColumn
public string MDF_MissingRestrictionRow
public string MDF_NoColumns
public string MDF_UnableToBuildCollection
public string MDF_AmbigousCollectionName
public string MDF_CollectionNameISNotUnique
public string MDF_DataTableDoesNotExist
public string MDF_InvalidXml
public string MDF_InvalidXmlMissingColumn
public string MDF_InvalidXmlInvalidValue
public string DataCategory_Action
public string DataCategory_Behavior
public string DataCategory_Fill
public string DataCategory_InfoMessage
public string DataCategory_Mapping
public string DataCategory_StatementCompleted
public string DataCategory_Udt
public string DataCategory_Notification
public string DataCategory_Schema
public string DataCategory_Xml
public string DataCategory_Advanced
public string DataCategory_Context
public string DataCategory_Initialization
public string DataCategory_Pooling
public string DataCategory_NamedConnectionString
public string DataCategory_Security
public string DataCategory_Source
public string DataCategory_Replication
public string DataCategory_ConnectionResilency
public string ExtendedPropertiesDescr
public string DataSetCaseSensitiveDescr
public string DataSetDataSetNameDescr
public string DataSetDefaultViewDescr
public string DataSetEnforceConstraintsDescr
public string DataSetHasErrorsDescr
public string DataSetLocaleDescr
public string DataSetNamespaceDescr
public string DataSetPrefixDescr
public string DataSetRelationsDescr
public string DataSetTablesDescr
public string DataSetMergeFailedDescr
public string DataSetInitializedDescr
public string DataSetDescr
public string DataTableCaseSensitiveDescr
public string DataTableChildRelationsDescr
public string DataTableColumnsDescr
public string DataTableConstraintsDescr
public string DataTableDataSetDescr
public string DataTableDefaultViewDescr
public string DataTableDisplayExpressionDescr
public string DataTableHasErrorsDescr
public string DataTableLocaleDescr
public string DataTableMinimumCapacityDescr
public string DataTableNamespaceDescr
public string DataTablePrefixDescr
public string DataTableParentRelationsDescr
public string DataTablePrimaryKeyDescr
public string DataTableRowsDescr
public string DataTableTableNameDescr
public string DataTableRowChangedDescr
public string DataTableRowChangingDescr
public string DataTableRowDeletedDescr
public string DataTableRowDeletingDescr
public string DataTableColumnChangingDescr
public string DataTableColumnChangedDescr
public string DataTableRowsClearingDescr
public string DataTableRowsClearedDescr
public string DataTableRowsNewRowDescr
public string DataRelationRelationNameDescr
public string DataRelationChildColumnsDescr
public string DataRelationParentColumnsDescr
public string DataRelationNested
public string ForeignKeyConstraintDeleteRuleDescr
public string ForeignKeyConstraintUpdateRuleDescr
public string ForeignKeyConstraintAcceptRejectRuleDescr
public string ForeignKeyConstraintChildColumnsDescr
public string ForeignKeyConstraintParentColumnsDescr
public string ForeignKeyRelatedTableDescr
public string KeyConstraintColumnsDescr
public string KeyConstraintIsPrimaryKeyDescr
public string ConstraintNameDescr
public string ConstraintTableDescr
public string DataColumnAllowNullDescr
public string DataColumnAutoIncrementDescr
public string DataColumnAutoIncrementSeedDescr
public string DataColumnAutoIncrementStepDescr
public string DataColumnCaptionDescr
public string DataColumnColumnNameDescr
public string DataColumnDataTableDescr
public string DataColumnDataTypeDescr
public string DataColumnDefaultValueDescr
public string DataColumnExpressionDescr
public string DataColumnMappingDescr
public string DataColumnNamespaceDescr
public string DataColumnPrefixDescr
public string DataColumnOrdinalDescr
public string DataColumnReadOnlyDescr
public string DataColumnUniqueDescr
public string DataColumnMaxLengthDescr
public string DataColumnDateTimeModeDescr
public string DataViewAllowDeleteDescr
public string DataViewAllowEditDescr
public string DataViewAllowNewDescr
public string DataViewCountDescr
public string DataViewDataViewManagerDescr
public string DataViewIsOpenDescr
public string DataViewRowFilterDescr
public string DataViewRowStateFilterDescr
public string DataViewSortDescr
public string DataViewApplyDefaultSortDescr
public string DataViewTableDescr
public string DataViewListChangedDescr
public string DataViewManagerDataSetDescr
public string DataViewManagerTableSettingsDescr
public string Xml_SimpleTypeNotSupported
public string Xml_MissingAttribute
public string Xml_ValueOutOfRange
public string Xml_AttributeValues
public string Xml_ElementTypeNotFound
public string Xml_RelationParentNameMissing
public string Xml_RelationChildNameMissing
public string Xml_RelationTableKeyMissing
public string Xml_RelationChildKeyMissing
public string Xml_UndefinedDatatype
public string Xml_DatatypeNotDefined
public string Xml_InvalidField
public string Xml_InvalidSelector
public string Xml_InvalidKey
public string Xml_DuplicateConstraint
public string Xml_CannotConvert
public string Xml_MissingRefer
public string Xml_MismatchKeyLength
public string Xml_CircularComplexType
public string Xml_CannotInstantiateAbstract
public string Xml_MultipleTargetConverterError
public string Xml_MultipleTargetConverterEmpty
public string Xml_MergeDuplicateDeclaration
public string Xml_MissingTable
public string Xml_MissingSQL
public string Xml_ColumnConflict
public string Xml_InvalidPrefix
public string Xml_NestedCircular
public string Xml_FoundEntity
public string Xml_PolymorphismNotSupported
public string Xml_CanNotDeserializeObjectType
public string Xml_DataTableInferenceNotSupported
public string Xml_MultipleParentRows
public string Xml_IsDataSetAttributeMissingInSchema
public string Xml_TooManyIsDataSetAtributeInSchema
public string Xml_DynamicWithoutXmlSerializable
public string Expr_NYI
public string Expr_MissingOperand
public string Expr_TypeMismatch
public string Expr_ExpressionTooComplex
public string Expr_UnboundName
public string Expr_InvalidString
public string Expr_UndefinedFunction
public string Expr_Syntax
public string Expr_FunctionArgumentCount
public string Expr_MissingRightParen
public string Expr_UnknownToken
public string Expr_UnknownToken1
public string Expr_DatatypeConvertion
public string Expr_DatavalueConvertion
public string Expr_InvalidName
public string Expr_InvalidDate
public string Expr_NonConstantArgument
public string Expr_InvalidPattern
public string Expr_InWithoutParentheses
public string Expr_ArgumentType
public string Expr_ArgumentTypeInteger
public string Expr_TypeMismatchInBinop
public string Expr_AmbiguousBinop
public string Expr_InWithoutList
public string Expr_UnsupportedOperator
public string Expr_InvalidNameBracketing
public string Expr_MissingOperandBefore
public string Expr_TooManyRightParentheses
public string Expr_UnresolvedRelation
public string Expr_AggregateArgument
public string Expr_AggregateUnbound
public string Expr_EvalNoContext
public string Expr_ExpressionUnbound
public string Expr_ComputeNotAggregate
public string Expr_FilterConvertion
public string Expr_InvalidType
public string Expr_LookupArgument
public string Expr_InvokeArgument
public string Expr_ArgumentOutofRange
public string Expr_IsSyntax
public string Expr_Overflow
public string Expr_DivideByZero
public string Expr_BindFailure
public string Expr_InvalidHoursArgument
public string Expr_InvalidMinutesArgument
public string Expr_InvalidTimeZoneRange
public string Expr_MismatchKindandTimeSpan
public string Expr_UnsupportedType
public string Data_EnforceConstraints
public string Data_CannotModifyCollection
public string Data_CaseInsensitiveNameConflict
public string Data_NamespaceNameConflict
public string Data_InvalidOffsetLength
public string Data_ArgumentOutOfRange
public string Data_ArgumentNull
public string Data_ArgumentContainsNull
public string DataColumns_OutOfRange
public string DataColumns_Add1
public string DataColumns_Add2
public string DataColumns_Add3
public string DataColumns_Add4
public string DataColumns_AddDuplicate
public string DataColumns_AddDuplicate2
public string DataColumns_AddDuplicate3
public string DataColumns_Remove
public string DataColumns_RemovePrimaryKey
public string DataColumns_RemoveChildKey
public string DataColumns_RemoveConstraint
public string DataColumns_RemoveExpression
public string DataColumn_AutoIncrementAndExpression
public string DataColumn_AutoIncrementAndDefaultValue
public string DataColumn_DefaultValueAndAutoIncrement
public string DataColumn_AutoIncrementSeed
public string DataColumn_NameRequired
public string DataColumn_ChangeDataType
public string DataColumn_NullDataType
public string DataColumn_DefaultValueDataType
public string DataColumn_DefaultValueDataType1
public string DataColumn_DefaultValueColumnDataType
public string DataColumn_ReadOnlyAndExpression
public string DataColumn_UniqueAndExpression
public string DataColumn_ExpressionAndUnique
public string DataColumn_ExpressionAndReadOnly
public string DataColumn_ExpressionAndConstraint
public string DataColumn_ExpressionInConstraint
public string DataColumn_ExpressionCircular
public string DataColumn_NullKeyValues
public string DataColumn_NullValues
public string DataColumn_ReadOnly
public string DataColumn_NonUniqueValues
public string DataColumn_NotInTheTable
public string DataColumn_NotInAnyTable
public string DataColumn_SetFailed
public string DataColumn_CannotSetToNull
public string DataColumn_LongerThanMaxLength
public string DataColumn_HasToBeStringType
public string DataColumn_CannotSetMaxLength
public string DataColumn_CannotSetMaxLength2
public string DataColumn_CannotSimpleContentType
public string DataColumn_CannotSimpleContent
public string DataColumn_ExceedMaxLength
public string DataColumn_NotAllowDBNull
public string DataColumn_CannotChangeNamespace
public string DataColumn_AutoIncrementCannotSetIfHasData
public string DataColumn_NotInTheUnderlyingTable
public string DataColumn_InvalidDataColumnMapping
public string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns
public string DataColumn_InvalidDateTimeMode
public string DataColumn_DateTimeMode
public string DataColumn_INullableUDTwithoutStaticNull
public string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible
public string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged
public string DataColumn_OrdinalExceedMaximun
public string DataColumn_NullableTypesNotSupported
public string DataConstraint_NoName
public string DataConstraint_Violation
public string DataConstraint_ViolationValue
public string DataConstraint_NotInTheTable
public string DataConstraint_OutOfRange
public string DataConstraint_Duplicate
public string DataConstraint_DuplicateName
public string DataConstraint_UniqueViolation
public string DataConstraint_ForeignTable
public string DataConstraint_ParentValues
public string DataConstraint_AddFailed
public string DataConstraint_RemoveFailed
public string DataConstraint_NeededForForeignKeyConstraint
public string DataConstraint_CascadeDelete
public string DataConstraint_CascadeUpdate
public string DataConstraint_ClearParentTable
public string DataConstraint_ForeignKeyViolation
public string DataConstraint_BadObjectPropertyAccess
public string DataConstraint_RemoveParentRow
public string DataConstraint_AddPrimaryKeyConstraint
public string DataConstraint_CantAddConstraintToMultipleNestedTable
public string DataKey_TableMismatch
public string DataKey_NoColumns
public string DataKey_TooManyColumns
public string DataKey_DuplicateColumns
public string DataKey_RemovePrimaryKey
public string DataKey_RemovePrimaryKey1
public string DataRelation_ColumnsTypeMismatch
public string DataRelation_KeyColumnsIdentical
public string DataRelation_KeyLengthMismatch
public string DataRelation_KeyZeroLength
public string DataRelation_ForeignRow
public string DataRelation_NoName
public string DataRelation_ForeignTable
public string DataRelation_ForeignDataSet
public string DataRelation_GetParentRowTableMismatch
public string DataRelation_SetParentRowTableMismatch
public string DataRelation_DataSetMismatch
public string DataRelation_TablesInDifferentSets
public string DataRelation_AlreadyExists
public string DataRelation_DoesNotExist
public string DataRelation_AlreadyInOtherDataSet
public string DataRelation_AlreadyInTheDataSet
public string DataRelation_DuplicateName
public string DataRelation_NotInTheDataSet
public string DataRelation_OutOfRange
public string DataRelation_TableNull
public string DataRelation_TableWasRemoved
public string DataRelation_ChildTableMismatch
public string DataRelation_ParentTableMismatch
public string DataRelation_RelationNestedReadOnly
public string DataRelation_TableCantBeNestedInTwoTables
public string DataRelation_LoopInNestedRelations
public string DataRelation_CaseLocaleMismatch
public string DataRelation_ParentOrChildColumnsDoNotHaveDataSet
public string DataRelation_InValidNestedRelation
public string DataRelation_InValidNamespaceInNestedRelation
public string DataRow_NotInTheDataSet
public string DataRow_NotInTheTable
public string DataRow_ParentRowNotInTheDataSet
public string DataRow_EditInRowChanging
public string DataRow_EndEditInRowChanging
public string DataRow_BeginEditInRowChanging
public string DataRow_CancelEditInRowChanging
public string DataRow_DeleteInRowDeleting
public string DataRow_ValuesArrayLength
public string DataRow_NoCurrentData
public string DataRow_NoOriginalData
public string DataRow_NoProposedData
public string DataRow_RemovedFromTheTable
public string DataRow_DeletedRowInaccessible
public string DataRow_InvalidVersion
public string DataRow_OutOfRange
public string DataRow_RowInsertOutOfRange
public string DataRow_RowInsertTwice
public string DataRow_RowInsertMissing
public string DataRow_RowOutOfRange
public string DataRow_AlreadyInOtherCollection
public string DataRow_AlreadyInTheCollection
public string DataRow_AlreadyDeleted
public string DataRow_Empty
public string DataRow_AlreadyRemoved
public string DataRow_MultipleParents
public string DataRow_InvalidRowBitPattern
public string DataSet_SetNameToEmpty
public string DataSet_SetDataSetNameConflicting
public string DataSet_UnsupportedSchema
public string DataSet_CannotChangeCaseLocale
public string DataSet_CannotChangeSchemaSerializationMode
public string DataTable_ForeignPrimaryKey
public string DataTable_CannotAddToSimpleContent
public string DataTable_NoName
public string DataTable_MultipleSimpleContentColumns
public string DataTable_MissingPrimaryKey
public string DataTable_InvalidSortString
public string DataTable_CanNotSerializeDataTableHierarchy
public string DataTable_CanNotRemoteDataTable
public string DataTable_CanNotSetRemotingFormat
public string DataTable_CanNotSerializeDataTableWithEmptyName
public string DataTable_DuplicateName
public string DataTable_DuplicateName2
public string DataTable_SelfnestedDatasetConflictingName
public string DataTable_DatasetConflictingName
public string DataTable_AlreadyInOtherDataSet
public string DataTable_AlreadyInTheDataSet
public string DataTable_NotInTheDataSet
public string DataTable_OutOfRange
public string DataTable_InRelation
public string DataTable_InConstraint
public string DataTable_TableNotFound
public string DataMerge_MissingDefinition
public string DataMerge_MissingConstraint
public string DataMerge_DataTypeMismatch
public string DataMerge_PrimaryKeyMismatch
public string DataMerge_PrimaryKeyColumnsMismatch
public string DataMerge_ReltionKeyColumnsMismatch
public string DataMerge_MissingColumnDefinition
public string DataMerge_MissingPrimaryKeyColumnInSource
public string DataIndex_RecordStateRange
public string DataIndex_FindWithoutSortOrder
public string DataIndex_KeyLength
public string DataStorage_AggregateException
public string DataStorage_InvalidStorageType
public string DataStorage_ProblematicChars
public string DataStorage_SetInvalidDataType
public string DataStorage_IComparableNotDefined
public string DataView_SetFailed
public string DataView_SetDataSetFailed
public string DataView_SetRowStateFilter
public string DataView_SetTable
public string DataView_CanNotSetDataSet
public string DataView_CanNotUseDataViewManager
public string DataView_CanNotSetTable
public string DataView_CanNotUse
public string DataView_CanNotBindTable
public string DataView_SetIListObject
public string DataView_AddNewNotAllowNull
public string DataView_NotOpen
public string DataView_CreateChildView
public string DataView_CanNotDelete
public string DataView_CanNotEdit
public string DataView_GetElementIndex
public string DataView_AddExternalObject
public string DataView_CanNotClear
public string DataView_InsertExternalObject
public string DataView_RemoveExternalObject
public string DataROWView_PropertyNotFound
public string Range_Argument
public string Range_NullRange
public string RecordManager_MinimumCapacity
public string CodeGen_InvalidIdentifier
public string CodeGen_DuplicateTableName
public string CodeGen_TypeCantBeNull
public string CodeGen_NoCtor0
public string CodeGen_NoCtor1
public string SqlConvert_ConvertFailed
public string DataSet_DefaultDataException
public string DataSet_DefaultConstraintException
public string DataSet_DefaultDeletedRowInaccessibleException
public string DataSet_DefaultDuplicateNameException
public string DataSet_DefaultInRowChangingEventException
public string DataSet_DefaultInvalidConstraintException
public string DataSet_DefaultMissingPrimaryKeyException
public string DataSet_DefaultNoNullAllowedException
public string DataSet_DefaultReadOnlyException
public string DataSet_DefaultRowNotInTableException
public string DataSet_DefaultVersionNotFoundException
public string Load_ReadOnlyDataModified
public string DataTableReader_InvalidDataTableReader
public string DataTableReader_SchemaInvalidDataTableReader
public string DataTableReader_CannotCreateDataReaderOnEmptyDataSet
public string DataTableReader_DataTableReaderArgumentIsEmpty
public string DataTableReader_ArgumentContainsNullValue
public string DataTableReader_InvalidRowInDataTableReader
public string DataTableReader_DataTableCleared
public string RbTree_InvalidState
public string RbTree_EnumerationBroken
public string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration
public string DataDom_Foliation
public string DataDom_TableNameChange
public string DataDom_TableNamespaceChange
public string DataDom_ColumnNameChange
public string DataDom_ColumnNamespaceChange
public string DataDom_ColumnMappingChange
public string DataDom_TableColumnsChange
public string DataDom_DataSetTablesChange
public string DataDom_DataSetNestedRelationsChange
public string DataDom_DataSetNull
public string DataDom_DataSetNameChange
public string DataDom_CloneNode
public string DataDom_MultipleLoad
public string DataDom_MultipleDataSet
public string DataDom_EnforceConstraintsShouldBeOff
public string DataDom_NotSupport_GetElementById
public string DataDom_NotSupport_EntRef
public string DataDom_NotSupport_Clear
public string StrongTyping_CannotRemoveColumn
public string StrongTyping_CananotRemoveRelation
public string propertyChangedEventDescr
public string collectionChangedEventDescr
public string StrongTyping_CananotAccessDBNull
public string ADP_PropertyNotSupported
public string ConfigProviderNotFound
public string ConfigProviderInvalid
public string ConfigProviderNotInstalled
public string ConfigProviderMissing
public string ConfigBaseElementsOnly
public string ConfigBaseNoChildNodes
public string ConfigUnrecognizedAttributes
public string ConfigUnrecognizedElement
public string ConfigSectionsUnique
public string ConfigRequiredAttributeMissing
public string ConfigRequiredAttributeEmpty
public string ADP_EmptyArray
public string ADP_SingleValuedProperty
public string ADP_DoubleValuedProperty
public string ADP_InvalidPrefixSuffix
public string ADP_InvalidArgumentLength
public string SQL_WrongType
public string ADP_InvalidConnectionOptionValue
public string ADP_MissingConnectionOptionValue
public string ADP_InvalidConnectionOptionValueLength
public string ADP_KeywordNotSupported
public string ADP_UdlFileError
public string ADP_InvalidUDL
public string ADP_InternalProviderError
public string ADP_NoQuoteChange
public string ADP_MissingSourceCommand
public string ADP_MissingSourceCommandConnection
public string ADP_InvalidMultipartName
public string ADP_InvalidMultipartNameQuoteUsage
public string ADP_InvalidMultipartNameToManyParts
public string SQL_BulkCopyDestinationTableName
public string SQL_TDSParserTableName
public string SQL_UDTTypeName
public string SQL_TypeName
public string SQL_SqlCommandCommandText
public string ODBC_ODBCCommandText
public string OLEDB_OLEDBCommandText
public string SQLMSF_FailoverPartnerNotSupported
public string ADP_ColumnSchemaExpression
public string ADP_ColumnSchemaMismatch
public string ADP_ColumnSchemaMissing1
public string ADP_ColumnSchemaMissing2
public string ADP_InvalidSourceColumn
public string ADP_MissingColumnMapping
public string ADP_NotSupportedEnumerationValue
public string ODBC_NotSupportedEnumerationValue
public string OLEDB_NotSupportedEnumerationValue
public string SQL_NotSupportedEnumerationValue
public string ADP_ComputerNameEx
public string ADP_MissingTableSchema
public string ADP_InvalidSourceTable
public string ADP_MissingTableMapping
public string ADP_CommandTextRequired
public string ADP_ConnectionRequired
public string ADP_OpenConnectionRequired
public string ADP_ConnectionRequired_Fill
public string ADP_ConnectionRequired_FillPage
public string ADP_ConnectionRequired_FillSchema
public string ADP_ConnectionRequired_Insert
public string ADP_ConnectionRequired_Update
public string ADP_ConnectionRequired_Delete
public string ADP_ConnectionRequired_Batch
public string ADP_ConnectionRequired_Clone
public string ADP_ConnecitonRequired_UpdateRows
public string ADP_OpenConnectionRequired_Insert
public string ADP_OpenConnectionRequired_Update
public string ADP_OpenConnectionRequired_Delete
public string ADP_OpenConnectionRequired_Clone
public string ADP_NoStoredProcedureExists
public string ADP_TransactionCompleted
public string ADP_TransactionConnectionMismatch
public string ADP_TransactionCompletedButNotDisposed
public string ADP_TransactionRequired
public string ADP_OpenResultSetExists
public string ADP_OpenReaderExists
public string ADP_DeriveParametersNotSupported
public string ADP_CalledTwice
public string ADP_IncorrectAsyncResult
public string ADP_MissingSelectCommand
public string ADP_UnwantedStatementType
public string ADP_FillSchemaRequiresSourceTableName
public string ADP_InvalidMaxRecords
public string ADP_InvalidStartRecord
public string ADP_FillRequiresSourceTableName
public string ADP_FillChapterAutoIncrement
public string ADP_MissingDataReaderFieldType
public string ADP_OnlyOneTableForStartRecordOrMaxRecords
public string ADP_UpdateRequiresSourceTable
public string ADP_UpdateRequiresSourceTableName
public string ADP_MissingTableMappingDestination
public string ADP_UpdateRequiresCommandClone
public string ADP_UpdateRequiresCommandSelect
public string ADP_UpdateRequiresCommandInsert
public string ADP_UpdateRequiresCommandUpdate
public string ADP_UpdateRequiresCommandDelete
public string ADP_UpdateMismatchRowTable
public string ADP_RowUpdatedErrors
public string ADP_RowUpdatingErrors
public string ADP_ResultsNotAllowedDuringBatch
public string ADP_UpdateConcurrencyViolation_Update
public string ADP_UpdateConcurrencyViolation_Delete
public string ADP_UpdateConcurrencyViolation_Batch
public string ADP_InvalidCommandTimeout
public string ADP_UninitializedParameterSize
public string ADP_PrepareParameterType
public string ADP_PrepareParameterSize
public string ADP_PrepareParameterScale
public string ADP_MismatchedAsyncResult
public string ADP_ClosedConnectionError
public string ADP_ConnectionIsDisabled
public string ADP_LocalTransactionPresent
public string ADP_TransactionPresent
public string ADP_EmptyDatabaseName
public string ADP_DatabaseNameTooLong
public string ADP_InvalidConnectTimeoutValue
public string ADP_InvalidSourceBufferIndex
public string ADP_InvalidDestinationBufferIndex
public string ADP_DataReaderNoData
public string ADP_NumericToDecimalOverflow
public string ADP_StreamClosed
public string ADP_InvalidSeekOrigin
public string ADP_DynamicSQLJoinUnsupported
public string ADP_DynamicSQLNoTableInfo
public string ADP_DynamicSQLNoKeyInfoDelete
public string ADP_DynamicSQLNoKeyInfoUpdate
public string ADP_DynamicSQLNoKeyInfoRowVersionDelete
public string ADP_DynamicSQLNoKeyInfoRowVersionUpdate
public string ADP_DynamicSQLNestedQuote
public string ADP_NonSequentialColumnAccess
public string ADP_InvalidDateTimeDigits
public string ADP_InvalidFormatValue
public string ADP_InvalidMaximumScale
public string ADP_LiteralValueIsInvalid
public string ADP_EvenLengthLiteralValue
public string ADP_HexDigitLiteralValue
public string ADP_QuotePrefixNotSet
public string ADP_UnableToCreateBooleanLiteral
public string ADP_UnsupportedNativeDataTypeOleDb
public string ADP_InvalidDataType
public string ADP_UnknownDataType
public string ADP_UnknownDataTypeCode
public string ADP_DbTypeNotSupported
public string ADP_VersionDoesNotSupportDataType
public string ADP_ParameterValueOutOfRange
public string ADP_BadParameterName
public string ADP_MultipleReturnValue
public string ADP_InvalidSizeValue
public string ADP_NegativeParameter
public string ADP_InvalidMetaDataValue
public string ADP_NotRowType
public string ADP_ParameterConversionFailed
public string ADP_ParallelTransactionsNotSupported
public string ADP_TransactionZombied
public string ADP_DbRecordReadOnly
public string ADP_DbDataUpdatableRecordReadOnly
public string ADP_InvalidImplicitConversion
public string ADP_InvalidBufferSizeOrIndex
public string ADP_InvalidDataLength
public string ADP_InvalidDataLength2
public string ADP_NonSeqByteAccess
public string ADP_OffsetOutOfRangeException
public string ODBC_GetSchemaRestrictionRequired
public string ADP_InvalidArgumentValue
public string ADP_OdbcNoTypesFromProvider
public string ADP_NullDataTable
public string ADP_NullDataSet
public string OdbcConnection_ConnectionStringTooLong
public string Odbc_GetTypeMapping_UnknownType
public string Odbc_UnknownSQLType
public string Odbc_UnknownURTType
public string Odbc_NegativeArgument
public string Odbc_CantSetPropertyOnOpenConnection
public string Odbc_NoMappingForSqlTransactionLevel
public string Odbc_CantEnableConnectionpooling
public string Odbc_CantAllocateEnvironmentHandle
public string Odbc_FailedToGetDescriptorHandle
public string Odbc_NotInTransaction
public string Odbc_UnknownOdbcType
public string Odbc_NullData
public string Odbc_ExceptionMessage
public string Odbc_ExceptionNoInfoMsg
public string Odbc_ConnectionClosed
public string Odbc_OpenConnectionNoOwner
public string Odbc_MDACWrongVersion
public string OleDb_MDACWrongVersion
public string OleDb_SchemaRowsetsNotSupported
public string OleDb_NoErrorInformation2
public string OleDb_NoErrorInformation
public string OleDb_MDACNotAvailable
public string OleDb_MSDASQLNotSupported
public string OleDb_PossiblePromptNotUserInteractive
public string OleDb_ProviderUnavailable
public string OleDb_CommandTextNotSupported
public string OleDb_TransactionsNotSupported
public string OleDb_ConnectionStringSyntax
public string OleDb_AsynchronousNotSupported
public string OleDb_NoProviderSpecified
public string OleDb_InvalidProviderSpecified
public string OleDb_InvalidRestrictionsDbInfoKeywords
public string OleDb_InvalidRestrictionsDbInfoLiteral
public string OleDb_InvalidRestrictionsSchemaGuids
public string OleDb_NotSupportedSchemaTable
public string OleDb_ConfigWrongNumberOfValues
public string OleDb_ConfigUnableToLoadXmlMetaDataFile
public string OleDb_CommandParameterBadAccessor
public string OleDb_CommandParameterCantConvertValue
public string OleDb_CommandParameterSignMismatch
public string OleDb_CommandParameterDataOverflow
public string OleDb_CommandParameterUnavailable
public string OleDb_CommandParameterDefault
public string OleDb_CommandParameterError
public string OleDb_BadStatus_ParamAcc
public string OleDb_UninitializedParameters
public string OleDb_NoProviderSupportForParameters
public string OleDb_NoProviderSupportForSProcResetParameters
public string OleDb_CanNotDetermineDecimalSeparator
public string OleDb_Fill_NotADODB
public string OleDb_Fill_EmptyRecordSet
public string OleDb_Fill_EmptyRecord
public string OleDb_ISourcesRowsetNotSupported
public string OleDb_IDBInfoNotSupported
public string OleDb_PropertyNotSupported
public string OleDb_PropertyBadValue
public string OleDb_PropertyBadOption
public string OleDb_PropertyBadColumn
public string OleDb_PropertyNotAllSettable
public string OleDb_PropertyNotSettable
public string OleDb_PropertyNotSet
public string OleDb_PropertyConflicting
public string OleDb_PropertyNotAvailable
public string OleDb_PropertyStatusUnknown
public string OleDb_BadAccessor
public string OleDb_BadStatusRowAccessor
public string OleDb_CantConvertValue
public string OleDb_CantCreate
public string OleDb_DataOverflow
public string OleDb_GVtUnknown
public string OleDb_SignMismatch
public string OleDb_SVtUnknown
public string OleDb_Unavailable
public string OleDb_UnexpectedStatusValue
public string OleDb_ThreadApartmentState
public string OleDb_NoErrorMessage
public string OleDb_FailedGetDescription
public string OleDb_FailedGetSource
public string OleDb_DBBindingGetVector
public string ADP_InvalidMinMaxPoolSizeValues
public string ADP_ObsoleteKeyword
public string SQL_CannotGetDTCAddress
public string SQL_InvalidOptionLength
public string SQL_InvalidPacketSizeValue
public string SQL_NullEmptyTransactionName
public string SQL_SnapshotNotSupported
public string SQL_UserInstanceFailoverNotCompatible
public string SQL_EncryptionNotSupportedByClient
public string SQL_EncryptionNotSupportedByServer
public string SQL_InvalidSQLServerVersionUnknown
public string SQL_CannotModifyPropertyAsyncOperationInProgress
public string SQL_AsyncConnectionRequired
public string SQL_FatalTimeout
public string SQL_InstanceFailure
public string SQL_ChangePasswordArgumentMissing
public string SQL_ChangePasswordConflictsWithSSPI
public string SQL_ChangePasswordUseOfUnallowedKey
public string SQL_UnknownSysTxIsolationLevel
public string SQL_InvalidPartnerConfiguration
public string SQL_MarsUnsupportedOnConnection
public string SQL_ChangePasswordRequiresYukon
public string SQL_NonLocalSSEInstance
public string SQL_AsyncOperationCompleted
public string SQL_PendingBeginXXXExists
public string SQL_NonXmlResult
public string SQL_NotificationsRequireYukon
public string SQL_InvalidUdt3PartNameFormat
public string SQL_InvalidParameterTypeNameFormat
public string SQL_InvalidParameterNameLength
public string SQL_PrecisionValueOutOfRange
public string SQL_ScaleValueOutOfRange
public string SQL_TimeScaleValueOutOfRange
public string SQL_ParameterInvalidVariant
public string SQL_ParameterTypeNameRequired
public string SQL_InvalidInternalPacketSize
public string SQL_InvalidTDSVersion
public string SQL_InvalidTDSPacketSize
public string SQL_ParsingError
public string SQL_ConnectionLockedForBcpEvent
public string SQL_SNIPacketAllocationFailure
public string SQL_SmallDateTimeOverflow
public string SQL_TimeOverflow
public string SQL_MoneyOverflow
public string SQL_CultureIdError
public string SQL_OperationCancelled
public string SQL_SevereError
public string SQL_SSPIGenerateError
public string SQL_InvalidSSPIPacketSize
public string SQL_SSPIInitializeError
public string SQL_Timeout
public string SQL_Timeout_PreLogin_Begin
public string SQL_Timeout_PreLogin_InitializeConnection
public string SQL_Timeout_PreLogin_SendHandshake
public string SQL_Timeout_PreLogin_ConsumeHandshake
public string SQL_Timeout_Login_Begin
public string SQL_Timeout_Login_ProcessConnectionAuth
public string SQL_Timeout_PostLogin
public string SQL_Timeout_FailoverInfo
public string SQL_Timeout_RoutingDestinationInfo
public string SQL_Duration_PreLogin_Begin
public string SQL_Duration_PreLoginHandshake
public string SQL_Duration_Login_Begin
public string SQL_Duration_Login_ProcessConnectionAuth
public string SQL_Duration_PostLogin
public string SQL_UserInstanceFailure
public string SQL_ExceedsMaxDataLength
public string SQL_InvalidRead
public string SQL_NonBlobColumn
public string SQL_NonCharColumn
public string SQL_StreamNotSupportOnColumnType
public string SQL_TextReaderNotSupportOnColumnType
public string SQL_XmlReaderNotSupportOnColumnType
public string SQL_InvalidBufferSizeOrIndex
public string SQL_InvalidDataLength
public string SQL_SqlResultSetClosed
public string SQL_SqlResultSetClosed2
public string SQL_SqlRecordReadOnly
public string SQL_SqlRecordReadOnly2
public string SQL_SqlResultSetRowDeleted
public string SQL_SqlResultSetRowDeleted2
public string SQL_SqlResultSetCommandNotInSameConnection
public string SQL_SqlResultSetNoAcceptableCursor
public string SQL_SqlUpdatableRecordReadOnly
public string SQL_BulkLoadMappingInaccessible
public string SQL_BulkLoadMappingsNamesOrOrdinalsOnly
public string SQL_BulkLoadCannotConvertValue
public string SQL_BulkLoadNonMatchingColumnMapping
public string SQL_BulkLoadNonMatchingColumnName
public string SQL_BulkLoadStringTooLong
public string SQL_BulkLoadInvalidTimeout
public string SQL_BulkLoadInvalidVariantValue
public string SQL_BulkLoadExistingTransaction
public string SQL_BulkLoadNoCollation
public string SQL_BulkLoadConflictingTransactionOption
public string SQL_BulkLoadInvalidOperationInsideEvent
public string SQL_BulkLoadMissingDestinationTable
public string SQL_BulkLoadInvalidDestinationTable
public string SQL_BulkLoadNotAllowDBNull
public string Sql_BulkLoadLcidMismatch
public string SQL_BulkLoadPendingOperation
public string SQL_ConnectionDoomed
public string SQL_OpenResultCountExceeded
public string SQL_BatchedUpdatesNotAvailableOnContextConnection
public string SQL_ContextAllowsLimitedKeywords
public string SQL_ContextAllowsOnlyTypeSystem2005
public string SQL_ContextConnectionIsInUse
public string SQL_ContextUnavailableOutOfProc
public string SQL_ContextUnavailableWhileInProc
public string SQL_NestedTransactionScopesNotSupported
public string SQL_NotAvailableOnContextConnection
public string SQL_NotificationsNotAvailableOnContextConnection
public string SQL_UnexpectedSmiEvent
public string SQL_UserInstanceNotAvailableInProc
public string SQL_ArgumentLengthMismatch
public string SQL_InvalidSqlDbTypeWithOneAllowedType
public string SQL_PipeErrorRequiresSendEnd
public string SQL_TooManyValues
public string SQL_StreamWriteNotSupported
public string SQL_StreamReadNotSupported
public string SQL_StreamSeekNotSupported
public string SQL_ExClientConnectionId
public string SQL_ExErrorNumberStateClass
public string SQL_ExOriginalClientConnectionId
public string SQL_ExRoutingDestination
public string SqlMisc_NullString
public string SqlMisc_MessageString
public string SqlMisc_ArithOverflowMessage
public string SqlMisc_DivideByZeroMessage
public string SqlMisc_NullValueMessage
public string SqlMisc_TruncationMessage
public string SqlMisc_DateTimeOverflowMessage
public string SqlMisc_ConcatDiffCollationMessage
public string SqlMisc_CompareDiffCollationMessage
public string SqlMisc_InvalidFlagMessage
public string SqlMisc_NumeToDecOverflowMessage
public string SqlMisc_ConversionOverflowMessage
public string SqlMisc_InvalidDateTimeMessage
public string SqlMisc_TimeZoneSpecifiedMessage
public string SqlMisc_InvalidArraySizeMessage
public string SqlMisc_InvalidPrecScaleMessage
public string SqlMisc_FormatMessage
public string SqlMisc_SqlTypeMessage
public string SqlMisc_LenTooLargeMessage
public string SqlMisc_StreamErrorMessage
public string SqlMisc_StreamClosedMessage
public string SqlMisc_NoBufferMessage
public string SqlMisc_SetNonZeroLenOnNullMessage
public string SqlMisc_BufferInsufficientMessage
public string SqlMisc_WriteNonZeroOffsetOnNullMessage
public string SqlMisc_WriteOffsetLargerThanLenMessage
public string SqlMisc_TruncationMaxDataMessage
public string SqlMisc_InvalidFirstDayMessage
public string SqlMisc_NotFilledMessage
public string SqlMisc_AlreadyFilledMessage
public string SqlMisc_ClosedXmlReaderMessage
public string SqlMisc_InvalidOpStreamClosed
public string SqlMisc_InvalidOpStreamNonWritable
public string SqlMisc_InvalidOpStreamNonReadable
public string SqlMisc_InvalidOpStreamNonSeekable
public string SqlMisc_SubclassMustOverride
public string Sql_CanotCreateNormalizer
public string Sql_InternalError
public string Sql_NullCommandText
public string Sql_MismatchedMetaDataDirectionArrayLengths
public string ADP_AdapterMappingExceptionMessage
public string ADP_DataAdapterExceptionMessage
public string ADP_DBConcurrencyExceptionMessage
public string ADP_OperationAborted
public string ADP_OperationAbortedExceptionMessage
public string DataAdapter_AcceptChangesDuringFill
public string DataAdapter_AcceptChangesDuringUpdate
public string DataAdapter_ContinueUpdateOnError
public string DataAdapter_FillLoadOption
public string DataAdapter_MissingMappingAction
public string DataAdapter_MissingSchemaAction
public string DataAdapter_TableMappings
public string DataAdapter_FillError
public string DataAdapter_ReturnProviderSpecificTypes
public string DataColumnMapping_DataSetColumn
public string DataColumnMapping_SourceColumn
public string DataColumnMappings_Count
public string DataColumnMappings_Item
public string DataTableMapping_ColumnMappings
public string DataTableMapping_DataSetTable
public string DataTableMapping_SourceTable
public string DataTableMappings_Count
public string DataTableMappings_Item
public string DbDataAdapter_DeleteCommand
public string DbDataAdapter_InsertCommand
public string DbDataAdapter_SelectCommand
public string DbDataAdapter_UpdateCommand
public string DbDataAdapter_RowUpdated
public string DbDataAdapter_RowUpdating
public string DbDataAdapter_UpdateBatchSize
public string DbTable_Connection
public string DbTable_DeleteCommand
public string DbTable_InsertCommand
public string DbTable_SelectCommand
public string DbTable_UpdateCommand
public string DbTable_ReturnProviderSpecificTypes
public string DbTable_TableMapping
public string DbTable_ConflictDetection
public string DbTable_UpdateBatchSize
public string DbConnectionString_ConnectionString
public string DbConnectionString_Driver
public string DbConnectionString_DSN
public string DbConnectionString_AdoNetPooler
public string DbConnectionString_FileName
public string DbConnectionString_OleDbServices
public string DbConnectionString_Provider
public string DbConnectionString_ApplicationName
public string DbConnectionString_AsynchronousProcessing
public string DbConnectionString_AttachDBFilename
public string DbConnectionString_ConnectTimeout
public string DbConnectionString_ConnectionReset
public string DbConnectionString_ContextConnection
public string DbConnectionString_CurrentLanguage
public string DbConnectionString_DataSource
public string DbConnectionString_Encrypt
public string DbConnectionString_Enlist
public string DbConnectionString_InitialCatalog
public string DbConnectionString_FailoverPartner
public string DbConnectionString_IntegratedSecurity
public string DbConnectionString_LoadBalanceTimeout
public string DbConnectionString_MaxPoolSize
public string DbConnectionString_MinPoolSize
public string DbConnectionString_MultipleActiveResultSets
public string DbConnectionString_MultiSubnetFailover
public string DbConnectionString_NetworkLibrary
public string DbConnectionString_PacketSize
public string DbConnectionString_Password
public string DbConnectionString_PersistSecurityInfo
public string DbConnectionString_Pooling
public string DbConnectionString_Replication
public string DbConnectionString_TransactionBinding
public string DbConnectionString_TrustServerCertificate
public string DbConnectionString_TypeSystemVersion
public string DbConnectionString_UserID
public string DbConnectionString_UserInstance
public string DbConnectionString_WorkstationID
public string DbConnectionString_ApplicationIntent
public string DbConnectionString_ConnectRetryCount
public string DbConnectionString_ConnectRetryInterval
public string OdbcConnection_ConnectionString
public string OdbcConnection_ConnectionTimeout
public string OdbcConnection_Database
public string OdbcConnection_DataSource
public string OdbcConnection_Driver
public string OdbcConnection_ServerVersion
public string OleDbConnection_ConnectionString
public string OleDbConnection_ConnectionTimeout
public string OleDbConnection_Database
public string OleDbConnection_DataSource
public string OleDbConnection_Provider
public string OleDbConnection_ServerVersion
public string SqlConnection_Asynchronous
public string SqlConnection_Replication
public string SqlConnection_ConnectionString
public string SqlConnection_ConnectionTimeout
public string SqlConnection_Database
public string SqlConnection_DataSource
public string SqlConnection_PacketSize
public string SqlConnection_ServerVersion
public string SqlConnection_WorkstationId
public string SqlConnection_StatisticsEnabled
public string SqlConnection_ClientConnectionId
public string SqlConnection_Credential
public string DbConnection_InfoMessage
public string DbCommand_CommandText
public string DbCommand_CommandType
public string DbCommand_Connection
public string DbCommand_Parameters
public string DbCommand_Transaction
public string DbCommand_UpdatedRowSource
public string DbCommand_StatementCompleted
public string SqlCommand_Notification
public string SqlCommand_NotificationAutoEnlist
public string DbCommandBuilder_ConflictOption
public string DbCommandBuilder_CatalogLocation
public string DbCommandBuilder_CatalogSeparator
public string DbCommandBuilder_SchemaSeparator
public string DbCommandBuilder_QuotePrefix
public string DbCommandBuilder_QuoteSuffix
public string DbCommandBuilder_DataAdapter
public string DbCommandBuilder_SchemaLocation
public string DbCommandBuilder_SetAllValues
public string OdbcCommandBuilder_DataAdapter
public string OdbcCommandBuilder_QuotePrefix
public string OdbcCommandBuilder_QuoteSuffix
public string OleDbCommandBuilder_DataAdapter
public string OleDbCommandBuilder_DecimalSeparator
public string OleDbCommandBuilder_QuotePrefix
public string OleDbCommandBuilder_QuoteSuffix
public string SqlCommandBuilder_DataAdapter
public string SqlCommandBuilder_DecimalSeparator
public string SqlCommandBuilder_QuotePrefix
public string SqlCommandBuilder_QuoteSuffix
public string DbDataParameter_Precision
public string DbDataParameter_Scale
public string OdbcParameter_OdbcType
public string OleDbParameter_OleDbType
public string SqlParameter_ParameterName
public string SqlParameter_SqlDbType
public string SqlParameter_TypeName
public string SqlParameter_Offset
public string SqlParameter_XmlSchemaCollectionDatabase
public string SqlParameter_XmlSchemaCollectionOwningSchema
public string SqlParameter_XmlSchemaCollectionName
public string SqlParameter_UnsupportedTVPOutputParameter
public string SqlParameter_DBNullNotSupportedForTVP
public string SqlParameter_InvalidTableDerivedPrecisionForTvp
public string SqlParameter_UnexpectedTypeNameForNonStruct
public string MetaType_SingleValuedStructNotSupported
public string NullSchemaTableDataTypeNotSupported
public string InvalidSchemaTableOrdinals
public string SQL_EnumeratedRecordMetaDataChanged
public string SQL_EnumeratedRecordFieldCountChanged
public string SQLUDT_MaxByteSizeValue
public string SQLUDT_Unexpected
public string SQLUDT_InvalidDbId
public string SQLUDT_CantLoadAssembly
public string SQLUDT_InvalidUdtTypeName
public string SQLUDT_UnexpectedUdtTypeName
public string SQLUDT_InvalidSqlType
public string SQLUDT_InWhereClause
public string SqlUdt_InvalidUdtMessage
public string SqlUdtReason_MultipleSerFormats
public string SqlUdtReason_CannotSupportNative
public string SqlUdtReason_CannotSupportUserDefined
public string SqlUdtReason_NotSerializable
public string SqlUdtReason_NoPublicConstructors
public string SqlUdtReason_NotNullable
public string SqlUdtReason_NoPublicConstructor
public string SqlUdtReason_NoUdtAttribute
public string SqlUdtReason_MaplessNotYetSupported
public string SqlUdtReason_ParseMethodMissing
public string SqlUdtReason_ToStringMethodMissing
public string SqlUdtReason_NullPropertyMissing
public string SqlUdtReason_NativeFormatNoFieldSupport
public string SqlUdtReason_TypeNotPublic
public string SqlUdtReason_NativeUdtNotSequentialLayout
public string SqlUdtReason_NativeUdtMaxByteSize
public string SqlUdtReason_NonSerializableField
public string SqlUdtReason_NativeFormatExplictLayoutNotAllowed
public string SqlUdtReason_MultivaluedAssemblyId
public string SQLTVP_TableTypeCanOnlyBeParameter
public string SqlFileStream_InvalidPath
public string SqlFileStream_InvalidParameter
public string SqlFileStream_FileAlreadyInTransaction
public string SqlFileStream_PathNotValidDiskResource
public string SqlDelegatedTransaction_PromotionFailed
public string SqlDependency_SqlDependency
public string SqlDependency_HasChanges
public string SqlDependency_Id
public string SqlDependency_OnChange
public string SqlDependency_AddCommandDependency
public string SqlDependency_Duplicate
public string SQLNotify_AlreadyHasCommand
public string SqlNotify_SqlDepCannotBeCreatedInProc
public string SqlDependency_DatabaseBrokerDisabled
public string SqlDependency_DefaultOptionsButNoStart
public string SqlDependency_EventNoDuplicate
public string SqlDependency_DuplicateStart
public string SqlDependency_IdMismatch
public string SqlDependency_NoMatchingServerStart
public string SqlDependency_NoMatchingServerDatabaseStart
public string SqlDependency_InvalidTimeout
public string SQLNotify_ErrorFormat
public string SqlMetaData_NoMetadata
public string SqlMetaData_InvalidSqlDbTypeForConstructorFormat
public string SqlMetaData_NameTooLong
public string SqlMetaData_SpecifyBothSortOrderAndOrdinal
public string SqlProvider_InvalidDataColumnType
public string SqlProvider_InvalidDataColumnMaxLength
public string SqlProvider_NotEnoughColumnsInStructuredType
public string SqlProvider_DuplicateSortOrdinal
public string SqlProvider_MissingSortOrdinal
public string SqlProvider_SortOrdinalGreaterThanFieldCount
public string IEnumerableOfSqlDataRecordHasNoRows
public string SqlPipe_CommandHookedUpToNonContextConnection
public string SqlPipe_MessageTooLong
public string SqlPipe_IsBusy
public string SqlPipe_AlreadyHasAnOpenResultSet
public string SqlPipe_DoesNotHaveAnOpenResultSet
public string SNI_PN0
public string SNI_PN1
public string SNI_PN2
public string SNI_PN3
public string SNI_PN4
public string SNI_PN5
public string SNI_PN6
public string SNI_PN7
public string SNI_PN8
public string SNI_PN9
public string SNI_PN10
public string SNI_ERROR_1
public string SNI_ERROR_2
public string SNI_ERROR_3
public string SNI_ERROR_4
public string SNI_ERROR_5
public string SNI_ERROR_6
public string SNI_ERROR_7
public string SNI_ERROR_8
public string SNI_ERROR_9
public string SNI_ERROR_10
public string SNI_ERROR_11
public string SNI_ERROR_12
public string SNI_ERROR_13
public string SNI_ERROR_14
public string SNI_ERROR_15
public string SNI_ERROR_16
public string SNI_ERROR_17
public string SNI_ERROR_18
public string SNI_ERROR_19
public string SNI_ERROR_20
public string SNI_ERROR_21
public string SNI_ERROR_22
public string SNI_ERROR_23
public string SNI_ERROR_24
public string SNI_ERROR_25
public string SNI_ERROR_26
public string SNI_ERROR_27
public string SNI_ERROR_28
public string SNI_ERROR_29
public string SNI_ERROR_30
public string SNI_ERROR_31
public string SNI_ERROR_32
public string SNI_ERROR_33
public string SNI_ERROR_34
public string SNI_ERROR_35
public string SNI_ERROR_36
public string SNI_ERROR_37
public string SNI_ERROR_38
public string SNI_ERROR_39
public string SNI_ERROR_40
public string SNI_ERROR_41
public string SNI_ERROR_42
public string SNI_ERROR_43
public string SNI_ERROR_44
public string SNI_ERROR_47
public string SNI_ERROR_48
public string SNI_ERROR_49
public string SNI_ERROR_50
public string SNI_ERROR_51
public string SNI_ERROR_52
public string SNI_ERROR_53
public string SNI_ERROR_54
public string SNI_ERROR_55
public string SNI_ERROR_56
public string SNI_ERROR_57
public string Snix_Connect
public string Snix_PreLoginBeforeSuccessfullWrite
public string Snix_PreLogin
public string Snix_LoginSspi
public string Snix_Login
public string Snix_EnableMars
public string Snix_AutoEnlist
public string Snix_GetMarsSession
public string Snix_Execute
public string Snix_Read
public string Snix_Close
public string Snix_SendRows
public string Snix_ProcessSspi
public string LocalDB_CreateFailed
public string LocalDB_BadConfigSectionType
public string LocalDB_FailedGetDLLHandle
public string LocalDB_MethodNotFound
public string LocalDB_UnobtainableMessage
public string LocalDB_InvalidVersion
public string SQLROR_RecursiveRoutingNotSupported
public string SQLROR_FailoverNotSupported
public string SQLROR_UnexpectedRoutingInfo
public string SQLROR_InvalidRoutingInfo
public string SQLROR_TimeoutAfterRoutingInfo
public string SQLCR_InvalidConnectRetryCountValue
public string SQLCR_InvalidConnectRetryIntervalValue
public string SQLCR_NextAttemptWillExceedQueryTimeout
public string SQLCR_EncryptionChanged
public string SQLCR_TDSVestionNotPreserved
public string SQLCR_AllAttemptsFailed
public string SQLCR_UnrecoverableServer
public string SQLCR_UnrecoverableClient
public string SQLCR_NoCRAckAtReconnection
public string ADP_InvalidMixedUsageOfAccessTokenAndAuthentication
public string ADP_InvalidMixedUsageOfAccessTokenAndContextConnection
public string ADP_InvalidMixedUsageOfAccessTokenAndCredential
public string ADP_InvalidMixedUsageOfAccessTokenAndIntegratedSecurity
public string ADP_InvalidMixedUsageOfAccessTokenAndUserIDPassword
public string ADP_InvalidMixedUsageOfCredentialAndAccessToken
public string DbConnectionString_Authentication
public string SQL_AuthenticationAndIntegratedSecurity
public string SQL_CredentialsNotProvided
public string SQL_IntegratedWithUserIDAndPassword
public string SQL_ParsingErrorAuthLibraryType
public string SQL_ParsingErrorFeatureId
public string SQL_ParsingErrorLength
public string SQL_ParsingErrorOffset
public string SQL_ParsingErrorStatus
public string SQL_ParsingErrorToken
public string SQL_ParsingErrorValue
public string SQL_ParsingErrorWithState
public string SQL_SettingCredentialWithIntegrated
public string SQL_SettingIntegratedWithCredential
public string TCE_BatchedUpdateColumnEncryptionSettingMismatch
public string TCE_CanOnlyCallOnce
public string TCE_CertificateNotFound
public string TCE_CertificateNotFoundSysErr
public string TCE_CertificateWithNoPrivateKey
public string TCE_CertificateWithNoPrivateKeySysErr
public string TCE_ColumnDecryptionFailed
public string TCE_DbConnectionString_ColumnEncryptionSetting
public string TCE_DecryptionFailed
public string TCE_EmptyCertificateThumbprint
public string TCE_EmptyCertificateThumbprintSysErr
public string TCE_EmptyColumnEncryptionKey
public string TCE_EmptyEncryptedColumnEncryptionKey
public string TCE_EmptyProviderName
public string TCE_InvalidAlgorithmVersion
public string TCE_InvalidAlgorithmVersionInEncryptedCEK
public string TCE_InvalidAuthenticationTag
public string TCE_InvalidCertificateLocation
public string TCE_InvalidCertificateLocationSysErr
public string TCE_InvalidCertificatePath
public string TCE_InvalidCertificatePathSysErr
public string TCE_InvalidCertificateSignature
public string TCE_InvalidCertificateStore
public string TCE_InvalidCertificateStoreSysErr
public string TCE_InvalidCipherTextSize
public string TCE_InvalidCiphertextLengthInEncryptedCEK
public string TCE_InvalidCustomKeyStoreProviderName
public string TCE_InvalidEncryptionKeyOrdinal
public string TCE_InvalidEncryptionType
public string TCE_InvalidKeyEncryptionAlgorithm
public string TCE_InvalidKeyEncryptionAlgorithmSysErr
public string TCE_InvalidKeySize
public string TCE_InvalidSignatureInEncryptedCEK
public string TCE_KeyDecryptionFailed
public string TCE_KeyDecryptionFailedCertStore
public string TCE_LargeCertificatePathLength
public string TCE_LargeCertificatePathLengthSysErr
public string TCE_NotSupportedByServer
public string TCE_NullCertificatePath
public string TCE_NullCertificatePathSysErr
public string TCE_NullCipherText
public string TCE_NullColumnEncryptionAlgorithm
public string TCE_NullColumnEncryptionKey
public string TCE_NullColumnEncryptionKeySysErr
public string TCE_NullCustomKeyStoreProviderDictionary
public string TCE_NullEncryptedColumnEncryptionKey
public string TCE_NullKeyEncryptionAlgorithm
public string TCE_NullKeyEncryptionAlgorithmSysErr
public string TCE_NullPlainText
public string TCE_NullProviderValue
public string TCE_ParamDecryptionFailed
public string TCE_ParamEncryptionFailed
public string TCE_ParamEncryptionMetaDataMissing
public string TCE_ParamInvalidForceColumnEncryptionSetting
public string TCE_ParamUnExpectedEncryptionMetadata
public string TCE_ProcEncryptionMetaDataMissing
public string TCE_SequentialAccessNotSupportedOnEncryptedColumn
public string TCE_SqlCommand_ColumnEncryptionSetting
public string TCE_SqlConnection_TrustedColumnMasterKeyPaths
public string TCE_SqlParameter_ForceColumnEncryption
public string TCE_StreamNotSupportOnEncryptedColumn
public string TCE_UnexpectedDescribeParamFormat
public string TCE_UnknownColumnEncryptionAlgorithm
public string TCE_UnknownColumnEncryptionAlgorithmId
public string TCE_UnrecognizedKeyStoreProviderName
public string TCE_UnsupportedDatatype
public string TCE_UnsupportedNormalizationVersion
public string TCE_UntrustedKeyPath
public string TCE_VeryLargeCiphertext
public string DbConnectionString_TransparentNetworkIPResolution
public string TCE_NullCspPathSysErr
public string TCE_NullCspPath
public string TCE_NullCngPathSysErr
public string TCE_NullCngPath
public string TCE_InvalidCspPathSysErr
public string TCE_InvalidCspPath
public string TCE_InvalidCngPathSysErr
public string TCE_InvalidCngPath
public string TCE_EmptyCspNameSysErr
public string TCE_EmptyCspName
public string TCE_EmptyCngNameSysErr
public string TCE_EmptyCngName
public string TCE_EmptyCspKeyIdSysErr
public string TCE_EmptyCspKeyId
public string TCE_EmptyCngKeyIdSysErr
public string TCE_EmptyCngKeyId
public string TCE_InvalidCspNameSysErr
public string TCE_InvalidCspName
public string TCE_InvalidCspKeyIdSysErr
public string TCE_InvalidCspKeyId
public string TCE_InvalidCngKeySysErr
public string TCE_InvalidCngKey
public string TCE_InvalidCiphertextLengthInEncryptedCEKCsp
public string TCE_InvalidCiphertextLengthInEncryptedCEKCng
public string TCE_InvalidSignatureInEncryptedCEKCsp
public string TCE_InvalidSignatureInEncryptedCEKCng
public string TCE_InvalidSignature
public string GT_Disabled
public string GT_UnsupportedSysTxVersion
public string GetString(string name)
public string GetString(string name, Object[] args)
}
internal System.Data.ResCategoryAttribute : CategoryAttribute {
public void .ctor(string category)
}
internal System.Data.ResDescriptionAttribute : DescriptionAttribute {
public void .ctor(string description)
}
public System.Data.RowNotInTableException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
public System.Data.Rule : Enum {
public int value__
public Rule None
public Rule Cascade
public Rule SetNull
public Rule SetDefault
}
internal System.Data.SchemaFormat : Enum {
public int value__
public SchemaFormat Public
public SchemaFormat Remoting
public SchemaFormat WebService
public SchemaFormat RemotingSkipSchema
public SchemaFormat WebServiceSkipSchema
}
public System.Data.SchemaSerializationMode : Enum {
public int value__
public SchemaSerializationMode IncludeSchema
public SchemaSerializationMode ExcludeSchema
}
public System.Data.SchemaType : Enum {
public int value__
public SchemaType Source
public SchemaType Mapped
}
internal System.Data.Select : object {
private DataTable table
private IndexField[] IndexFields
private DataViewRowState recordStates
private DataExpression rowFilter
private ExpressionNode expression
private Index index
private Int32[] records
private int recordCount
private ExpressionNode linearExpression
private bool candidatesForBinarySearch
private ColumnInfo[] candidateColumns
private int nCandidates
private int matchedCandidates
public void .ctor(DataTable table, string filterExpression, string sort, DataViewRowState recordStates)
private bool IsSupportedOperator(int op)
private void AnalyzeExpression(BinaryNode expr)
private bool CompareSortIndexDesc(IndexField[] fields)
private bool FindSortIndex()
private int CompareClosestCandidateIndexDesc(IndexField[] fields)
private bool FindClosestCandidateIndex()
private void InitCandidateColumns()
private void CreateIndex()
private bool IsOperatorIn(ExpressionNode enode)
private void BuildLinearExpression()
public DataRow[] SelectRows()
public DataRow[] GetRows()
private bool AcceptRecord(int record)
private int Eval(BinaryNode expr, DataRow row, DataRowVersion version)
private int Evaluate(int record)
private int FindFirstMatchingRecord()
private int FindLastMatchingRecord(int lo)
private Range GetBinaryFilteredRecords()
private Int32[] GetLinearFilteredRecords(Range range)
private DataRow[] GetLinearFilteredRows(Range range)
private int CompareRecords(int record1, int record2)
private void Sort(int left, int right)
}
public System.Data.SerializationFormat : Enum {
public int value__
public SerializationFormat Xml
public SerializationFormat Binary
}
internal System.Data.SimpleType : object {
private string baseType
private SimpleType baseSimpleType
private XmlQualifiedName xmlBaseType
private string name
private int length
private int minLength
private int maxLength
private string pattern
private string ns
private string maxExclusive
private string maxInclusive
private string minExclusive
private string minInclusive
internal string enumeration
internal string BaseType
internal XmlQualifiedName XmlBaseType
internal string Name
internal string Namespace
internal int Length
internal int MaxLength
internal SimpleType BaseSimpleType
public string SimpleTypeQualifiedName
internal void .ctor(string baseType)
internal void .ctor(XmlSchemaSimpleType node)
private void .ctor(SerializationInfo info, StreamingContext context)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
internal void LoadTypeValues(XmlSchemaSimpleType node)
internal bool IsPlainString()
internal string get_BaseType()
internal XmlQualifiedName get_XmlBaseType()
internal string get_Name()
internal string get_Namespace()
internal int get_Length()
internal int get_MaxLength()
internal void set_MaxLength(int value)
internal SimpleType get_BaseSimpleType()
public string get_SimpleTypeQualifiedName()
internal string QualifiedName(string name)
internal XmlNode ToNode(XmlDocument dc, Hashtable prefixes, bool inRemoting)
internal SimpleType CreateEnumeratedType(string values)
internal SimpleType CreateByteArrayType(string encoding)
internal SimpleType CreateLimitedStringType(int length)
internal SimpleType CreateSimpleType(StorageType typeCode, Type type)
internal string HasConflictingDefinition(SimpleType otherSimpleType)
internal bool CanHaveMaxLength()
internal void ConvertToAnnonymousSimpleType()
}
public System.Data.Sql.SqlDataSourceEnumerator : DbDataSourceEnumerator {
private SqlDataSourceEnumerator SingletonInstance
internal string ServerName
internal string InstanceName
internal string IsClustered
internal string Version
private int timeoutSeconds
private long timeoutTime
private string _Version
private string _Cluster
private int _clusterLength
private int _versionLength
public SqlDataSourceEnumerator Instance
public SqlDataSourceEnumerator get_Instance()
public DataTable GetDataSources()
private DataTable ParseServerEnumString(string serverInstances)
}
internal System.Data.Sql.SqlGenericUtil : object {
internal Exception NullCommandText()
internal Exception MismatchedMetaDataDirectionArrayLengths()
}
public System.Data.Sql.SqlNotificationRequest : object {
private string _userData
private string _options
private int _timeout
public string Options
public int Timeout
public string UserData
public void .ctor(string userData, string options, int timeout)
public string get_Options()
public void set_Options(string value)
public int get_Timeout()
public void set_Timeout(int value)
public string get_UserData()
public void set_UserData(string value)
}
internal System.Data.SqlClient.ActiveDirectoryAuthentication : object {
internal string AdoClientId
internal string AdalGetAccessTokenFunctionName
internal int GetAccessTokenSuccess
internal int GetAccessTokenInvalidGrant
internal int GetAccessTokenTansisentError
internal int GetAccessTokenOtherError
}
public System.Data.SqlClient.ApplicationIntent : Enum {
public int value__
public ApplicationIntent ReadWrite
public ApplicationIntent ReadOnly
}
internal System.Data.SqlClient.AsyncHelper : object {
internal void WaitForCompletion(Task task, int timeout, Action onTimeout, bool rethrowExceptions)
internal void SetTimeoutException(TaskCompletionSource`1<object> completion, int timeout, Func`1<Exception> exc, CancellationToken ctoken)
}
internal System.Data.SqlClient.DescribeParameterEncryptionResultSet1 : Enum {
public int value__
public DescribeParameterEncryptionResultSet1 KeyOrdinal
public DescribeParameterEncryptionResultSet1 DbId
public DescribeParameterEncryptionResultSet1 KeyId
public DescribeParameterEncryptionResultSet1 KeyVersion
public DescribeParameterEncryptionResultSet1 KeyMdVersion
public DescribeParameterEncryptionResultSet1 EncryptedKey
public DescribeParameterEncryptionResultSet1 ProviderName
public DescribeParameterEncryptionResultSet1 KeyPath
public DescribeParameterEncryptionResultSet1 KeyEncryptionAlgorithm
}
internal System.Data.SqlClient.DescribeParameterEncryptionResultSet2 : Enum {
public int value__
public DescribeParameterEncryptionResultSet2 ParameterOrdinal
public DescribeParameterEncryptionResultSet2 ParameterName
public DescribeParameterEncryptionResultSet2 ColumnEncryptionAlgorithm
public DescribeParameterEncryptionResultSet2 ColumnEncrytionType
public DescribeParameterEncryptionResultSet2 ColumnEncryptionKeyOrdinal
public DescribeParameterEncryptionResultSet2 NormalizationRuleVersion
}
internal System.Data.SqlClient.InOutOfProcHelper : object {
private InOutOfProcHelper SingletonInstance
private bool _inProc
internal bool InProc
internal bool get_InProc()
}
internal System.Data.SqlClient.NetworkLibraryConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlNotificationEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SqlClient.ParsingErrorState : Enum {
public int value__
public ParsingErrorState Undefined
public ParsingErrorState FedAuthInfoLengthTooShortForCountOfInfoIds
public ParsingErrorState FedAuthInfoLengthTooShortForData
public ParsingErrorState FedAuthInfoFailedToReadCountOfInfoIds
public ParsingErrorState FedAuthInfoFailedToReadTokenStream
public ParsingErrorState FedAuthInfoInvalidOffset
public ParsingErrorState FedAuthInfoFailedToReadData
public ParsingErrorState FedAuthInfoDataNotUnicode
public ParsingErrorState FedAuthInfoDoesNotContainStsurlAndSpn
public ParsingErrorState FedAuthInfoNotReceived
public ParsingErrorState FedAuthNotAcknowledged
public ParsingErrorState FedAuthFeatureAckContainsExtraData
public ParsingErrorState FedAuthFeatureAckUnknownLibraryType
public ParsingErrorState UnrequestedFeatureAckReceived
public ParsingErrorState UnknownFeatureAck
public ParsingErrorState InvalidTdsTokenReceived
public ParsingErrorState SessionStateLengthTooShort
public ParsingErrorState SessionStateInvalidStatus
public ParsingErrorState CorruptedTdsStream
public ParsingErrorState ProcessSniPacketFailed
public ParsingErrorState FedAuthRequiredPreLoginResponseInvalidValue
public ParsingErrorState TceUnknownVersion
public ParsingErrorState TceInvalidVersion
public ParsingErrorState TceInvalidOrdinalIntoCipherInfoTable
}
internal System.Data.SqlClient.SniContext : Enum {
public int value__
public SniContext Undefined
public SniContext Snix_Connect
public SniContext Snix_PreLoginBeforeSuccessfullWrite
public SniContext Snix_PreLogin
public SniContext Snix_LoginSspi
public SniContext Snix_ProcessSspi
public SniContext Snix_Login
public SniContext Snix_EnableMars
public SniContext Snix_AutoEnlist
public SniContext Snix_GetMarsSession
public SniContext Snix_Execute
public SniContext Snix_Read
public SniContext Snix_Close
public SniContext Snix_SendRows
}
public System.Data.SqlClient.SortOrder : Enum {
public int value__
public SortOrder Ascending
public SortOrder Descending
public SortOrder Unspecified
}
internal System.Data.SqlClient.SQL : object {
internal Byte[] AttentionHeader
internal string WriteToServer
internal int SqlDependencyTimeoutDefault
internal int SqlDependencyServerTimeout
internal string SqlNotificationServiceDefault
internal string SqlNotificationStoredProcedureDefault
internal string Transaction
internal string Connection
private Func`2<SqlClientEncryptionType, string> <>f__am$cache0
private Func`2<string, string> <>f__am$cache1
private Func`2<string, string> <>f__am$cache2
internal Exception CannotGetDTCAddress()
internal Exception InvalidOptionLength(string key)
internal Exception InvalidInternalPacketSize(string str)
internal Exception InvalidPacketSize()
internal Exception InvalidPacketSizeValue()
internal Exception InvalidSSPIPacketSize()
internal Exception NullEmptyTransactionName()
internal Exception SnapshotNotSupported(IsolationLevel level)
internal Exception UserInstanceFailoverNotCompatible()
internal Exception CredentialsNotProvided(SqlAuthenticationMethod auth)
internal Exception AuthenticationAndIntegratedSecurity()
internal Exception IntegratedWithUserIDAndPassword()
internal Exception SettingIntegratedWithCredential()
internal Exception SettingCredentialWithIntegratedArgument()
internal Exception SettingCredentialWithIntegratedInvalid()
internal Exception InvalidSQLServerVersionUnknown()
internal Exception SynchronousCallMayNotPend()
internal Exception ConnectionLockedForBcpEvent()
internal Exception AsyncConnectionRequired()
internal Exception FatalTimeout()
internal Exception InstanceFailure()
internal Exception ChangePasswordArgumentMissing(string argumentName)
internal Exception ChangePasswordConflictsWithSSPI()
internal Exception ChangePasswordRequiresYukon()
internal Exception UnknownSysTxIsolationLevel(IsolationLevel isolationLevel)
internal Exception ChangePasswordUseOfUnallowedKey(string key)
internal Exception InvalidPartnerConfiguration(string server, string database)
internal Exception BatchedUpdateColumnEncryptionSettingMismatch()
internal Exception MARSUnspportedOnConnection()
internal Exception CannotModifyPropertyAsyncOperationInProgress(string property)
internal Exception NonLocalSSEInstance()
internal Exception NotificationsRequireYukon()
internal ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, int value)
internal ArgumentOutOfRangeException NotSupportedCommandType(CommandType value)
internal ArgumentOutOfRangeException NotSupportedIsolationLevel(IsolationLevel value)
internal Exception OperationCancelled()
internal Exception PendingBeginXXXExists()
internal ArgumentOutOfRangeException InvalidSqlDependencyTimeout(string param)
internal Exception NonXmlResult()
internal Exception InvalidUdt3PartNameFormat()
internal Exception InvalidParameterTypeNameFormat()
internal Exception InvalidParameterNameLength(string value)
internal Exception PrecisionValueOutOfRange(byte precision)
internal Exception ScaleValueOutOfRange(byte scale)
internal Exception TimeScaleValueOutOfRange(byte scale)
internal Exception InvalidSqlDbType(SqlDbType value)
internal Exception UnsupportedTVPOutputParameter(ParameterDirection direction, string paramName)
internal Exception DBNullNotSupportedForTVPValues(string paramName)
internal Exception InvalidTableDerivedPrecisionForTvp(string columnName, byte precision)
internal Exception UnexpectedTypeNameForNonStructParams(string paramName)
internal Exception SingleValuedStructNotSupported()
internal Exception ParameterInvalidVariant(string paramName)
internal Exception MustSetTypeNameForParam(string paramType, string paramName)
internal Exception NullSchemaTableDataTypeNotSupported(string columnName)
internal Exception InvalidSchemaTableOrdinals()
internal Exception EnumeratedRecordMetaDataChanged(string fieldName, int recordNumber)
internal Exception EnumeratedRecordFieldCountChanged(int recordNumber)
internal Exception InvalidTDSVersion()
internal Exception ParsingError(ParsingErrorState state)
internal Exception ParsingError(ParsingErrorState state, Exception innerException)
internal Exception ParsingErrorValue(ParsingErrorState state, int value)
internal Exception ParsingErrorOffset(ParsingErrorState state, int offset)
internal Exception ParsingErrorFeatureId(ParsingErrorState state, int featureId)
internal Exception ParsingErrorToken(ParsingErrorState state, int token)
internal Exception ParsingErrorLength(ParsingErrorState state, int length)
internal Exception ParsingErrorStatus(ParsingErrorState state, int status)
internal Exception ParsingErrorLibraryType(ParsingErrorState state, int libraryType)
internal Exception MoneyOverflow(string moneyValue)
internal Exception SmallDateTimeOverflow(string datetime)
internal Exception SNIPacketAllocationFailure()
internal Exception TimeOverflow(string time)
internal Exception InvalidRead()
internal Exception NonBlobColumn(string columnName)
internal Exception NonCharColumn(string columnName)
internal Exception StreamNotSupportOnColumnType(string columnName)
internal Exception StreamNotSupportOnEncryptedColumn(string columnName)
internal Exception SequentialAccessNotSupportedOnEncryptedColumn(string columnName)
internal Exception TextReaderNotSupportOnColumnType(string columnName)
internal Exception XmlReaderNotSupportOnColumnType(string columnName)
internal Exception UDTUnexpectedResult(string exceptionText)
internal Exception CannotCompleteDelegatedTransactionWithOpenResults(SqlInternalConnectionTds internalConnection)
internal TransactionPromotionException PromotionFailed(Exception inner)
internal Exception SqlCommandHasExistingSqlNotificationRequest()
internal Exception SqlDepCannotBeCreatedInProc()
internal Exception SqlDepDefaultOptionsButNoStart()
internal Exception SqlDependencyDatabaseBrokerDisabled()
internal Exception SqlDependencyEventNoDuplicate()
internal Exception SqlDependencyDuplicateStart()
internal Exception SqlDependencyIdMismatch()
internal Exception SqlDependencyNoMatchingServerStart()
internal Exception SqlDependencyNoMatchingServerDatabaseStart()
internal Exception SqlNotificationException(SqlNotificationEventArgs notify)
internal Exception SqlMetaDataNoMetaData()
internal Exception MustSetUdtTypeNameForUdtParams()
internal Exception UnexpectedUdtTypeNameForNonUdtParams()
internal Exception UDTInvalidSqlType(string typeName)
internal Exception InvalidSqlDbTypeForConstructor(SqlDbType type)
internal Exception NameTooLong(string parameterName)
internal Exception InvalidSortOrder(SortOrder order)
internal Exception MustSpecifyBothSortOrderAndOrdinal(SortOrder order, int ordinal)
internal Exception TableTypeCanOnlyBeParameter()
internal Exception UnsupportedColumnTypeForSqlProvider(string columnName, string typeName)
internal Exception InvalidColumnMaxLength(string columnName, long maxLength)
internal Exception InvalidColumnPrecScale()
internal Exception NotEnoughColumnsInStructuredType()
internal Exception DuplicateSortOrdinal(int sortOrdinal)
internal Exception MissingSortOrdinal(int sortOrdinal)
internal Exception SortOrdinalGreaterThanFieldCount(int columnOrdinal, int sortOrdinal)
internal Exception IEnumerableOfSqlDataRecordHasNoRows()
internal Exception SqlPipeCommandHookedUpToNonContextConnection()
internal Exception SqlPipeMessageTooLong(int messageLength)
internal Exception SqlPipeIsBusy()
internal Exception SqlPipeAlreadyHasAnOpenResultSet(string methodName)
internal Exception SqlPipeDoesNotHaveAnOpenResultSet(string methodName)
internal Exception SqlResultSetClosed(string methodname)
internal Exception SqlResultSetNoData(string methodname)
internal Exception SqlRecordReadOnly(string methodname)
internal Exception SqlResultSetRowDeleted(string methodname)
internal Exception SqlResultSetCommandNotInSameConnection()
internal Exception SqlResultSetNoAcceptableCursor()
internal Exception BulkLoadMappingInaccessible()
internal Exception BulkLoadMappingsNamesOrOrdinalsOnly()
internal Exception BulkLoadNonMatchingColumnMapping()
internal Exception BulkLoadNonMatchingColumnName(string columnName)
internal Exception BulkLoadNonMatchingColumnName(string columnName, Exception e)
internal Exception BulkLoadStringTooLong()
internal Exception BulkLoadInvalidVariantValue()
internal Exception BulkLoadInvalidTimeout(int timeout)
internal Exception BulkLoadExistingTransaction()
internal Exception BulkLoadNoCollation()
internal Exception BulkLoadConflictingTransactionOption()
internal Exception BulkLoadLcidMismatch(int sourceLcid, string sourceColumnName, int destinationLcid, string destinationColumnName)
internal Exception InvalidOperationInsideEvent()
internal Exception BulkLoadMissingDestinationTable()
internal Exception BulkLoadInvalidDestinationTable(string tableName, Exception inner)
internal Exception BulkLoadBulkLoadNotAllowDBNull(string columnName)
internal Exception BulkLoadPendingOperation()
internal Exception InvalidKeyEncryptionAlgorithm(string encryptionAlgorithm, string validEncryptionAlgorithm, bool isSystemOp)
internal Exception NullKeyEncryptionAlgorithm(bool isSystemOp)
internal Exception EmptyColumnEncryptionKey()
internal Exception NullColumnEncryptionKey()
internal Exception EmptyEncryptedColumnEncryptionKey()
internal Exception NullEncryptedColumnEncryptionKey()
internal Exception LargeCertificatePathLength(int actualLength, int maxLength, bool isSystemOp)
internal Exception NullCertificatePath(String[] validLocations, bool isSystemOp)
internal Exception NullCspKeyPath(bool isSystemOp)
internal Exception NullCngKeyPath(bool isSystemOp)
internal Exception InvalidCertificatePath(string actualCertificatePath, String[] validLocations, bool isSystemOp)
internal Exception InvalidCspPath(string masterKeyPath, bool isSystemOp)
internal Exception InvalidCngPath(string masterKeyPath, bool isSystemOp)
internal Exception EmptyCspName(string masterKeyPath, bool isSystemOp)
internal Exception EmptyCngName(string masterKeyPath, bool isSystemOp)
internal Exception EmptyCspKeyId(string masterKeyPath, bool isSystemOp)
internal Exception EmptyCngKeyId(string masterKeyPath, bool isSystemOp)
internal Exception InvalidCspName(string cspName, string masterKeyPath, bool isSystemOp)
internal Exception InvalidCspKeyIdentifier(string keyIdentifier, string masterKeyPath, bool isSystemOp)
internal Exception InvalidCngKey(string masterKeyPath, string cngProviderName, string keyIdentifier, bool isSystemOp)
internal Exception InvalidCertificateLocation(string certificateLocation, string certificatePath, String[] validLocations, bool isSystemOp)
internal Exception InvalidCertificateStore(string certificateStore, string certificatePath, string validCertificateStore, bool isSystemOp)
internal Exception EmptyCertificateThumbprint(string certificatePath, bool isSystemOp)
internal Exception CertificateNotFound(string thumbprint, string certificateLocation, string certificateStore, bool isSystemOp)
internal Exception InvalidAlgorithmVersionInEncryptedCEK(byte actual, byte expected)
internal Exception InvalidCiphertextLengthInEncryptedCEK(int actual, int expected, string certificateName)
internal Exception InvalidCiphertextLengthInEncryptedCEKCsp(int actual, int expected, string masterKeyPath)
internal Exception InvalidCiphertextLengthInEncryptedCEKCng(int actual, int expected, string masterKeyPath)
internal Exception InvalidSignatureInEncryptedCEK(int actual, int expected, string masterKeyPath)
internal Exception InvalidSignatureInEncryptedCEKCsp(int actual, int expected, string masterKeyPath)
internal Exception InvalidSignatureInEncryptedCEKCng(int actual, int expected, string masterKeyPath)
internal Exception InvalidCertificateSignature(string certificatePath)
internal Exception InvalidSignature(string masterKeyPath)
internal Exception CertificateWithNoPrivateKey(string keyPath, bool isSystemOp)
internal Exception NullColumnEncryptionKeySysErr()
internal Exception InvalidKeySize(string algorithmName, int actualKeylength, int expectedLength)
internal Exception InvalidEncryptionType(string algorithmName, SqlClientEncryptionType encryptionType, SqlClientEncryptionType[] validEncryptionTypes)
internal Exception NullPlainText()
internal Exception VeryLargeCiphertext(long cipherTextLength, long maxCipherTextSize, long plainTextLength)
internal Exception NullCipherText()
internal Exception InvalidCipherTextSize(int actualSize, int minimumSize)
internal Exception InvalidAlgorithmVersion(byte actual, byte expected)
internal Exception InvalidAuthenticationTag()
internal Exception NullColumnEncryptionAlgorithm(string supportedAlgorithms)
internal Exception UnexpectedDescribeParamFormat()
internal Exception InvalidEncryptionKeyOrdinal(int ordinal, int maxOrdinal)
internal Exception ParamEncryptionMetadataMissing(string paramName, string procedureName)
internal Exception ParamInvalidForceColumnEncryptionSetting(string paramName, string procedureName)
internal Exception ParamUnExpectedEncryptionMetadata(string paramName, string procedureName)
internal Exception ProcEncryptionMetadataMissing(string procedureName)
internal Exception GetExceptionArray(string serverName, string errorMessage, Exception e)
internal Exception ParamEncryptionFailed(string paramName, string serverName, Exception e)
internal Exception ParamDecryptionFailed(string paramName, string serverName, Exception e)
internal Exception ColumnDecryptionFailed(string columnName, string serverName, Exception e)
internal Exception UnknownColumnEncryptionAlgorithm(string algorithmName, string supportedAlgorithms)
internal Exception UnknownColumnEncryptionAlgorithmId(int algoId, string supportAlgorithmIds)
internal Exception UnsupportedNormalizationVersion(byte version)
internal Exception UnrecognizedKeyStoreProviderName(string providerName, List`1<string> systemProviders, List`1<string> customProviders)
internal Exception InvalidDataTypeForEncryptedParameter(string parameterName, int actualDataType, int expectedDataType)
internal Exception UntrustedKeyPath(string keyPath, string serverName)
internal Exception UnsupportedDatatypeEncryption(string dataType)
internal Exception ThrowDecryptionFailed(string keyStr, string valStr, Exception e)
internal Exception TceNotSupported()
internal Exception CanOnlyCallOnce()
internal Exception NullCustomKeyStoreProviderDictionary()
internal Exception InvalidCustomKeyStoreProviderName(string providerName, string prefix)
internal Exception NullProviderValue(string providerName)
internal Exception EmptyProviderName()
internal Exception ConnectionDoomed()
internal Exception OpenResultCountExceeded()
internal Exception GlobalTransactionsNotEnabled()
internal Exception UnsupportedSysTxForGlobalTransactions()
internal Exception MultiSubnetFailoverWithFailoverPartner(bool serverProvidedFailoverPartner, SqlInternalConnectionTds internalConnection)
internal Exception ROR_FailoverNotSupportedConnString()
internal Exception ROR_FailoverNotSupportedServer(SqlInternalConnectionTds internalConnection)
internal Exception ROR_RecursiveRoutingNotSupported(SqlInternalConnectionTds internalConnection)
internal Exception ROR_UnexpectedRoutingInfo(SqlInternalConnectionTds internalConnection)
internal Exception ROR_InvalidRoutingInfo(SqlInternalConnectionTds internalConnection)
internal Exception ROR_TimeoutAfterRoutingInfo(SqlInternalConnectionTds internalConnection)
internal SqlException CR_ReconnectTimeout()
internal SqlException CR_ReconnectionCancelled()
internal Exception CR_NextAttemptWillExceedQueryTimeout(SqlException innerException, Guid connectionId)
internal Exception CR_EncryptionChanged(SqlInternalConnectionTds internalConnection)
internal SqlException CR_AllAttemptsFailed(SqlException innerException, Guid connectionId)
internal SqlException CR_NoCRAckAtReconnection(SqlInternalConnectionTds internalConnection)
internal SqlException CR_TDSVersionNotPreserved(SqlInternalConnectionTds internalConnection)
internal SqlException CR_UnrecoverableServer(Guid connectionId)
internal SqlException CR_UnrecoverableClient(Guid connectionId)
internal Exception BatchedUpdatesNotAvailableOnContextConnection()
internal Exception ContextAllowsLimitedKeywords()
internal Exception ContextAllowsOnlyTypeSystem2005()
internal Exception ContextConnectionIsInUse()
internal Exception ContextUnavailableOutOfProc()
internal Exception ContextUnavailableWhileInProc()
internal Exception NestedTransactionScopesNotSupported()
internal Exception NotAvailableOnContextConnection()
internal Exception NotificationsNotAvailableOnContextConnection()
internal Exception UserInstanceNotAvailableInProc()
internal Exception ArgumentLengthMismatch(string arg1, string arg2)
internal Exception InvalidSqlDbTypeOneAllowedType(SqlDbType invalidType, string method, SqlDbType allowedType)
internal Exception SqlPipeErrorRequiresSendEnd()
internal Exception TooManyValues(string arg)
internal Exception StreamWriteNotSupported()
internal Exception StreamReadNotSupported()
internal Exception StreamSeekNotSupported()
internal SqlNullValueException SqlNullValue()
internal Exception ParameterSizeRestrictionFailure(int index)
internal Exception SubclassMustOverride()
private string <InvalidEncryptionType>m__0(SqlClientEncryptionType validEncryptionType)
private string <UnrecognizedKeyStoreProviderName>m__1(string provider)
private string <UnrecognizedKeyStoreProviderName>m__2(string provider)
}
internal System.Data.SqlClient.SqlAsyncResult : object {
private SqlAsyncState _sqlState
private WaitHandle _waitHandle
private bool _completed
private bool _completedSyncly
private bool _ended
private AsyncCallback _userCallback
private object _retValue
private string _endMethod
private IAsyncResult _internal
public object AsyncState
internal SqlAsyncState SqlAsyncState
public WaitHandle AsyncWaitHandle
public bool IsCompleted
public bool CompletedSynchronously
internal object ReturnValue
public string EndMethod
public bool Ended
internal IAsyncResult InternalResult
public AsyncCallback BubbleCallback
public void .ctor(AsyncCallback userCallback, SqlAsyncState sqlState)
public void .ctor(AsyncCallback userCallback, object state)
public object get_AsyncState()
internal SqlAsyncState get_SqlAsyncState()
public WaitHandle get_AsyncWaitHandle()
public bool get_IsCompleted()
public bool get_CompletedSynchronously()
internal object get_ReturnValue()
internal void set_ReturnValue(object value)
public string get_EndMethod()
public void set_EndMethod(string value)
public bool get_Ended()
public void set_Ended(bool value)
internal IAsyncResult get_InternalResult()
internal void set_InternalResult(IAsyncResult value)
public AsyncCallback get_BubbleCallback()
internal void MarkComplete()
public void Bubbleback(IAsyncResult ar)
}
internal System.Data.SqlClient.SqlAsyncState : object {
private object _userState
public object UserState
public void .ctor(object userState)
public object get_UserState()
public void set_UserState(object value)
}
public System.Data.SqlClient.SqlAuthenticationMethod : Enum {
public int value__
public SqlAuthenticationMethod NotSpecified
public SqlAuthenticationMethod SqlPassword
public SqlAuthenticationMethod ActiveDirectoryPassword
public SqlAuthenticationMethod ActiveDirectoryIntegrated
}
public System.Data.SqlClient.SqlBulkCopy : object {
private string transConflictMessage
private SqlBulkCopyOptions insertModifiers
private int _batchSize
private int _notifyAfter
private int _bulkCopyTimeout
private SqlBulkCopyColumnMappingCollection _columnMappingCollection
private string _destinationTableName
private bool ordinalMapping
private bool sqlRowsCopied
private bool isLocalConnection
private SqlConnection connection
private SqlTransaction externalTransaction
private SqlBulkCopyOptions copyOptions
private SqlRowsCopiedEventHandler SqlRowsCopied
public int BatchSize
public int BulkCopyTimeout
public SqlBulkCopyColumnMappingCollection ColumnMappings
public string DestinationTableName
public bool EnableStreaming
public int NotifyAfter
public void .ctor(SqlConnection connection)
public void .ctor(string connectionString)
public void .ctor(string connectionString, SqlBulkCopyOptions copyOptions)
public void .ctor(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction)
public int get_BatchSize()
public void set_BatchSize(int value)
public int get_BulkCopyTimeout()
public void set_BulkCopyTimeout(int value)
public SqlBulkCopyColumnMappingCollection get_ColumnMappings()
public string get_DestinationTableName()
public void set_DestinationTableName(string value)
public bool get_EnableStreaming()
public void set_EnableStreaming(bool value)
public int get_NotifyAfter()
public void set_NotifyAfter(int value)
public void Close()
private DataTable[] GetColumnMetaData()
private string GenerateColumnMetaData(SqlCommand tmpCmd, DataTable colMetaData, DataTable tableCollations)
private void ValidateColumnMapping(DataTable table, DataTable tableCollations)
private void BulkCopyToServer(DataTable table, DataRowState state)
private bool IsTextType(SqlDbType sqlType)
public void WriteToServer(DataRow[] rows)
public void WriteToServer(DataTable table)
public void WriteToServer(IDataReader reader)
public void WriteToServer(DataTable table, DataRowState rowState)
public void WriteToServer(DbDataReader reader)
public Task WriteToServerAsync(DbDataReader reader)
public Task WriteToServerAsync(DbDataReader reader, CancellationToken cancellationToken)
private void RowsCopied(long rowsCopied)
public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value)
public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value)
private void System.IDisposable.Dispose()
}
public System.Data.SqlClient.SqlBulkCopyColumnMapping : object {
private int sourceOrdinal
private int destinationOrdinal
private string sourceColumn
private string destinationColumn
public string DestinationColumn
public string SourceColumn
public int DestinationOrdinal
public int SourceOrdinal
public void .ctor(int sourceColumnOrdinal, int destinationOrdinal)
public void .ctor(int sourceColumnOrdinal, string destinationColumn)
public void .ctor(string sourceColumn, int destinationOrdinal)
public void .ctor(string sourceColumn, string destinationColumn)
public string get_DestinationColumn()
public void set_DestinationColumn(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public int get_DestinationOrdinal()
public void set_DestinationOrdinal(int value)
public int get_SourceOrdinal()
public void set_SourceOrdinal(int value)
}
public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
public SqlBulkCopyColumnMapping Item
public SqlBulkCopyColumnMapping get_Item(int index)
public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping)
public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex)
public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn)
public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex)
public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn)
public void Clear()
public bool Contains(SqlBulkCopyColumnMapping value)
public int IndexOf(SqlBulkCopyColumnMapping value)
public void CopyTo(SqlBulkCopyColumnMapping[] array, int index)
public void Insert(int index, SqlBulkCopyColumnMapping value)
public void Remove(SqlBulkCopyColumnMapping value)
public void RemoveAt(int index)
}
public System.Data.SqlClient.SqlBulkCopyOptions : Enum {
public int value__
public SqlBulkCopyOptions Default
public SqlBulkCopyOptions KeepIdentity
public SqlBulkCopyOptions CheckConstraints
public SqlBulkCopyOptions TableLock
public SqlBulkCopyOptions KeepNulls
public SqlBulkCopyOptions FireTriggers
public SqlBulkCopyOptions UseInternalTransaction
}
internal System.Data.SqlClient.SqlClientEncryptionType : Enum {
public int value__
public SqlClientEncryptionType PlainText
public SqlClientEncryptionType Deterministic
public SqlClientEncryptionType Randomized
}
public System.Data.SqlClient.SqlClientFactory : DbProviderFactory {
public SqlClientFactory Instance
public bool CanCreateDataSourceEnumerator
public bool get_CanCreateDataSourceEnumerator()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbDataSourceEnumerator CreateDataSourceEnumerator()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
public System.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
public string Columns
public string Databases
public string ForeignKeys
public string IndexColumns
public string Indexes
public string Parameters
public string ProcedureColumns
public string Procedures
public string Tables
public string UserDefinedTypes
public string Users
public string ViewColumns
public string Views
}
public System.Data.SqlClient.SqlClientPermission : DBDataPermission {
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
private void .ctor(SqlClientPermission permission)
internal void .ctor(SqlClientPermissionAttribute permissionAttribute)
internal void .ctor(SqlConnectionString constr)
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
public IPermission Copy()
}
public System.Data.SqlClient.SqlClientPermissionAttribute : DBDataPermissionAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
public System.Data.SqlClient.SqlCommand : DbCommand {
private int DEFAULT_COMMAND_TIMEOUT
private int commandTimeout
private bool designTimeVisible
private string commandText
private CommandType commandType
private SqlConnection connection
private SqlTransaction transaction
private UpdateRowSource updatedRowSource
private CommandBehavior behavior
private SqlParameterCollection parameters
private string preparedStatement
private bool disposed
private SqlNotificationRequest notification
private bool notificationAutoEnlist
private StatementCompletedEventHandler StatementCompleted
internal CommandBehavior CommandBehavior
public string CommandText
public int CommandTimeout
public CommandType CommandType
public SqlConnection Connection
public bool DesignTimeVisible
public SqlParameterCollection Parameters
internal Tds Tds
public SqlTransaction Transaction
public UpdateRowSource UpdatedRowSource
public SqlNotificationRequest Notification
public bool NotificationAutoEnlist
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public void .ctor(string cmdText)
public void .ctor(string cmdText, SqlConnection connection)
public void .ctor(string cmdText, SqlConnection connection, SqlTransaction transaction)
private void .ctor(string commandText, SqlConnection connection, SqlTransaction transaction, CommandType commandType, UpdateRowSource updatedRowSource, bool designTimeVisible, int commandTimeout, SqlParameterCollection parameters)
internal CommandBehavior get_CommandBehavior()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public SqlConnection get_Connection()
public void set_Connection(SqlConnection value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public SqlParameterCollection get_Parameters()
internal Tds get_Tds()
public SqlTransaction get_Transaction()
public void set_Transaction(SqlTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public SqlNotificationRequest get_Notification()
public void set_Notification(SqlNotificationRequest value)
public bool get_NotificationAutoEnlist()
public void set_NotificationAutoEnlist(bool value)
public void Cancel()
public SqlCommand Clone()
internal void CloseDataReader()
public SqlParameter CreateParameter()
private string EscapeProcName(string name, bool schema)
internal void DeriveParameters()
private void Execute(bool wantResults)
public int ExecuteNonQuery()
public SqlDataReader ExecuteReader()
public SqlDataReader ExecuteReader(CommandBehavior behavior)
public Task`1<SqlDataReader> ExecuteReaderAsync()
public Task`1<SqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken)
public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior)
public Task`1<SqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken)
public Task`1<XmlReader> ExecuteXmlReaderAsync()
public Task`1<XmlReader> ExecuteXmlReaderAsync(CancellationToken cancellationToken)
public object ExecuteScalar()
public XmlReader ExecuteXmlReader()
internal void GetOutputParameters()
private object System.ICloneable.Clone()
protected void Dispose(bool disposing)
public void Prepare()
public void ResetCommandTimeout()
private void Unprepare()
private void ValidateCommand(string method, bool async)
protected DbParameter CreateDbParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
internal IAsyncResult BeginExecuteInternal(CommandBehavior behavior, bool wantResults, AsyncCallback callback, object state)
internal void EndExecuteInternal(IAsyncResult ar)
public IAsyncResult BeginExecuteNonQuery()
public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject)
public int EndExecuteNonQuery(IAsyncResult asyncResult)
public IAsyncResult BeginExecuteReader()
public IAsyncResult BeginExecuteReader(CommandBehavior behavior)
public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject)
public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior)
public SqlDataReader EndExecuteReader(IAsyncResult asyncResult)
public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject)
public IAsyncResult BeginExecuteXmlReader()
public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult)
internal void ValidateAsyncResult(IAsyncResult ar, string endMethod)
public void add_StatementCompleted(StatementCompletedEventHandler value)
public void remove_StatementCompleted(StatementCompletedEventHandler value)
}
public System.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
private string _catalogSeparator
private string _schemaSeparator
private CatalogLocation _catalogLocation
public SqlDataAdapter DataAdapter
public string QuotePrefix
public string QuoteSuffix
public string CatalogSeparator
public string SchemaSeparator
public CatalogLocation CatalogLocation
public void .ctor(SqlDataAdapter adapter)
public SqlDataAdapter get_DataAdapter()
public void set_DataAdapter(SqlDataAdapter value)
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public void DeriveParameters(SqlCommand command)
public SqlCommand GetDeleteCommand()
public SqlCommand GetInsertCommand()
public SqlCommand GetUpdateCommand()
public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames)
public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames)
public SqlCommand GetInsertCommand(bool useColumnsForParameterNames)
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
private bool IncludedInInsert(DataRow schemaRow)
private bool IncludedInUpdate(DataRow schemaRow)
private bool IncludedInWhereClause(DataRow schemaRow)
protected void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
private void RowUpdatingHandler(object sender, SqlRowUpdatingEventArgs args)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
protected DataTable GetSchemaTable(DbCommand srcCommand)
protected DbCommand InitializeCommand(DbCommand command)
}
public System.Data.SqlClient.SqlCommandColumnEncryptionSetting : Enum {
public int value__
public SqlCommandColumnEncryptionSetting UseConnectionSetting
public SqlCommandColumnEncryptionSetting Enabled
public SqlCommandColumnEncryptionSetting ResultSetOnly
public SqlCommandColumnEncryptionSetting Disabled
}
public System.Data.SqlClient.SqlConnection : DbConnection {
private bool disposed
private TdsConnectionPoolManager sqlConnectionPools
private int DEFAULT_PACKETSIZE
private int MAX_PACKETSIZE
private int MIN_PACKETSIZE
private int DEFAULT_CONNECTIONTIMEOUT
private int DEFAULT_CONNECTIONLIFETIME
private int DEFAULT_MAXPOOLSIZE
private int MIN_MAXPOOLSIZE
private int DEFAULT_MINPOOLSIZE
private int DEFAULT_PORT
private TdsConnectionPool pool
private string connectionString
private SqlCredential credentials
private SqlTransaction transaction
private TdsConnectionParameters parms
private bool connectionReset
private int connectionLifeTime
private bool pooling
private string dataSource
private int connectionTimeout
private int minPoolSize
private int maxPoolSize
private int packetSize
private int port
private bool fireInfoMessageEventOnUserErrors
private bool statisticsEnabled
private ConnectionState state
private SqlDataReader dataReader
private XmlReader xmlReader
private Tds tds
private SqlInfoMessageEventHandler InfoMessage
private bool async
private bool userInstance
private Dictionary`2<string, int> <>f__switch$map3
private Dictionary`2<string, int> <>f__switch$map4
public string ConnectionString
public SqlCredential Credentials
public Guid ClientConnectionId
public int ConnectionTimeout
public string Database
internal SqlDataReader DataReader
public string DataSource
public int PacketSize
public string ServerVersion
public ConnectionState State
internal Tds Tds
internal SqlTransaction Transaction
public string WorkstationId
internal XmlReader XmlReader
public bool FireInfoMessageEventOnUserErrors
public bool StatisticsEnabled
protected DbProviderFactory DbProviderFactory
internal bool AsyncProcessing
public void .ctor(string connectionString)
public void .ctor(string connectionString, SqlCredential cred)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public SqlCredential get_Credentials()
public void set_Credentials(SqlCredential value)
public Guid get_ClientConnectionId()
public int get_ConnectionTimeout()
public string get_Database()
internal SqlDataReader get_DataReader()
internal void set_DataReader(SqlDataReader value)
public string get_DataSource()
public int get_PacketSize()
public string get_ServerVersion()
public ConnectionState get_State()
internal Tds get_Tds()
internal SqlTransaction get_Transaction()
internal void set_Transaction(SqlTransaction value)
public string get_WorkstationId()
internal XmlReader get_XmlReader()
internal void set_XmlReader(XmlReader value)
public bool get_FireInfoMessageEventOnUserErrors()
public void set_FireInfoMessageEventOnUserErrors(bool value)
public bool get_StatisticsEnabled()
public void set_StatisticsEnabled(bool value)
protected DbProviderFactory get_DbProviderFactory()
public void add_InfoMessage(SqlInfoMessageEventHandler value)
public void remove_InfoMessage(SqlInfoMessageEventHandler value)
private void ErrorHandler(object sender, TdsInternalErrorMessageEventArgs e)
private void MessageHandler(object sender, TdsInternalInfoMessageEventArgs e)
public SqlTransaction BeginTransaction()
public SqlTransaction BeginTransaction(IsolationLevel iso)
public SqlTransaction BeginTransaction(string transactionName)
public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName)
public void ChangeDatabase(string database)
private void ChangeState(ConnectionState currentState)
public void Close()
public SqlCommand CreateCommand()
private SqlInfoMessageEventArgs CreateSqlInfoMessageEvent(TdsInternalErrorCollection errors)
private StateChangeEventArgs CreateStateChangeEvent(ConnectionState originalState, ConnectionState currentState)
protected void Dispose(bool disposing)
public void EnlistDistributedTransaction(ITransaction transaction)
private object System.ICloneable.Clone()
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
protected DbCommand CreateDbCommand()
public void Open()
private bool ParseDataSource(string theDataSource, Int32& thePort, String& theServerName)
private bool ConvertIntegratedSecurity(string value)
private bool ConvertToBoolean(string key, string value, bool defaultValue)
private int ConvertToInt32(string key, string value, int defaultValue)
private int DiscoverTcpPortViaSqlMonitor(string ServerName, string InstanceName)
private void SetConnectionString(string connectionString)
private void SetDefaultConnectionParameters()
private void SetProperties(string name, string value)
private bool IsValidDatabaseName(string database)
private void OnSqlInfoMessage(SqlInfoMessageEventArgs value)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
public void ChangePassword(string connectionString, string newPassword)
public void ClearAllPools()
public void ClearPool(SqlConnection connection)
public void ResetStatistics()
public IDictionary RetrieveStatistics()
internal bool get_AsyncProcessing()
}
public System.Data.SqlClient.SqlConnectionColumnEncryptionSetting : Enum {
public int value__
public SqlConnectionColumnEncryptionSetting Disabled
public SqlConnectionColumnEncryptionSetting Enabled
}
internal System.Data.SqlClient.SqlConnectionString : DbConnectionOptions {
internal int SynonymCount
private Hashtable _sqlClientSynonyms
private Hashtable _netlibMapping
private bool _integratedSecurity
private bool _connectionReset
private bool _contextConnection
private bool _encrypt
private bool _trustServerCertificate
private bool _enlist
private bool _mars
private bool _persistSecurityInfo
private bool _pooling
private bool _replication
private bool _userInstance
private bool _multiSubnetFailover
private bool _transparentNetworkIPResolution
private SqlAuthenticationMethod _authType
private SqlConnectionColumnEncryptionSetting _columnEncryptionSetting
private int _connectTimeout
private int _loadBalanceTimeout
private int _maxPoolSize
private int _minPoolSize
private int _packetSize
private int _connectRetryCount
private int _connectRetryInterval
private ApplicationIntent _applicationIntent
private string _applicationName
private string _attachDBFileName
private string _currentLanguage
private string _dataSource
private string _localDBInstance
private string _failoverPartner
private string _initialCatalog
private string _password
private string _userID
private string _networkLibrary
private string _workstationId
private TypeSystem _typeSystemVersion
private Version _typeSystemAssemblyVersion
private Version constTypeSystemAsmVersion10
private Version constTypeSystemAsmVersion11
private TransactionBindingEnum _transactionBinding
private string _expandedAttachDBFilename
internal bool IntegratedSecurity
internal bool Asynchronous
internal bool ConnectionReset
internal bool ContextConnection
internal bool Encrypt
internal bool TrustServerCertificate
internal bool Enlist
internal bool MARS
internal bool MultiSubnetFailover
internal bool TransparentNetworkIPResolution
internal SqlAuthenticationMethod Authentication
internal SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting
internal bool PersistSecurityInfo
internal bool Pooling
internal bool Replication
internal bool UserInstance
internal int ConnectTimeout
internal int LoadBalanceTimeout
internal int MaxPoolSize
internal int MinPoolSize
internal int PacketSize
internal int ConnectRetryCount
internal int ConnectRetryInterval
internal ApplicationIntent ApplicationIntent
internal string ApplicationName
internal string AttachDBFilename
internal string CurrentLanguage
internal string DataSource
internal string LocalDBInstance
internal string FailoverPartner
internal string InitialCatalog
internal string NetworkLibrary
internal string Password
internal string UserID
internal string WorkstationId
internal TypeSystem TypeSystemVersion
internal Version TypeSystemAssemblyVersion
internal TransactionBindingEnum TransactionBinding
internal bool EnforceLocalHost
internal void .ctor(string connectionString)
internal void .ctor(SqlConnectionString connectionOptions, string dataSource, bool userInstance, Nullable`1<bool> setEnlistValue)
internal bool get_IntegratedSecurity()
internal bool get_Asynchronous()
internal bool get_ConnectionReset()
internal bool get_ContextConnection()
internal bool get_Encrypt()
internal bool get_TrustServerCertificate()
internal bool get_Enlist()
internal bool get_MARS()
internal bool get_MultiSubnetFailover()
internal bool get_TransparentNetworkIPResolution()
internal SqlAuthenticationMethod get_Authentication()
internal SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting()
internal bool get_PersistSecurityInfo()
internal bool get_Pooling()
internal bool get_Replication()
internal bool get_UserInstance()
internal int get_ConnectTimeout()
internal int get_LoadBalanceTimeout()
internal int get_MaxPoolSize()
internal int get_MinPoolSize()
internal int get_PacketSize()
internal int get_ConnectRetryCount()
internal int get_ConnectRetryInterval()
internal ApplicationIntent get_ApplicationIntent()
internal string get_ApplicationName()
internal string get_AttachDBFilename()
internal string get_CurrentLanguage()
internal string get_DataSource()
internal string get_LocalDBInstance()
internal string get_FailoverPartner()
internal string get_InitialCatalog()
internal string get_NetworkLibrary()
internal string get_Password()
internal string get_UserID()
internal string get_WorkstationId()
internal TypeSystem get_TypeSystemVersion()
internal Version get_TypeSystemAssemblyVersion()
internal TransactionBindingEnum get_TransactionBinding()
internal bool get_EnforceLocalHost()
protected internal PermissionSet CreatePermissionSet()
protected internal string Expand()
private bool CompareHostName(String& host, string name, bool fixup)
internal Hashtable GetParseSynonyms()
internal string ObtainWorkstationId()
internal Hashtable NetlibMapping()
internal bool ValidProtocal(string protocal)
private void ValidateValueLength(string value, int limit, string key)
internal void VerifyLocalHostAndFixup(String& host, bool enforceLocalHost, bool fixup)
internal ApplicationIntent ConvertValueToApplicationIntent()
internal SqlAuthenticationMethod ConvertValueToAuthenticationType()
internal SqlConnectionColumnEncryptionSetting ConvertValueToColumnEncryptionSetting()
internal bool ConvertValueToEncrypt()
}
public System.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
internal int KeywordsCount
private String[] _validKeywords
private Dictionary`2<string, Keywords> _keywords
private ApplicationIntent _applicationIntent
private string _applicationName
private string _attachDBFilename
private string _currentLanguage
private string _dataSource
private string _failoverPartner
private string _initialCatalog
private string _networkLibrary
private string _password
private string _transactionBinding
private string _typeSystemVersion
private string _userID
private string _workstationID
private int _connectTimeout
private int _loadBalanceTimeout
private int _maxPoolSize
private int _minPoolSize
private int _packetSize
private int _connectRetryCount
private int _connectRetryInterval
private bool _asynchronousProcessing
private bool _connectionReset
private bool _contextConnection
private bool _encrypt
private bool _trustServerCertificate
private bool _enlist
private bool _integratedSecurity
private bool _multipleActiveResultSets
private bool _multiSubnetFailover
private bool _transparentNetworkIPResolution
private bool _persistSecurityInfo
private bool _pooling
private bool _replication
private bool _userInstance
private SqlAuthenticationMethod _authentication
private SqlConnectionColumnEncryptionSetting _columnEncryptionSetting
private Dictionary`2<string, int> <>f__switch$map1
public object Item
public ApplicationIntent ApplicationIntent
public string ApplicationName
public bool AsynchronousProcessing
public string AttachDBFilename
public bool ConnectionReset
public bool ContextConnection
public int ConnectTimeout
public string CurrentLanguage
public string DataSource
public bool Encrypt
public SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting
public bool TrustServerCertificate
public bool Enlist
public string FailoverPartner
public string InitialCatalog
public bool IntegratedSecurity
public SqlAuthenticationMethod Authentication
public int LoadBalanceTimeout
public int MaxPoolSize
public int ConnectRetryCount
public int ConnectRetryInterval
public int MinPoolSize
public bool MultipleActiveResultSets
public bool MultiSubnetFailover
public bool TransparentNetworkIPResolution
public string NetworkLibrary
public int PacketSize
public string Password
public bool PersistSecurityInfo
public bool Pooling
public bool Replication
public string TransactionBinding
public string TypeSystemVersion
public string UserID
public bool UserInstance
public string WorkstationID
public bool IsFixedSize
public ICollection Keys
public ICollection Values
public void .ctor(string connectionString)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public ApplicationIntent get_ApplicationIntent()
public void set_ApplicationIntent(ApplicationIntent value)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_AsynchronousProcessing()
public void set_AsynchronousProcessing(bool value)
public string get_AttachDBFilename()
public void set_AttachDBFilename(string value)
public bool get_ConnectionReset()
public void set_ConnectionReset(bool value)
public bool get_ContextConnection()
public void set_ContextConnection(bool value)
public int get_ConnectTimeout()
public void set_ConnectTimeout(int value)
public string get_CurrentLanguage()
public void set_CurrentLanguage(string value)
public string get_DataSource()
public void set_DataSource(string value)
public bool get_Encrypt()
public void set_Encrypt(bool value)
public SqlConnectionColumnEncryptionSetting get_ColumnEncryptionSetting()
public void set_ColumnEncryptionSetting(SqlConnectionColumnEncryptionSetting value)
public bool get_TrustServerCertificate()
public void set_TrustServerCertificate(bool value)
public bool get_Enlist()
public void set_Enlist(bool value)
public string get_FailoverPartner()
public void set_FailoverPartner(string value)
public string get_InitialCatalog()
public void set_InitialCatalog(string value)
public bool get_IntegratedSecurity()
public void set_IntegratedSecurity(bool value)
public SqlAuthenticationMethod get_Authentication()
public void set_Authentication(SqlAuthenticationMethod value)
public int get_LoadBalanceTimeout()
public void set_LoadBalanceTimeout(int value)
public int get_MaxPoolSize()
public void set_MaxPoolSize(int value)
public int get_ConnectRetryCount()
public void set_ConnectRetryCount(int value)
public int get_ConnectRetryInterval()
public void set_ConnectRetryInterval(int value)
public int get_MinPoolSize()
public void set_MinPoolSize(int value)
public bool get_MultipleActiveResultSets()
public void set_MultipleActiveResultSets(bool value)
public bool get_MultiSubnetFailover()
public void set_MultiSubnetFailover(bool value)
public bool get_TransparentNetworkIPResolution()
public void set_TransparentNetworkIPResolution(bool value)
public string get_NetworkLibrary()
public void set_NetworkLibrary(string value)
public int get_PacketSize()
public void set_PacketSize(int value)
public string get_Password()
public void set_Password(string value)
public bool get_PersistSecurityInfo()
public void set_PersistSecurityInfo(bool value)
public bool get_Pooling()
public void set_Pooling(bool value)
public bool get_Replication()
public void set_Replication(bool value)
public string get_TransactionBinding()
public void set_TransactionBinding(string value)
public string get_TypeSystemVersion()
public void set_TypeSystemVersion(string value)
public string get_UserID()
public void set_UserID(string value)
public bool get_UserInstance()
public void set_UserInstance(bool value)
public string get_WorkstationID()
public void set_WorkstationID(string value)
public bool get_IsFixedSize()
public ICollection get_Keys()
public ICollection get_Values()
public void Clear()
public bool ContainsKey(string keyword)
private bool ConvertToBoolean(object value)
private int ConvertToInt32(object value)
private bool ConvertToIntegratedSecurity(object value)
private string ConvertToString(object value)
private ApplicationIntent ConvertToApplicationIntent(string keyword, object value)
private SqlAuthenticationMethod ConvertToAuthenticationType(string keyword, object value)
private SqlConnectionColumnEncryptionSetting ConvertToColumnEncryptionSetting(string keyword, object value)
internal string ConvertValueToString(object value)
private object GetAt(Keywords index)
private Keywords GetIndex(string keyword)
protected void GetProperties(Hashtable propertyDescriptors)
public bool Remove(string keyword)
private void Reset(Keywords index)
private void SetValue(string keyword, bool value)
private void SetValue(string keyword, int value)
private void SetValue(string keyword, string value)
private void SetApplicationIntentValue(ApplicationIntent value)
private void SetAuthenticationValue(SqlAuthenticationMethod value)
private void SetColumnEncryptionSettingValue(SqlConnectionColumnEncryptionSetting value)
public bool ShouldSerialize(string keyword)
public bool TryGetValue(string keyword, Object& value)
}
public System.Data.SqlClient.SqlCredential : object {
private string uid
private SecureString pwd
public string UserId
public SecureString Password
public void .ctor(string user, SecureString password)
public string get_UserId()
public SecureString get_Password()
}
public System.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
private string DefaultSourceColumnName
private int updateBatchSize
private SqlCommand <DeleteCommand>k__BackingField
private SqlCommand <InsertCommand>k__BackingField
private SqlCommand <SelectCommand>k__BackingField
private SqlCommand <UpdateCommand>k__BackingField
private SqlRowUpdatedEventHandler RowUpdated
private SqlRowUpdatingEventHandler RowUpdating
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
public SqlCommand DeleteCommand
public SqlCommand InsertCommand
public SqlCommand SelectCommand
public SqlCommand UpdateCommand
public int UpdateBatchSize
public void .ctor(SqlCommand selectCommand)
public void .ctor(string selectCommandText, SqlConnection selectConnection)
public void .ctor(string selectCommandText, string selectConnectionString)
internal bool CanAutoIncrement(Type type)
internal FillErrorEventArgs CreateFillErrorEvent(DataTable dataTable, Object[] values, Exception e)
internal void OnFillErrorInternal(FillErrorEventArgs value)
internal Int32[] BuildSchema(IDataReader reader, DataTable table, SchemaType schemaType)
internal Int32[] BuildSchema(IDataReader reader, DataTable table, SchemaType schemaType, MissingSchemaAction missingSchAction, MissingMappingAction missingMapAction, DataTableMappingCollection dtMapping)
internal int FillInternal(DataTable dataTable, IDataReader dataReader)
internal bool FillTable(DataTable dataTable, IDataReader dataReader, int startRecord, int maxRecords, Int32& counter)
internal string SetupSchema(SchemaType schemaType, string sourceTableName)
public SqlCommand get_DeleteCommand()
public void set_DeleteCommand(SqlCommand value)
public SqlCommand get_InsertCommand()
public void set_InsertCommand(SqlCommand value)
public SqlCommand get_SelectCommand()
public void set_SelectCommand(SqlCommand value)
public SqlCommand get_UpdateCommand()
public void set_UpdateCommand(SqlCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
public int get_UpdateBatchSize()
public void set_UpdateBatchSize(int value)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
private object System.ICloneable.Clone()
protected int AddToBatch(IDbCommand command)
protected void ClearBatch()
protected int ExecuteBatch()
protected IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex)
protected void InitializeBatching()
protected void TerminateBatching()
public void add_RowUpdated(SqlRowUpdatedEventHandler value)
public void remove_RowUpdated(SqlRowUpdatedEventHandler value)
public void add_RowUpdating(SqlRowUpdatingEventHandler value)
public void remove_RowUpdating(SqlRowUpdatingEventHandler value)
}
public System.Data.SqlClient.SqlDataReader : DbDataReader {
private SqlCommand command
private bool disposed
private bool isClosed
private bool moreResults
private int resultsRead
private int rowsRead
private DataTable schemaTable
private bool haveRead
private bool readResult
private bool readResultUsed
private int visibleFieldCount
private int COLUMN_NAME_IDX
private int COLUMN_ORDINAL_IDX
private int COLUMN_SIZE_IDX
private int NUMERIC_PRECISION_IDX
private int NUMERIC_SCALE_IDX
private int IS_UNIQUE_IDX
private int IS_KEY_IDX
private int BASE_SERVER_NAME_IDX
private int BASE_CATALOG_NAME_IDX
private int BASE_COLUMN_NAME_IDX
private int BASE_SCHEMA_NAME_IDX
private int BASE_TABLE_NAME_IDX
private int DATA_TYPE_IDX
private int ALLOW_DBNULL_IDX
private int PROVIDER_TYPE_IDX
private int IS_ALIASED_IDX
private int IS_EXPRESSION_IDX
private int IS_IDENTITY_IDX
private int IS_AUTO_INCREMENT_IDX
private int IS_ROW_VERSION_IDX
private int IS_HIDDEN_IDX
private int IS_LONG_IDX
private int IS_READ_ONLY_IDX
private int PROVIDER_SPECIFIC_TYPE_IDX
private int DATA_TYPE_NAME_IDX
private int XML_SCHEMA_COLLCTN_DB_IDX
private int XML_SCHEMA_COLLCTN_OWN_SCHEMA_IDX
private int XML_SCHEMA_COLLCTN_NAME_IDX
private int UDT_ASMBLY_QUALIFIED_NAME_IDX
private int NON_VER_PROVIDER_TYPE_IDX
private int IS_COLUMN_SET
public int Depth
public int FieldCount
public bool IsClosed
public object Item
public object Item
public int RecordsAffected
public bool HasRows
public int VisibleFieldCount
protected SqlConnection Connection
internal void .ctor(SqlCommand command)
public int get_Depth()
public int get_FieldCount()
public bool get_IsClosed()
public object get_Item(int i)
public object get_Item(string name)
public int get_RecordsAffected()
public bool get_HasRows()
public int get_VisibleFieldCount()
protected SqlConnection get_Connection()
protected bool IsCommandBehavior(CommandBehavior condition)
public void Close()
private DataTable ConstructSchemaTable()
private string GetSchemaRowTypeName(TdsColumnType ctype, int csize, short precision, short scale)
private Type GetSchemaRowFieldType(TdsColumnType ctype, int csize, short precision, short scale)
private SqlDbType GetSchemaRowDbType(int ordinal)
private SqlDbType GetSchemaRowDbType(TdsColumnType ctype, int csize, short precision, short scale)
private void GetSchemaRowType(TdsColumnType ctype, int csize, short precision, short scale, Int32& dbType, Type& fieldType, Boolean& isLong, String& typeName)
private void Dispose(bool disposing)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public DateTimeOffset GetDateTimeOffset(int i)
public TimeSpan GetTimeSpan(int i)
public SqlChars GetSqlChars(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
private object GetSchemaValue(TdsDataColumn schema, string key)
private object GetSchemaValue(object value)
public SqlBinary GetSqlBinary(int i)
public SqlBoolean GetSqlBoolean(int i)
public SqlByte GetSqlByte(int i)
public SqlDateTime GetSqlDateTime(int i)
public SqlDecimal GetSqlDecimal(int i)
public SqlDouble GetSqlDouble(int i)
public SqlGuid GetSqlGuid(int i)
public SqlInt16 GetSqlInt16(int i)
public SqlInt32 GetSqlInt32(int i)
public SqlInt64 GetSqlInt64(int i)
public SqlMoney GetSqlMoney(int i)
public SqlSingle GetSqlSingle(int i)
public SqlString GetSqlString(int i)
public SqlXml GetSqlXml(int i)
public object GetSqlValue(int i)
public int GetSqlValues(Object[] values)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public IEnumerator GetEnumerator()
public bool IsDBNull(int i)
public bool NextResult()
public bool Read()
internal bool ReadRecord()
private void ValidateState()
private void EnsureDataAvailable()
private InvalidCastException CreateGetBytesOnInvalidColumnTypeException(int ordinal)
public Type GetProviderSpecificFieldType(int i)
public object GetProviderSpecificValue(int i)
public int GetProviderSpecificValues(Object[] values)
public SqlBytes GetSqlBytes(int i)
public T GetFieldValue(int i)
public XmlReader GetXmlReader(int i)
public Task`1<T> GetFieldValueAsync(int i, CancellationToken cancellationToken)
public Stream GetStream(int i)
public TextReader GetTextReader(int i)
public Task`1<bool> IsDBNullAsync(int i, CancellationToken cancellationToken)
}
internal System.Data.SqlClient.SqlDataSourceConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.SqlClient.SqlDecimalExtensions : object {
public SqlDecimal Null
internal SqlDecimal FromTdsBigDecimal(TdsBigDecimal x)
}
public System.Data.SqlClient.SqlDependency : object {
internal ApiGroup NotificationsTracePoints
private string uniqueId
private OnChangeEventHandler OnChange
public string Id
public bool HasChanges
public void .ctor(SqlCommand command)
public void .ctor(SqlCommand command, string options, int timeout)
public string get_Id()
public bool get_HasChanges()
public void add_OnChange(OnChangeEventHandler value)
public void remove_OnChange(OnChangeEventHandler value)
public void AddCommandDependency(SqlCommand command)
public bool Start(string connectionString)
public bool Start(string connectionString, string queue)
public bool Stop(string connectionString)
public bool Stop(string connectionString, string queue)
}
public System.Data.SqlClient.SqlError : object {
private string source
private int number
private byte state
private byte errorClass
private string server
private string message
private string procedure
private int lineNumber
private int win32ErrorCode
public string Source
public int Number
public byte State
public byte Class
public string Server
public string Message
public string Procedure
public int LineNumber
internal int Win32ErrorCode
internal void .ctor(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber, UInt32 win32ErrorCode)
internal void .ctor(int infoNumber, byte errorState, byte errorClass, string server, string errorMessage, string procedure, int lineNumber)
public string ToString()
public string get_Source()
public int get_Number()
public byte get_State()
public byte get_Class()
public string get_Server()
public string get_Message()
public string get_Procedure()
public int get_LineNumber()
internal int get_Win32ErrorCode()
}
public System.Data.SqlClient.SqlErrorCollection : object {
private ArrayList errors
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public int Count
public SqlError Item
public void CopyTo(Array array, int index)
public void CopyTo(SqlError[] array, int index)
public int get_Count()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public SqlError get_Item(int index)
public IEnumerator GetEnumerator()
internal void Add(SqlError error)
}
public System.Data.SqlClient.SqlException : DbException {
internal bool _doNotReconnect
private SqlErrorCollection errors
private string DEF_MESSAGE
public byte Class
public Guid ClientConnectionId
public SqlErrorCollection Errors
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
internal void .ctor(string message, Exception inner)
internal void .ctor(string message, Exception inner, SqlError sqlError)
internal void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
private void .ctor(SerializationInfo si, StreamingContext sc)
internal SqlException InternalClone()
internal SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion)
internal SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, SqlInternalConnectionTds internalConnection, Exception innerException)
internal SqlException CreateException(SqlErrorCollection errorCollection, string serverVersion, Guid conId, Exception innerException)
public byte get_Class()
public Guid get_ClientConnectionId()
public SqlErrorCollection get_Errors()
public int get_LineNumber()
public string get_Message()
public int get_Number()
public string get_Procedure()
public string get_Server()
public string get_Source()
public byte get_State()
internal SqlException FromTdsInternalException(TdsInternalException e)
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
private SqlException exception
public SqlErrorCollection Errors
public string Message
public string Source
internal void .ctor(SqlException exception)
public SqlErrorCollection get_Errors()
private bool ShouldSerializeErrors()
public string get_Message()
public string get_Source()
public string ToString()
}
public System.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SqlClient.SqlInitialCatalogConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.SqlClient.SQLMessage : object {
internal string CultureIdError()
internal string EncryptionNotSupportedByClient()
internal string EncryptionNotSupportedByServer()
internal string OperationCancelled()
internal string SevereError()
internal string SSPIInitializeError()
internal string SSPIGenerateError()
internal string Timeout()
internal string Timeout_PreLogin_Begin()
internal string Timeout_PreLogin_InitializeConnection()
internal string Timeout_PreLogin_SendHandshake()
internal string Timeout_PreLogin_ConsumeHandshake()
internal string Timeout_Login_Begin()
internal string Timeout_Login_ProcessConnectionAuth()
internal string Timeout_PostLogin()
internal string Timeout_FailoverInfo()
internal string Timeout_RoutingDestination()
internal string Duration_PreLogin_Begin(long PreLoginBeginDuration)
internal string Duration_PreLoginHandshake(long PreLoginBeginDuration, long PreLoginHandshakeDuration)
internal string Duration_Login_Begin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration)
internal string Duration_Login_ProcessConnectionAuth(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration)
internal string Duration_PostLogin(long PreLoginBeginDuration, long PreLoginHandshakeDuration, long LoginBeginDuration, long LoginAuthDuration, long PostLoginDuration)
internal string UserInstanceFailure()
internal string PreloginError()
internal string ExClientConnectionId()
internal string ExErrorNumberStateClass()
internal string ExOriginalClientConnectionId()
internal string ExRoutingDestination()
}
public System.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
private SqlNotificationType type
private SqlNotificationInfo info
private SqlNotificationSource source
public SqlNotificationType Type
public SqlNotificationInfo Info
public SqlNotificationSource Source
public void .ctor(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source)
public SqlNotificationType get_Type()
public SqlNotificationInfo get_Info()
public SqlNotificationSource get_Source()
}
public System.Data.SqlClient.SqlNotificationInfo : Enum {
public int value__
public SqlNotificationInfo AlreadyChanged
public SqlNotificationInfo Alter
public SqlNotificationInfo Delete
public SqlNotificationInfo Drop
public SqlNotificationInfo Error
public SqlNotificationInfo Expired
public SqlNotificationInfo Insert
public SqlNotificationInfo Invalid
public SqlNotificationInfo Isolation
public SqlNotificationInfo Options
public SqlNotificationInfo PreviousFire
public SqlNotificationInfo Query
public SqlNotificationInfo Resource
public SqlNotificationInfo Restart
public SqlNotificationInfo TemplateLimit
public SqlNotificationInfo Truncate
public SqlNotificationInfo Unknown
public SqlNotificationInfo Update
}
public System.Data.SqlClient.SqlNotificationSource : Enum {
public int value__
public SqlNotificationSource Client
public SqlNotificationSource Data
public SqlNotificationSource Database
public SqlNotificationSource Environment
public SqlNotificationSource Execution
public SqlNotificationSource Object
public SqlNotificationSource Owner
public SqlNotificationSource Statement
public SqlNotificationSource System
public SqlNotificationSource Timeout
public SqlNotificationSource Unknown
}
public System.Data.SqlClient.SqlNotificationType : Enum {
public int value__
public SqlNotificationType Change
public SqlNotificationType Subscribe
public SqlNotificationType Unknown
}
public System.Data.SqlClient.SqlParameter : DbParameter {
private Hashtable dbTypeMapping
private TdsMetaParameter metaParameter
private SqlParameterCollection container
private DbType dbType
private ParameterDirection direction
private bool isTypeSet
private int offset
private SqlDbType sqlDbType
private string sourceColumn
private DataRowVersion sourceVersion
private SqlCompareOptions compareInfo
private int localeId
private Type sqlType
private bool typeChanged
private bool sourceColumnNullMapping
private string xmlSchemaCollectionDatabase
private string xmlSchemaCollectionOwningSchema
private string xmlSchemaCollectionName
private Hashtable type_mapping
private string <UdtTypeName>k__BackingField
private string <TypeName>k__BackingField
private Dictionary`2<string, int> <>f__switch$map5
private Dictionary`2<string, int> <>f__switch$map6
internal Hashtable DbTypeMapping
internal Type SystemType
internal SqlParameterCollection Container
public DbType DbType
public ParameterDirection Direction
internal TdsMetaParameter MetaParameter
public bool IsNullable
public int Offset
public string ParameterName
public byte Precision
public byte Scale
public int Size
public string SourceColumn
public DataRowVersion SourceVersion
public SqlDbType SqlDbType
public object Value
public SqlCompareOptions CompareInfo
public int LocaleId
public object SqlValue
public bool SourceColumnNullMapping
public string XmlSchemaCollectionDatabase
public string XmlSchemaCollectionName
public string XmlSchemaCollectionOwningSchema
public string UdtTypeName
public string TypeName
public void .ctor(string parameterName, object value)
public void .ctor(string parameterName, SqlDbType dbType)
public void .ctor(string parameterName, SqlDbType dbType, int size)
public void .ctor(string parameterName, SqlDbType dbType, int size, string sourceColumn)
public void .ctor(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value)
public void .ctor(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName)
internal void .ctor(Object[] dbValues)
internal Hashtable get_DbTypeMapping()
internal void set_DbTypeMapping(Hashtable value)
internal Type get_SystemType()
internal SqlParameterCollection get_Container()
internal void set_Container(SqlParameterCollection value)
internal void CheckIfInitialized()
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
internal TdsMetaParameter get_MetaParameter()
public bool get_IsNullable()
public void set_IsNullable(bool value)
public int get_Offset()
public void set_Offset(int value)
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public SqlDbType get_SqlDbType()
public void set_SqlDbType(SqlDbType value)
public object get_Value()
public void set_Value(object value)
public SqlCompareOptions get_CompareInfo()
public void set_CompareInfo(SqlCompareOptions value)
public int get_LocaleId()
public void set_LocaleId(int value)
public object get_SqlValue()
public void set_SqlValue(object value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public string get_XmlSchemaCollectionDatabase()
public void set_XmlSchemaCollectionDatabase(string value)
public string get_XmlSchemaCollectionName()
public void set_XmlSchemaCollectionName(string value)
public string get_XmlSchemaCollectionOwningSchema()
public void set_XmlSchemaCollectionOwningSchema(string value)
public string get_UdtTypeName()
public void set_UdtTypeName(string value)
public string get_TypeName()
public void set_TypeName(string value)
private object System.ICloneable.Clone()
private void InferSqlType(object value)
private DbType DbTypeFromName(string name)
private void SetDbType(DbType type)
private SqlDbType FrameworkDbTypeFromName(string dbTypeName)
internal void SetSqlDbType(SqlDbType type)
public string ToString()
private object GetFrameworkValue(object rawValue, Boolean& updated)
private object GetSqlValue(object value)
private object SqlTypeToFrameworkType(object value)
internal object ConvertToFrameworkType(object value)
private object ConvertToFrameworkType(object value, Type frameworkType)
public void ResetDbType()
public void ResetSqlDbType()
}
public System.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
private ArrayList list
private TdsMetaParameterCollection metaParameters
private SqlCommand command
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public SqlParameter Item
public SqlParameter Item
internal TdsMetaParameterCollection MetaParameters
internal void .ctor(SqlCommand command)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public SqlParameter get_Item(int index)
public void set_Item(int index, SqlParameter value)
public SqlParameter get_Item(string parameterName)
public void set_Item(string parameterName, SqlParameter value)
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
internal TdsMetaParameterCollection get_MetaParameters()
public int Add(object value)
public SqlParameter Add(SqlParameter value)
public SqlParameter Add(string parameterName, object value)
public SqlParameter AddWithValue(string parameterName, object value)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public bool Contains(SqlParameter value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string parameterName)
public int IndexOf(SqlParameter value)
public void Insert(int index, object value)
public void Insert(int index, SqlParameter value)
public void Remove(object value)
public void Remove(SqlParameter value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
public void AddRange(Array values)
public void AddRange(SqlParameter[] values)
public void CopyTo(SqlParameter[] array, int index)
}
internal System.Data.SqlClient.SqlParameterConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
private long rowsCopied
private bool abort
public bool Abort
public long RowsCopied
public void .ctor(long rowsCopied)
public bool get_Abort()
public void set_Abort(bool value)
public long get_RowsCopied()
}
public System.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowsCopiedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
public SqlCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public SqlCommand get_Command()
}
public System.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
public SqlCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public SqlCommand get_Command()
public void set_Command(SqlCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SqlClient.SqlServerEscapeHelper : object {
internal string EscapeIdentifier(string name)
internal void EscapeIdentifier(StringBuilder builder, string name)
internal string EscapeStringAsLiteral(string input)
internal string MakeStringLiteral(string input)
}
public System.Data.SqlClient.SqlTransaction : DbTransaction {
private bool disposed
private SqlConnection connection
private IsolationLevel isolationLevel
private bool isOpen
public SqlConnection Connection
internal bool IsOpen
public IsolationLevel IsolationLevel
protected DbConnection DbConnection
internal void .ctor(SqlConnection connection, IsolationLevel isolevel)
public SqlConnection get_Connection()
internal bool get_IsOpen()
public IsolationLevel get_IsolationLevel()
protected DbConnection get_DbConnection()
public void Commit()
protected void Dispose(bool disposing)
public void Rollback()
public void Rollback(string transactionName)
public void Save(string savePointName)
}
internal System.Data.SqlClient.SqlXmlTextReader : TextReader {
private bool disposed
private bool eof
private SqlDataReader reader
private string localBuffer
private int position
internal void .ctor(SqlDataReader reader)
public void Close()
protected void Dispose(bool disposing)
private void System.IDisposable.Dispose()
private bool GetNextBuffer()
public int Peek()
public int Read()
public int Read(Char[] buffer, int index, int count)
public int ReadBlock(Char[] buffer, int index, int count)
public string ReadLine()
public string ReadToEnd()
}
internal System.Data.SqlClient.SysTxForGlobalTransactions : object {
private Lazy`1<MethodInfo> _enlistPromotableSinglePhase
private Lazy`1<MethodInfo> _setDistributedTransactionIdentifier
private Lazy`1<MethodInfo> _getPromotedToken
public MethodInfo EnlistPromotableSinglePhase
public MethodInfo SetDistributedTransactionIdentifier
public MethodInfo GetPromotedToken
public MethodInfo get_EnlistPromotableSinglePhase()
public MethodInfo get_SetDistributedTransactionIdentifier()
public MethodInfo get_GetPromotedToken()
private MethodInfo <_enlistPromotableSinglePhase>m__0()
private MethodInfo <_setDistributedTransactionIdentifier>m__1()
private MethodInfo <_getPromotedToken>m__2()
}
internal System.Data.SqlClient.TdsEnums : object {
public short SQL_SERVER_VERSION_SEVEN
public string SQL_PROVIDER_NAME
public decimal SQL_SMALL_MONEY_MIN
public decimal SQL_SMALL_MONEY_MAX
public string SDCI_MAPFILENAME
public byte SDCI_MAX_MACHINENAME
public byte SDCI_MAX_DLLNAME
public byte SDCI_MAX_DATA
public int SQLDEBUG_OFF
public int SQLDEBUG_ON
public int SQLDEBUG_CONTEXT
public string SP_SDIDEBUG
public String[] SQLDEBUG_MODE_NAMES
public SqlDbType SmallVarBinary
public string TCP
public string NP
public string RPC
public string BV
public string ADSP
public string SPX
public string VIA
public string LPC
public string INIT_SSPI_PACKAGE
public string INIT_ADAL_PACKAGE
public string INIT_SESSION
public string CONNECTION_GET_SVR_USER
public string GEN_CLIENT_CONTEXT
public byte SOFTFLUSH
public byte HARDFLUSH
public byte IGNORE
public int HEADER_LEN
public int HEADER_LEN_FIELD_OFFSET
public int YUKON_HEADER_LEN
public int MARS_ID_OFFSET
public int HEADERTYPE_QNOTIFICATION
public int HEADERTYPE_MARS
public int HEADERTYPE_TRACE
public int SUCCEED
public int FAIL
public short TYPE_SIZE_LIMIT
public int MIN_PACKET_SIZE
public int DEFAULT_LOGIN_PACKET_SIZE
public int MAX_PRELOGIN_PAYLOAD_LENGTH
public int MAX_PACKET_SIZE
public int MAX_SERVER_USER_NAME
public byte MIN_ERROR_CLASS
public byte MAX_USER_CORRECTABLE_ERROR_CLASS
public byte FATAL_ERROR_CLASS
public byte MT_SQL
public byte MT_LOGIN
public byte MT_RPC
public byte MT_TOKENS
public byte MT_BINARY
public byte MT_ATTN
public byte MT_BULK
public byte MT_FEDAUTH
public byte MT_CLOSE
public byte MT_ERROR
public byte MT_ACK
public byte MT_ECHO
public byte MT_LOGOUT
public byte MT_TRANS
public byte MT_OLEDB
public byte MT_LOGIN7
public byte MT_SSPI
public byte MT_PRELOGIN
public byte ST_EOM
public byte ST_AACK
public byte ST_IGNORE
public byte ST_BATCH
public byte ST_RESET_CONNECTION
public byte ST_RESET_CONNECTION_PRESERVE_TRANSACTION
public byte SQLCOLFMT
public byte SQLPROCID
public byte SQLCOLNAME
public byte SQLTABNAME
public byte SQLCOLINFO
public byte SQLALTNAME
public byte SQLALTFMT
public byte SQLERROR
public byte SQLINFO
public byte SQLRETURNVALUE
public byte SQLRETURNSTATUS
public byte SQLRETURNTOK
public byte SQLALTCONTROL
public byte SQLROW
public byte SQLNBCROW
public byte SQLALTROW
public byte SQLDONE
public byte SQLDONEPROC
public byte SQLDONEINPROC
public byte SQLOFFSET
public byte SQLORDER
public byte SQLDEBUG_CMD
public byte SQLLOGINACK
public byte SQLFEATUREEXTACK
public byte SQLSESSIONSTATE
public byte SQLENVCHANGE
public byte SQLSECLEVEL
public byte SQLROWCRC
public byte SQLCOLMETADATA
public byte SQLALTMETADATA
public byte SQLSSPI
public byte SQLFEDAUTHINFO
public byte ENV_DATABASE
public byte ENV_LANG
public byte ENV_CHARSET
public byte ENV_PACKETSIZE
public byte ENV_LOCALEID
public byte ENV_COMPFLAGS
public byte ENV_COLLATION
public byte ENV_BEGINTRAN
public byte ENV_COMMITTRAN
public byte ENV_ROLLBACKTRAN
public byte ENV_ENLISTDTC
public byte ENV_DEFECTDTC
public byte ENV_LOGSHIPNODE
public byte ENV_PROMOTETRANSACTION
public byte ENV_TRANSACTIONMANAGERADDRESS
public byte ENV_TRANSACTIONENDED
public byte ENV_SPRESETCONNECTIONACK
public byte ENV_USERINSTANCE
public byte ENV_ROUTING
public int DONE_MORE
public int DONE_ERROR
public int DONE_INXACT
public int DONE_PROC
public int DONE_COUNT
public int DONE_ATTN
public int DONE_INPROC
public int DONE_RPCINBATCH
public int DONE_SRVERROR
public int DONE_FMTSENT
public byte FEATUREEXT_TERMINATOR
public byte FEATUREEXT_SRECOVERY
public byte FEATUREEXT_FEDAUTH
public byte FEATUREEXT_TCE
public byte FEATUREEXT_GLOBALTRANSACTIONS
public byte FEDAUTHLIB_LIVEID
public byte FEDAUTHLIB_SECURITYTOKEN
public byte FEDAUTHLIB_ADAL
public byte FEDAUTHLIB_RESERVED
public byte ADALWORKFLOW_ACTIVEDIRECTORYPASSWORD
public byte ADALWORKFLOW_ACTIVEDIRECTORYINTEGRATED
public string NTAUTHORITYANONYMOUSLOGON
public byte MAX_LOG_NAME
public byte MAX_PROG_NAME
public byte SEC_COMP_LEN
public byte MAX_PK_LEN
public byte MAX_NIC_SIZE
public byte SQLVARIANT_SIZE
public byte VERSION_SIZE
public int CLIENT_PROG_VER
public int YUKON_LOG_REC_FIXED_LEN
public int TEXT_TIME_STAMP_LEN
public int COLLATION_INFO_LEN
public int SPHINXORSHILOH_MAJOR
public int SPHINX_INCREMENT
public int SHILOH_INCREMENT
public int DEFAULT_MINOR
public int SHILOHSP1_MAJOR
public int YUKON_MAJOR
public int KATMAI_MAJOR
public int DENALI_MAJOR
public int SHILOHSP1_INCREMENT
public int YUKON_INCREMENT
public int KATMAI_INCREMENT
public int DENALI_INCREMENT
public int SHILOHSP1_MINOR
public int YUKON_RTM_MINOR
public int KATMAI_MINOR
public int DENALI_MINOR
public int ORDER_68000
public int USE_DB_ON
public int INIT_DB_FATAL
public int SET_LANG_ON
public int INIT_LANG_FATAL
public int ODBC_ON
public int SSPI_ON
public int REPL_ON
public int READONLY_INTENT_ON
public byte SQLLenMask
public byte SQLFixedLen
public byte SQLVarLen
public byte SQLZeroLen
public byte SQLVarCnt
public byte SQLDifferentName
public byte SQLExpression
public byte SQLKey
public byte SQLHidden
public byte Nullable
public byte Identity
public byte Updatability
public byte ClrFixedLen
public byte IsColumnSet
public byte IsEncrypted
public UInt32 VARLONGNULL
public int VARNULL
public int MAXSIZE
public byte FIXEDNULL
public ulong UDTNULL
public int SQLVOID
public int SQLTEXT
public int SQLVARBINARY
public int SQLINTN
public int SQLVARCHAR
public int SQLBINARY
public int SQLIMAGE
public int SQLCHAR
public int SQLINT1
public int SQLBIT
public int SQLINT2
public int SQLINT4
public int SQLMONEY
public int SQLDATETIME
public int SQLFLT8
public int SQLFLTN
public int SQLMONEYN
public int SQLDATETIMN
public int SQLFLT4
public int SQLMONEY4
public int SQLDATETIM4
public int SQLDECIMALN
public int SQLNUMERICN
public int SQLUNIQUEID
public int SQLBIGCHAR
public int SQLBIGVARCHAR
public int SQLBIGBINARY
public int SQLBIGVARBINARY
public int SQLBITN
public int SQLNCHAR
public int SQLNVARCHAR
public int SQLNTEXT
public int SQLUDT
public int AOPCNTB
public int AOPSTDEV
public int AOPSTDEVP
public int AOPVAR
public int AOPVARP
public int AOPCNT
public int AOPSUM
public int AOPAVG
public int AOPMIN
public int AOPMAX
public int AOPANY
public int AOPNOOP
public int SQLTIMESTAMP
public int MAX_NUMERIC_LEN
public int DEFAULT_NUMERIC_PRECISION
public int SPHINX_DEFAULT_NUMERIC_PRECISION
public int MAX_NUMERIC_PRECISION
public byte UNKNOWN_PRECISION_SCALE
public int SQLINT8
public int SQLVARIANT
public int SQLXMLTYPE
public int XMLUNICODEBOM
public Byte[] XMLUNICODEBOMBYTES
public int SQLTABLE
public int SQLDATE
public int SQLTIME
public int SQLDATETIME2
public int SQLDATETIMEOFFSET
public int DEFAULT_VARTIME_SCALE
public ulong SQL_PLP_NULL
public ulong SQL_PLP_UNKNOWNLEN
public int SQL_PLP_CHUNK_TERMINATOR
public ushort SQL_USHORTVARMAXLEN
public byte TVP_ROWCOUNT_ESTIMATE
public byte TVP_ROW_TOKEN
public byte TVP_END_TOKEN
public ushort TVP_NOMETADATA_TOKEN
public byte TVP_ORDER_UNIQUE_TOKEN
public int TVP_DEFAULT_COLUMN
public byte TVP_ORDERASC_FLAG
public byte TVP_ORDERDESC_FLAG
public byte TVP_UNIQUE_FLAG
public bool Is68K
public bool TraceTDS
public string SP_EXECUTESQL
public string SP_PREPEXEC
public string SP_PREPARE
public string SP_EXECUTE
public string SP_UNPREPARE
public string SP_PARAMS
public string SP_PARAMS_MANAGED
public string SP_PARAMS_MGD10
public ushort RPC_PROCID_CURSOR
public ushort RPC_PROCID_CURSOROPEN
public ushort RPC_PROCID_CURSORPREPARE
public ushort RPC_PROCID_CURSOREXECUTE
public ushort RPC_PROCID_CURSORPREPEXEC
public ushort RPC_PROCID_CURSORUNPREPARE
public ushort RPC_PROCID_CURSORFETCH
public ushort RPC_PROCID_CURSOROPTION
public ushort RPC_PROCID_CURSORCLOSE
public ushort RPC_PROCID_EXECUTESQL
public ushort RPC_PROCID_PREPARE
public ushort RPC_PROCID_EXECUTE
public ushort RPC_PROCID_PREPEXEC
public ushort RPC_PROCID_PREPEXECRPC
public ushort RPC_PROCID_UNPREPARE
public string TRANS_BEGIN
public string TRANS_COMMIT
public string TRANS_ROLLBACK
public string TRANS_IF_ROLLBACK
public string TRANS_SAVE
public string TRANS_READ_COMMITTED
public string TRANS_READ_UNCOMMITTED
public string TRANS_REPEATABLE_READ
public string TRANS_SERIALIZABLE
public string TRANS_SNAPSHOT
public byte SHILOH_RPCBATCHFLAG
public byte YUKON_RPCBATCHFLAG
public byte RPC_RECOMPILE
public byte RPC_NOMETADATA
public byte RPC_PARAM_BYREF
public byte RPC_PARAM_DEFAULT
public byte RPC_PARAM_ENCRYPTED
public string PARAM_OUTPUT
public int MAX_PARAMETER_NAME_LENGTH
public string FMTONLY_ON
public string FMTONLY_OFF
public string BROWSE_ON
public string BROWSE_OFF
public string TABLE
public int EXEC_THRESHOLD
public short TIMEOUT_EXPIRED
public short ENCRYPTION_NOT_SUPPORTED
public int LOGON_FAILED
public int PASSWORD_EXPIRED
public int IMPERSONATION_FAILED
public int P_TOKENTOOLONG
public UInt32 SNI_UNINITIALIZED
public UInt32 SNI_SUCCESS
public UInt32 SNI_WAIT_TIMEOUT
public UInt32 SNI_SUCCESS_IO_PENDING
public short SNI_WSAECONNRESET
public UInt32 SNI_SSL_VALIDATE_CERTIFICATE
public UInt32 SNI_SSL_USE_SCHANNEL_CACHE
public UInt32 SNI_SSL_IGNORE_CHANNEL_BINDINGS
public string DEFAULT_ENGLISH_CODE_PAGE_STRING
public short DEFAULT_ENGLISH_CODE_PAGE_VALUE
public short CHARSET_CODE_PAGE_OFFSET
internal int MAX_SERVERNAME
internal ushort SELECT
internal ushort INSERT
internal ushort DELETE
internal ushort UPDATE
internal ushort ABORT
internal ushort BEGINXACT
internal ushort ENDXACT
internal ushort BULKINSERT
internal ushort OPENCURSOR
internal ushort MERGE
internal ushort MAXLEN_HOSTNAME
internal ushort MAXLEN_USERNAME
internal ushort MAXLEN_PASSWORD
internal ushort MAXLEN_APPNAME
internal ushort MAXLEN_SERVERNAME
internal ushort MAXLEN_CLIENTINTERFACE
internal ushort MAXLEN_LANGUAGE
internal ushort MAXLEN_DATABASE
internal ushort MAXLEN_ATTACHDBFILE
internal ushort MAXLEN_NEWPASSWORD
public UInt16[] CODE_PAGE_FROM_SORT_ID
internal Int64[] TICKS_FROM_SCALE
internal int MAX_TIME_SCALE
internal int MAX_TIME_LENGTH
internal int MAX_DATETIME2_LENGTH
internal int WHIDBEY_DATE_LENGTH
internal Int32[] WHIDBEY_TIME_LENGTH
internal Int32[] WHIDBEY_DATETIME2_LENGTH
internal Int32[] WHIDBEY_DATETIMEOFFSET_LENGTH
internal byte MAX_SUPPORTED_TCE_VERSION
internal ushort MAX_TCE_CIPHERINFO_SIZE
internal long MAX_TCE_CIPHERTEXT_SIZE
internal byte CustomCipherAlgorithmId
internal int AES_256_CBC
internal int AEAD_AES_256_CBC_HMAC_SHA256
internal string TCE_PARAM_CIPHERTEXT
internal string TCE_PARAM_CIPHER_ALGORITHM_ID
internal string TCE_PARAM_COLUMNENCRYPTION_KEY
internal string TCE_PARAM_ENCRYPTION_ALGORITHM
internal string TCE_PARAM_ENCRYPTIONTYPE
internal string TCE_PARAM_ENCRYPTIONKEY
internal string TCE_PARAM_MASTERKEY_PATH
internal string TCE_PARAM_ENCRYPTED_CEK
internal string TCE_PARAM_CLIENT_KEYSTORE_PROVIDERS
internal string TCE_PARAM_FORCE_COLUMN_ENCRYPTION
}
internal System.Data.SqlClient.TdsParserStaticMethods : object {
internal void AliasRegistryLookup(String& host, String& protocol)
internal Byte[] EncryptPassword(string password)
internal int GetCurrentProcessIdForTdsLoginOnly()
internal int GetCurrentThreadIdForTdsLoginOnly()
internal Byte[] GetNetworkPhysicalAddressForTdsLoginOnly()
internal int GetTimeoutMilliseconds(long timeoutTime)
internal long GetTimeoutSeconds(int timeout)
internal long GetTimeout(long timeoutMilliseconds)
internal bool TimeoutHasExpired(long timeoutTime)
internal int NullAwareStringLength(string str)
internal int GetRemainingTimeout(int timeout, long start)
}
internal System.Data.SqlClient.TransparentNetworkResolutionState : Enum {
public int value__
public TransparentNetworkResolutionState DisabledMode
public TransparentNetworkResolutionState SequentialMode
public TransparentNetworkResolutionState ParallelMode
}
public System.Data.SqlDbType : Enum {
public int value__
public SqlDbType BigInt
public SqlDbType Binary
public SqlDbType Bit
public SqlDbType Char
public SqlDbType DateTime
public SqlDbType Decimal
public SqlDbType Float
public SqlDbType Image
public SqlDbType Int
public SqlDbType Money
public SqlDbType NChar
public SqlDbType NText
public SqlDbType NVarChar
public SqlDbType Real
public SqlDbType UniqueIdentifier
public SqlDbType SmallDateTime
public SqlDbType SmallInt
public SqlDbType SmallMoney
public SqlDbType Text
public SqlDbType Timestamp
public SqlDbType TinyInt
public SqlDbType VarBinary
public SqlDbType VarChar
public SqlDbType Variant
public SqlDbType Xml
public SqlDbType Udt
public SqlDbType Structured
public SqlDbType Date
public SqlDbType Time
public SqlDbType DateTime2
public SqlDbType DateTimeOffset
}
internal System.Data.SqlTypes.EComparison : Enum {
public int value__
public EComparison LT
public EComparison LE
public EComparison EQ
public EComparison GE
public EComparison GT
public EComparison NE
}
public System.Data.SqlTypes.INullable {
public bool IsNull
public bool get_IsNull()
}
public System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
}
public System.Data.SqlTypes.SqlBinary : ValueType {
private Byte[] m_value
public SqlBinary Null
public bool IsNull
public Byte[] Value
public byte Item
public int Length
private void .ctor(bool fNull)
public void .ctor(Byte[] value)
internal void .ctor(Byte[] value, bool ignored)
public bool get_IsNull()
public Byte[] get_Value()
public byte get_Item(int index)
public int get_Length()
public SqlBinary op_Implicit(Byte[] x)
public Byte[] op_Explicit(SqlBinary x)
public string ToString()
public SqlBinary op_Addition(SqlBinary x, SqlBinary y)
private EComparison PerformCompareByte(Byte[] x, Byte[] y)
public SqlBinary op_Explicit(SqlGuid x)
public SqlBoolean op_Equality(SqlBinary x, SqlBinary y)
public SqlBoolean op_Inequality(SqlBinary x, SqlBinary y)
public SqlBoolean op_LessThan(SqlBinary x, SqlBinary y)
public SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y)
public SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBinary Add(SqlBinary x, SqlBinary y)
public SqlBinary Concat(SqlBinary x, SqlBinary y)
public SqlBoolean Equals(SqlBinary x, SqlBinary y)
public SqlBoolean NotEquals(SqlBinary x, SqlBinary y)
public SqlBoolean LessThan(SqlBinary x, SqlBinary y)
public SqlBoolean GreaterThan(SqlBinary x, SqlBinary y)
public SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y)
public SqlGuid ToSqlGuid()
public int CompareTo(object value)
public int CompareTo(SqlBinary value)
public bool Equals(object value)
internal int HashByteArray(Byte[] rgbValue, int length)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlBoolean : ValueType {
private byte m_value
private byte x_Null
private byte x_False
private byte x_True
public SqlBoolean True
public SqlBoolean False
public SqlBoolean Null
public SqlBoolean Zero
public SqlBoolean One
public bool IsNull
public bool Value
public bool IsTrue
public bool IsFalse
public byte ByteValue
public void .ctor(bool value)
public void .ctor(int value)
private void .ctor(int value, bool fNull)
public bool get_IsNull()
public bool get_Value()
public bool get_IsTrue()
public bool get_IsFalse()
public SqlBoolean op_Implicit(bool x)
public bool op_Explicit(SqlBoolean x)
public SqlBoolean op_LogicalNot(SqlBoolean x)
public bool op_True(SqlBoolean x)
public bool op_False(SqlBoolean x)
public SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y)
public byte get_ByteValue()
public string ToString()
public SqlBoolean Parse(string s)
public SqlBoolean op_OnesComplement(SqlBoolean x)
public SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_Explicit(SqlByte x)
public SqlBoolean op_Explicit(SqlInt16 x)
public SqlBoolean op_Explicit(SqlInt32 x)
public SqlBoolean op_Explicit(SqlInt64 x)
public SqlBoolean op_Explicit(SqlDouble x)
public SqlBoolean op_Explicit(SqlSingle x)
public SqlBoolean op_Explicit(SqlMoney x)
public SqlBoolean op_Explicit(SqlDecimal x)
public SqlBoolean op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y)
public SqlBoolean OnesComplement(SqlBoolean x)
public SqlBoolean And(SqlBoolean x, SqlBoolean y)
public SqlBoolean Or(SqlBoolean x, SqlBoolean y)
public SqlBoolean Xor(SqlBoolean x, SqlBoolean y)
public SqlBoolean Equals(SqlBoolean x, SqlBoolean y)
public SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y)
public SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean LessThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y)
public SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y)
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlBoolean value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlByte : ValueType {
private bool m_fNotNull
private byte m_value
private int x_iBitNotByteMax
public SqlByte Null
public SqlByte Zero
public SqlByte MinValue
public SqlByte MaxValue
public bool IsNull
public byte Value
private void .ctor(bool fNull)
public void .ctor(byte value)
public bool get_IsNull()
public byte get_Value()
public SqlByte op_Implicit(byte x)
public byte op_Explicit(SqlByte x)
public string ToString()
public SqlByte Parse(string s)
public SqlByte op_OnesComplement(SqlByte x)
public SqlByte op_Addition(SqlByte x, SqlByte y)
public SqlByte op_Subtraction(SqlByte x, SqlByte y)
public SqlByte op_Multiply(SqlByte x, SqlByte y)
public SqlByte op_Division(SqlByte x, SqlByte y)
public SqlByte op_Modulus(SqlByte x, SqlByte y)
public SqlByte op_BitwiseAnd(SqlByte x, SqlByte y)
public SqlByte op_BitwiseOr(SqlByte x, SqlByte y)
public SqlByte op_ExclusiveOr(SqlByte x, SqlByte y)
public SqlByte op_Explicit(SqlBoolean x)
public SqlByte op_Explicit(SqlMoney x)
public SqlByte op_Explicit(SqlInt16 x)
public SqlByte op_Explicit(SqlInt32 x)
public SqlByte op_Explicit(SqlInt64 x)
public SqlByte op_Explicit(SqlSingle x)
public SqlByte op_Explicit(SqlDouble x)
public SqlByte op_Explicit(SqlDecimal x)
public SqlByte op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlByte x, SqlByte y)
public SqlBoolean op_Inequality(SqlByte x, SqlByte y)
public SqlBoolean op_LessThan(SqlByte x, SqlByte y)
public SqlBoolean op_GreaterThan(SqlByte x, SqlByte y)
public SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y)
public SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y)
public SqlByte OnesComplement(SqlByte x)
public SqlByte Add(SqlByte x, SqlByte y)
public SqlByte Subtract(SqlByte x, SqlByte y)
public SqlByte Multiply(SqlByte x, SqlByte y)
public SqlByte Divide(SqlByte x, SqlByte y)
public SqlByte Mod(SqlByte x, SqlByte y)
public SqlByte Modulus(SqlByte x, SqlByte y)
public SqlByte BitwiseAnd(SqlByte x, SqlByte y)
public SqlByte BitwiseOr(SqlByte x, SqlByte y)
public SqlByte Xor(SqlByte x, SqlByte y)
public SqlBoolean Equals(SqlByte x, SqlByte y)
public SqlBoolean NotEquals(SqlByte x, SqlByte y)
public SqlBoolean LessThan(SqlByte x, SqlByte y)
public SqlBoolean GreaterThan(SqlByte x, SqlByte y)
public SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y)
public SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y)
public SqlBoolean ToSqlBoolean()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlByte value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlBytes : object {
internal Byte[] m_rgbBuf
private long m_lCurLen
internal Stream m_stream
private SqlBytesCharsState m_state
private Byte[] m_rgbWorkBuf
private long x_lMaxLen
private long x_lNull
public bool IsNull
public Byte[] Buffer
public long Length
public long MaxLength
public Byte[] Value
public byte Item
public StorageState Storage
public Stream Stream
public SqlBytes Null
public void .ctor(Byte[] buffer)
public void .ctor(SqlBinary value)
public void .ctor(Stream s)
private void .ctor(SerializationInfo info, StreamingContext context)
public bool get_IsNull()
public Byte[] get_Buffer()
public long get_Length()
public long get_MaxLength()
public Byte[] get_Value()
public byte get_Item(long offset)
public void set_Item(long offset, byte value)
public StorageState get_Storage()
public Stream get_Stream()
public void set_Stream(Stream value)
public void SetNull()
public void SetLength(long value)
public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count)
public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count)
public SqlBinary ToSqlBinary()
public SqlBinary op_Explicit(SqlBytes value)
public SqlBytes op_Explicit(SqlBinary value)
private void AssertValid()
private void CopyStreamToBuffer()
internal bool FStream()
private void SetBuffer(Byte[] buffer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public SqlBytes get_Null()
}
internal System.Data.SqlTypes.SqlBytesCharsState : Enum {
public int value__
public SqlBytesCharsState Null
public SqlBytesCharsState Buffer
public SqlBytesCharsState Stream
}
public System.Data.SqlTypes.SqlChars : object {
internal Char[] m_rgchBuf
private long m_lCurLen
internal SqlStreamChars m_stream
private SqlBytesCharsState m_state
private Char[] m_rgchWorkBuf
private long x_lMaxLen
private long x_lNull
public bool IsNull
public Char[] Buffer
public long Length
public long MaxLength
public Char[] Value
public char Item
internal SqlStreamChars Stream
public StorageState Storage
public SqlChars Null
public void .ctor(Char[] buffer)
public void .ctor(SqlString value)
internal void .ctor(SqlStreamChars s)
private void .ctor(SerializationInfo info, StreamingContext context)
public bool get_IsNull()
public Char[] get_Buffer()
public long get_Length()
public long get_MaxLength()
public Char[] get_Value()
public char get_Item(long offset)
public void set_Item(long offset, char value)
internal SqlStreamChars get_Stream()
internal void set_Stream(SqlStreamChars value)
public StorageState get_Storage()
public void SetNull()
public void SetLength(long value)
public long Read(long offset, Char[] buffer, int offsetInBuffer, int count)
public void Write(long offset, Char[] buffer, int offsetInBuffer, int count)
public SqlString ToSqlString()
public SqlString op_Explicit(SqlChars value)
public SqlChars op_Explicit(SqlString value)
private void AssertValid()
internal bool FStream()
private void CopyStreamToBuffer()
private void SetBuffer(Char[] buffer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public SqlChars get_Null()
}
public System.Data.SqlTypes.SqlCompareOptions : Enum {
public int value__
public SqlCompareOptions None
public SqlCompareOptions IgnoreCase
public SqlCompareOptions IgnoreNonSpace
public SqlCompareOptions IgnoreKanaType
public SqlCompareOptions IgnoreWidth
public SqlCompareOptions BinarySort
public SqlCompareOptions BinarySort2
}
public System.Data.SqlTypes.SqlDateTime : ValueType {
private bool m_fNotNull
private int m_day
private int m_time
private double SQLTicksPerMillisecond
public int SQLTicksPerSecond
public int SQLTicksPerMinute
public int SQLTicksPerHour
private int SQLTicksPerDay
private long TicksPerSecond
private DateTime SQLBaseDate
private long SQLBaseDateTicks
private int MinYear
private int MaxYear
private int MinDay
private int MaxDay
private int MinTime
private int MaxTime
private int DayBase
private Int32[] DaysToMonth365
private Int32[] DaysToMonth366
private DateTime MinDateTime
private DateTime MaxDateTime
private TimeSpan MinTimeSpan
private TimeSpan MaxTimeSpan
private string x_ISO8601_DateTimeFormat
private String[] x_DateTimeFormats
private DateTimeStyles x_DateTimeStyle
public SqlDateTime MinValue
public SqlDateTime MaxValue
public SqlDateTime Null
public bool IsNull
public DateTime Value
public int DayTicks
public int TimeTicks
private void .ctor(bool fNull)
public void .ctor(DateTime value)
public void .ctor(int year, int month, int day)
public void .ctor(int year, int month, int day, int hour, int minute, int second)
public void .ctor(int year, int month, int day, int hour, int minute, int second, double millisecond)
public void .ctor(int year, int month, int day, int hour, int minute, int second, int bilisecond)
public void .ctor(int dayTicks, int timeTicks)
internal void .ctor(double dblVal)
public bool get_IsNull()
private TimeSpan ToTimeSpan(SqlDateTime value)
private DateTime ToDateTime(SqlDateTime value)
internal DateTime ToDateTime(int daypart, int timepart)
private SqlDateTime FromTimeSpan(TimeSpan value)
private SqlDateTime FromDateTime(DateTime value)
public DateTime get_Value()
public int get_DayTicks()
public int get_TimeTicks()
public SqlDateTime op_Implicit(DateTime value)
public DateTime op_Explicit(SqlDateTime x)
public string ToString()
public SqlDateTime Parse(string s)
public SqlDateTime op_Addition(SqlDateTime x, TimeSpan t)
public SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t)
public SqlDateTime Add(SqlDateTime x, TimeSpan t)
public SqlDateTime Subtract(SqlDateTime x, TimeSpan t)
public SqlDateTime op_Explicit(SqlString x)
private bool IsLeapYear(int year)
public SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean Equals(SqlDateTime x, SqlDateTime y)
public SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y)
public SqlBoolean LessThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlDateTime value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
internal System.Data.SqlTypes.SQLDebug : object {
internal void Check(bool condition)
internal void Check(bool condition, string conditionString, string message)
internal void Check(bool condition, string conditionString)
}
public System.Data.SqlTypes.SqlDecimal : ValueType {
internal byte m_bStatus
internal byte m_bLen
internal byte m_bPrec
internal byte m_bScale
internal UInt32 m_data1
internal UInt32 m_data2
internal UInt32 m_data3
internal UInt32 m_data4
private byte NUMERIC_MAX_PRECISION
public byte MaxPrecision
public byte MaxScale
private byte x_bNullMask
private byte x_bIsNull
private byte x_bNotNull
private byte x_bReverseNullMask
private byte x_bSignMask
private byte x_bPositive
private byte x_bNegative
private byte x_bReverseSignMask
private UInt32 x_uiZero
private int x_cNumeMax
private long x_lInt32Base
private ulong x_ulInt32Base
private ulong x_ulInt32BaseForMod
internal ulong x_llMax
private UInt32 x_ulBase10
private double DUINT_BASE
private double DUINT_BASE2
private double DUINT_BASE3
private double DMAX_NUME
private UInt32 DBL_DIG
private byte x_cNumeDivScaleMin
private UInt32[] x_rgulShiftBase
private UInt32[] DecimalHelpersLo
private UInt32[] DecimalHelpersMid
private UInt32[] DecimalHelpersHi
private UInt32[] DecimalHelpersHiHi
private int HelperTableStartIndexLo
private int HelperTableStartIndexMid
private int HelperTableStartIndexHi
private int HelperTableStartIndexHiHi
private Byte[] rgCLenFromPrec
private UInt32 x_ulT1
private UInt32 x_ulT2
private UInt32 x_ulT3
private UInt32 x_ulT4
private UInt32 x_ulT5
private UInt32 x_ulT6
private UInt32 x_ulT7
private UInt32 x_ulT8
private UInt32 x_ulT9
private ulong x_dwlT10
private ulong x_dwlT11
private ulong x_dwlT12
private ulong x_dwlT13
private ulong x_dwlT14
private ulong x_dwlT15
private ulong x_dwlT16
private ulong x_dwlT17
private ulong x_dwlT18
private ulong x_dwlT19
public SqlDecimal Null
public SqlDecimal MinValue
public SqlDecimal MaxValue
public bool IsNull
public decimal Value
public bool IsPositive
public byte Precision
public byte Scale
public Int32[] Data
public Byte[] BinData
private void .ctor(bool fNull)
public void .ctor(decimal value)
public void .ctor(int value)
public void .ctor(long value)
public void .ctor(byte bPrecision, byte bScale, bool fPositive, Int32[] bits)
public void .ctor(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4)
public void .ctor(double dVal)
private void .ctor(UInt32[] rglData, byte bLen, byte bPrec, byte bScale, bool fPositive)
private byte CalculatePrecision()
private bool VerifyPrecision(byte precision)
public bool get_IsNull()
public decimal get_Value()
public bool get_IsPositive()
private void SetPositive()
private void SetSignBit(bool fPositive)
public byte get_Precision()
public byte get_Scale()
public Int32[] get_Data()
public Byte[] get_BinData()
public string ToString()
public SqlDecimal Parse(string s)
public double ToDouble()
private decimal ToDecimal()
public SqlDecimal op_Implicit(decimal x)
public SqlDecimal op_Explicit(double x)
public SqlDecimal op_Implicit(long x)
public decimal op_Explicit(SqlDecimal x)
public SqlDecimal op_UnaryNegation(SqlDecimal x)
public SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Division(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Explicit(SqlBoolean x)
public SqlDecimal op_Implicit(SqlByte x)
public SqlDecimal op_Implicit(SqlInt16 x)
public SqlDecimal op_Implicit(SqlInt32 x)
public SqlDecimal op_Implicit(SqlInt64 x)
public SqlDecimal op_Implicit(SqlMoney x)
public SqlDecimal op_Explicit(SqlSingle x)
public SqlDecimal op_Explicit(SqlDouble x)
public SqlDecimal op_Explicit(SqlString x)
private void AssertValid()
private void ZeroToMaxLen(UInt32[] rgulData, int cUI4sCur)
private byte CLenFromPrec(byte bPrec)
private bool FZero()
private bool FGt10_38()
private bool FGt10_38(UInt32[] rglData)
private byte BGetPrecUI4(UInt32 value)
private byte BGetPrecUI8(UInt32 ulU0, UInt32 ulU1)
private byte BGetPrecUI8(ulong dwlVal)
private void AddULong(UInt32 ulAdd)
private void MultByULong(UInt32 uiMultiplier)
private UInt32 DivByULong(UInt32 iDivisor)
internal void AdjustScale(int digits, bool fRound)
public SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound)
public SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale)
private int LAbsCmp(SqlDecimal snumOp)
private void MpMove(UInt32[] rgulS, int ciulS, UInt32[] rgulD, Int32& ciulD)
private void MpSet(UInt32[] rgulD, Int32& ciulD, UInt32 iulN)
private void MpNormalize(UInt32[] rgulU, Int32& ciulU)
private void MpMul1(UInt32[] piulD, Int32& ciulD, UInt32 iulX)
private void MpDiv1(UInt32[] rgulU, Int32& ciulU, UInt32 iulD, UInt32& iulR)
internal ulong DWL(UInt32 lo, UInt32 hi)
private UInt32 HI(ulong x)
private UInt32 LO(ulong x)
private void MpDiv(UInt32[] rgulU, int ciulU, UInt32[] rgulD, int ciulD, UInt32[] rgulQ, Int32& ciulQ, UInt32[] rgulR, Int32& ciulR)
private EComparison CompareNm(SqlDecimal snumOp)
private void CheckValidPrecScale(byte bPrec, byte bScale)
private void CheckValidPrecScale(int iPrec, int iScale)
public SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlDecimal Add(SqlDecimal x, SqlDecimal y)
public SqlDecimal Subtract(SqlDecimal x, SqlDecimal y)
public SqlDecimal Multiply(SqlDecimal x, SqlDecimal y)
public SqlDecimal Divide(SqlDecimal x, SqlDecimal y)
public SqlBoolean Equals(SqlDecimal x, SqlDecimal y)
public SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y)
public SqlBoolean LessThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
private char ChFromDigit(UInt32 uiDigit)
private void StoreFromWorkingArray(UInt32[] rguiData)
private void SetToZero()
private void MakeInteger(Boolean& fFraction)
public SqlDecimal Abs(SqlDecimal n)
public SqlDecimal Ceiling(SqlDecimal n)
public SqlDecimal Floor(SqlDecimal n)
public SqlInt32 Sign(SqlDecimal n)
private SqlDecimal Round(SqlDecimal n, int lPosition, bool fTruncate)
public SqlDecimal Round(SqlDecimal n, int position)
public SqlDecimal Truncate(SqlDecimal n, int position)
public SqlDecimal Power(SqlDecimal n, double exp)
public int CompareTo(object value)
public int CompareTo(SqlDecimal value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlDouble : ValueType {
private bool m_fNotNull
private double m_value
public SqlDouble Null
public SqlDouble Zero
public SqlDouble MinValue
public SqlDouble MaxValue
public bool IsNull
public double Value
private void .ctor(bool fNull)
public void .ctor(double value)
public bool get_IsNull()
public double get_Value()
public SqlDouble op_Implicit(double x)
public double op_Explicit(SqlDouble x)
public string ToString()
public SqlDouble Parse(string s)
public SqlDouble op_UnaryNegation(SqlDouble x)
public SqlDouble op_Addition(SqlDouble x, SqlDouble y)
public SqlDouble op_Subtraction(SqlDouble x, SqlDouble y)
public SqlDouble op_Multiply(SqlDouble x, SqlDouble y)
public SqlDouble op_Division(SqlDouble x, SqlDouble y)
public SqlDouble op_Explicit(SqlBoolean x)
public SqlDouble op_Implicit(SqlByte x)
public SqlDouble op_Implicit(SqlInt16 x)
public SqlDouble op_Implicit(SqlInt32 x)
public SqlDouble op_Implicit(SqlInt64 x)
public SqlDouble op_Implicit(SqlSingle x)
public SqlDouble op_Implicit(SqlMoney x)
public SqlDouble op_Implicit(SqlDecimal x)
public SqlDouble op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlDouble x, SqlDouble y)
public SqlBoolean op_Inequality(SqlDouble x, SqlDouble y)
public SqlBoolean op_LessThan(SqlDouble x, SqlDouble y)
public SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y)
public SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y)
public SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y)
public SqlDouble Add(SqlDouble x, SqlDouble y)
public SqlDouble Subtract(SqlDouble x, SqlDouble y)
public SqlDouble Multiply(SqlDouble x, SqlDouble y)
public SqlDouble Divide(SqlDouble x, SqlDouble y)
public SqlBoolean Equals(SqlDouble x, SqlDouble y)
public SqlBoolean NotEquals(SqlDouble x, SqlDouble y)
public SqlBoolean LessThan(SqlDouble x, SqlDouble y)
public SqlBoolean GreaterThan(SqlDouble x, SqlDouble y)
public SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y)
public SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlDouble value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlGuid : ValueType {
private int SizeOfGuid
private Int32[] x_rgiGuidOrder
private Byte[] m_value
public SqlGuid Null
public bool IsNull
public Guid Value
private void .ctor(bool fNull)
public void .ctor(Byte[] value)
internal void .ctor(Byte[] value, bool ignored)
public void .ctor(string s)
public void .ctor(Guid g)
public void .ctor(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)
public bool get_IsNull()
public Guid get_Value()
public SqlGuid op_Implicit(Guid x)
public Guid op_Explicit(SqlGuid x)
public Byte[] ToByteArray()
public string ToString()
public SqlGuid Parse(string s)
private EComparison Compare(SqlGuid x, SqlGuid y)
public SqlGuid op_Explicit(SqlString x)
public SqlGuid op_Explicit(SqlBinary x)
public SqlBoolean op_Equality(SqlGuid x, SqlGuid y)
public SqlBoolean op_Inequality(SqlGuid x, SqlGuid y)
public SqlBoolean op_LessThan(SqlGuid x, SqlGuid y)
public SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y)
public SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean Equals(SqlGuid x, SqlGuid y)
public SqlBoolean NotEquals(SqlGuid x, SqlGuid y)
public SqlBoolean LessThan(SqlGuid x, SqlGuid y)
public SqlBoolean GreaterThan(SqlGuid x, SqlGuid y)
public SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y)
public SqlString ToSqlString()
public SqlBinary ToSqlBinary()
public int CompareTo(object value)
public int CompareTo(SqlGuid value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlInt16 : ValueType {
private bool m_fNotNull
private short m_value
private int O_MASKI2
public SqlInt16 Null
public SqlInt16 Zero
public SqlInt16 MinValue
public SqlInt16 MaxValue
public bool IsNull
public short Value
private void .ctor(bool fNull)
public void .ctor(short value)
public bool get_IsNull()
public short get_Value()
public SqlInt16 op_Implicit(short x)
public short op_Explicit(SqlInt16 x)
public string ToString()
public SqlInt16 Parse(string s)
public SqlInt16 op_UnaryNegation(SqlInt16 x)
public SqlInt16 op_OnesComplement(SqlInt16 x)
public SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Division(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Explicit(SqlBoolean x)
public SqlInt16 op_Implicit(SqlByte x)
public SqlInt16 op_Explicit(SqlInt32 x)
public SqlInt16 op_Explicit(SqlInt64 x)
public SqlInt16 op_Explicit(SqlSingle x)
public SqlInt16 op_Explicit(SqlDouble x)
public SqlInt16 op_Explicit(SqlMoney x)
public SqlInt16 op_Explicit(SqlDecimal x)
public SqlInt16 op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlInt16 OnesComplement(SqlInt16 x)
public SqlInt16 Add(SqlInt16 x, SqlInt16 y)
public SqlInt16 Subtract(SqlInt16 x, SqlInt16 y)
public SqlInt16 Multiply(SqlInt16 x, SqlInt16 y)
public SqlInt16 Divide(SqlInt16 x, SqlInt16 y)
public SqlInt16 Mod(SqlInt16 x, SqlInt16 y)
public SqlInt16 Modulus(SqlInt16 x, SqlInt16 y)
public SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y)
public SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y)
public SqlInt16 Xor(SqlInt16 x, SqlInt16 y)
public SqlBoolean Equals(SqlInt16 x, SqlInt16 y)
public SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y)
public SqlBoolean LessThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlInt16 value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlInt32 : ValueType {
private bool m_fNotNull
private int m_value
private long x_iIntMin
private long x_lBitNotIntMax
public SqlInt32 Null
public SqlInt32 Zero
public SqlInt32 MinValue
public SqlInt32 MaxValue
public bool IsNull
public int Value
private void .ctor(bool fNull)
public void .ctor(int value)
public bool get_IsNull()
public int get_Value()
public SqlInt32 op_Implicit(int x)
public int op_Explicit(SqlInt32 x)
public string ToString()
public SqlInt32 Parse(string s)
public SqlInt32 op_UnaryNegation(SqlInt32 x)
public SqlInt32 op_OnesComplement(SqlInt32 x)
public SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Division(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Explicit(SqlBoolean x)
public SqlInt32 op_Implicit(SqlByte x)
public SqlInt32 op_Implicit(SqlInt16 x)
public SqlInt32 op_Explicit(SqlInt64 x)
public SqlInt32 op_Explicit(SqlSingle x)
public SqlInt32 op_Explicit(SqlDouble x)
public SqlInt32 op_Explicit(SqlMoney x)
public SqlInt32 op_Explicit(SqlDecimal x)
public SqlInt32 op_Explicit(SqlString x)
private bool SameSignInt(int x, int y)
public SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlInt32 OnesComplement(SqlInt32 x)
public SqlInt32 Add(SqlInt32 x, SqlInt32 y)
public SqlInt32 Subtract(SqlInt32 x, SqlInt32 y)
public SqlInt32 Multiply(SqlInt32 x, SqlInt32 y)
public SqlInt32 Divide(SqlInt32 x, SqlInt32 y)
public SqlInt32 Mod(SqlInt32 x, SqlInt32 y)
public SqlInt32 Modulus(SqlInt32 x, SqlInt32 y)
public SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y)
public SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y)
public SqlInt32 Xor(SqlInt32 x, SqlInt32 y)
public SqlBoolean Equals(SqlInt32 x, SqlInt32 y)
public SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y)
public SqlBoolean LessThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlInt32 value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlInt64 : ValueType {
private bool m_fNotNull
private long m_value
private long x_lLowIntMask
private long x_lHighIntMask
public SqlInt64 Null
public SqlInt64 Zero
public SqlInt64 MinValue
public SqlInt64 MaxValue
public bool IsNull
public long Value
private void .ctor(bool fNull)
public void .ctor(long value)
public bool get_IsNull()
public long get_Value()
public SqlInt64 op_Implicit(long x)
public long op_Explicit(SqlInt64 x)
public string ToString()
public SqlInt64 Parse(string s)
public SqlInt64 op_UnaryNegation(SqlInt64 x)
public SqlInt64 op_OnesComplement(SqlInt64 x)
public SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Division(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Explicit(SqlBoolean x)
public SqlInt64 op_Implicit(SqlByte x)
public SqlInt64 op_Implicit(SqlInt16 x)
public SqlInt64 op_Implicit(SqlInt32 x)
public SqlInt64 op_Explicit(SqlSingle x)
public SqlInt64 op_Explicit(SqlDouble x)
public SqlInt64 op_Explicit(SqlMoney x)
public SqlInt64 op_Explicit(SqlDecimal x)
public SqlInt64 op_Explicit(SqlString x)
private bool SameSignLong(long x, long y)
public SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlInt64 OnesComplement(SqlInt64 x)
public SqlInt64 Add(SqlInt64 x, SqlInt64 y)
public SqlInt64 Subtract(SqlInt64 x, SqlInt64 y)
public SqlInt64 Multiply(SqlInt64 x, SqlInt64 y)
public SqlInt64 Divide(SqlInt64 x, SqlInt64 y)
public SqlInt64 Mod(SqlInt64 x, SqlInt64 y)
public SqlInt64 Modulus(SqlInt64 x, SqlInt64 y)
public SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y)
public SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y)
public SqlInt64 Xor(SqlInt64 x, SqlInt64 y)
public SqlBoolean Equals(SqlInt64 x, SqlInt64 y)
public SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y)
public SqlBoolean LessThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlInt64 value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlMoney : ValueType {
private bool m_fNotNull
private long m_value
internal int x_iMoneyScale
private long x_lTickBase
private double x_dTickBase
private long MinLong
private long MaxLong
public SqlMoney Null
public SqlMoney Zero
public SqlMoney MinValue
public SqlMoney MaxValue
public bool IsNull
public decimal Value
private void .ctor(bool fNull)
internal void .ctor(long value, int ignored)
public void .ctor(int value)
public void .ctor(long value)
public void .ctor(decimal value)
public void .ctor(double value)
public bool get_IsNull()
public decimal get_Value()
public decimal ToDecimal()
public long ToInt64()
internal long ToSqlInternalRepresentation()
public int ToInt32()
public double ToDouble()
public SqlMoney op_Implicit(decimal x)
public SqlMoney op_Explicit(double x)
public SqlMoney op_Implicit(long x)
public decimal op_Explicit(SqlMoney x)
public string ToString()
public SqlMoney Parse(string s)
public SqlMoney op_UnaryNegation(SqlMoney x)
public SqlMoney op_Addition(SqlMoney x, SqlMoney y)
public SqlMoney op_Subtraction(SqlMoney x, SqlMoney y)
public SqlMoney op_Multiply(SqlMoney x, SqlMoney y)
public SqlMoney op_Division(SqlMoney x, SqlMoney y)
public SqlMoney op_Explicit(SqlBoolean x)
public SqlMoney op_Implicit(SqlByte x)
public SqlMoney op_Implicit(SqlInt16 x)
public SqlMoney op_Implicit(SqlInt32 x)
public SqlMoney op_Implicit(SqlInt64 x)
public SqlMoney op_Explicit(SqlSingle x)
public SqlMoney op_Explicit(SqlDouble x)
public SqlMoney op_Explicit(SqlDecimal x)
public SqlMoney op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlMoney x, SqlMoney y)
public SqlBoolean op_Inequality(SqlMoney x, SqlMoney y)
public SqlBoolean op_LessThan(SqlMoney x, SqlMoney y)
public SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y)
public SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y)
public SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y)
public SqlMoney Add(SqlMoney x, SqlMoney y)
public SqlMoney Subtract(SqlMoney x, SqlMoney y)
public SqlMoney Multiply(SqlMoney x, SqlMoney y)
public SqlMoney Divide(SqlMoney x, SqlMoney y)
public SqlBoolean Equals(SqlMoney x, SqlMoney y)
public SqlBoolean NotEquals(SqlMoney x, SqlMoney y)
public SqlBoolean LessThan(SqlMoney x, SqlMoney y)
public SqlBoolean GreaterThan(SqlMoney x, SqlMoney y)
public SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y)
public SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlMoney value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
}
public System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
private SerializationInfo SqlNullValueExceptionSerialization(SerializationInfo si, StreamingContext sc)
}
internal System.Data.SqlTypes.SQLResource : object {
internal string NullString
internal string MessageString
internal string ArithOverflowMessage
internal string DivideByZeroMessage
internal string NullValueMessage
internal string TruncationMessage
internal string DateTimeOverflowMessage
internal string ConcatDiffCollationMessage
internal string CompareDiffCollationMessage
internal string InvalidFlagMessage
internal string NumeToDecOverflowMessage
internal string ConversionOverflowMessage
internal string InvalidDateTimeMessage
internal string TimeZoneSpecifiedMessage
internal string InvalidArraySizeMessage
internal string InvalidPrecScaleMessage
internal string FormatMessage
internal string NotFilledMessage
internal string AlreadyFilledMessage
internal string ClosedXmlReaderMessage
internal string InvalidOpStreamClosed(string method)
internal string InvalidOpStreamNonWritable(string method)
internal string InvalidOpStreamNonReadable(string method)
internal string InvalidOpStreamNonSeekable(string method)
}
public System.Data.SqlTypes.SqlSingle : ValueType {
private bool m_fNotNull
private float m_value
public SqlSingle Null
public SqlSingle Zero
public SqlSingle MinValue
public SqlSingle MaxValue
public bool IsNull
public float Value
private void .ctor(bool fNull)
public void .ctor(float value)
public void .ctor(double value)
public bool get_IsNull()
public float get_Value()
public SqlSingle op_Implicit(float x)
public float op_Explicit(SqlSingle x)
public string ToString()
public SqlSingle Parse(string s)
public SqlSingle op_UnaryNegation(SqlSingle x)
public SqlSingle op_Addition(SqlSingle x, SqlSingle y)
public SqlSingle op_Subtraction(SqlSingle x, SqlSingle y)
public SqlSingle op_Multiply(SqlSingle x, SqlSingle y)
public SqlSingle op_Division(SqlSingle x, SqlSingle y)
public SqlSingle op_Explicit(SqlBoolean x)
public SqlSingle op_Implicit(SqlByte x)
public SqlSingle op_Implicit(SqlInt16 x)
public SqlSingle op_Implicit(SqlInt32 x)
public SqlSingle op_Implicit(SqlInt64 x)
public SqlSingle op_Implicit(SqlMoney x)
public SqlSingle op_Implicit(SqlDecimal x)
public SqlSingle op_Explicit(SqlDouble x)
public SqlSingle op_Explicit(SqlString x)
public SqlBoolean op_Equality(SqlSingle x, SqlSingle y)
public SqlBoolean op_Inequality(SqlSingle x, SqlSingle y)
public SqlBoolean op_LessThan(SqlSingle x, SqlSingle y)
public SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y)
public SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y)
public SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y)
public SqlSingle Add(SqlSingle x, SqlSingle y)
public SqlSingle Subtract(SqlSingle x, SqlSingle y)
public SqlSingle Multiply(SqlSingle x, SqlSingle y)
public SqlSingle Divide(SqlSingle x, SqlSingle y)
public SqlBoolean Equals(SqlSingle x, SqlSingle y)
public SqlBoolean NotEquals(SqlSingle x, SqlSingle y)
public SqlBoolean LessThan(SqlSingle x, SqlSingle y)
public SqlBoolean GreaterThan(SqlSingle x, SqlSingle y)
public SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y)
public SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlString ToSqlString()
public int CompareTo(object value)
public int CompareTo(SqlSingle value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
internal System.Data.SqlTypes.SqlStreamChars : object {
public bool IsNull
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public SqlStreamChars Null
public bool get_IsNull()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int Read(Char[] buffer, int offset, int count)
public void Write(Char[] buffer, int offset, int count)
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Flush()
public void Close()
private void System.IDisposable.Dispose()
protected void Dispose(bool disposing)
public int ReadChar()
public void WriteChar(char value)
public SqlStreamChars get_Null()
}
public System.Data.SqlTypes.SqlString : ValueType {
private string m_value
private CompareInfo m_cmpInfo
private int m_lcid
private SqlCompareOptions m_flag
private bool m_fNotNull
public SqlString Null
internal UnicodeEncoding x_UnicodeEncoding
public int IgnoreCase
public int IgnoreWidth
public int IgnoreNonSpace
public int IgnoreKanaType
public int BinarySort
public int BinarySort2
private SqlCompareOptions x_iDefaultFlag
private CompareOptions x_iValidCompareOptionMask
internal SqlCompareOptions x_iValidSqlCompareOptionMask
internal int x_lcidUSEnglish
private int x_lcidBinary
public bool IsNull
public string Value
public int LCID
public CultureInfo CultureInfo
public CompareInfo CompareInfo
public SqlCompareOptions SqlCompareOptions
private void .ctor(bool fNull)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data)
public void .ctor(string data, int lcid, SqlCompareOptions compareOptions)
public void .ctor(string data, int lcid)
public void .ctor(string data)
private void .ctor(int lcid, SqlCompareOptions compareOptions, string data, CompareInfo cmpInfo)
public bool get_IsNull()
public string get_Value()
public int get_LCID()
public CultureInfo get_CultureInfo()
private void SetCompareInfo()
public CompareInfo get_CompareInfo()
public SqlCompareOptions get_SqlCompareOptions()
public SqlString op_Implicit(string x)
public string op_Explicit(SqlString x)
public string ToString()
public Byte[] GetUnicodeBytes()
public Byte[] GetNonUnicodeBytes()
public SqlString op_Addition(SqlString x, SqlString y)
private int StringCompare(SqlString x, SqlString y)
private SqlBoolean Compare(SqlString x, SqlString y, EComparison ecExpectedResult)
public SqlString op_Explicit(SqlBoolean x)
public SqlString op_Explicit(SqlByte x)
public SqlString op_Explicit(SqlInt16 x)
public SqlString op_Explicit(SqlInt32 x)
public SqlString op_Explicit(SqlInt64 x)
public SqlString op_Explicit(SqlSingle x)
public SqlString op_Explicit(SqlDouble x)
public SqlString op_Explicit(SqlDecimal x)
public SqlString op_Explicit(SqlMoney x)
public SqlString op_Explicit(SqlDateTime x)
public SqlString op_Explicit(SqlGuid x)
public SqlString Clone()
public SqlBoolean op_Equality(SqlString x, SqlString y)
public SqlBoolean op_Inequality(SqlString x, SqlString y)
public SqlBoolean op_LessThan(SqlString x, SqlString y)
public SqlBoolean op_GreaterThan(SqlString x, SqlString y)
public SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y)
public SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y)
public SqlString Concat(SqlString x, SqlString y)
public SqlString Add(SqlString x, SqlString y)
public SqlBoolean Equals(SqlString x, SqlString y)
public SqlBoolean NotEquals(SqlString x, SqlString y)
public SqlBoolean LessThan(SqlString x, SqlString y)
public SqlBoolean GreaterThan(SqlString x, SqlString y)
public SqlBoolean LessThanOrEqual(SqlString x, SqlString y)
public SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDateTime ToSqlDateTime()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlDecimal ToSqlDecimal()
public SqlSingle ToSqlSingle()
public SqlGuid ToSqlGuid()
private void ValidateSqlCompareOptions(SqlCompareOptions compareOptions)
public CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions)
private bool FBinarySort()
private int CompareBinary(SqlString x, SqlString y)
private int CompareBinary2(SqlString x, SqlString y)
public int CompareTo(object value)
public int CompareTo(SqlString value)
public bool Equals(object value)
public int GetHashCode()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
public System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
private SerializationInfo SqlTruncateExceptionSerialization(SerializationInfo si, StreamingContext sc)
}
public System.Data.SqlTypes.SqlTypeException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
protected void .ctor(SerializationInfo si, StreamingContext sc)
private SerializationInfo SqlTypeExceptionSerialization(SerializationInfo si, StreamingContext sc)
}
public System.Data.SqlTypes.SqlTypesSchemaImporterExtensionHelper : SchemaImporterExtension {
private string m_name
private string m_targetNamespace
private String[] m_references
private CodeNamespaceImport[] m_namespaceImports
private string m_destinationType
private bool m_direct
protected string SqlTypesNamespace
public void .ctor(string name, string targetNamespace, String[] references, CodeNamespaceImport[] namespaceImports, string destinationType, bool direct)
public void .ctor(string name, string destinationType)
public void .ctor(string name, string destinationType, bool direct)
private void Init(string name, string targetNamespace, String[] references, CodeNamespaceImport[] namespaceImports, string destinationType, bool direct)
public string ImportSchemaType(string name, string xmlNamespace, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
public string ImportSchemaType(XmlSchemaType type, XmlSchemaObject context, XmlSchemas schemas, XmlSchemaImporter importer, CodeCompileUnit compileUnit, CodeNamespace mainNamespace, CodeGenerationOptions options, CodeDomProvider codeProvider)
}
public System.Data.SqlTypes.SqlXml : object {
private bool m_fNotNull
private Stream m_stream
private bool firstCreateReader
private MethodInfo createSqlReaderMethodInfo
private Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> sqlReaderDelegate
private XmlReaderSettings DefaultXmlReaderSettings
private XmlReaderSettings DefaultXmlReaderSettingsCloseInput
private MethodInfo s_createSqlReaderMethodInfo
private MethodInfo CreateSqlReaderMethodInfo
public bool IsNull
public string Value
public SqlXml Null
private void .ctor(bool fNull)
public void .ctor(XmlReader value)
public void .ctor(Stream value)
public XmlReader CreateReader()
internal XmlReader CreateSqlXmlReader(Stream stream, bool closeInput, bool throwTargetInvocationExceptions)
private Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> CreateSqlReaderDelegate()
private MethodInfo get_CreateSqlReaderMethodInfo()
public bool get_IsNull()
public string get_Value()
public SqlXml get_Null()
private void SetNull()
private Stream CreateMemoryStreamFromXmlReader(XmlReader reader)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
}
internal System.Data.SqlTypes.SqlXmlStreamWrapper : Stream {
private Stream m_stream
private long m_lPosition
private bool m_isClosed
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(Stream stream)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public int ReadByte()
public void WriteByte(byte value)
public void SetLength(long value)
public void Flush()
protected void Dispose(bool disposing)
private void ThrowIfStreamCannotSeek(string method)
private void ThrowIfStreamCannotRead(string method)
private void ThrowIfStreamCannotWrite(string method)
private void ThrowIfStreamClosed(string method)
private bool IsStreamClosed()
}
public System.Data.SqlTypes.StorageState : Enum {
public int value__
public StorageState Buffer
public StorageState Stream
public StorageState UnmanagedBuffer
}
internal System.Data.SqlTypes.StreamOnSqlBytes : Stream {
private SqlBytes m_sb
private long m_lPosition
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(SqlBytes sb)
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public int Read(Byte[] buffer, int offset, int count)
public void Write(Byte[] buffer, int offset, int count)
public int ReadByte()
public void WriteByte(byte value)
public void SetLength(long value)
public void Flush()
protected void Dispose(bool disposing)
private bool FClosed()
private void CheckIfStreamClosed(string methodname)
}
internal System.Data.SqlTypes.StreamOnSqlChars : SqlStreamChars {
private SqlChars m_sqlchars
private long m_lPosition
public bool IsNull
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
internal void .ctor(SqlChars s)
public bool get_IsNull()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public long Seek(long offset, SeekOrigin origin)
public int Read(Char[] buffer, int offset, int count)
public void Write(Char[] buffer, int offset, int count)
public int ReadChar()
public void WriteChar(char value)
public void SetLength(long value)
public void Flush()
protected void Dispose(bool disposing)
private bool FClosed()
private void CheckIfStreamClosed(string methodname)
}
public System.Data.StateChangeEventArgs : EventArgs {
private ConnectionState originalState
private ConnectionState currentState
public ConnectionState CurrentState
public ConnectionState OriginalState
public void .ctor(ConnectionState originalState, ConnectionState currentState)
public ConnectionState get_CurrentState()
public ConnectionState get_OriginalState()
}
public System.Data.StateChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StateChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.StatementCompletedEventArgs : EventArgs {
private int _recordCount
public int RecordCount
public void .ctor(int recordCount)
public int get_RecordCount()
}
public System.Data.StatementCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StatementCompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.StatementType : Enum {
public int value__
public StatementType Select
public StatementType Insert
public StatementType Update
public StatementType Delete
public StatementType Batch
}
public System.Data.StrongTypingException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string s, Exception innerException)
}
public System.Data.SyntaxErrorException : InvalidExpressionException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.Tokens : Enum {
public int value__
public Tokens None
public Tokens Name
public Tokens Numeric
public Tokens Decimal
public Tokens Float
public Tokens BinaryConst
public Tokens StringConst
public Tokens Date
public Tokens ListSeparator
public Tokens LeftParen
public Tokens RightParen
public Tokens ZeroOp
public Tokens UnaryOp
public Tokens BinaryOp
public Tokens Child
public Tokens Parent
public Tokens Dot
public Tokens Unknown
public Tokens EOS
}
internal System.Data.TreeAccessMethod : Enum {
public int value__
public TreeAccessMethod KEY_SEARCH_AND_INDEX
public TreeAccessMethod INDEX_ONLY
}
public System.Data.TypedDataSetGenerator : object {
private bool useExtendedNaming
private ICodeGenerator codeGen
private ArrayList errorList
private ArrayList conflictingTables
private Hashtable lookupIdentifiers
public void Generate(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen)
public string GenerateIdName(string name, ICodeGenerator codeGen)
internal CodeTypeDeclaration GenerateCode(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen)
private void InitLookupIdentifiers()
private string FixIdName(string inVarName)
private bool isEmpty(string s)
private string RowClassName(DataTable table)
private string RowBaseClassName(DataTable table)
private string RowConcreteClassName(DataTable table)
private string TableClassName(DataTable table)
private string TablePropertyName(DataTable table)
private string TableFieldName(DataTable table)
private string RowColumnPropertyName(DataColumn column)
private string TableColumnFieldName(DataColumn column)
private string TableColumnPropertyName(DataColumn column)
private int TablesConnectedness(DataTable parentTable, DataTable childTable)
private string ChildPropertyName(DataRelation relation)
private string ParentPropertyName(DataRelation relation)
private string RelationFieldName(DataRelation relation)
private string GetTypeName(Type t)
private bool ChildRelationFollowable(DataRelation relation)
private CodeMemberMethod CreateOnRowEventMethod(string eventName, string rowClassName)
private CodeTypeDeclaration CreateTypedTable(DataTable table)
private CodeTypeDeclaration CreateTypedRow(DataTable table)
private CodeTypeDeclaration CreateTypedRowEvent(DataTable table)
private CodeTypeDelegate CreateTypedRowEventHandler(DataTable table)
private CodeTypeDeclaration CreateTypedDataSet(DataSet dataSet)
private CodeExpression This()
private CodeExpression Base()
private CodeExpression Value()
private CodeTypeReference Type(string type)
private CodeTypeReference Type(Type type)
private CodeTypeReference Type(string type, int rank)
private CodeTypeReferenceExpression TypeExpr(Type type)
private CodeTypeReferenceExpression TypeExpr(string type)
private CodeExpression Cast(string type, CodeExpression expr)
private CodeExpression Cast(CodeTypeReference type, CodeExpression expr)
private CodeExpression TypeOf(string type)
private CodeExpression Field(CodeExpression exp, string field)
private CodeExpression Property(CodeExpression exp, string property)
private CodeExpression Argument(string argument)
private CodeExpression Variable(string variable)
private CodeExpression Event(string eventName)
private CodeExpression New(string type, CodeExpression[] parameters)
private CodeExpression New(Type type, CodeExpression[] parameters)
private CodeExpression Primitive(object primitive)
private CodeExpression Str(string str)
private CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression[] parameters)
private CodeExpression MethodCall(CodeExpression targetObject, string methodName)
private CodeExpression MethodCall(CodeExpression targetObject, string methodName, CodeExpression par)
private CodeExpression DelegateCall(CodeExpression targetObject, CodeExpression par)
private CodeExpression Indexer(CodeExpression targetObject, CodeExpression indices)
private CodeBinaryOperatorExpression BinOperator(CodeExpression left, CodeBinaryOperatorType op, CodeExpression right)
private CodeBinaryOperatorExpression IdNotEQ(CodeExpression left, CodeExpression right)
private CodeBinaryOperatorExpression EQ(CodeExpression left, CodeExpression right)
private CodeStatement Stm(CodeExpression expr)
private CodeStatement Return(CodeExpression expr)
private CodeStatement Return()
private CodeStatement Assign(CodeExpression left, CodeExpression right)
private CodeStatement Throw(Type exception, string arg, string inner)
private CodeStatement If(CodeExpression cond, CodeStatement[] trueStms, CodeStatement[] falseStms)
private CodeStatement If(CodeExpression cond, CodeStatement[] trueStms)
private CodeStatement If(CodeExpression cond, CodeStatement trueStm)
private CodeMemberField FieldDecl(string type, string name)
private CodeMemberField FieldDecl(Type type, string name)
private CodeMemberMethod Method(CodeTypeReference type, string name, MemberAttributes attributes)
private CodeMemberMethod MethodDecl(Type type, string name, MemberAttributes attributes)
private CodeMemberMethod MethodDecl(string type, string name, MemberAttributes attributes)
private CodeMemberProperty PropertyDecl(string type, string name, MemberAttributes attributes)
private CodeMemberProperty PropertyDecl(Type type, string name, MemberAttributes attributes)
private CodeStatement VariableDecl(Type type, string name)
private CodeStatement VariableDecl(string type, string name, CodeExpression initExpr)
private CodeStatement VariableDecl(Type type, string name, CodeExpression initExpr)
private CodeMemberEvent EventDecl(string type, string name)
private CodeParameterDeclarationExpression ParameterDecl(string type, string name)
private CodeParameterDeclarationExpression ParameterDecl(Type type, string name)
private CodeAttributeDeclaration AttributeDecl(string name)
private CodeAttributeDeclaration AttributeDecl(string name, CodeExpression value)
private CodeStatement Try(CodeStatement tryStmnt, CodeCatchClause catchClause)
private CodeCatchClause Catch(Type type, string name, CodeStatement catchStmnt)
}
public System.Data.TypedDataSetGeneratorException : DataException {
private ArrayList errorList
private string KEY_ARRAYCOUNT
private string KEY_ARRAYVALUES
public ArrayList ErrorList
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public void .ctor(ArrayList list)
public ArrayList get_ErrorList()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
internal System.Data.UnaryNode : ExpressionNode {
internal int op
internal ExpressionNode right
internal void .ctor(DataTable table, int op, ExpressionNode right)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
private object EvalUnaryOp(int op, object vl)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal bool DependsOn(DataColumn column)
internal ExpressionNode Optimize()
}
public System.Data.UniqueConstraint : Constraint {
private DataKey key
private Index _constraintIndex
internal bool bPrimaryKey
internal string constraintName
internal String[] columnNames
internal String[] ColumnNames
internal Index ConstraintIndex
public DataColumn[] Columns
internal DataColumn[] ColumnsReference
public bool IsPrimaryKey
internal bool InCollection
internal DataKey Key
public DataTable Table
public void .ctor(string name, DataColumn column)
public void .ctor(DataColumn column)
public void .ctor(string name, DataColumn[] columns)
public void .ctor(DataColumn[] columns)
public void .ctor(string name, String[] columnNames, bool isPrimaryKey)
public void .ctor(string name, DataColumn column, bool isPrimaryKey)
public void .ctor(DataColumn column, bool isPrimaryKey)
public void .ctor(string name, DataColumn[] columns, bool isPrimaryKey)
public void .ctor(DataColumn[] columns, bool isPrimaryKey)
internal String[] get_ColumnNames()
internal Index get_ConstraintIndex()
private void AssertConstraintAndKeyIndexes()
internal void ConstraintIndexClear()
internal void ConstraintIndexInitialize()
internal void CheckState()
private void NonVirtualCheckState()
internal void CheckCanAddToCollection(ConstraintCollection constraints)
internal bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException)
internal bool CanEnableConstraint()
internal bool IsConstraintViolated()
internal void CheckConstraint(DataRow row, DataRowAction action)
internal bool ContainsColumn(DataColumn column)
internal Constraint Clone(DataSet destination)
internal Constraint Clone(DataSet destination, bool ignorNSforTableLookup)
internal UniqueConstraint Clone(DataTable table)
public DataColumn[] get_Columns()
internal DataColumn[] get_ColumnsReference()
public bool get_IsPrimaryKey()
private void Create(string constraintName, DataColumn[] columns)
public bool Equals(object key2)
public int GetHashCode()
internal void set_InCollection(bool value)
internal DataKey get_Key()
public DataTable get_Table()
}
public System.Data.UpdateRowSource : Enum {
public int value__
public UpdateRowSource None
public UpdateRowSource OutputParameters
public UpdateRowSource FirstReturnedRecord
public UpdateRowSource Both
}
public System.Data.UpdateStatus : Enum {
public int value__
public UpdateStatus Continue
public UpdateStatus ErrorsOccurred
public UpdateStatus SkipCurrentRow
public UpdateStatus SkipAllRemainingRows
}
internal System.Data.ValueType : Enum {
public int value__
public ValueType Unknown
public ValueType Null
public ValueType Bool
public ValueType Numeric
public ValueType Str
public ValueType Float
public ValueType Decimal
public ValueType Object
public ValueType Date
}
public System.Data.VersionNotFoundException : DataException {
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
}
internal System.Data.XDRSchema : XMLSchema {
internal string _schemaName
internal string _schemaUri
internal XmlElement _schemaRoot
internal DataSet _ds
private Char[] colonArray
private NameType[] mapNameTypeXdr
private NameType enumerationNameType
internal void .ctor(DataSet ds, bool fInline)
internal void LoadSchema(XmlElement schemaRoot, DataSet ds)
internal XmlElement FindTypeNode(XmlElement node)
internal bool IsTextOnlyContent(XmlElement node)
internal bool IsXDRField(XmlElement node, XmlElement typeNode)
internal DataTable HandleTable(XmlElement node)
private NameType FindNameType(string name)
private Type ParseDataType(string dt, string dtValues)
internal string GetInstanceName(XmlElement node)
internal void HandleColumn(XmlElement node, DataTable table)
internal void GetMinMax(XmlElement elNode, Int32& minOccurs, Int32& maxOccurs)
internal void GetMinMax(XmlElement elNode, bool isAttribute, Int32& minOccurs, Int32& maxOccurs)
internal void HandleTypeNode(XmlElement typeNode, DataTable table, ArrayList tableChildren)
internal DataTable InstantiateTable(DataSet dataSet, XmlElement node, XmlElement typeNode)
internal DataTable InstantiateSimpleTable(DataSet dataSet, XmlElement node)
}
internal System.Data.XmlContent : Enum {
public int value__
public XmlContent None
public XmlContent Empty
public XmlContent TextOnly
public XmlContent EltOnly
public XmlContent Mixed
}
internal System.Data.XmlDataLoader : object {
private DataSet dataSet
private XmlToDatasetMap nodeToSchemaMap
private Hashtable nodeToRowMap
private Stack childRowsStack
private Hashtable htableExcludedNS
private bool fIsXdr
internal bool isDiffgram
private DataRow topMostRow
private XmlElement topMostNode
private bool ignoreSchema
private DataTable dataTable
private bool isTableLevel
private bool fromInference
private XmlReader dataReader
private object XSD_XMLNS_NS
private object XDR_SCHEMA
private object XDRNS
private object SQL_SYNC
private object UPDGNS
private object XSD_SCHEMA
private object XSDNS
private object DFFNS
private object MSDNS
private object DIFFID
private object HASCHANGES
private object ROWORDER
internal bool FromInference
internal void .ctor(DataSet dataset, bool IsXdr, bool ignoreSchema)
internal void .ctor(DataSet dataset, bool IsXdr, XmlElement topNode, bool ignoreSchema)
internal void .ctor(DataTable datatable, bool IsXdr, bool ignoreSchema)
internal void .ctor(DataTable datatable, bool IsXdr, XmlElement topNode, bool ignoreSchema)
internal bool get_FromInference()
internal void set_FromInference(bool value)
private void AttachRows(DataRow parentRow, XmlNode parentElement)
private int CountNonNSAttributes(XmlNode node)
private string GetValueForTextOnlyColums(XmlNode n)
private string GetInitialTextFromNodes(XmlNode& n)
private DataColumn GetTextOnlyColumn(DataRow row)
internal DataRow GetRowFromElement(XmlElement e)
internal bool FColumnElement(XmlElement e)
private bool FExcludedNamespace(string ns)
private bool FIgnoreNamespace(XmlNode node)
private bool FIgnoreNamespace(XmlReader node)
internal bool IsTextLikeNode(XmlNodeType n)
internal bool IsTextOnly(DataColumn c)
internal void LoadData(XmlDocument xdoc)
private void LoadRowData(DataRow row, XmlElement rowElement)
private void LoadRows(DataRow parentRow, XmlNode parentElement)
private void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText)
internal void LoadTopMostRow(Boolean[]& foundColumns)
private void InitNameTable()
internal void LoadData(XmlReader reader)
private void LoadTopMostTable(DataTable table)
private void LoadTable(DataTable table, bool isNested)
private void LoadColumn(DataColumn column, Object[] foundColumns)
private bool ProcessXsdSchema()
}
internal System.Data.XmlDataTreeWriter : object {
private XmlWriter _xmlw
private DataSet _ds
private DataTable _dt
private ArrayList _dTables
private DataTable[] topLevelTables
private bool fFromTable
private bool isDiffgram
private Hashtable rowsOrder
private bool _writeHierarchy
internal void .ctor(DataSet ds)
internal void .ctor(DataSet ds, DataTable dt)
internal void .ctor(DataTable dt, bool writeHierarchy)
private DataTable[] CreateToplevelTables()
private void CreateTablesHierarchy(DataTable dt)
internal bool RowHasErrors(DataRow row)
internal void SaveDiffgramData(XmlWriter xw, Hashtable rowsOrder)
internal void Save(XmlWriter xw, bool writeSchema)
private ArrayList GetNestedChildRelations(DataRow row)
internal void XmlDataRowWriter(DataRow row, string encodedTableName)
internal bool PreserveSpace(object value)
}
internal System.Data.XMLDiffLoader : object {
private ArrayList tables
private DataSet dataSet
private DataTable dataTable
internal void LoadDiffGram(DataSet ds, XmlReader dataTextReader)
private void CreateTablesHierarchy(DataTable dt)
internal void LoadDiffGram(DataTable dt, XmlReader dataTextReader)
internal void ProcessDiffs(DataSet ds, XmlReader ssync)
internal void ProcessDiffs(ArrayList tableList, XmlReader ssync)
internal void ProcessErrors(DataSet ds, XmlReader ssync)
internal void ProcessErrors(ArrayList dt, XmlReader ssync)
private DataTable GetTable(string tableName, string ns)
private int ReadOldRowData(DataSet ds, DataTable& table, Int32& pos, XmlReader row)
internal void SkipWhitespaces(XmlReader reader)
}
internal System.Data.XmlIgnoreNamespaceReader : XmlNodeReader {
private List`1<string> namespacesToIgnore
internal void .ctor(XmlDocument xdoc, String[] namespacesToIgnore)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
}
public System.Data.XmlReadMode : Enum {
public int value__
public XmlReadMode Auto
public XmlReadMode ReadSchema
public XmlReadMode IgnoreSchema
public XmlReadMode InferSchema
public XmlReadMode DiffGram
public XmlReadMode Fragment
public XmlReadMode InferTypedSchema
}
internal System.Data.XMLSchema : object {
internal TypeConverter GetConverter(Type type)
internal void SetProperties(object instance, XmlAttributeCollection attrs)
internal bool FEqualIdentity(XmlNode node, string name, string ns)
internal bool GetBooleanAttribute(XmlElement element, string attrName, string attrNS, bool defVal)
internal string GenUniqueColumnName(string proposedName, DataTable table)
}
internal System.Data.XmlToDatasetMap : object {
private XmlNodeIdHashtable tableSchemaMap
private TableSchemaInfo lastTableSchemaInfo
public void .ctor(DataSet dataSet, XmlNameTable nameTable)
public void .ctor(XmlNameTable nameTable, DataSet dataSet)
public void .ctor(DataTable dataTable, XmlNameTable nameTable)
public void .ctor(XmlNameTable nameTable, DataTable dataTable)
internal bool IsMappedColumn(DataColumn c)
private TableSchemaInfo AddTableSchema(DataTable table, XmlNameTable nameTable)
private TableSchemaInfo AddTableSchema(XmlNameTable nameTable, DataTable table)
private bool AddColumnSchema(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns)
private bool AddColumnSchema(XmlNameTable nameTable, DataColumn col, XmlNodeIdHashtable columns)
private void BuildIdentityMap(DataSet dataSet, XmlNameTable nameTable)
private void BuildIdentityMap(XmlNameTable nameTable, DataSet dataSet)
private void BuildIdentityMap(DataTable dataTable, XmlNameTable nameTable)
private void BuildIdentityMap(XmlNameTable nameTable, DataTable dataTable)
private ArrayList GetSelfAndDescendants(DataTable dt)
public object GetColumnSchema(XmlNode node, bool fIgnoreNamespace)
public object GetColumnSchema(DataTable table, XmlReader dataReader, bool fIgnoreNamespace)
public object GetSchemaForNode(XmlNode node, bool fIgnoreNamespace)
public DataTable GetTableForNode(XmlReader node, bool fIgnoreNamespace)
private void HandleSpecialColumn(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns)
}
internal System.Data.XmlTreeGen : object {
private ArrayList ConstraintNames
private Hashtable namespaces
private Hashtable autogenerated
private Hashtable prefixes
private DataSet _ds
private ArrayList _tables
private ArrayList _relations
private XmlDocument _dc
private XmlElement _sRoot
private int prefixCount
private SchemaFormat schFormat
private string filePath
private string fileName
private string fileExt
private XmlElement dsElement
private XmlElement constraintSeparator
private Converter`2<Type, string> targetConverter
internal void .ctor(SchemaFormat format)
internal void AddExtendedProperties(PropertyCollection props, XmlElement node)
internal void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type)
internal void AddXdoProperties(object instance, XmlElement root, XmlDocument xd)
internal void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd)
internal string XmlDataTypeName(Type type)
private void GenerateConstraintNames(DataTable table, bool fromTable)
private void GenerateConstraintNames(ArrayList tables)
private void GenerateConstraintNames(DataSet ds)
private bool _PropsNotEmpty(PropertyCollection props)
private bool HaveExtendedProperties(DataSet ds)
internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace)
internal void ValidateColumnMapping(Type columnType)
internal void SetupAutoGenerated(DataSet ds)
internal void SetupAutoGenerated(ArrayList dt)
internal void SetupAutoGenerated(DataTable dt)
private void CreateTablesHierarchy(DataTable dt)
private void CreateRelations(DataTable dt)
private DataTable[] CreateToplevelTables()
internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy)
internal XmlElement SchemaTree(XmlDocument xd, DataTable dt)
internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt)
internal void SetPath(XmlWriter xw)
internal void Save(DataSet ds, XmlWriter xw)
internal void Save(DataTable dt, XmlWriter xw)
internal void Save(DataSet ds, DataTable dt, XmlWriter xw)
internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy)
internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy, Converter`2<Type, string> multipleTargetConverter)
internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc)
private XmlElement FindSimpleType(XmlElement schema, string name)
internal XmlElement GetSchema(string NamespaceURI)
internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema)
internal void AddColumnProperties(DataColumn col, XmlElement root)
private string FindTargetNamespace(DataTable table)
internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal)
internal string TranslateAcceptRejectRule(AcceptRejectRule rule)
internal string TranslateRule(Rule rule)
internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString)
internal XmlElement FindTypeNode(XmlElement node, string strType)
internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema)
private bool HasMixedColumns(DataTable table)
internal bool AutoGenerated(DataColumn col)
internal bool AutoGenerated(DataRelation rel)
internal bool AutoGenerated(UniqueConstraint unique)
private bool AutoGenerated(ForeignKeyConstraint fk)
internal bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation)
private bool IsAutoGenerated(object o)
internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested)
private void SetMSDataAttribute(XmlElement root, Type type)
}
public System.Data.XmlWriteMode : Enum {
public int value__
public XmlWriteMode WriteSchema
public XmlWriteMode IgnoreSchema
public XmlWriteMode DiffGram
}
internal System.Data.XSDSchema : XMLSchema {
private XmlSchemaSet _schemaSet
private XmlSchemaElement dsElement
private DataSet _ds
private string _schemaName
private ArrayList ColumnExpressions
private Hashtable ConstraintNodes
private ArrayList RefTables
private ArrayList complexTypes
private XmlSchemaObjectCollection annotations
private XmlSchemaObjectCollection elements
private Hashtable attributes
private Hashtable elementsTable
private Hashtable attributeGroups
private Hashtable schemaTypes
private Hashtable expressions
private Dictionary`2<DataTable, List`1<DataTable>> tableDictionary
private Hashtable udSimpleTypes
private Hashtable existingSimpleTypeMap
private bool fromInference
private NameType[] mapNameTypeXsd
internal bool FromInference
internal bool get_FromInference()
internal void set_FromInference(bool value)
private void CollectElementsAnnotations(XmlSchema schema)
private void CollectElementsAnnotations(XmlSchema schema, ArrayList schemaList)
internal string QualifiedName(string name)
internal void SetProperties(object instance, XmlAttribute[] attrs)
private void SetExtProperties(object instance, XmlAttribute[] attrs)
private void HandleColumnExpression(object instance, XmlAttribute[] attrs)
internal string GetMsdataAttribute(XmlSchemaAnnotated node, string ln)
private void SetExtProperties(object instance, XmlAttributeCollection attrs)
internal void HandleRefTableProperties(ArrayList RefTables, XmlSchemaElement element)
internal void HandleRelation(XmlElement node, bool fNested)
private bool HasAttributes(XmlSchemaObjectCollection attributes)
private bool IsDatasetParticle(XmlSchemaParticle pt)
private int DatasetElementCount(XmlSchemaObjectCollection elements)
private XmlSchemaElement FindDatasetElement(XmlSchemaObjectCollection elements)
public void LoadSchema(XmlSchemaSet schemaSet, DataTable dt)
public void LoadSchema(XmlSchemaSet schemaSet, DataSet ds)
private void HandleRelations(XmlSchemaAnnotation ann, bool fNested)
internal XmlSchemaObjectCollection GetParticleItems(XmlSchemaParticle pt)
internal void HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, bool isBase)
internal void HandleAttributes(XmlSchemaObjectCollection attributes, DataTable table, bool isBase)
private void HandleAttributeGroup(XmlSchemaAttributeGroup attributeGroup, DataTable table, bool isBase)
internal void HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, bool isNillable)
internal XmlSchemaParticle GetParticle(XmlSchemaComplexType ct)
internal DataColumn FindField(DataTable table, string field)
internal DataColumn[] BuildKey(XmlSchemaIdentityConstraint keyNode, DataTable table)
internal bool GetBooleanAttribute(XmlSchemaAnnotated element, string attrName, bool defVal)
internal string GetStringAttribute(XmlSchemaAnnotated element, string attrName, string defVal)
internal AcceptRejectRule TranslateAcceptRejectRule(string strRule)
internal Rule TranslateRule(string strRule)
internal void HandleKeyref(XmlSchemaKeyref keyref)
internal void HandleConstraint(XmlSchemaIdentityConstraint keyNode)
internal DataTable InstantiateSimpleTable(XmlSchemaElement node)
internal string GetInstanceName(XmlSchemaAnnotated node)
internal DataTable InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, bool isRef)
public Type XsdtoClr(string xsdTypeName)
private NameType FindNameType(string name)
private Type ParseDataType(string dt)
internal bool IsXsdType(string name)
internal XmlSchemaAnnotated FindTypeNode(XmlSchemaAnnotated node)
internal void HandleSimpleTypeSimpleContentColumn(XmlSchemaSimpleType typeNode, string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable)
internal void HandleSimpleContentColumn(string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable)
internal void HandleAttributeColumn(XmlSchemaAttribute attrib, DataTable table, bool isBase)
internal void HandleElementColumn(XmlSchemaElement elem, DataTable table, bool isBase)
internal void HandleDataSet(XmlSchemaElement node, bool isNewDataSet)
private void AddTablesToList(List`1<DataTable> tableList, DataTable dt)
private string GetPrefix(string ns)
private string GetNamespaceFromPrefix(string prefix)
private string GetTableNamespace(XmlSchemaIdentityConstraint key)
private string GetTableName(XmlSchemaIdentityConstraint key)
internal bool IsTable(XmlSchemaElement node)
internal DataTable HandleTable(XmlSchemaElement node)
}
internal System.Data.ZeroOpNode : ExpressionNode {
internal int op
internal int zop_True
internal int zop_False
internal int zop_Null
internal void .ctor(int op)
internal void Bind(DataTable table, List`1<DataColumn> list)
internal object Eval()
internal object Eval(DataRow row, DataRowVersion version)
internal object Eval(Int32[] recordNos)
internal bool IsConstant()
internal bool IsTableConstant()
internal bool HasLocalAggregate()
internal bool HasRemoteAggregate()
internal ExpressionNode Optimize()
}
internal System.ExternDll : object {
public string Activeds
public string Advapi32
public string Comctl32
public string Comdlg32
public string Gdi32
public string Gdiplus
public string Hhctrl
public string Imm32
public string Kernel32
public string Loadperf
public string Mscoree
public string Clr
public string Msi
public string Mqrt
public string Ntdll
public string Ole32
public string Oleacc
public string Oleaut32
public string Olepro32
public string PerfCounter
public string Powrprof
public string Psapi
public string Shell32
public string User32
public string Uxtheme
public string WinMM
public string Winspool
public string Wtsapi32
public string Version
public string Vsassert
public string Fxassert
public string Shlwapi
public string Crypt32
internal string Odbc32
internal string SNI
internal string OciDll
internal string OraMtsDll
}
internal System.HResults : object {
internal int Configuration
internal int Xml
internal int XmlSchema
internal int XmlXslt
internal int XmlXPath
internal int Data
internal int DataDeletedRowInaccessible
internal int DataDuplicateName
internal int DataInRowChangingEvent
internal int DataInvalidConstraint
internal int DataMissingPrimaryKey
internal int DataNoNullAllowed
internal int DataReadOnly
internal int DataRowNotInTable
internal int DataVersionNotFound
internal int DataConstraint
internal int StrongTyping
internal int SqlType
internal int SqlNullValue
internal int SqlTruncate
internal int AdapterMapping
internal int DataAdapter
internal int DBConcurrency
internal int OperationAborted
internal int InvalidUdt
internal int Metadata
internal int InvalidQuery
internal int CommandCompilation
internal int CommandExecution
internal int SqlException
internal int OdbcException
internal int OracleException
internal int ConnectionPlanException
internal int NteBadKeySet
internal int Win32AccessDenied
internal int Win32InvalidHandle
internal int License
internal int InternalBufferOverflow
internal int ServiceControllerTimeout
internal int Install
internal int EFail
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal System.Xml.BaseRegionIterator : BaseTreeIterator {
internal void .ctor(DataSetMapper mapper)
}
internal System.Xml.BaseTreeIterator : object {
protected DataSetMapper mapper
internal XmlNode CurrentNode
internal void .ctor(DataSetMapper mapper)
internal void Reset()
internal XmlNode get_CurrentNode()
internal bool Next()
internal bool NextRight()
internal bool NextRowElement()
internal bool NextRightRowElement()
internal bool OnRowElement()
}
internal System.Xml.DataDocumentXPathNavigator : XPathNavigator {
private XPathNodePointer _curNode
private XmlDataDocument _doc
private XPathNodePointer _temp
internal XPathNodePointer CurNode
internal XmlDataDocument Document
public XPathNodeType NodeType
public string LocalName
public string NamespaceURI
public string Name
public string Prefix
public string Value
public string BaseURI
public string XmlLang
public bool IsEmptyElement
public XmlNameTable NameTable
public bool HasAttributes
public bool HasChildren
internal void .ctor(XmlDataDocument doc, XmlNode node)
private void .ctor(DataDocumentXPathNavigator other)
public XPathNavigator Clone()
internal XPathNodePointer get_CurNode()
internal XmlDataDocument get_Document()
public XPathNodeType get_NodeType()
public string get_LocalName()
public string get_NamespaceURI()
public string get_Name()
public string get_Prefix()
public string get_Value()
public string get_BaseURI()
public string get_XmlLang()
public bool get_IsEmptyElement()
public XmlNameTable get_NameTable()
public bool get_HasAttributes()
public string GetAttribute(string localName, string namespaceURI)
public string GetNamespace(string name)
public bool MoveToNamespace(string name)
public bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
public bool MoveToAttribute(string localName, string namespaceURI)
public bool MoveToFirstAttribute()
public bool MoveToNextAttribute()
public bool MoveToNext()
public bool MoveToPrevious()
public bool MoveToFirst()
public bool get_HasChildren()
public bool MoveToFirstChild()
public bool MoveToParent()
public void MoveToRoot()
public bool MoveTo(XPathNavigator other)
public bool MoveToId(string id)
public bool IsSamePosition(XPathNavigator other)
private XmlNode System.Xml.IHasXmlNode.GetNode()
public XmlNodeOrder ComparePosition(XPathNavigator other)
}
internal System.Xml.DataPointer : object {
private XmlDataDocument doc
private XmlNode node
private DataColumn column
private bool fOnValue
private bool bNeedFoliate
private bool _isInUse
private DataRow Row
internal int AttributeCount
internal XmlNodeType NodeType
internal string LocalName
internal string NamespaceURI
internal string Name
internal string Prefix
internal string Value
internal bool IsEmptyElement
internal bool IsDefault
internal string PublicId
internal string SystemId
internal string InternalSubset
internal XmlDeclaration Declaration
internal string Encoding
internal string Standalone
internal string Version
internal void .ctor(XmlDataDocument doc, XmlNode node)
internal void .ctor(DataPointer pointer)
internal void AddPointer()
private XmlBoundElement GetRowElement()
private DataRow get_Row()
private bool IsFoliated(XmlNode node)
internal void MoveTo(DataPointer pointer)
private void MoveTo(XmlNode node)
private void MoveTo(XmlNode node, DataColumn column, bool fOnValue)
private DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute, bool fNulls)
private DataColumn NthColumn(DataRow row, bool fAttribute, int iColumn, bool fNulls)
private int ColumnCount(DataRow row, bool fAttribute, bool fNulls)
internal bool MoveToFirstChild()
internal bool MoveToNextSibling()
internal bool MoveToParent()
internal bool MoveToOwnerElement()
internal int get_AttributeCount()
internal bool MoveToAttribute(int i)
internal XmlNodeType get_NodeType()
internal string get_LocalName()
internal string get_NamespaceURI()
internal string get_Name()
private bool IsLocalNameEmpty(XmlNodeType nt)
internal string get_Prefix()
internal string get_Value()
private bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck)
private bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col)
internal XmlNode GetNode()
internal bool get_IsEmptyElement()
internal bool get_IsDefault()
private void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode)
internal void RealFoliate()
internal string get_PublicId()
internal string get_SystemId()
internal string get_InternalSubset()
internal XmlDeclaration get_Declaration()
internal string get_Encoding()
internal string get_Standalone()
internal string get_Version()
private void AssertValid()
private bool System.Xml.IXmlDataVirtualNode.IsInUse()
internal void SetNoLongerUse()
}
internal System.Xml.DataSetMapper : object {
private Hashtable tableSchemaMap
private Hashtable columnSchemaMap
private XmlDataDocument doc
private DataSet dataSet
internal string strReservedXmlns
internal void SetupMapping(XmlDataDocument xd, DataSet ds)
internal bool IsMapped()
internal DataTable SearchMatchingTableSchema(string localName, string namespaceURI)
internal DataTable SearchMatchingTableSchema(XmlBoundElement rowElem, XmlBoundElement elem)
internal DataColumn GetColumnSchemaForNode(XmlBoundElement rowElem, XmlNode node)
internal DataTable GetTableSchemaForElement(XmlElement elem)
internal DataTable GetTableSchemaForElement(XmlBoundElement be)
internal bool IsNotMapped(DataColumn c)
internal DataRow GetRowFromElement(XmlElement e)
internal DataRow GetRowFromElement(XmlBoundElement be)
internal bool GetRegion(XmlNode node, XmlBoundElement& rowElem)
internal bool IsRegionRadical(XmlBoundElement rowElem)
private void AddTableSchema(DataTable table)
private void AddColumnSchema(DataColumn col)
private object GetIdentity(string localName, string namespaceURI)
private bool IsNextColumn(DataColumnCollection columns, Int32& iColumn, DataColumn col)
}
internal System.Xml.ElementState : Enum {
public int value__
public ElementState None
public ElementState Defoliated
public ElementState WeakFoliation
public ElementState StrongFoliation
public ElementState Foliating
public ElementState Defoliating
}
internal System.Xml.IXmlDataVirtualNode {
public bool IsOnNode(XmlNode nodeToCheck)
public bool IsOnColumn(DataColumn col)
public bool IsInUse()
public void OnFoliated(XmlNode foliatedNode)
}
internal System.Xml.RegionIterator : BaseRegionIterator {
private XmlBoundElement rowElement
private XmlNode currentNode
internal XmlNode CurrentNode
internal void .ctor(XmlBoundElement rowElement)
internal void Reset()
internal XmlNode get_CurrentNode()
internal bool Next()
internal bool NextRight()
internal bool NextInitialTextLikeNodes(String& value)
private string GetInitialTextFromNodes(XmlNode& n)
}
internal System.Xml.TreeIterator : BaseTreeIterator {
private XmlNode nodeTop
private XmlNode currentNode
internal XmlNode CurrentNode
internal void .ctor(XmlNode nodeTop)
internal void Reset()
internal XmlNode get_CurrentNode()
internal bool Next()
internal bool NextRight()
}
internal System.Xml.XmlBoundElement : XmlElement {
private DataRow row
private ElementState state
public XmlAttributeCollection Attributes
public bool HasAttributes
public XmlNode FirstChild
internal XmlNode SafeFirstChild
public XmlNode LastChild
public XmlNode PreviousSibling
internal XmlNode SafePreviousSibling
public XmlNode NextSibling
internal XmlNode SafeNextSibling
public bool HasChildNodes
public string InnerXml
internal DataRow Row
internal bool IsFoliated
internal ElementState ElementState
internal void .ctor(string prefix, string localName, string namespaceURI, XmlDocument doc)
public XmlAttributeCollection get_Attributes()
public bool get_HasAttributes()
public XmlNode get_FirstChild()
internal XmlNode get_SafeFirstChild()
public XmlNode get_LastChild()
public XmlNode get_PreviousSibling()
internal XmlNode get_SafePreviousSibling()
public XmlNode get_NextSibling()
internal XmlNode get_SafeNextSibling()
public bool get_HasChildNodes()
public XmlNode InsertBefore(XmlNode newChild, XmlNode refChild)
public XmlNode InsertAfter(XmlNode newChild, XmlNode refChild)
public XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild)
public XmlNode AppendChild(XmlNode newChild)
internal void RemoveAllChildren()
public string get_InnerXml()
public void set_InnerXml(string value)
internal DataRow get_Row()
internal void set_Row(DataRow value)
internal bool get_IsFoliated()
internal ElementState get_ElementState()
internal void set_ElementState(ElementState value)
internal void Foliate(ElementState newState)
private void AutoFoliate()
public XmlNode CloneNode(bool deep)
public void WriteContentTo(XmlWriter w)
public void WriteTo(XmlWriter w)
private void WriteRootBoundElementTo(DataPointer dp, XmlWriter w)
private void WriteBoundElementTo(DataPointer dp, XmlWriter w)
private void WriteBoundElementContentTo(DataPointer dp, XmlWriter w)
private void WriteTo(DataPointer dp, XmlWriter w)
public XmlNodeList GetElementsByTagName(string name)
}
public System.Xml.XmlDataDocument : XmlDocument {
private DataSet dataSet
private DataSetMapper mapper
internal Hashtable pointers
private int countAddPointer
private ArrayList columnChangeList
private DataRowState rollbackState
private bool fBoundToDataSet
private bool fBoundToDocument
private bool fDataRowCreatedSpecial
private bool ignoreXmlEvents
private bool ignoreDataSetEvents
private bool isFoliationEnabled
private bool optimizeStorage
private ElementState autoFoliationState
private bool fAssociateDataRow
private object foliationLock
internal string XSI_NIL
internal string XSI
private bool bForceExpandEntity
internal XmlAttribute attrXml
internal bool bLoadFromDataSet
internal bool bHasXSINIL
internal ElementState AutoFoliationState
public DataSet DataSet
internal bool IgnoreXmlEvents
internal bool IgnoreDataSetEvents
internal bool IsFoliationEnabled
internal DataSetMapper Mapper
public void .ctor(DataSet dataset)
internal void .ctor(XmlImplementation imp)
internal void AddPointer(IXmlDataVirtualNode pointer)
internal void AssertPointerPresent(IXmlDataVirtualNode pointer)
private void AttachDataSet(DataSet ds)
internal void SyncRows(DataRow parentRow, XmlNode node, bool fAddRowsToTable)
internal void SyncTree(XmlNode node)
internal ElementState get_AutoFoliationState()
internal void set_AutoFoliationState(ElementState value)
private void BindForLoad()
private void Bind(bool fLoadFromDataSet)
internal void Bind(DataRow r, XmlBoundElement e)
private void BindSpecialListeners()
private void UnBindSpecialListeners()
private void BindListeners()
private void BindToDataSet()
private void BindToDocument()
private void BindToTable(DataTable t)
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
public XmlEntityReference CreateEntityReference(string name)
public DataSet get_DataSet()
private void DefoliateRegion(XmlBoundElement rowElem)
private XmlElement EnsureDocumentElement()
private XmlElement EnsureNonRowDocumentElement()
private XmlElement DemoteDocumentElement()
private void EnsurePopulatedMode()
private void FixNestedChildren(DataRow row, XmlElement rowElement)
internal void Foliate(XmlBoundElement node, ElementState newState)
private void Foliate(XmlElement element)
private void FoliateIfDataPointers(DataRow row, XmlElement rowElement)
private void EnsureFoliation(XmlBoundElement rowElem, ElementState foliation)
private void ForceFoliation(XmlBoundElement node, ElementState newState)
private XmlNode GetColumnInsertAfterLocation(DataRow row, DataColumn col, XmlBoundElement rowElement)
private ArrayList GetNestedChildRelations(DataRow row)
private DataRow GetNestedParent(DataRow row)
private DataRelation GetNestedParentRelation(DataRow row)
private DataColumn GetTextOnlyColumn(DataRow row)
public DataRow GetRowFromElement(XmlElement e)
private XmlNode GetRowInsertBeforeLocation(DataRow row, XmlElement rowElement, XmlNode parentElement)
public XmlElement GetElementFromRow(DataRow r)
internal bool HasPointers(XmlNode node)
internal bool get_IgnoreXmlEvents()
internal void set_IgnoreXmlEvents(bool value)
internal bool get_IgnoreDataSetEvents()
internal void set_IgnoreDataSetEvents(bool value)
private bool IsFoliated(XmlElement element)
private bool IsFoliated(XmlBoundElement be)
internal bool get_IsFoliationEnabled()
internal void set_IsFoliationEnabled(bool value)
internal XmlNode CloneTree(DataPointer other)
private XmlNode CloneTreeInternal(DataPointer other)
public XmlNode CloneNode(bool deep)
private XmlNode CloneNode(DataPointer dp)
internal bool IsTextLikeNode(XmlNode n)
internal bool IsNotMapped(DataColumn c)
private bool IsSame(DataColumn c, int recNo1, int recNo2)
internal bool IsTextOnly(DataColumn c)
public void Load(string filename)
public void Load(Stream inStream)
public void Load(TextReader txtReader)
public void Load(XmlReader reader)
private void LoadDataSetFromTree()
private void LoadTreeFromDataSet(DataSet ds)
private void LoadRows(XmlBoundElement rowElem, XmlNode node)
internal DataSetMapper get_Mapper()
internal void OnDataRowCreated(object oDataSet, DataRow row)
internal void OnClearCalled(object oDataSet, DataTable table)
internal void OnDataRowCreatedSpecial(object oDataSet, DataRow row)
internal void OnNewRow(DataRow row)
private XmlBoundElement AttachBoundElementToDataRow(DataRow row)
private bool NeedXSI_NilAttr(DataRow row)
private void OnAddRow(DataRow row)
private void OnColumnValueChanged(DataRow row, DataColumn col, XmlBoundElement rowElement)
private void OnColumnChanged(object sender, DataColumnChangeEventArgs args)
private void OnColumnValuesChanged(DataRow row, XmlBoundElement rowElement)
private void OnDeleteRow(DataRow row, XmlBoundElement rowElement)
private void OnDeletingRow(DataRow row, XmlBoundElement rowElement)
private void OnFoliated(XmlNode node)
private DataColumn FindAssociatedParentColumn(DataRelation relation, DataColumn childCol)
private void OnNestedParentChange(DataRow child, XmlBoundElement childElement, DataColumn childCol)
private void OnNodeChanged(object sender, XmlNodeChangedEventArgs args)
private void OnNodeChanging(object sender, XmlNodeChangedEventArgs args)
private void OnNodeInserted(object sender, XmlNodeChangedEventArgs args)
private void OnNodeInserting(object sender, XmlNodeChangedEventArgs args)
private void OnNodeRemoved(object sender, XmlNodeChangedEventArgs args)
private void OnNodeRemoving(object sender, XmlNodeChangedEventArgs args)
private void OnNodeRemovedFromTree(XmlNode node, XmlNode oldParent)
private void OnNodeRemovedFromFragment(XmlNode node, XmlNode oldParent)
private void OnRowChanged(object sender, DataRowChangeEventArgs args)
private void OnRowChanging(object sender, DataRowChangeEventArgs args)
private void OnDataSetPropertyChanging(object oDataSet, PropertyChangedEventArgs args)
private void OnColumnPropertyChanging(object oColumn, PropertyChangedEventArgs args)
private void OnTablePropertyChanging(object oTable, PropertyChangedEventArgs args)
private void OnTableColumnsChanging(object oColumnsCollection, CollectionChangeEventArgs args)
private void OnDataSetTablesChanging(object oTablesCollection, CollectionChangeEventArgs args)
private void OnDataSetRelationsChanging(object oRelationsCollection, CollectionChangeEventArgs args)
private void OnRelationPropertyChanging(object oRelationsCollection, PropertyChangedEventArgs args)
private void OnUndeleteRow(DataRow row, XmlElement rowElement)
private void PromoteChild(XmlNode child, XmlNode prevSibling)
private void PromoteInnerRegions(XmlNode parent)
private void PromoteNonValueChildren(XmlNode parent)
private void RemoveInitialTextNodes(XmlNode node)
private void ReplaceInitialChildText(XmlNode parent, string value)
internal XmlNode SafeFirstChild(XmlNode n)
internal XmlNode SafeNextSibling(XmlNode n)
internal XmlNode SafePreviousSibling(XmlNode n)
internal void SetRowValueToNull(DataRow row, DataColumn col)
internal void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText)
private void SynchronizeRowFromRowElement(XmlBoundElement rowElement)
private void SynchronizeRowFromRowElement(XmlBoundElement rowElement, ArrayList rowElemList)
private void SynchronizeRowFromRowElementEx(XmlBoundElement rowElement, ArrayList rowElemList)
private void UpdateAllColumns(DataRow row, XmlBoundElement rowElement)
private void Init()
private void Init(DataSet ds)
private bool IsConnected(XmlNode node)
private bool IsRowLive(DataRow row)
private void SetNestedParentRow(DataRow childRow, DataRow parentRow)
private void OnNodeInsertedInTree(XmlNode node)
private void OnNodeInsertedInFragment(XmlNode node)
private void OnRowElementInsertedInTree(XmlBoundElement rowElem, ArrayList rowElemList)
private void EnsureDisconnectedDataRow(XmlBoundElement rowElem)
private void OnNonRowElementInsertedInTree(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList)
private void OnNonRowElementInsertedInFragment(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList)
private void SetNestedParentRegion(XmlBoundElement childRowElem)
private void SetNestedParentRegion(XmlBoundElement childRowElem, XmlBoundElement parentRowElem)
internal bool IsTextNode(XmlNodeType nt)
protected XPathNavigator CreateNavigator(XmlNode node)
private void AssertLiveRows(XmlNode node)
private void AssertNonLiveRows(XmlNode node)
public XmlElement GetElementById(string elemId)
public XmlNodeList GetElementsByTagName(string name)
private DataTable[] OrderTables(DataSet ds)
private bool IsSelfRelatedDataTable(DataTable rootTable)
private bool TablesAreOrdered(DataSet ds)
}
internal System.Xml.XmlDataImplementation : XmlImplementation {
public XmlDocument CreateDocument()
}
internal System.Xml.XPathNodePointer : object {
private WeakReference _owner
private XmlDataDocument _doc
private XmlNode _node
private DataColumn _column
private bool _fOnValue
internal XmlBoundElement _parentOfNS
internal Int32[] xmlNodeType_To_XpathNodeType_Map
internal string s_strReservedXmlns
internal string s_strReservedXml
internal string s_strXmlNS
private bool _bNeedFoliate
internal bool IsEmptyElement
internal XPathNodeType NodeType
internal string LocalName
internal string Name
internal string NamespaceURI
internal string Prefix
internal string Value
internal string InnerText
internal string BaseURI
internal string XmlLang
private DataRow Row
internal int AttributeCount
internal bool HasChildren
internal XmlNode Node
internal XmlDataDocument Document
internal void .ctor(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node)
internal void .ctor(DataDocumentXPathNavigator owner, XPathNodePointer pointer)
private void .ctor(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node, DataColumn c, bool bOnValue, XmlBoundElement parentOfNS)
private XPathNodeType DecideXPNodeTypeForTextNodes(XmlNode node)
private XPathNodeType ConvertNodeType(XmlNode node)
private bool IsNamespaceNode(XmlNodeType nt, string ns)
internal XPathNodePointer Clone(DataDocumentXPathNavigator owner)
internal bool get_IsEmptyElement()
internal XPathNodeType get_NodeType()
internal string get_LocalName()
internal string get_Name()
internal string get_NamespaceURI()
internal string get_Prefix()
internal string get_Value()
internal string get_InnerText()
internal string get_BaseURI()
internal string get_XmlLang()
private XmlBoundElement GetRowElement()
private DataRow get_Row()
internal bool MoveTo(XPathNodePointer pointer)
private void MoveTo(XmlNode node)
private void MoveTo(XmlNode node, DataColumn column, bool _fOnValue)
private bool IsFoliated(XmlNode node)
private int ColumnCount(DataRow row, bool fAttribute)
internal int get_AttributeCount()
internal DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute)
internal DataColumn PreviousColumn(DataRow row, DataColumn col, bool fAttribute)
internal bool MoveToAttribute(string localName, string namespaceURI)
internal bool MoveToNextAttribute(bool bFirst)
private bool IsValidChild(XmlNode parent, XmlNode child)
private bool IsValidChild(XmlNode parent, DataColumn c)
internal bool MoveToNextSibling()
internal bool MoveToPreviousSibling()
internal bool MoveToFirst()
internal bool get_HasChildren()
internal bool MoveToFirstChild()
internal bool MoveToParent()
private XmlNode GetParent(XmlNode node)
internal void MoveToRoot()
internal bool IsSamePosition(XPathNodePointer pointer)
private XmlNodeOrder CompareNamespacePosition(XPathNodePointer other)
private XmlNode GetRoot(XmlNode node, Int32& depth)
internal XmlNodeOrder ComparePosition(XPathNodePointer other)
internal XmlNode get_Node()
private bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck)
private bool System.Xml.IXmlDataVirtualNode.IsOnColumn(DataColumn col)
private void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode)
private void RealFoliate()
private string GetNamespace(XmlBoundElement be, string name)
internal string GetNamespace(string name)
internal bool MoveToNamespace(string name)
private bool MoveToNextNamespace(XmlBoundElement be, DataColumn col, XmlAttribute curAttr)
internal bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope)
private bool DuplicateNS(XmlBoundElement endElem, string lname)
internal bool MoveToNextNamespace(XPathNamespaceScope namespaceScope)
private void AssertValid()
internal XmlDataDocument get_Document()
private bool System.Xml.IXmlDataVirtualNode.IsInUse()
}
internal ThisAssembly : object {
public string InformationalVersion
}
internal Win32NativeMethods : object {
public bool IsTokenRestrictedWrapper(IntPtr token)
}
