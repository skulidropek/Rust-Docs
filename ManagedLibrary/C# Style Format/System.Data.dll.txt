internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal Locale : object {
public string GetText(string msg)
public string GetText(string fmt, Object[] args)
}
public Microsoft.SqlServer.Server.DataAccessKind : Enum {
public int value__
public DataAccessKind None
public DataAccessKind Read
}
public Microsoft.SqlServer.Server.Format : Enum {
public int value__
public Format Unknown
public Format Native
public Format UserDefined
}
public Microsoft.SqlServer.Server.IBinarySerialize {
public void Read(BinaryReader r)
public void Write(BinaryWriter r)
}
public Microsoft.SqlServer.Server.InvalidUdtException : SystemException {
internal void .ctor(string message)
internal void .ctor(string message, Exception innerException)
internal void .ctor(Type t, string reason)
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
public Microsoft.SqlServer.Server.SqlFacetAttribute : Attribute {
private bool isFixedLength
private bool isNullable
private int maxSize
private int precision
private int scale
public bool IsFixedLength
public bool IsNullable
public int MaxSize
public int Precision
public int Scale
public bool get_IsFixedLength()
public void set_IsFixedLength(bool value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public int get_MaxSize()
public void set_MaxSize(int value)
public int get_Precision()
public void set_Precision(int value)
public int get_Scale()
public void set_Scale(int value)
}
public Microsoft.SqlServer.Server.SqlFunctionAttribute : Attribute {
private DataAccessKind dataAccess
private bool isDeterministic
private bool isPrecise
private SystemDataAccessKind systemDataAccess
public DataAccessKind DataAccess
public bool IsDeterministic
public bool IsPrecise
public SystemDataAccessKind SystemDataAccess
public DataAccessKind get_DataAccess()
public void set_DataAccess(DataAccessKind value)
public bool get_IsDeterministic()
public void set_IsDeterministic(bool value)
public bool get_IsPrecise()
public void set_IsPrecise(bool value)
public SystemDataAccessKind get_SystemDataAccess()
public void set_SystemDataAccess(SystemDataAccessKind value)
}
public Microsoft.SqlServer.Server.SqlMetaData : object {
private SqlCompareOptions compareOptions
private string databaseName
private long localeId
private long maxLength
private string name
private byte precision
private byte scale
private string owningSchema
private string objectName
private SqlDbType sqlDbType
private DbType dbType
private Type type
private Dictionary`2<string, int> <>f__switch$map5
public SqlCompareOptions CompareOptions
public DbType DbType
public long LocaleId
public long Max
public long MaxLength
public string Name
public byte Precision
public byte Scale
public SqlDbType SqlDbType
public string XmlSchemaCollectionDatabase
public string XmlSchemaCollectionName
public string XmlSchemaCollectionOwningSchema
public string TypeName
public void .ctor(string name, SqlDbType sqlDbType)
public void .ctor(string name, SqlDbType sqlDbType, long maxLength)
public void .ctor(string name, SqlDbType sqlDbType, Type userDefinedType)
public void .ctor(string name, SqlDbType sqlDbType, byte precision, byte scale)
public void .ctor(string name, SqlDbType sqlDbType, long maxLength, long locale, SqlCompareOptions compareOptions)
public void .ctor(string name, SqlDbType sqlDbType, string database, string owningSchema, string objectName)
public void .ctor(string name, SqlDbType sqlDbType, long maxLength, byte precision, byte scale, long localeId, SqlCompareOptions compareOptions, Type userDefinedType)
public SqlCompareOptions get_CompareOptions()
public DbType get_DbType()
public long get_LocaleId()
public long get_Max()
public long get_MaxLength()
public string get_Name()
public byte get_Precision()
public byte get_Scale()
public SqlDbType get_SqlDbType()
public string get_XmlSchemaCollectionDatabase()
public string get_XmlSchemaCollectionName()
public string get_XmlSchemaCollectionOwningSchema()
public string get_TypeName()
public bool Adjust(bool value)
public byte Adjust(byte value)
public Byte[] Adjust(Byte[] value)
public char Adjust(char value)
public Char[] Adjust(Char[] value)
public DateTime Adjust(DateTime value)
public decimal Adjust(decimal value)
public double Adjust(double value)
public Guid Adjust(Guid value)
public short Adjust(short value)
public int Adjust(int value)
public long Adjust(long value)
public object Adjust(object value)
public float Adjust(float value)
public SqlBinary Adjust(SqlBinary value)
public SqlBoolean Adjust(SqlBoolean value)
public SqlByte Adjust(SqlByte value)
public SqlBytes Adjust(SqlBytes value)
public SqlChars Adjust(SqlChars value)
public SqlDateTime Adjust(SqlDateTime value)
public SqlDecimal Adjust(SqlDecimal value)
public SqlDouble Adjust(SqlDouble value)
public SqlGuid Adjust(SqlGuid value)
public SqlInt16 Adjust(SqlInt16 value)
public SqlInt32 Adjust(SqlInt32 value)
public SqlInt64 Adjust(SqlInt64 value)
public SqlMoney Adjust(SqlMoney value)
public SqlSingle Adjust(SqlSingle value)
public SqlString Adjust(SqlString value)
public string Adjust(string value)
public SqlMetaData InferFromValue(object value, string name)
}
public Microsoft.SqlServer.Server.SqlMethodAttribute : SqlFunctionAttribute {
private bool isMutator
private bool onNullCall
public bool IsMutator
public bool OnNullCall
public bool get_IsMutator()
public void set_IsMutator(bool value)
public bool get_OnNullCall()
public void set_OnNullCall(bool value)
}
public Microsoft.SqlServer.Server.SqlProcedureAttribute : Attribute {
private string name
public string Name
public string get_Name()
public void set_Name(string value)
}
public Microsoft.SqlServer.Server.SqlTriggerAttribute : Attribute {
private string triggerEvent
private string name
private string target
public string Event
public string Name
public string Target
public string get_Event()
public void set_Event(string value)
public string get_Name()
public void set_Name(string value)
public string get_Target()
public void set_Target(string value)
}
public Microsoft.SqlServer.Server.SqlTriggerContext : object {
private TriggerAction triggerAction
private Boolean[] columnsUpdated
private SqlXml eventData
public int ColumnCount
public SqlXml EventData
public TriggerAction TriggerAction
internal void .ctor(TriggerAction triggerAction, Boolean[] columnsUpdated, SqlXml eventData)
public int get_ColumnCount()
public SqlXml get_EventData()
public TriggerAction get_TriggerAction()
public bool IsUpdatedColumn(int columnOrdinal)
}
public Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute : Attribute {
public int MaxByteSizeValue
private Format format
private bool isInvariantToDuplicates
private bool isInvariantToNulls
private bool isInvariantToOrder
private bool isNullIfEmpty
private int maxByteSize
public Format Format
public bool IsInvariantToDuplicates
public bool IsInvariantToNulls
public bool IsInvariantToOrder
public bool IsNullIfEmpty
public int MaxByteSize
public void .ctor(Format f)
public Format get_Format()
public bool get_IsInvariantToDuplicates()
public void set_IsInvariantToDuplicates(bool value)
public bool get_IsInvariantToNulls()
public void set_IsInvariantToNulls(bool value)
public bool get_IsInvariantToOrder()
public void set_IsInvariantToOrder(bool value)
public bool get_IsNullIfEmpty()
public void set_IsNullIfEmpty(bool value)
public int get_MaxByteSize()
public void set_MaxByteSize(int value)
}
public Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute : Attribute {
private int MaxByteSizeValue
private Format format
private bool isByteOrdered
private bool isFixedLength
private int maxByteSize
public Format Format
public bool IsByteOrdered
public bool IsFixedLength
public int MaxByteSize
public void .ctor(Format f)
public Format get_Format()
public bool get_IsByteOrdered()
public void set_IsByteOrdered(bool value)
public bool get_IsFixedLength()
public void set_IsFixedLength(bool value)
public int get_MaxByteSize()
public void set_MaxByteSize(int value)
}
public Microsoft.SqlServer.Server.SystemDataAccessKind : Enum {
public int value__
public SystemDataAccessKind None
public SystemDataAccessKind Read
}
public Microsoft.SqlServer.Server.TriggerAction : Enum {
public int value__
public TriggerAction AlterAppRole
public TriggerAction AlterAssembly
public TriggerAction AlterBinding
public TriggerAction AlterFunction
public TriggerAction AlterIndex
public TriggerAction AlterLogin
public TriggerAction AlterPartitionFunction
public TriggerAction AlterPartitionScheme
public TriggerAction AlterProcedure
public TriggerAction AlterQueue
public TriggerAction AlterRole
public TriggerAction AlterRoute
public TriggerAction AlterSchema
public TriggerAction AlterService
public TriggerAction AlterTable
public TriggerAction AlterTrigger
public TriggerAction AlterUser
public TriggerAction AlterView
public TriggerAction CreateAppRole
public TriggerAction CreateAssembly
public TriggerAction CreateBinding
public TriggerAction CreateContract
public TriggerAction CreateEventNotification
public TriggerAction CreateFunction
public TriggerAction CreateIndex
public TriggerAction CreateLogin
public TriggerAction CreateMsgType
public TriggerAction CreatePartitionFunction
public TriggerAction CreatePartitionScheme
public TriggerAction CreateProcedure
public TriggerAction CreateQueue
public TriggerAction CreateRole
public TriggerAction CreateRoute
public TriggerAction CreateSchema
public TriggerAction CreateSecurityExpression
public TriggerAction CreateService
public TriggerAction CreateSynonym
public TriggerAction CreateTable
public TriggerAction CreateTrigger
public TriggerAction CreateType
public TriggerAction CreateUser
public TriggerAction CreateView
public TriggerAction Delete
public TriggerAction DenyObject
public TriggerAction DropAppRole
public TriggerAction DropAssembly
public TriggerAction DropBinding
public TriggerAction DropContract
public TriggerAction DropEventNotification
public TriggerAction DropFunction
public TriggerAction DropIndex
public TriggerAction DropLogin
public TriggerAction DropMsgType
public TriggerAction DropPartitionFunction
public TriggerAction DropPartitionScheme
public TriggerAction DropProcedure
public TriggerAction DropQueue
public TriggerAction DropRole
public TriggerAction DropRoute
public TriggerAction DropSchema
public TriggerAction DropSecurityExpression
public TriggerAction DropService
public TriggerAction DropSynonym
public TriggerAction DropTable
public TriggerAction DropTrigger
public TriggerAction DropType
public TriggerAction DropUser
public TriggerAction DropView
public TriggerAction GrantObject
public TriggerAction GrantStatement
public TriggerAction Insert
public TriggerAction Invalid
public TriggerAction RevokeObject
public TriggerAction RevokeStatement
public TriggerAction Update
}
internal Mono.Data.SqlExpressions.Aggregation : BaseExpression {
private bool cacheResults
private DataRow[] rows
private ColumnReference column
private AggregationFunction function
private int count
private IConvertible result
private DataRowChangeEventHandler RowChangeHandler
private DataTable table
public void .ctor(bool cacheResults, DataRow[] rows, AggregationFunction function, ColumnReference column)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
public bool DependsOn(DataColumn other)
private void Aggregate(IConvertible val)
private IConvertible CalcStatisticalFunction(Object[] values)
public void ResetExpression()
private void InvalidateCache(object sender, DataRowChangeEventArgs args)
}
internal Mono.Data.SqlExpressions.AggregationFunction : Enum {
public int value__
public AggregationFunction Count
public AggregationFunction Sum
public AggregationFunction Min
public AggregationFunction Max
public AggregationFunction Avg
public AggregationFunction StDev
public AggregationFunction Var
}
internal Mono.Data.SqlExpressions.ArithmeticOperation : BinaryOpExpression {
public void .ctor(Operation op, IExpression e1, IExpression e2)
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.BaseExpression : object {
public object Eval(DataRow row)
public bool DependsOn(DataColumn other)
public bool EvalBoolean(DataRow row)
public bool Equals(object obj)
public int GetHashCode()
public void ResetExpression()
}
internal Mono.Data.SqlExpressions.BinaryExpression : BaseExpression {
protected IExpression expr1
protected IExpression expr2
protected void .ctor(IExpression e1, IExpression e2)
public bool Equals(object obj)
public int GetHashCode()
public bool DependsOn(DataColumn other)
public void ResetExpression()
}
internal Mono.Data.SqlExpressions.BinaryOpExpression : BinaryExpression {
protected Operation op
protected void .ctor(Operation op, IExpression e1, IExpression e2)
public bool Equals(object obj)
public int GetHashCode()
}
internal Mono.Data.SqlExpressions.BoolOperation : BinaryOpExpression {
public void .ctor(Operation op, IExpression e1, IExpression e2)
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
}
internal Mono.Data.SqlExpressions.ColumnReference : BaseExpression {
private ReferencedTable refTable
private string relationName
private string columnName
private DataColumn _cachedColumn
private DataRelation _cachedRelation
public ReferencedTable ReferencedTable
public void .ctor(string columnName)
public void .ctor(ReferencedTable refTable, string relationName, string columnName)
public bool Equals(object obj)
public int GetHashCode()
public ReferencedTable get_ReferencedTable()
private DataRelation GetRelation(DataRow row)
private DataColumn GetColumn(DataRow row)
public DataRow GetReferencedRow(DataRow row)
public DataRow[] GetReferencedRows(DataRow row)
public Object[] GetValues(DataRow[] rows)
private object Unify(object val)
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
public bool DependsOn(DataColumn other)
private void DropCached(DataColumnCollection columnCollection, DataRelationCollection relationCollection)
private void OnColumnPropertyChanged(object sender, PropertyChangedEventArgs args)
private void OnColumnRemoved(object sender, CollectionChangeEventArgs args)
private void OnRelationRemoved(object sender, CollectionChangeEventArgs args)
}
internal Mono.Data.SqlExpressions.Comparison : BinaryOpExpression {
private Char[] IgnoredTrailingChars
public void .ctor(Operation op, IExpression e1, IExpression e2)
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
internal int Compare(IComparable o1, IComparable o2, bool caseSensitive)
}
internal Mono.Data.SqlExpressions.ConcatFunction : StringFunction {
private IExpression _add
public void .ctor(IExpression e, IExpression add)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.ConvertFunction : UnaryExpression {
private Type targetType
public void .ctor(IExpression e, string targetType)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
private void ThrowInvalidCastException(object val)
}
internal Mono.Data.SqlExpressions.IExpression {
public object Eval(DataRow row)
public bool DependsOn(DataColumn other)
public bool EvalBoolean(DataRow row)
public void ResetExpression()
}
internal Mono.Data.SqlExpressions.IifFunction : UnaryExpression {
private IExpression trueExpr
private IExpression falseExpr
public void .ctor(IExpression e, IExpression trueExpr, IExpression falseExpr)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.In : UnaryExpression {
private IList set
public void .ctor(IExpression e, IList set)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
}
internal Mono.Data.SqlExpressions.IsNullFunction : UnaryExpression {
private IExpression defaultExpr
public void .ctor(IExpression e, IExpression defaultExpr)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.LenFunction : StringFunction {
public void .ctor(IExpression e)
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.Like : UnaryExpression {
private IExpression _pattern
public void .ctor(IExpression e, IExpression pattern)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
}
internal Mono.Data.SqlExpressions.Literal : BaseExpression {
private object val
public void .ctor(object val)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
public bool DependsOn(DataColumn other)
}
internal Mono.Data.SqlExpressions.Negation : UnaryExpression {
public void .ctor(IExpression e)
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
}
internal Mono.Data.SqlExpressions.Negative : UnaryExpression {
public void .ctor(IExpression e)
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.Numeric : object {
internal bool IsNumeric(object o)
internal IConvertible Unify(IConvertible o)
internal TypeCode ToSameType(IConvertible& o1, IConvertible& o2)
internal IConvertible Add(IConvertible o1, IConvertible o2)
internal IConvertible Subtract(IConvertible o1, IConvertible o2)
internal IConvertible Multiply(IConvertible o1, IConvertible o2)
internal IConvertible Divide(IConvertible o1, IConvertible o2)
internal IConvertible Modulo(IConvertible o1, IConvertible o2)
internal IConvertible Negative(IConvertible o)
internal IConvertible Min(IConvertible o1, IConvertible o2)
internal IConvertible Max(IConvertible o1, IConvertible o2)
}
internal Mono.Data.SqlExpressions.Operation : Enum {
public int value__
public Operation AND
public Operation OR
public Operation EQ
public Operation NE
public Operation LT
public Operation LE
public Operation GT
public Operation GE
public Operation ADD
public Operation SUB
public Operation MUL
public Operation DIV
public Operation MOD
}
internal Mono.Data.SqlExpressions.Parser : object {
private bool cacheAggregationResults
private DataRow[] aggregationRows
private int yacc_verbose_flag
public TextWriter ErrorOutput
public int eof_token
internal yyDebug debug
protected int yyFinal
protected String[] yyNames
private int yyExpectingState
protected int yyMax
private Int16[] yyLhs
private Int16[] yyLen
private Int16[] yyDefRed
protected Int16[] yyDgoto
protected Int16[] yySindex
protected Int16[] yyRindex
protected Int16[] yyGindex
protected Int16[] yyTable
protected Int16[] yyCheck
public void .ctor(DataRow[] aggregationRows)
public IExpression Compile(string sqlExpr)
public void yyerror(string message)
public void yyerror(string message, String[] expected)
public string yyname(int token)
protected Int32[] yyExpectingTokens(int state)
protected String[] yyExpecting(int state)
internal object yyparse(yyInput yyLex, object yyd)
protected object yyDefault(object first)
internal object yyparse(yyInput yyLex)
}
internal Mono.Data.SqlExpressions.ReferencedTable : Enum {
public int value__
public ReferencedTable Self
public ReferencedTable Parent
public ReferencedTable Child
}
internal Mono.Data.SqlExpressions.StringFunction : UnaryExpression {
protected void .ctor(IExpression e)
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.SubstringFunction : StringFunction {
private IExpression start
private IExpression len
public void .ctor(IExpression e, IExpression start, IExpression len)
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.Token : object {
public int PAROPEN
public int PARCLOSE
public int AND
public int OR
public int NOT
public int TRUE
public int FALSE
public int NULL
public int PARENT
public int CHILD
public int EQ
public int LT
public int GT
public int PLUS
public int MINUS
public int MUL
public int DIV
public int MOD
public int DOT
public int COMMA
public int IS
public int IN
public int NOT_IN
public int LIKE
public int NOT_LIKE
public int COUNT
public int SUM
public int AVG
public int MAX
public int MIN
public int STDEV
public int VAR
public int IIF
public int SUBSTRING
public int ISNULL
public int LEN
public int TRIM
public int CONVERT
public int StringLiteral
public int NumberLiteral
public int DateLiteral
public int Identifier
public int FunctionName
public int UMINUS
public int yyErrorCode
}
internal Mono.Data.SqlExpressions.Tokenizer : object {
private IDictionary tokenMap
private Object[] tokens
private Char[] input
private int pos
private int tok
private object val
public void .ctor(string strInput)
private char Current()
private char Next()
private bool MoveNext()
private bool SkipWhiteSpace()
private object ReadNumber()
private char ProcessEscapes(char c)
private string ReadString(char terminator)
private string ReadString(char terminator, bool canEscape)
private string ReadIdentifier()
private int ParseIdentifier()
private int ParseToken()
public bool advance()
public int token()
public object value()
}
internal Mono.Data.SqlExpressions.TrimFunction : StringFunction {
public void .ctor(IExpression e)
public object Eval(DataRow row)
}
internal Mono.Data.SqlExpressions.UnaryExpression : BaseExpression {
protected IExpression expr
public void .ctor(IExpression e)
public bool Equals(object obj)
public int GetHashCode()
public bool DependsOn(DataColumn other)
public bool EvalBoolean(DataRow row)
}
internal Mono.Data.SqlExpressions.yydebug.yyDebug {
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Data.SqlExpressions.yydebug.yyDebugSimple : object {
private void println(string s)
public void push(int state, object value)
public void lex(int state, int token, string name, object value)
public void shift(int from, int to, int errorFlag)
public void pop(int state)
public void discard(int state, int token, string name, object value)
public void reduce(int from, int to, int rule, string text, int len)
public void shift(int from, int to)
public void accept(object value)
public void error(string message)
public void reject()
}
internal Mono.Data.SqlExpressions.yyParser.yyException : Exception {
public void .ctor(string message)
}
internal Mono.Data.SqlExpressions.yyParser.yyInput {
public bool advance()
public int token()
public object value()
}
internal Mono.Data.SqlExpressions.yyParser.yyUnexpectedEof : yyException {
public void .ctor(string message)
}
public System.Data.AcceptRejectRule : Enum {
public int value__
public AcceptRejectRule None
public AcceptRejectRule Cascade
}
internal System.Data.ClassCodeDomProviderOptions : ClassGeneratorOptions {
private CodeDomProvider provider
public CodeDomNamingMethod CreateDataSetName
public CodeDomNamingMethod CreateTableTypeName
public CodeDomNamingMethod CreateTableMemberName
public CodeDomNamingMethod CreateTableColumnName
public CodeDomNamingMethod CreateColumnName
public CodeDomNamingMethod CreateRowName
public CodeDomNamingMethod CreateRelationName
public CodeDomNamingMethod CreateTableDelegateName
public CodeDomNamingMethod CreateEventArgsName
public CodeDomNamingMethod CreateTableAdapterNSName
public CodeDomNamingMethod CreateTableAdapterName
public void .ctor(CodeDomProvider codeProvider)
internal string DataSetName(string source)
internal string TableTypeName(string source)
internal string TableMemberName(string source)
internal string TableColName(string source)
internal string TableDelegateName(string source)
internal string EventArgsName(string source)
internal string ColumnName(string source)
internal string RowName(string source)
internal string RelationName(string source)
internal string TableAdapterNSName(string source)
internal string TableAdapterName(string source)
}
internal System.Data.ClassGeneratorOptions : object {
public bool MakeClassesInsideDataSet
internal string DataSetName(string source)
internal string TableTypeName(string source)
internal string TableMemberName(string source)
internal string TableColName(string source)
internal string TableDelegateName(string source)
internal string EventArgsName(string source)
internal string ColumnName(string source)
internal string RowName(string source)
internal string RelationName(string source)
internal string TableAdapterNSName(string source)
internal string TableAdapterName(string source)
}
internal System.Data.ClassICodeGeneratorOptions : ClassGeneratorOptions {
private ICodeGenerator gen
public CodeNamingMethod CreateDataSetName
public CodeNamingMethod CreateTableTypeName
public CodeNamingMethod CreateTableMemberName
public CodeNamingMethod CreateTableColumnName
public CodeNamingMethod CreateColumnName
public CodeNamingMethod CreateRowName
public CodeNamingMethod CreateRelationName
public CodeNamingMethod CreateTableDelegateName
public CodeNamingMethod CreateEventArgsName
public CodeNamingMethod CreateTableAdapterNSName
public CodeNamingMethod CreateTableAdapterName
public void .ctor(ICodeGenerator codeGen)
internal string DataSetName(string source)
internal string TableTypeName(string source)
internal string TableMemberName(string source)
internal string TableColName(string source)
internal string TableDelegateName(string source)
internal string EventArgsName(string source)
internal string ColumnName(string source)
internal string RowName(string source)
internal string RelationName(string source)
internal string TableAdapterNSName(string source)
internal string TableAdapterName(string source)
}
internal System.Data.CodeDomNamingMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(string source, CodeDomProvider provider)
public IAsyncResult BeginInvoke(string source, CodeDomProvider provider, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
internal System.Data.CodeNamingMethod : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public string Invoke(string source, ICodeGenerator gen)
public IAsyncResult BeginInvoke(string source, ICodeGenerator gen, AsyncCallback callback, object object)
public string EndInvoke(IAsyncResult result)
}
internal System.Data.ColumnTypeConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.CommandBehavior : Enum {
public int value__
public CommandBehavior Default
public CommandBehavior SingleResult
public CommandBehavior SchemaOnly
public CommandBehavior KeyInfo
public CommandBehavior SingleRow
public CommandBehavior SequentialAccess
public CommandBehavior CloseConnection
}
public System.Data.CommandType : Enum {
public int value__
public CommandType Text
public CommandType StoredProcedure
public CommandType TableDirect
}
internal System.Data.Common.BitDataContainer : DataContainer {
private BitArray _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.ByteDataContainer : DataContainer {
private Byte[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
public System.Data.Common.CatalogLocation : Enum {
public int value__
public CatalogLocation End
public CatalogLocation Start
}
internal System.Data.Common.CharDataContainer : DataContainer {
private Char[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
public System.Data.Common.DataAdapter : Component {
private string DefaultSourceTableName
private string DefaultSourceColumnName
private bool acceptChangesDuringFill
private bool continueUpdateOnError
private MissingMappingAction missingMappingAction
private MissingSchemaAction missingSchemaAction
private DataTableMappingCollection tableMappings
private bool acceptChangesDuringUpdate
private LoadOption fillLoadOption
private bool returnProviderSpecificTypes
private FillErrorEventHandler FillError
private ITableMappingCollection System.Data.IDataAdapter.TableMappings
public bool AcceptChangesDuringFill
public bool AcceptChangesDuringUpdate
public bool ContinueUpdateOnError
public LoadOption FillLoadOption
public MissingMappingAction MissingMappingAction
public MissingSchemaAction MissingSchemaAction
public bool ReturnProviderSpecificTypes
public DataTableMappingCollection TableMappings
protected void .ctor(DataAdapter adapter)
public void add_FillError(FillErrorEventHandler value)
public void remove_FillError(FillErrorEventHandler value)
private ITableMappingCollection System.Data.IDataAdapter.get_TableMappings()
public bool get_AcceptChangesDuringFill()
public void set_AcceptChangesDuringFill(bool value)
public bool get_AcceptChangesDuringUpdate()
public void set_AcceptChangesDuringUpdate(bool value)
public bool get_ContinueUpdateOnError()
public void set_ContinueUpdateOnError(bool value)
public LoadOption get_FillLoadOption()
public void set_FillLoadOption(LoadOption value)
public MissingMappingAction get_MissingMappingAction()
public void set_MissingMappingAction(MissingMappingAction value)
public MissingSchemaAction get_MissingSchemaAction()
public void set_MissingSchemaAction(MissingSchemaAction value)
public bool get_ReturnProviderSpecificTypes()
public void set_ReturnProviderSpecificTypes(bool value)
public DataTableMappingCollection get_TableMappings()
protected DataAdapter CloneInternals()
protected DataTableMappingCollection CreateTableMappings()
protected void Dispose(bool disposing)
protected bool ShouldSerializeTableMappings()
internal int FillInternal(DataTable dataTable, IDataReader dataReader)
internal Int32[] BuildSchema(IDataReader reader, DataTable table, SchemaType schemaType)
internal Int32[] BuildSchema(IDataReader reader, DataTable table, SchemaType schemaType, MissingSchemaAction missingSchAction, MissingMappingAction missingMapAction, DataTableMappingCollection dtMapping)
internal bool FillTable(DataTable dataTable, IDataReader dataReader, int startRecord, int maxRecords, Int32& counter)
internal void OnFillErrorInternal(FillErrorEventArgs value)
internal FillErrorEventArgs CreateFillErrorEvent(DataTable dataTable, Object[] values, Exception e)
internal string SetupSchema(SchemaType schemaType, string sourceTableName)
internal int FillInternal(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords)
public int Fill(DataSet dataSet)
protected int Fill(DataTable dataTable, IDataReader dataReader)
protected int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords)
protected int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords)
protected DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader)
protected DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
public IDataParameter[] GetFillParameters()
protected bool HasTableMappings()
protected void OnFillError(FillErrorEventArgs value)
public void ResetFillLoadOption()
public bool ShouldSerializeAcceptChangesDuringFill()
public bool ShouldSerializeFillLoadOption()
public int Update(DataSet dataSet)
}
public System.Data.Common.DataColumnMapping : MarshalByRefObject {
private string sourceColumn
private string dataSetColumn
public string DataSetColumn
public string SourceColumn
public void .ctor(string sourceColumn, string dataSetColumn)
private object System.ICloneable.Clone()
public string get_DataSetColumn()
public void set_DataSetColumn(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction)
public DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction)
public string ToString()
}
public System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
private ArrayList list
private Hashtable sourceColumns
private Hashtable dataSetColumns
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
private object System.Data.IColumnMappingCollection.Item
private object System.Collections.IList.Item
private bool System.Collections.IList.IsReadOnly
private bool System.Collections.IList.IsFixedSize
public int Count
public DataColumnMapping Item
public DataColumnMapping Item
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Data.IColumnMappingCollection.get_Item(string index)
private void System.Data.IColumnMappingCollection.set_Item(string index, object value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.Collections.IList.get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName)
private IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName)
public int get_Count()
public DataColumnMapping get_Item(int index)
public void set_Item(int index, DataColumnMapping value)
public DataColumnMapping get_Item(string sourceColumn)
public void set_Item(string sourceColumn, DataColumnMapping value)
public int Add(object value)
public DataColumnMapping Add(string sourceColumn, string dataSetColumn)
public void AddRange(Array values)
public void AddRange(DataColumnMapping[] values)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public void CopyTo(Array array, int index)
public void CopyTo(DataColumnMapping[] arr, int index)
public DataColumnMapping GetByDataSetColumn(string value)
public DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction)
public DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string sourceColumn)
public int IndexOfDataSetColumn(string dataSetColumn)
public void Insert(int index, object value)
public void Insert(int index, DataColumnMapping mapping)
public void Remove(object value)
public void Remove(DataColumnMapping value)
public void RemoveAt(int index)
public void RemoveAt(string sourceColumn)
}
internal System.Data.Common.DataColumnMappingConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.Common.DataContainer : object {
private BitArray null_values
private Type _type
private DataColumn _column
internal object Item
internal int Capacity
internal Type Type
protected DataColumn Column
protected object GetValue(int index)
internal long GetInt64(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int length)
internal object get_Item(int index)
internal void set_Item(int index, object value)
internal int get_Capacity()
internal void set_Capacity(int value)
internal Type get_Type()
protected DataColumn get_Column()
internal DataContainer Create(Type type, DataColumn column)
internal object GetExplicitValue(object value)
internal object GetContainerData(object value)
internal bool IsNull(int index)
internal void FillValues(int fromIndex)
internal void CopyValue(int from_index, int to_index)
internal void CopyValue(DataContainer from, int from_index, int to_index)
internal void SetItemFromDataRecord(int index, IDataRecord record, int field)
internal int CompareValues(int index1, int index2)
}
public System.Data.Common.DataTableMapping : MarshalByRefObject {
private string sourceTable
private string dataSetTable
private DataColumnMappingCollection columnMappings
private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings
public DataColumnMappingCollection ColumnMappings
public string DataSetTable
public string SourceTable
public void .ctor(string sourceTable, string dataSetTable)
public void .ctor(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings)
private IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings()
private object System.ICloneable.Clone()
public DataColumnMappingCollection get_ColumnMappings()
public string get_DataSetTable()
public void set_DataSetTable(string value)
public string get_SourceTable()
public void set_SourceTable(string value)
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction)
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction)
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction)
public string ToString()
}
public System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
private ArrayList mappings
private Hashtable sourceTables
private Hashtable dataSetTables
private object System.Collections.IList.Item
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Data.ITableMappingCollection.Item
public int Count
public DataTableMapping Item
public DataTableMapping Item
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Data.ITableMappingCollection.get_Item(string index)
private void System.Data.ITableMappingCollection.set_Item(string index, object value)
private ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName)
private ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName)
public int get_Count()
public DataTableMapping get_Item(int index)
public void set_Item(int index, DataTableMapping value)
public DataTableMapping get_Item(string sourceTable)
public void set_Item(string sourceTable, DataTableMapping value)
public int Add(object value)
public DataTableMapping Add(string sourceTable, string dataSetTable)
public void AddRange(Array values)
public void AddRange(DataTableMapping[] values)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public void CopyTo(Array array, int index)
public void CopyTo(DataTableMapping[] array, int index)
public DataTableMapping GetByDataSetTable(string dataSetTable)
public DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string sourceTable)
public int IndexOfDataSetTable(string dataSetTable)
public void Insert(int index, object value)
public void Insert(int index, DataTableMapping value)
public void Remove(object value)
public void Remove(DataTableMapping value)
public void RemoveAt(int index)
public void RemoveAt(string sourceTable)
}
internal System.Data.Common.DataTableMappingConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.Common.DateTimeDataContainer : ObjectDataContainer {
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void SetValue(int index, object value)
}
public System.Data.Common.DbCommand : Component {
private IDbConnection System.Data.IDbCommand.Connection
private IDataParameterCollection System.Data.IDbCommand.Parameters
private IDbTransaction System.Data.IDbCommand.Transaction
public string CommandText
public int CommandTimeout
public CommandType CommandType
public DbConnection Connection
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public bool DesignTimeVisible
public DbParameterCollection Parameters
public DbTransaction Transaction
public UpdateRowSource UpdatedRowSource
private IDbConnection System.Data.IDbCommand.get_Connection()
private void System.Data.IDbCommand.set_Connection(IDbConnection value)
private IDataParameterCollection System.Data.IDbCommand.get_Parameters()
private IDbTransaction System.Data.IDbCommand.get_Transaction()
private void System.Data.IDbCommand.set_Transaction(IDbTransaction value)
private IDbDataParameter System.Data.IDbCommand.CreateParameter()
private IDataReader System.Data.IDbCommand.ExecuteReader()
private IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior)
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public DbConnection get_Connection()
public void set_Connection(DbConnection value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public DbParameterCollection get_Parameters()
public DbTransaction get_Transaction()
public void set_Transaction(DbTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public void Cancel()
protected DbParameter CreateDbParameter()
public DbParameter CreateParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public int ExecuteNonQuery()
public DbDataReader ExecuteReader()
public DbDataReader ExecuteReader(CommandBehavior behavior)
public object ExecuteScalar()
public void Prepare()
}
public System.Data.Common.DbCommandBuilder : Component {
private bool _setAllValues
private bool _disposed
private DataTable _dbSchemaTable
private DbDataAdapter _dbDataAdapter
private CatalogLocation _catalogLocation
private ConflictOption _conflictOption
private string _tableName
private string _catalogSeparator
private string _quotePrefix
private string _quoteSuffix
private string _schemaSeparator
private DbCommand _dbCommand
private DbCommand _deleteCommand
private DbCommand _insertCommand
private DbCommand _updateCommand
private string SEPARATOR_DEFAULT
private string clause1
private string clause2
private string QuotedTableName
private bool IsCommandGenerated
public CatalogLocation CatalogLocation
public string CatalogSeparator
public ConflictOption ConflictOption
public DbDataAdapter DataAdapter
public string QuotePrefix
public string QuoteSuffix
public string SchemaSeparator
public bool SetAllValues
private DbCommand SourceCommand
private void BuildCache(bool closeConnection)
private string get_QuotedTableName()
private bool get_IsCommandGenerated()
private string GetQuotedString(string value)
private void BuildInformation(DataTable schemaTable)
private bool IncludedInInsert(DataRow schemaRow)
private bool IncludedInUpdate(DataRow schemaRow)
private bool IncludedInWhereClause(DataRow schemaRow)
private DbCommand CreateDeleteCommand(bool option)
private DbCommand CreateInsertCommand(bool option, DataRow row)
private void CreateNewCommand(DbCommand& command)
private DbCommand CreateUpdateCommand(bool option)
private DbParameter CreateParameter(DbCommand _dbCommand, DataRow schemaRow, bool whereClause)
private DbParameter CreateParameter(DbCommand _dbCommand, int paramIndex, DataRow schemaRow)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public ConflictOption get_ConflictOption()
public void set_ConflictOption(ConflictOption value)
public DbDataAdapter get_DataAdapter()
public void set_DataAdapter(DbDataAdapter value)
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
public bool get_SetAllValues()
public void set_SetAllValues(bool value)
private DbCommand get_SourceCommand()
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected void Dispose(bool disposing)
public DbCommand GetDeleteCommand()
public DbCommand GetDeleteCommand(bool option)
public DbCommand GetInsertCommand()
public DbCommand GetInsertCommand(bool option)
internal DbCommand GetInsertCommand(bool option, DataRow row)
public DbCommand GetUpdateCommand()
public DbCommand GetUpdateCommand(bool option)
protected DbCommand InitializeCommand(DbCommand command)
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
public void RefreshSchema()
protected void RowUpdatingHandler(RowUpdatingEventArgs args)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
protected DataTable GetSchemaTable(DbCommand cmd)
private void CheckEnumValue(Type type, int value)
}
internal System.Data.Common.DBComparerFactory : object {
private IComparer comparableComparer
private IComparer ignoreCaseComparer
private IComparer caseComparer
private IComparer byteArrayComparer
private Type icomparerType
public IComparer GetComparer(Type type, bool ignoreCase)
}
public System.Data.Common.DbConnection : Component {
private StateChangeEventHandler StateChange
private Dictionary`2<string, int> <>f__switch$map1
public string ConnectionString
public string Database
public string DataSource
public string ServerVersion
public ConnectionState State
public int ConnectionTimeout
protected DbProviderFactory DbProviderFactory
public void add_StateChange(StateChangeEventHandler value)
public void remove_StateChange(StateChangeEventHandler value)
private IDbTransaction System.Data.IDbConnection.BeginTransaction()
private IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel il)
private IDbCommand System.Data.IDbConnection.CreateCommand()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public string get_Database()
public string get_DataSource()
public string get_ServerVersion()
public ConnectionState get_State()
public int get_ConnectionTimeout()
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public DbTransaction BeginTransaction()
public DbTransaction BeginTransaction(IsolationLevel isolationLevel)
public void ChangeDatabase(string databaseName)
public void Close()
public DbCommand CreateCommand()
protected DbCommand CreateDbCommand()
public void EnlistTransaction(Transaction transaction)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
private void AddParameter(DbCommand command, string parameterName, DbType parameterType, int parameterSize)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
protected DbProviderFactory get_DbProviderFactory()
public void Open()
protected void OnStateChange(StateChangeEventArgs stateChanged)
}
internal System.Data.Common.DbConnectionOptions : object {
internal NameValueCollection options
internal string normalizedConnectionString
public bool IsEmpty
public string Item
public ICollection Keys
protected internal void .ctor(DbConnectionOptions connectionOptions)
public void .ctor(string connectionString)
public void .ctor(string connectionString, Hashtable synonyms, bool useFirstKeyValuePair)
public bool get_IsEmpty()
public string get_Item(string keyword)
public ICollection get_Keys()
protected void BuildConnectionString(StringBuilder builder, String[] withoutOptions, string insertValue)
public bool ContainsKey(string keyword)
public bool ConvertValueToBoolean(string keyname, bool defaultvalue)
public int ConvertValueToInt32(string keyname, int defaultvalue)
public bool ConvertValueToIntegratedSecurity()
public string ConvertValueToString(string keyname, string defaultValue)
protected internal PermissionSet CreatePermissionSet()
protected internal string Expand()
public string RemoveKeyValuePairs(string connectionString, String[] keynames)
public string UsersConnectionString(bool hisPasswordPwd)
internal void ParseConnectionString(string connectionString)
}
internal System.Data.Common.DbConnectionString : DbConnectionOptions {
private KeyRestrictionBehavior behavior
public KeyRestrictionBehavior Behavior
public string Restrictions
protected internal void .ctor(DbConnectionString constr)
public void .ctor(string connectionString)
protected void .ctor(SerializationInfo si, StreamingContext sc)
public void .ctor(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
public KeyRestrictionBehavior get_Behavior()
public string get_Restrictions()
public void GetObjectData(SerializationInfo info, StreamingContext context)
protected string KeywordLookup(string keyname)
public void PermissionDemand()
}
public System.Data.Common.DbConnectionStringBuilder : object {
private Dictionary`2<string, object> _dictionary
private bool useOdbcRules
private object _staticAttributeCollection
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private object System.Collections.IDictionary.Item
public bool BrowsableConnectionString
public string ConnectionString
public int Count
public bool IsFixedSize
public bool IsReadOnly
public object Item
public ICollection Keys
public ICollection Values
public void .ctor(bool useOdbcRules)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private object System.Collections.IDictionary.get_Item(object keyword)
private void System.Collections.IDictionary.set_Item(object keyword, object value)
private void System.Collections.ICollection.CopyTo(Array array, int index)
private void System.Collections.IDictionary.Add(object keyword, object value)
private bool System.Collections.IDictionary.Contains(object keyword)
private IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
private void System.Collections.IDictionary.Remove(object keyword)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
public bool get_BrowsableConnectionString()
public void set_BrowsableConnectionString(bool value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public ICollection get_Keys()
public ICollection get_Values()
public void Add(string keyword, object value)
public void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules)
public void AppendKeyValuePair(StringBuilder builder, string keyword, string value)
public void Clear()
public bool ContainsKey(string keyword)
public bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder)
protected void GetProperties(Hashtable propertyDescriptors)
protected internal void ClearPropertyDescriptors()
public bool Remove(string keyword)
public bool ShouldSerialize(string keyword)
public string ToString()
public bool TryGetValue(string keyword, Object& value)
private ArgumentException CreateInvalidKeywordException(string keyword)
private ArgumentException CreateConnectionStringInvalidException(int index)
private bool ValueNeedsQuoting(string value)
private void ParseConnectionString(string connectionString)
private void ParseConnectionStringOdbc(string connectionString)
private void ParseConnectionStringNonOdbc(string connectionString)
private int SkipTrailingWhitespace(string value, int index)
private int NextNonWhitespaceChar(string value, int index)
}
internal System.Data.Common.DbConnectionStringBuilderHelper : object {
public int ConvertToInt32(object value)
public bool ConvertToBoolean(object value)
}
public System.Data.Common.DbDataAdapter : DataAdapter {
public string DefaultSourceTableName
private string DefaultSourceColumnName
private CommandBehavior _behavior
private IDbCommand _selectCommand
private IDbCommand _updateCommand
private IDbCommand _deleteCommand
private IDbCommand _insertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
protected internal CommandBehavior FillCommandBehavior
public DbCommand SelectCommand
public DbCommand DeleteCommand
public DbCommand InsertCommand
public DbCommand UpdateCommand
public int UpdateBatchSize
protected void .ctor(DbDataAdapter adapter)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
private object System.ICloneable.Clone()
protected internal CommandBehavior get_FillCommandBehavior()
protected internal void set_FillCommandBehavior(CommandBehavior value)
public DbCommand get_SelectCommand()
public void set_SelectCommand(DbCommand value)
public DbCommand get_DeleteCommand()
public void set_DeleteCommand(DbCommand value)
public DbCommand get_InsertCommand()
public void set_InsertCommand(DbCommand value)
public DbCommand get_UpdateCommand()
public void set_UpdateCommand(DbCommand value)
public int get_UpdateBatchSize()
public void set_UpdateBatchSize(int value)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
protected void Dispose(bool disposing)
public int Fill(DataSet dataSet)
public int Fill(DataTable dataTable)
public int Fill(DataSet dataSet, string srcTable)
protected int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior)
public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable)
public int Fill(int startRecord, int maxRecords, DataTable[] dataTables)
protected int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior)
protected int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior)
internal int FillFromReader(DataTable table, IDataReader reader, int start, int length, Int32[] mapping, LoadOption loadOption)
internal int FillFromReader(DataTable table, IDataReader reader, int start, int length, Int32[] mapping, LoadOption loadOption, FillErrorEventHandler errorHandler)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
public DataTable FillSchema(DataTable dataTable, SchemaType schemaType)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable)
protected DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior)
protected DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior)
public IDataParameter[] GetFillParameters()
public int Update(DataRow[] dataRows)
public int Update(DataSet dataSet)
public int Update(DataTable dataTable)
private int Update(DataTable dataTable, DataTableMapping tableMapping)
protected int Update(DataRow[] dataRows, DataTableMapping tableMapping)
public int Update(DataSet dataSet, string srcTable)
protected int AddToBatch(IDbCommand command)
protected void ClearBatch()
protected int ExecuteBatch()
protected IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex)
protected bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error)
protected void InitializeBatching()
protected void TerminateBatching()
private Exception CreateMethodNotSupportedException()
}
public System.Data.Common.DBDataPermission : CodeAccessPermission {
private int version
private bool allowBlankPassword
private PermissionState state
private Hashtable _connections
public bool AllowBlankPassword
protected void .ctor(DBDataPermission permission)
protected void .ctor(DBDataPermissionAttribute permissionAttribute)
protected void .ctor(PermissionState state)
protected void .ctor(PermissionState state, bool allowBlankPassword)
public bool get_AllowBlankPassword()
public void set_AllowBlankPassword(bool value)
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
protected void Clear()
public IPermission Copy()
protected DBDataPermission CreateInstance()
public void FromXml(SecurityElement securityElement)
public IPermission Intersect(IPermission target)
public bool IsSubsetOf(IPermission target)
public bool IsUnrestricted()
public SecurityElement ToXml()
public IPermission Union(IPermission target)
private bool IsEmpty()
private DBDataPermission Cast(IPermission target)
}
public System.Data.Common.DBDataPermissionAttribute : CodeAccessSecurityAttribute {
private bool allowBlankPassword
private string keyRestrictions
private KeyRestrictionBehavior keyRestrictionBehavior
private string connectionString
public bool AllowBlankPassword
public string KeyRestrictions
public string ConnectionString
public KeyRestrictionBehavior KeyRestrictionBehavior
protected void .ctor(SecurityAction action)
public bool get_AllowBlankPassword()
public void set_AllowBlankPassword(bool value)
public string get_KeyRestrictions()
public void set_KeyRestrictions(string value)
public string get_ConnectionString()
public void set_ConnectionString(string value)
public KeyRestrictionBehavior get_KeyRestrictionBehavior()
public void set_KeyRestrictionBehavior(KeyRestrictionBehavior value)
public bool ShouldSerializeConnectionString()
public bool ShouldSerializeKeyRestrictions()
}
public System.Data.Common.DbDataReader : MarshalByRefObject {
public int Depth
public int FieldCount
public bool HasRows
public bool IsClosed
public object Item
public object Item
public int RecordsAffected
public int VisibleFieldCount
private IDataReader System.Data.IDataRecord.GetData(int i)
public int get_Depth()
public int get_FieldCount()
public bool get_HasRows()
public bool get_IsClosed()
public object get_Item(int index)
public object get_Item(string name)
public int get_RecordsAffected()
public int get_VisibleFieldCount()
public void Close()
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferOffset, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public void Dispose()
protected void Dispose(bool disposing)
public DbDataReader GetData(int i)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public IEnumerator GetEnumerator()
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public Type GetProviderSpecificFieldType(int i)
public object GetProviderSpecificValue(int i)
public int GetProviderSpecificValues(Object[] values)
protected DbDataReader GetDbDataReader(int ordinal)
public DataTable GetSchemaTable()
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
public bool NextResult()
public bool Read()
internal DataTable GetSchemaTableTemplate()
}
public System.Data.Common.DbDataRecord : object {
public int FieldCount
public object Item
public object Item
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
public int get_FieldCount()
public object get_Item(string name)
public object get_Item(int i)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int i)
protected DbDataReader GetDbDataReader(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
public IDataReader GetData(int i)
}
internal System.Data.Common.DbDataRecordImpl : DbDataRecord {
private SchemaInfo[] schema
private Object[] values
private int fieldCount
public int FieldCount
public object Item
public object Item
internal void .ctor(SchemaInfo[] schema, Object[] values)
public int get_FieldCount()
public object get_Item(string name)
public object get_Item(int i)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
protected DbDataReader GetDbDataReader(int ordinal)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
}
public System.Data.Common.DbDataSourceEnumerator : object {
public DataTable GetDataSources()
}
public System.Data.Common.DbEnumerator : object {
private IDataReader reader
private bool closeReader
private SchemaInfo[] schema
private Object[] values
public object Current
public void .ctor(IDataReader reader)
public void .ctor(IDataReader reader, bool closeReader)
public object get_Current()
private SchemaInfo[] LoadSchema(IDataReader reader)
public bool MoveNext()
public void Reset()
}
public System.Data.Common.DbException : ExternalException {
protected void .ctor(string message)
protected void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
protected void .ctor(string message, int errorcode)
}
public System.Data.Common.DbMetaDataCollectionNames : object {
public string DataSourceInformation
public string DataTypes
public string MetaDataCollections
public string ReservedWords
public string Restrictions
}
public System.Data.Common.DbMetaDataColumnNames : object {
public string CollectionName
public string ColumnSize
public string CompositeIdentifierSeparatorPattern
public string CreateFormat
public string CreateParameters
public string DataSourceProductName
public string DataSourceProductVersion
public string DataType
public string DataSourceProductVersionNormalized
public string GroupByBehavior
public string IdentifierCase
public string IdentifierPattern
public string IsAutoIncrementable
public string IsBestMatch
public string IsCaseSensitive
public string IsConcurrencyType
public string IsFixedLength
public string IsFixedPrecisionScale
public string IsLiteralSupported
public string IsLong
public string IsNullable
public string IsSearchable
public string IsSearchableWithLike
public string IsUnsigned
public string LiteralPrefix
public string LiteralSuffix
public string MaximumScale
public string MinimumScale
public string NumberOfIdentifierParts
public string NumberOfRestrictions
public string OrderByColumnsInSelect
public string ParameterMarkerFormat
public string ParameterMarkerPattern
public string ParameterNameMaxLength
public string ParameterNamePattern
public string ProviderDbType
public string QuotedIdentifierCase
public string QuotedIdentifierPattern
public string ReservedWord
public string StatementSeparatorPattern
public string StringLiteralPattern
public string SupportedJoinOperators
public string TypeName
}
public System.Data.Common.DbParameter : MarshalByRefObject {
internal Hashtable dbTypeMapping
private byte System.Data.IDbDataParameter.Precision
private byte System.Data.IDbDataParameter.Scale
public DbType DbType
public ParameterDirection Direction
public string ParameterName
public int Size
public object Value
public bool IsNullable
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
internal object FrameworkDbType
protected internal Hashtable DbTypeMapping
internal Type SystemType
private byte System.Data.IDbDataParameter.get_Precision()
private void System.Data.IDbDataParameter.set_Precision(byte value)
private byte System.Data.IDbDataParameter.get_Scale()
private void System.Data.IDbDataParameter.set_Scale(byte value)
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public string get_ParameterName()
public void set_ParameterName(string value)
public int get_Size()
public void set_Size(int value)
public object get_Value()
public void set_Value(object value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public void ResetDbType()
internal object get_FrameworkDbType()
internal void set_FrameworkDbType(object value)
protected internal Hashtable get_DbTypeMapping()
protected internal void set_DbTypeMapping(Hashtable value)
internal Type get_SystemType()
}
public System.Data.Common.DbParameterCollection : MarshalByRefObject {
private object System.Data.IDataParameterCollection.Item
private object System.Collections.IList.Item
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public DbParameter Item
public DbParameter Item
public object SyncRoot
private object System.Data.IDataParameterCollection.get_Item(string parameterName)
private void System.Data.IDataParameterCollection.set_Item(string parameterName, object value)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DbParameter get_Item(string parameterName)
public void set_Item(string parameterName, DbParameter value)
public DbParameter get_Item(int index)
public void set_Item(int index, DbParameter value)
public object get_SyncRoot()
public int Add(object value)
public void AddRange(Array values)
protected DbParameter GetParameter(string parameterName)
protected void SetParameter(string parameterName, DbParameter value)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
protected DbParameter GetParameter(int index)
public int IndexOf(object value)
public int IndexOf(string parameterName)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
protected void SetParameter(int index, DbParameter value)
}
public System.Data.Common.DbProviderConfigurationHandler : object {
public object Create(object parent, object configContext, XmlNode section)
}
public System.Data.Common.DbProviderFactories : object {
internal string CONFIG_SECTION_NAME
internal string CONFIG_SEC_TABLE_NAME
private object configEntries
public DbProviderFactory GetFactory(DataRow providerRow)
public DbProviderFactory GetFactory(string providerInvariantName)
public DataTable GetFactoryClasses()
internal DataSet GetConfigEntries()
}
public System.Data.Common.DbProviderFactoriesConfigurationHandler : object {
private Dictionary`2<string, int> <>f__switch$map2
public object Create(object parent, object configContext, XmlNode section)
private DataSet CreateDataSet()
private void FillDataTables(DataSet ds, XmlNode section)
private string GetAttributeValue(XmlNode node, string name, bool required)
private void AddRow(DataTable dt, XmlNode addNode)
private void RemoveRow(DataTable dt, XmlNode removeNode)
}
public System.Data.Common.DbProviderFactory : object {
public bool CanCreateDataSourceEnumerator
private NotImplementedException CreateNotImplementedException()
public bool get_CanCreateDataSourceEnumerator()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbDataAdapter CreateDataAdapter()
public DbDataSourceEnumerator CreateDataSourceEnumerator()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
public DbConnectionStringBuilder CreateConnectionStringBuilder()
}
public System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
private bool isProviderSpecificTypeProperty
public bool IsProviderSpecificTypeProperty
public void .ctor(bool isProviderSpecificTypeProperty)
public bool get_IsProviderSpecificTypeProperty()
}
public System.Data.Common.DbTransaction : MarshalByRefObject {
private IDbConnection System.Data.IDbTransaction.Connection
public DbConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
private IDbConnection System.Data.IDbTransaction.get_Connection()
public DbConnection get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public void Commit()
public void Rollback()
public void Dispose()
protected void Dispose(bool disposing)
}
internal System.Data.Common.DbTypes : object {
internal Type TypeOfBoolean
internal Type TypeOfSByte
internal Type TypeOfChar
internal Type TypeOfInt16
internal Type TypeOfInt32
internal Type TypeOfInt64
internal Type TypeOfByte
internal Type TypeOfUInt16
internal Type TypeOfUInt32
internal Type TypeOfUInt64
internal Type TypeOfDouble
internal Type TypeOfSingle
internal Type TypeOfDecimal
internal Type TypeOfString
internal Type TypeOfDateTime
internal Type TypeOfObject
internal Type TypeOfGuid
internal Type TypeOfType
internal Type TypeOfByteArray
internal Type TypeOfFloat
internal Type TypeOfTimespan
}
internal System.Data.Common.DecimalDataContainer : ObjectDataContainer {
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void SetValue(int index, object value)
}
internal System.Data.Common.DoubleDataContainer : DataContainer {
private Double[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.ExceptionHelper : object {
internal ArgumentException InvalidSizeValue(int value)
internal void CheckEnumValue(Type enumType, object value)
internal ArgumentException InvalidEnumValueException(string enumeration, object value)
internal ArgumentOutOfRangeException InvalidDataRowVersion(DataRowVersion value)
internal ArgumentOutOfRangeException InvalidParameterDirection(ParameterDirection value)
internal InvalidOperationException NoStoredProcedureExists(string procedureName)
internal ArgumentNullException ArgumentNull(string parameter)
internal InvalidOperationException TransactionRequired()
internal ArgumentOutOfRangeException InvalidOleDbType(int value)
internal ArgumentException InvalidDbType(int value)
internal InvalidOperationException DeriveParametersNotSupported(Type type, CommandType commandType)
internal InvalidOperationException ReaderClosed(string mehodName)
internal ArgumentOutOfRangeException InvalidSqlDbType(int value)
internal ArgumentException UnknownDataType(string type1, string type2)
internal InvalidOperationException TransactionNotInitialized()
internal InvalidOperationException TransactionNotUsable(Type type)
internal InvalidOperationException ParametersNotInitialized(int parameterPosition, string parameterName, string parameterType)
internal InvalidOperationException WrongParameterSize(string provider)
internal InvalidOperationException ConnectionNotOpened(string operationName, string connectionState)
internal InvalidOperationException ConnectionNotInitialized(string methodName)
internal InvalidOperationException OpenConnectionRequired(string methodName, object connectionState)
internal InvalidOperationException OpenedReaderExists()
internal InvalidOperationException ConnectionAlreadyOpen(object connectionState)
internal InvalidOperationException ConnectionClosed()
internal InvalidOperationException ConnectionStringNotInitialized()
internal InvalidOperationException ConnectionIsBusy(object commandType, object connectionState)
internal InvalidOperationException NotAllowedWhileConnectionOpen(string propertyName, object connectionState)
internal ArgumentException OleDbNoProviderSpecified()
internal ArgumentException InvalidValueForKey(string key)
internal InvalidOperationException ParameterSizeNotInitialized(int parameterIndex, string parameterName, string parameterType, int parameterSize)
internal ArgumentException InvalidUpdateStatus(UpdateStatus status)
internal InvalidOperationException UpdateRequiresCommand(string command)
internal DataException RowUpdatedError()
internal ArgumentNullException CollectionNoNullsAllowed(object collection, object objectsType)
internal ArgumentException CollectionAlreadyContains(object objectType, string propertyName, object propertyValue, object collection)
internal string GetExceptionMessage(string exceptionMessage, Object[] args)
internal string GetExceptionMessage(string exceptionMessage)
}
internal System.Data.Common.FieldNameLookup : object {
private ArrayList list
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public string Item
public object SyncRoot
public void .ctor(DataTable schemaTable)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public string get_Item(int index)
public void set_Item(int index, string value)
public object get_SyncRoot()
public int Add(object value)
public void Clear()
public bool Contains(object value)
public void CopyTo(Array array, int index)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
}
public System.Data.Common.GroupByBehavior : Enum {
public int value__
public GroupByBehavior ExactMatch
public GroupByBehavior MustContainAll
public GroupByBehavior NotSupported
public GroupByBehavior Unknown
public GroupByBehavior Unrelated
}
public System.Data.Common.IdentifierCase : Enum {
public int value__
public IdentifierCase Insensitive
public IdentifierCase Sensitive
public IdentifierCase Unknown
}
internal System.Data.Common.Index : object {
private Int32[] empty
private Int32[] _array
private int _size
private Key _key
private int _refCount
private bool know_have_duplicates
private bool know_no_duplicates
internal Key Key
internal int Size
internal int RefCount
internal bool HasDuplicates
internal Int32[] Duplicates
internal void .ctor(Key key)
internal Key get_Key()
internal int get_Size()
internal int get_RefCount()
internal int IndexToRecord(int index)
internal bool get_HasDuplicates()
internal Int32[] get_Duplicates()
internal Int32[] GetAll()
internal DataRow[] GetAllRows()
internal DataRow[] GetDistinctRows()
internal void Reset()
private void RebuildIndex()
private void Sort()
internal int Find(Object[] keys)
internal int FindIndex(Object[] keys)
internal int Find(int record)
internal Int32[] FindAll(Object[] keys)
internal Int32[] FindAllIndexes(Object[] keys)
internal Int32[] FindAll(int record)
internal Int32[] FindAllIndexes(int record)
private int FindIndex(int record)
private int FindIndexExact(int record)
private void IndexesToRecords(Int32[] indexes)
internal void Delete(DataRow row)
internal void Delete(int oldRecord)
private void Remove(int index)
internal void Update(DataRow row, int oldRecord, DataRowVersion oldVersion, DataRowState oldState)
internal void Add(DataRow row)
private void Add(DataRow row, int newRecord)
private void Insert(int index, int r)
private void MergeSort(Int32[] to, int length)
private void MergeSort(Int32[] from, Int32[] to, int p, int r)
private void QuickSort(Int32[] a, int p, int r)
private int Partition(Int32[] a, int p, int r)
private int BinarySearch(Int32[] a, int p, int r, int b)
private int LazyBinarySearch(Int32[] a, int p, int r, int b)
internal void AddRef()
internal void RemoveRef()
}
internal System.Data.Common.Int16DataContainer : DataContainer {
private Int16[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.Int32DataContainer : DataContainer {
private Int32[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.Int64DataContainer : DataContainer {
private Int64[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.Key : object {
private DataTable _table
private DataColumn[] _columns
private ListSortDirection[] _sortDirection
private DataViewRowState _rowStateFilter
private IExpression _filter
private DataRow _tmpRow
internal DataColumn[] Columns
internal DataTable Table
private ListSortDirection[] Sort
internal DataViewRowState RowStateFilter
internal bool HasFilter
internal void .ctor(DataTable table, DataColumn[] columns, ListSortDirection[] sort, DataViewRowState rowState, IExpression filter)
internal DataColumn[] get_Columns()
internal DataTable get_Table()
private ListSortDirection[] get_Sort()
internal DataViewRowState get_RowStateFilter()
internal void set_RowStateFilter(DataViewRowState value)
internal bool get_HasFilter()
internal int CompareRecords(int first, int second)
internal int GetRecord(DataRow row)
internal bool CanContain(int index)
internal bool ContainsVersion(DataRowState state, DataRowVersion version)
internal int GetRecord(DataRow row, DataViewRowState rowStateFilter)
internal bool Equals(DataColumn[] columns, ListSortDirection[] sort, DataViewRowState rowState, IExpression filter)
internal bool DependsOn(DataColumn column)
}
internal System.Data.Common.ObjectDataContainer : DataContainer {
private Object[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.PermissionHelper : object {
internal SecurityElement Element(Type type, int version)
internal PermissionState CheckPermissionState(PermissionState state, bool allowUnrestricted)
internal int CheckSecurityElement(SecurityElement se, string parameterName, int minimumVersion, int maximumVersion)
internal bool IsUnrestricted(SecurityElement se)
internal void ThrowInvalidPermission(IPermission target, Type expected)
}
internal System.Data.Common.RecordCache : object {
private int MIN_CACHE_SIZE
private Stack _records
private int _nextFreeIndex
private int _currentCapacity
private DataTable _table
private DataRow[] _rowsToRecords
internal int CurrentCapacity
internal DataRow Item
internal void .ctor(DataTable table)
internal int get_CurrentCapacity()
internal DataRow get_Item(int index)
internal void set_Item(int index, DataRow value)
internal int NewRecord()
internal void DisposeRecord(int index)
internal int CopyRecord(DataTable fromTable, int fromRecordIndex, int toRecordIndex)
internal void ReadIDataRecord(int recordIndex, IDataRecord record, Int32[] mapping, int length)
}
public System.Data.Common.RowUpdatedEventArgs : EventArgs {
private DataRow dataRow
private IDbCommand command
private StatementType statementType
private DataTableMapping tableMapping
private Exception errors
private UpdateStatus status
private int recordsAffected
public IDbCommand Command
public Exception Errors
public int RecordsAffected
public DataRow Row
public StatementType StatementType
public UpdateStatus Status
public DataTableMapping TableMapping
public int RowCount
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public IDbCommand get_Command()
public Exception get_Errors()
public void set_Errors(Exception value)
public int get_RecordsAffected()
public DataRow get_Row()
public StatementType get_StatementType()
public UpdateStatus get_Status()
public void set_Status(UpdateStatus value)
public DataTableMapping get_TableMapping()
public int get_RowCount()
public void CopyToRows(DataRow[] array)
public void CopyToRows(DataRow[] array, int arrayIndex)
}
public System.Data.Common.RowUpdatingEventArgs : EventArgs {
private DataRow dataRow
private IDbCommand command
private StatementType statementType
private DataTableMapping tableMapping
private UpdateStatus status
private Exception errors
public IDbCommand Command
public Exception Errors
public DataRow Row
public StatementType StatementType
public UpdateStatus Status
public DataTableMapping TableMapping
protected IDbCommand BaseCommand
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public IDbCommand get_Command()
public void set_Command(IDbCommand value)
public Exception get_Errors()
public void set_Errors(Exception value)
public DataRow get_Row()
public StatementType get_StatementType()
public UpdateStatus get_Status()
public void set_Status(UpdateStatus value)
public DataTableMapping get_TableMapping()
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
internal System.Data.Common.SByteDataContainer : DataContainer {
private SByte[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.SchemaInfo : object {
private string columnName
private string tableName
private string dataTypeName
private bool allowDBNull
private bool isReadOnly
private int ordinal
private int size
private byte precision
private byte scale
private Type fieldType
public bool AllowDBNull
public string ColumnName
public int ColumnOrdinal
public int ColumnSize
public string DataTypeName
public Type FieldType
public byte NumericPrecision
public byte NumericScale
public string TableName
public bool IsReadOnly
public bool get_AllowDBNull()
public void set_AllowDBNull(bool value)
public string get_ColumnName()
public void set_ColumnName(string value)
public int get_ColumnOrdinal()
public void set_ColumnOrdinal(int value)
public int get_ColumnSize()
public void set_ColumnSize(int value)
public string get_DataTypeName()
public void set_DataTypeName(string value)
public Type get_FieldType()
public void set_FieldType(Type value)
public byte get_NumericPrecision()
public void set_NumericPrecision(byte value)
public byte get_NumericScale()
public void set_NumericScale(byte value)
public string get_TableName()
public void set_TableName(string value)
public bool get_IsReadOnly()
public void set_IsReadOnly(bool value)
}
public System.Data.Common.SchemaTableColumn : object {
public string AllowDBNull
public string BaseColumnName
public string BaseSchemaName
public string BaseTableName
public string ColumnName
public string ColumnOrdinal
public string ColumnSize
public string DataType
public string IsAliased
public string IsExpression
public string IsKey
public string IsLong
public string IsUnique
public string NonVersionedProviderType
public string NumericPrecision
public string NumericScale
public string ProviderType
}
public System.Data.Common.SchemaTableOptionalColumn : object {
public string AutoIncrementSeed
public string AutoIncrementStep
public string BaseCatalogName
public string BaseColumnNamespace
public string BaseServerName
public string BaseTableNamespace
public string ColumnMapping
public string DefaultValue
public string Expression
public string IsAutoIncrement
public string IsHidden
public string IsReadOnly
public string IsRowVersion
public string ProviderSpecificDataType
}
internal System.Data.Common.SingleDataContainer : DataContainer {
private Single[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.StringDataContainer : ObjectDataContainer {
private void SetValue(int index, string value)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected int DoCompareValues(int index1, int index2)
}
public System.Data.Common.SupportedJoinOperators : Enum {
public int value__
public SupportedJoinOperators None
public SupportedJoinOperators Inner
public SupportedJoinOperators LeftOuter
public SupportedJoinOperators RightOuter
public SupportedJoinOperators FullOuter
}
internal System.Data.Common.UInt16DataContainer : DataContainer {
private UInt16[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.UInt32DataContainer : DataContainer {
private UInt32[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
internal System.Data.Common.UInt64DataContainer : DataContainer {
private UInt64[] _values
protected object GetValue(int index)
protected void ZeroOut(int index)
protected void SetValue(int index, object value)
protected void SetValueFromSafeDataRecord(int index, ISafeDataRecord record, int field)
protected void DoCopyValue(DataContainer from, int from_index, int to_index)
protected int DoCompareValues(int index1, int index2)
protected void Resize(int size)
internal long GetInt64(int index)
}
public System.Data.ConflictOption : Enum {
public int value__
public ConflictOption CompareAllSearchableValues
public ConflictOption CompareRowVersion
public ConflictOption OverwriteChanges
}
public System.Data.ConnectionState : Enum {
public int value__
public ConnectionState Closed
public ConnectionState Open
public ConnectionState Connecting
public ConnectionState Executing
public ConnectionState Fetching
public ConnectionState Broken
}
public System.Data.Constraint : object {
private object beforeConstraintNameChange
private EventHandlerList events
private string _constraintName
private PropertyCollection _properties
private Index _index
private ConstraintCollection _constraintCollection
private DataSet dataSet
private bool initInProgress
protected internal DataSet _DataSet
public string ConstraintName
public PropertyCollection ExtendedProperties
public DataTable Table
internal ConstraintCollection ConstraintCollection
internal bool InitInProgress
internal Index Index
internal void add_BeforeConstraintNameChange(DelegateConstraintNameChange value)
internal void remove_BeforeConstraintNameChange(DelegateConstraintNameChange value)
protected internal DataSet get__DataSet()
public string get_ConstraintName()
public void set_ConstraintName(string value)
public PropertyCollection get_ExtendedProperties()
public DataTable get_Table()
internal ConstraintCollection get_ConstraintCollection()
internal void set_ConstraintCollection(ConstraintCollection value)
private void _onConstraintNameChange(string newName)
internal void AddToConstraintCollectionSetup(ConstraintCollection collection)
internal bool IsConstraintViolated()
internal void ThrowConstraintException()
internal bool get_InitInProgress()
internal void set_InitInProgress(bool value)
internal void FinishInit(DataTable table)
internal void AssertConstraint()
internal void AssertConstraint(DataRow row)
internal void RollbackAssert(DataRow row)
internal void RemoveFromConstraintCollectionCleanup(ConstraintCollection collection)
protected void CheckStateForProperty()
protected internal void SetDataSet(DataSet dataSet)
internal void SetExtendedProperties(PropertyCollection properties)
internal Index get_Index()
internal void set_Index(Index value)
internal bool IsColumnContained(DataColumn column)
internal bool CanRemoveFromCollection(ConstraintCollection col, bool shouldThrow)
public string ToString()
}
public System.Data.ConstraintCollection : InternalDataCollectionBase {
private DataTable table
private Constraint[] _mostRecentConstraints
private CollectionChangeEventHandler CollectionChanged
internal DataTable Table
public Constraint Item
public Constraint Item
protected ArrayList List
internal void .ctor(DataTable table)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
internal DataTable get_Table()
public Constraint get_Item(string name)
public Constraint get_Item(int index)
private void _handleBeforeConstraintNameChange(object sender, string newName)
private bool _isDuplicateConstraintName(string constraintName, Constraint excludeFromComparison)
private string _createNewConstraintName()
public void Add(Constraint constraint)
public Constraint Add(string name, DataColumn column, bool primaryKey)
public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn)
public Constraint Add(string name, DataColumn[] columns, bool primaryKey)
public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns)
public void AddRange(Constraint[] constraints)
internal void PostAddRange()
public bool CanRemove(Constraint constraint)
public void Clear()
public bool Contains(string name)
public int IndexOf(Constraint constraint)
public int IndexOf(string constraintName)
public void Remove(Constraint constraint)
public void Remove(string name)
public void RemoveAt(int index)
protected ArrayList get_List()
internal void OnCollectionChanged(CollectionChangeEventArgs ccevent)
public void CopyTo(Constraint[] array, int index)
}
internal System.Data.ConstraintConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.ConstraintException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.ConstraintStructure : object {
public string TableName
public String[] Columns
public Boolean[] IsAttribute
public string ConstraintName
public bool IsPrimaryKey
public string ReferName
public bool IsNested
public bool IsConstraintOnly
public void .ctor(string tname, String[] cols, Boolean[] isAttr, string cname, bool isPK, string refName, bool isNested, bool isConstraintOnly)
}
internal System.Data.CustomDataClassGenerator : object {
public void CreateDataSetClasses(DataSet ds, CodeNamespace cns, ICodeGenerator gen, ClassGeneratorOptions options)
public void CreateDataSetClasses(DataSet ds, CodeNamespace cns, CodeDomProvider codeProvider, ClassGeneratorOptions options)
public void CreateDataSetClasses(DataSet ds, CodeCompileUnit cunit, CodeNamespace cns, CodeDomProvider codeProvider, ClassGeneratorOptions options)
public string MakeSafeName(string name, ICodeGenerator codeGen)
public string MakeSafeName(string name, CodeDomProvider provider)
public string MakeSafeNameInternal(string name)
}
internal System.Data.DataCategoryAttribute : CategoryAttribute {
public void .ctor(string category)
protected string GetLocalizedString(string value)
}
public System.Data.DataColumn : MarshalByValueComponent {
private EventHandlerList _eventHandlers
private object _propertyChangedKey
private bool _allowDBNull
private bool _autoIncrement
private long _autoIncrementSeed
private long _autoIncrementStep
private long _nextAutoIncrementValue
private string _caption
private MappingType _columnMapping
private string _columnName
private object _defaultValue
private string _expression
private IExpression _compiledExpression
private PropertyCollection _extendedProperties
private int _maxLength
private string _nameSpace
private int _ordinal
private string _prefix
private bool _readOnly
private DataTable _table
private bool _unique
private DataContainer _dataContainer
private DataSetDateTime _datetimeMode
internal object Item
public DataSetDateTime DateTimeMode
public bool AllowDBNull
public bool AutoIncrement
public long AutoIncrementSeed
public long AutoIncrementStep
public string Caption
public MappingType ColumnMapping
public string ColumnName
public Type DataType
public object DefaultValue
public string Expression
internal IExpression CompiledExpression
public PropertyCollection ExtendedProperties
public int MaxLength
public string Namespace
public int Ordinal
public string Prefix
public bool ReadOnly
public DataTable Table
public bool Unique
internal DataContainer DataContainer
public void .ctor(string columnName)
public void .ctor(string columnName, Type dataType)
public void .ctor(string columnName, Type dataType, string expr)
public void .ctor(string columnName, Type dataType, string expr, MappingType type)
internal void add_PropertyChanged(PropertyChangedEventHandler value)
internal void remove_PropertyChanged(PropertyChangedEventHandler value)
internal object get_Item(int index)
internal void set_Item(int index, object value)
public DataSetDateTime get_DateTimeMode()
public void set_DateTimeMode(DataSetDateTime value)
public bool get_AllowDBNull()
public void set_AllowDBNull(bool value)
public bool get_AutoIncrement()
public void set_AutoIncrement(bool value)
public long get_AutoIncrementSeed()
public void set_AutoIncrementSeed(long value)
public long get_AutoIncrementStep()
public void set_AutoIncrementStep(long value)
internal void UpdateAutoIncrementValue(long value64)
internal long AutoIncrementValue()
internal long GetAutoIncrementValue()
internal void SetDefaultValue(int index)
public string get_Caption()
public void set_Caption(string value)
public MappingType get_ColumnMapping()
public void set_ColumnMapping(MappingType value)
public string get_ColumnName()
public void set_ColumnName(string value)
public Type get_DataType()
public void set_DataType(Type value)
public object get_DefaultValue()
public void set_DefaultValue(object value)
private void SetDefaultValue(object value, bool forcedTypeCheck)
public string get_Expression()
public void set_Expression(string value)
internal IExpression get_CompiledExpression()
public PropertyCollection get_ExtendedProperties()
internal void set_ExtendedProperties(PropertyCollection value)
public int get_MaxLength()
public void set_MaxLength(int value)
public string get_Namespace()
public void set_Namespace(string value)
public int get_Ordinal()
internal void set_Ordinal(int value)
public void SetOrdinal(int ordinal)
public string get_Prefix()
public void set_Prefix(string value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public DataTable get_Table()
internal void set_Table(DataTable value)
public bool get_Unique()
public void set_Unique(bool value)
internal DataContainer get_DataContainer()
internal bool CanAutoIncrement(Type type)
internal DataColumn Clone()
internal void SetUnique()
internal void AssertCanAddToCollection()
protected internal void CheckNotAllowNull()
protected void CheckUnique()
protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected internal void RaisePropertyChanging(string name)
public string ToString()
internal void SetTable(DataTable table)
internal bool AreColumnSetsTheSame(DataColumn[] columnSet, DataColumn[] compareSet)
internal int CompareValues(int index1, int index2)
private DataRelation GetParentRelation()
private DataRelation GetChildRelation()
internal void ResetColumnInfo()
internal bool DataTypeMatches(DataColumn col)
internal object GetDefaultValueForType(Type type)
}
public System.Data.DataColumnChangeEventArgs : EventArgs {
private DataColumn _column
private DataRow _row
private object _proposedValue
public DataColumn Column
public object ProposedValue
public DataRow Row
public void .ctor(DataRow row, DataColumn column, object value)
public DataColumn get_Column()
public object get_ProposedValue()
public void set_ProposedValue(object value)
public DataRow get_Row()
internal void Initialize(DataRow row, DataColumn column, object value)
}
public System.Data.DataColumnChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataColumnChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataColumnCollection : InternalDataCollectionBase {
private Hashtable columnNameCount
private Hashtable columnFromName
private ArrayList autoIncrement
private int defaultColumnIndex
private DataTable parentTable
private DataColumn[] _mostRecentColumns
private string ColumnPrefix
private String[] TenColumns
private CollectionChangeEventHandler CollectionChanged
private CollectionChangeEventHandler CollectionMetaDataChanged
public DataColumn Item
public DataColumn Item
protected ArrayList List
internal ArrayList AutoIncrmentColumns
internal void .ctor(DataTable table)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
internal void add_CollectionMetaDataChanged(CollectionChangeEventHandler value)
internal void remove_CollectionMetaDataChanged(CollectionChangeEventHandler value)
public DataColumn get_Item(int index)
public DataColumn get_Item(string name)
protected ArrayList get_List()
internal ArrayList get_AutoIncrmentColumns()
public DataColumn Add()
public void CopyTo(DataColumn[] array, int index)
internal void RegisterName(string name, DataColumn column)
internal void UnregisterName(string name)
private string GetNextDefaultColumnName()
private string MakeName(int index)
public void Add(DataColumn column)
public DataColumn Add(string columnName)
public DataColumn Add(string columnName, Type type)
public DataColumn Add(string columnName, Type type, string expression)
public void AddRange(DataColumn[] columns)
private string GetColumnDependency(DataColumn column)
public bool CanRemove(DataColumn column)
public void Clear()
public bool Contains(string name)
public int IndexOf(DataColumn column)
public int IndexOf(string columnName)
internal void OnCollectionChanged(CollectionChangeEventArgs ccevent)
internal void OnCollectionChanging(CollectionChangeEventArgs ccevent)
public void Remove(DataColumn column)
public void Remove(string name)
public void RemoveAt(int index)
internal void PostAddRange()
internal void UpdateAutoIncrement(DataColumn col, bool isAutoIncrement)
private int IndexOf(string name, bool error)
private void OnCollectionMetaDataChanged(CollectionChangeEventArgs ccevent)
private void ColumnPropertyChanged(object sender, PropertyChangedEventArgs args)
internal void MoveColumn(int oldOrdinal, int newOrdinal)
}
internal System.Data.DataColumnPropertyDescriptor : PropertyDescriptor {
private bool readOnly
private Type componentType
private Type propertyType
private bool browsable
private int columnIndex
public Type ComponentType
public bool IsReadOnly
public bool IsBrowsable
public Type PropertyType
public void .ctor(string name, int columnIndex, Attribute[] attrs)
public void .ctor(DataColumn dc)
public void SetReadOnly(bool value)
public void SetComponentType(Type type)
public void SetPropertyType(Type type)
public void SetBrowsable(bool browsable)
public object GetValue(object component)
public void SetValue(object component, object value)
public void ResetValue(object component)
public bool CanResetValue(object component)
public bool ShouldSerializeValue(object component)
public Type get_ComponentType()
public bool get_IsReadOnly()
public bool get_IsBrowsable()
public Type get_PropertyType()
}
public System.Data.DataException : SystemException {
public void .ctor(string s)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string s, Exception innerException)
}
public System.Data.DataRelation : object {
private DataSet dataSet
private string relationName
private UniqueConstraint parentKeyConstraint
private ForeignKeyConstraint childKeyConstraint
private DataColumn[] parentColumns
private DataColumn[] childColumns
private bool nested
internal bool createConstraints
private bool initFinished
private PropertyCollection extendedProperties
private PropertyChangedEventHandler onPropertyChangingDelegate
private string _relationName
private string _parentTableName
private string _childTableName
private String[] _parentColumnNames
private String[] _childColumnNames
private bool _nested
private bool initInProgress
private string _parentTableNameSpace
private string _childTableNameSpace
internal bool InitInProgress
public DataColumn[] ChildColumns
public ForeignKeyConstraint ChildKeyConstraint
public DataTable ChildTable
public DataSet DataSet
public PropertyCollection ExtendedProperties
public bool Nested
public DataColumn[] ParentColumns
public UniqueConstraint ParentKeyConstraint
public DataTable ParentTable
public string RelationName
public void .ctor(string relationName, DataColumn parentColumn, DataColumn childColumn)
public void .ctor(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints)
public void .ctor(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints)
public void .ctor(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested)
public void .ctor(string relationName, string parentTableName, string parentTableNameSpace, string childTableName, string childTableNameSpace, String[] parentColumnNames, String[] childColumnNames, bool nested)
internal bool get_InitInProgress()
internal void set_InitInProgress(bool value)
internal void FinishInit(DataSet ds)
public DataColumn[] get_ChildColumns()
public ForeignKeyConstraint get_ChildKeyConstraint()
internal void SetChildKeyConstraint(ForeignKeyConstraint foreignKeyConstraint)
public DataTable get_ChildTable()
public DataSet get_DataSet()
public PropertyCollection get_ExtendedProperties()
public bool get_Nested()
public void set_Nested(bool value)
public DataColumn[] get_ParentColumns()
public UniqueConstraint get_ParentKeyConstraint()
internal void SetParentKeyConstraint(UniqueConstraint uniqueConstraint)
internal void SetDataSet(DataSet ds)
public DataTable get_ParentTable()
public string get_RelationName()
public void set_RelationName(string value)
protected void CheckStateForProperty()
protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected internal void RaisePropertyChanging(string name)
public string ToString()
internal void UpdateConstraints()
private bool CompareDataColumns(DataColumn[] dc1, DataColumn[] dc2)
private ForeignKeyConstraint FindForeignKey(ConstraintCollection cl)
private UniqueConstraint FindUniqueConstraint(ConstraintCollection cl)
internal bool Contains(DataColumn column)
}
public System.Data.DataRelationCollection : InternalDataCollectionBase {
private DataRelation inTransition
private int index
private CollectionChangeEventHandler CollectionChanged
public DataRelation Item
public DataRelation Item
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
public DataRelation get_Item(string name)
public DataRelation get_Item(int index)
private string GetNextDefaultRelationName()
public void Add(DataRelation relation)
private string GenerateRelationName()
public DataRelation Add(DataColumn parentColumn, DataColumn childColumn)
public DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns)
public DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn)
public DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns)
public DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints)
public DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints)
protected void AddCore(DataRelation relation)
public void AddRange(DataRelation[] relations)
internal void PostAddRange()
public bool CanRemove(DataRelation relation)
public void Clear()
public bool Contains(string name)
private CollectionChangeEventArgs CreateCollectionChangeEvent(CollectionChangeAction action)
protected DataSet GetDataSet()
public int IndexOf(DataRelation relation)
public int IndexOf(string relationName)
private int IndexOf(string name, bool error)
protected void OnCollectionChanged(CollectionChangeEventArgs ccevent)
protected void OnCollectionChanging(CollectionChangeEventArgs ccevent)
public void Remove(DataRelation relation)
public void Remove(string name)
public void RemoveAt(int index)
protected void RemoveCore(DataRelation relation)
public void CopyTo(DataRelation[] array, int index)
internal void BinarySerialize(SerializationInfo si)
}
internal System.Data.DataRelationPropertyDescriptor : PropertyDescriptor {
private DataRelation _relation
public Type ComponentType
public bool IsReadOnly
public Type PropertyType
public DataRelation Relation
internal void .ctor(DataRelation relation)
public Type get_ComponentType()
public bool get_IsReadOnly()
public Type get_PropertyType()
public DataRelation get_Relation()
public bool CanResetValue(object obj)
public bool Equals(object obj)
public int GetHashCode()
public object GetValue(object obj)
public void ResetValue(object obj)
public void SetValue(object obj, object val)
public bool ShouldSerializeValue(object obj)
}
public System.Data.DataRow : object {
private DataTable _table
internal int _original
internal int _current
internal int _proposed
private ArrayList _columnErrors
private string rowError
internal int xmlRowID
internal bool _nullConstraintViolation
private string _nullConstraintMessage
private bool _inChangingEvent
private int _rowId
internal bool _rowChanged
private XmlDataElement mappedElement
internal bool _inExpressionEvaluation
private ArrayList ColumnErrors
public bool HasErrors
public object Item
public object Item
public object Item
public object Item
public object Item
public object Item
public Object[] ItemArray
public DataRowState RowState
public DataTable Table
internal int XmlRowID
internal int RowID
internal int Original
internal int Current
internal int Proposed
public string RowError
internal XmlDataElement DataElement
protected internal void .ctor(DataRowBuilder builder)
internal void .ctor(DataTable table, int rowId)
private ArrayList get_ColumnErrors()
private void set_ColumnErrors(ArrayList value)
public bool get_HasErrors()
public object get_Item(string columnName)
public void set_Item(string columnName, object value)
public object get_Item(DataColumn column)
public void set_Item(DataColumn column, object value)
public object get_Item(int columnIndex)
public void set_Item(int columnIndex, object value)
public object get_Item(string columnName, DataRowVersion version)
public object get_Item(DataColumn column, DataRowVersion version)
internal void SetValue(int column, object value, int version)
public object get_Item(int columnIndex, DataRowVersion version)
public Object[] get_ItemArray()
public void set_ItemArray(Object[] value)
public DataRowState get_RowState()
internal void set_RowState(DataRowState value)
public void SetAdded()
public void SetModified()
public DataTable get_Table()
internal void set_Table(DataTable value)
internal int get_XmlRowID()
internal void set_XmlRowID(int value)
internal int get_RowID()
internal void set_RowID(int value)
internal int get_Original()
internal void set_Original(int value)
internal int get_Current()
internal void set_Current(int value)
internal int get_Proposed()
internal void set_Proposed(int value)
internal void AttachAt(int row_id, DataRowAction action)
private void Detach()
internal void ImportRecord(int record)
private void CheckValue(object v, DataColumn col)
private void CheckValue(object v, DataColumn col, bool doROCheck)
public string get_RowError()
public void set_RowError(string value)
internal int IndexFromVersion(DataRowVersion version)
private int AssertValidVersionIndex(DataRowVersion version, int index)
internal DataRowVersion VersionFromIndex(int index)
internal XmlDataElement get_DataElement()
internal void set_DataElement(XmlDataElement value)
internal void SetOriginalValue(string columnName, object val)
public void AcceptChanges()
public void BeginEdit()
public void CancelEdit()
public void ClearErrors()
public void Delete()
private void CheckChildRows(DataRowAction action)
private void CheckChildRows(ForeignKeyConstraint fkc, DataRowAction action, Rule rule)
public void EndEdit()
public DataRow[] GetChildRows(DataRelation relation)
public DataRow[] GetChildRows(string relationName)
public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version)
public DataRow[] GetChildRows(string relationName, DataRowVersion version)
private DataRow[] GetChildRows(ForeignKeyConstraint fkc, DataRowVersion version)
public string GetColumnError(DataColumn column)
public string GetColumnError(int columnIndex)
public string GetColumnError(string columnName)
public DataColumn[] GetColumnsInError()
public DataRow GetParentRow(DataRelation relation)
public DataRow GetParentRow(string relationName)
public DataRow GetParentRow(DataRelation relation, DataRowVersion version)
public DataRow GetParentRow(string relationName, DataRowVersion version)
public DataRow[] GetParentRows(DataRelation relation)
public DataRow[] GetParentRows(string relationName)
public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version)
public DataRow[] GetParentRows(string relationName, DataRowVersion version)
public bool HasVersion(DataRowVersion version)
public bool IsNull(DataColumn column)
public bool IsNull(int columnIndex)
public bool IsNull(string columnName)
public bool IsNull(DataColumn column, DataRowVersion version)
internal bool IsNullColumns(DataColumn[] columns)
public void RejectChanges()
public void SetColumnError(DataColumn column, string error)
public void SetColumnError(int columnIndex, string error)
public void SetColumnError(string columnName, string error)
protected void SetNull(DataColumn column)
public void SetParentRow(DataRow parentRow)
public void SetParentRow(DataRow parentRow, DataRelation relation)
internal void CopyValuesToRow(DataRow row)
internal void MergeValuesToRow(DataRow row, bool preserveChanges)
internal void CopyErrors(DataRow row)
internal bool IsRowChanged(DataRowState rowState)
internal void Validate()
private void AssertConstraints()
internal void CheckNullConstraints()
internal void CheckReadOnlyStatus()
internal void Load(Object[] values, LoadOption loadOption)
}
public System.Data.DataRowAction : Enum {
public int value__
public DataRowAction Add
public DataRowAction Change
public DataRowAction ChangeCurrentAndOriginal
public DataRowAction ChangeOriginal
public DataRowAction Commit
public DataRowAction Delete
public DataRowAction Nothing
public DataRowAction Rollback
}
public System.Data.DataRowBuilder : object {
private DataTable table
internal int _rowId
internal DataTable Table
internal void .ctor(DataTable table, int rowID, int y)
internal DataTable get_Table()
}
public System.Data.DataRowChangeEventArgs : EventArgs {
private DataRow row
private DataRowAction action
public DataRowAction Action
public DataRow Row
public void .ctor(DataRow row, DataRowAction action)
public DataRowAction get_Action()
public DataRow get_Row()
}
public System.Data.DataRowChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataRowChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataRowCollection : InternalDataCollectionBase {
private DataTable table
private ListChangedEventHandler ListChanged
public DataRow Item
public int Count
internal void .ctor(DataTable table)
internal void add_ListChanged(ListChangedEventHandler value)
internal void remove_ListChanged(ListChangedEventHandler value)
public DataRow get_Item(int index)
public void Add(DataRow row)
public int IndexOf(DataRow row)
internal void AddInternal(DataRow row)
internal void AddInternal(DataRow row, DataRowAction action)
public DataRow Add(Object[] values)
public void Clear()
public bool Contains(object key)
public bool Contains(Object[] keys)
public DataRow Find(object key)
public DataRow Find(Object[] keys)
internal DataRow Find(Object[] keys, DataViewRowState rowStateFilter)
public void InsertAt(DataRow row, int pos)
internal void RemoveInternal(DataRow row)
public void Remove(DataRow row)
public void RemoveAt(int index)
internal void OnListChanged(object sender, ListChangedEventArgs args)
public int get_Count()
public void CopyTo(DataRow[] array, int index)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
}
public System.Data.DataRowState : Enum {
public int value__
public DataRowState Detached
public DataRowState Unchanged
public DataRowState Added
public DataRowState Deleted
public DataRowState Modified
}
public System.Data.DataRowVersion : Enum {
public int value__
public DataRowVersion Original
public DataRowVersion Current
public DataRowVersion Proposed
public DataRowVersion Default
}
public System.Data.DataRowView : object {
private DataView _dataView
private DataRow _dataRow
private int _index
private PropertyChangedEventHandler PropertyChanged
private string System.ComponentModel.IDataErrorInfo.Error
private string System.ComponentModel.IDataErrorInfo.Item
public DataView DataView
public bool IsEdit
public bool IsNew
public object Item
public object Item
public DataRow Row
public DataRowVersion RowVersion
internal int Index
internal void .ctor(DataView dataView, DataRow row, int index)
public void add_PropertyChanged(PropertyChangedEventHandler value)
public void remove_PropertyChanged(PropertyChangedEventHandler value)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties()
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
private string System.ComponentModel.IDataErrorInfo.get_Error()
private string System.ComponentModel.IDataErrorInfo.get_Item(string colName)
public bool Equals(object other)
public void BeginEdit()
public void CancelEdit()
public DataView CreateChildView(DataRelation relation)
public DataView CreateChildView(string relationName)
public void Delete()
public void EndEdit()
private void CheckAllowEdit()
public DataView get_DataView()
public bool get_IsEdit()
public bool get_IsNew()
public object get_Item(string property)
public void set_Item(string property, object value)
public object get_Item(int ndx)
public void set_Item(int ndx, object value)
private DataRowVersion GetActualRowVersion()
public DataRow get_Row()
public DataRowVersion get_RowVersion()
public int GetHashCode()
internal int get_Index()
private void OnPropertyChanged(string propertyName)
}
public System.Data.DataSet : MarshalByValueComponent {
private string dataSetName
private string _namespace
private string prefix
private bool caseSensitive
private bool enforceConstraints
private DataTableCollection tableCollection
private DataRelationCollection relationCollection
private PropertyCollection properties
private DataViewManager defaultView
private CultureInfo locale
internal XmlDataDocument _xmlDataDocument
internal TableAdapterSchemaInfo tableAdapterSchemaInfo
private bool initInProgress
private bool dataSetInitialized
private SerializationFormat remotingFormat
private MergeFailedEventHandler MergeFailed
private EventHandler Initialized
private bool System.ComponentModel.IListSource.ContainsListCollection
public bool CaseSensitive
public string DataSetName
public DataViewManager DefaultViewManager
public bool EnforceConstraints
public PropertyCollection ExtendedProperties
public bool HasErrors
public CultureInfo Locale
internal bool LocaleSpecified
internal TableAdapterSchemaInfo TableAdapterSchemaData
public string Namespace
public string Prefix
public DataRelationCollection Relations
public ISite Site
public DataTableCollection Tables
internal bool InitInProgress
public SerializationFormat RemotingFormat
public bool IsInitialized
public SchemaSerializationMode SchemaSerializationMode
public void .ctor(string dataSetName)
protected void .ctor(SerializationInfo info, StreamingContext context)
protected void .ctor(SerializationInfo info, StreamingContext context, bool constructSchema)
public void add_MergeFailed(MergeFailedEventHandler value)
public void remove_MergeFailed(MergeFailedEventHandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
private IList System.ComponentModel.IListSource.GetList()
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
public bool get_CaseSensitive()
public void set_CaseSensitive(bool value)
public string get_DataSetName()
public void set_DataSetName(string value)
public DataViewManager get_DefaultViewManager()
public bool get_EnforceConstraints()
public void set_EnforceConstraints(bool value)
public PropertyCollection get_ExtendedProperties()
public bool get_HasErrors()
public CultureInfo get_Locale()
public void set_Locale(CultureInfo value)
internal bool get_LocaleSpecified()
internal TableAdapterSchemaInfo get_TableAdapterSchemaData()
internal void InternalEnforceConstraints(bool value, bool resetIndexes)
public void Merge(DataRow[] rows)
public void Merge(DataSet dataSet)
public void Merge(DataTable table)
public void Merge(DataSet dataSet, bool preserveChanges)
public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction)
public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction)
public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction)
private bool IsLegalSchemaAction(MissingSchemaAction missingSchemaAction)
public string get_Namespace()
public void set_Namespace(string value)
public string get_Prefix()
public void set_Prefix(string value)
public DataRelationCollection get_Relations()
public ISite get_Site()
public void set_Site(ISite value)
public DataTableCollection get_Tables()
public void AcceptChanges()
public void Clear()
public DataSet Clone()
public DataSet Copy()
private void CopyProperties(DataSet Copy)
private void CopyRelations(DataSet Copy)
public DataSet GetChanges()
public DataSet GetChanges(DataRowState rowStates)
private void AddChangedRow(Hashtable addedRows, DataTable copyTable, DataRow row)
public string GetXml()
public string GetXmlSchema()
public bool HasChanges()
public bool HasChanges(DataRowState rowStates)
public void InferXmlSchema(XmlReader reader, String[] nsArray)
private void InferXmlSchema(XmlDocument doc, String[] nsArray)
public void InferXmlSchema(Stream stream, String[] nsArray)
public void InferXmlSchema(TextReader reader, String[] nsArray)
public void InferXmlSchema(string fileName, String[] nsArray)
public void RejectChanges()
public void Reset()
public void WriteXml(Stream stream)
public void WriteXml(string fileName)
public void WriteXml(TextWriter writer)
public void WriteXml(XmlWriter writer)
public void WriteXml(string fileName, XmlWriteMode mode)
public void WriteXml(Stream stream, XmlWriteMode mode)
public void WriteXml(TextWriter writer, XmlWriteMode mode)
public void WriteXml(XmlWriter writer, XmlWriteMode mode)
public void WriteXmlSchema(Stream stream)
public void WriteXmlSchema(string fileName)
public void WriteXmlSchema(TextWriter writer)
public void WriteXmlSchema(XmlWriter writer)
public void ReadXmlSchema(Stream stream)
public void ReadXmlSchema(string fileName)
public void ReadXmlSchema(TextReader reader)
public void ReadXmlSchema(XmlReader reader)
public XmlReadMode ReadXml(Stream stream)
public XmlReadMode ReadXml(string fileName)
public XmlReadMode ReadXml(TextReader reader)
public XmlReadMode ReadXml(XmlReader reader)
public XmlReadMode ReadXml(Stream stream, XmlReadMode mode)
public XmlReadMode ReadXml(string fileName, XmlReadMode mode)
public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode)
public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode)
internal bool get_InitInProgress()
internal void set_InitInProgress(bool value)
public void BeginInit()
public void EndInit()
public void GetObjectData(SerializationInfo info, StreamingContext context)
protected void GetSerializationData(SerializationInfo info, StreamingContext context)
protected XmlSchema GetSchemaSerializable()
protected void ReadXmlSerializable(XmlReader reader)
protected bool ShouldSerializeRelations()
protected bool ShouldSerializeTables()
protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected void OnRemoveRelation(DataRelation relation)
protected void OnRemoveTable(DataTable table)
internal void OnMergeFailed(MergeFailedEventArgs e)
protected internal void RaisePropertyChanging(string name)
internal string WriteObjectXml(object o)
private void WriteTables(XmlWriter writer, XmlWriteMode mode, DataTableCollection tableCollection, DataRowVersion version)
internal void WriteTable(XmlWriter writer, DataTable table, XmlWriteMode mode, DataRowVersion version)
internal void WriteTable(XmlWriter writer, DataRow[] rows, XmlWriteMode mode, DataRowVersion version, bool skipIfNested)
internal void WriteColumnAsElement(XmlWriter writer, XmlWriteMode mode, DataColumn col, DataRow row, DataRowVersion version)
internal void WriteColumnAsAttribute(XmlWriter writer, XmlWriteMode mode, DataColumn col, DataRow row, DataRowVersion version)
internal void WriteTableElement(XmlWriter writer, XmlWriteMode mode, DataTable table, DataRow row, DataRowVersion version)
internal void WriteStartElement(XmlWriter writer, XmlWriteMode mode, string nspc, string prefix, string name)
internal void WriteAttributeString(XmlWriter writer, XmlWriteMode mode, string nspc, string prefix, string name, string stringValue)
internal void WriteIndividualTableContent(XmlWriter writer, DataTable table, XmlWriteMode mode)
private void DoWriteXmlSchema(XmlWriter writer)
internal void SplitColumns(DataTable table, ArrayList& atts, ArrayList& elements, DataColumn& simple)
internal void WriteDiffGramElement(XmlWriter writer)
private void SetRowsID()
public SerializationFormat get_RemotingFormat()
public void set_RemotingFormat(SerializationFormat value)
public bool get_IsInitialized()
public SchemaSerializationMode get_SchemaSerializationMode()
public void set_SchemaSerializationMode(SchemaSerializationMode value)
public DataTableReader CreateDataReader(DataTable[] dataTables)
public DataTableReader CreateDataReader()
public XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet)
public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables)
public void Load(IDataReader reader, LoadOption loadOption, String[] tables)
public void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables)
private void BinarySerialize(SerializationInfo si)
private void BinaryDeserialize(SerializationInfo info)
private void OnDataSetInitialized(EventArgs e)
private void DataSetInitialized()
protected void InitializeDerivedDataSet()
protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader)
protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context)
protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context)
}
public System.Data.DataSetDateTime : Enum {
public int value__
public DataSetDateTime Local
public DataSetDateTime Unspecified
public DataSetDateTime UnspecifiedLocal
public DataSetDateTime Utc
}
public System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
private string description
public string Description
public void .ctor(string description)
public string get_Description()
}
public System.Data.DataTable : MarshalByValueComponent {
internal DataSet dataSet
private bool _caseSensitive
private DataColumnCollection _columnCollection
private ConstraintCollection _constraintCollection
private DataView _defaultView
private string _displayExpression
private PropertyCollection _extendedProperties
private bool _hasErrors
private CultureInfo _locale
private int _minimumCapacity
private string _nameSpace
private DataRelationCollection _childRelations
private DataRelationCollection _parentRelations
private string _prefix
private UniqueConstraint _primaryKeyConstraint
private DataRowCollection _rows
private ISite _site
private string _tableName
private bool _containsListCollection
private string _encodedTableName
internal bool _duringDataLoad
internal bool _nullConstraintViolationDuringDataLoad
private bool dataSetPrevEnforceConstraints
private bool dataTablePrevEnforceConstraints
private bool enforceConstraints
private DataRowBuilder _rowBuilder
private ArrayList _indexes
private RecordCache _recordCache
private int _defaultValuesRowIndex
protected internal bool fInitInProgress
private bool _virginCaseSensitive
private PropertyDescriptorCollection _propertyDescriptorsCache
private DataColumn[] _emptyColumnArray
private Regex SortRegex
private DataColumn[] _latestPrimaryKeyCols
private DataRow[] empty_rows
private bool tableInitialized
private SerializationFormat remotingFormat
private DataColumnChangeEventHandler ColumnChanged
private DataColumnChangeEventHandler ColumnChanging
private DataRowChangeEventHandler RowChanged
private DataRowChangeEventHandler RowChanging
private DataRowChangeEventHandler RowDeleted
private DataRowChangeEventHandler RowDeleting
private EventHandler Initialized
private DataTableClearEventHandler TableCleared
private DataTableClearEventHandler TableClearing
private DataTableNewRowEventHandler TableNewRow
private bool System.ComponentModel.IListSource.ContainsListCollection
public bool CaseSensitive
internal ArrayList Indexes
public DataRelationCollection ChildRelations
public DataColumnCollection Columns
public ConstraintCollection Constraints
public DataSet DataSet
public DataView DefaultView
public string DisplayExpression
public PropertyCollection ExtendedProperties
public bool HasErrors
public CultureInfo Locale
internal bool LocaleSpecified
public int MinimumCapacity
public string Namespace
public DataRelationCollection ParentRelations
public string Prefix
public DataColumn[] PrimaryKey
internal UniqueConstraint PrimaryKeyConstraint
public DataRowCollection Rows
public ISite Site
public string TableName
internal RecordCache RecordCache
private DataRowBuilder RowBuilder
internal bool EnforceConstraints
internal bool InitInProgress
internal int DefaultValuesRowIndex
public bool IsInitialized
public SerializationFormat RemotingFormat
public void .ctor(string tableName)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string tableName, string tbNamespace)
public void add_ColumnChanged(DataColumnChangeEventHandler value)
public void remove_ColumnChanged(DataColumnChangeEventHandler value)
public void add_ColumnChanging(DataColumnChangeEventHandler value)
public void remove_ColumnChanging(DataColumnChangeEventHandler value)
public void add_RowChanged(DataRowChangeEventHandler value)
public void remove_RowChanged(DataRowChangeEventHandler value)
public void add_RowChanging(DataRowChangeEventHandler value)
public void remove_RowChanging(DataRowChangeEventHandler value)
public void add_RowDeleted(DataRowChangeEventHandler value)
public void remove_RowDeleted(DataRowChangeEventHandler value)
public void add_RowDeleting(DataRowChangeEventHandler value)
public void remove_RowDeleting(DataRowChangeEventHandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
public void add_TableCleared(DataTableClearEventHandler value)
public void remove_TableCleared(DataTableClearEventHandler value)
public void add_TableClearing(DataTableClearEventHandler value)
public void remove_TableClearing(DataTableClearEventHandler value)
public void add_TableNewRow(DataTableNewRowEventHandler value)
public void remove_TableNewRow(DataTableNewRowEventHandler value)
private bool System.ComponentModel.IListSource.get_ContainsListCollection()
private IList System.ComponentModel.IListSource.GetList()
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_CaseSensitive()
public void set_CaseSensitive(bool value)
internal ArrayList get_Indexes()
internal void ChangedDataColumn(DataRow dr, DataColumn dc, object pv)
internal void ChangingDataColumn(DataRow dr, DataColumn dc, object pv)
internal void DeletedDataRow(DataRow dr, DataRowAction action)
internal void DeletingDataRow(DataRow dr, DataRowAction action)
internal void ChangedDataRow(DataRow dr, DataRowAction action)
internal void ChangingDataRow(DataRow dr, DataRowAction action)
public DataRelationCollection get_ChildRelations()
public DataColumnCollection get_Columns()
public ConstraintCollection get_Constraints()
internal void set_Constraints(ConstraintCollection value)
public DataSet get_DataSet()
public DataView get_DefaultView()
public string get_DisplayExpression()
public void set_DisplayExpression(string value)
public PropertyCollection get_ExtendedProperties()
public bool get_HasErrors()
public CultureInfo get_Locale()
public void set_Locale(CultureInfo value)
internal bool get_LocaleSpecified()
public int get_MinimumCapacity()
public void set_MinimumCapacity(int value)
public string get_Namespace()
public void set_Namespace(string value)
public DataRelationCollection get_ParentRelations()
public string get_Prefix()
public void set_Prefix(string value)
public DataColumn[] get_PrimaryKey()
public void set_PrimaryKey(DataColumn[] value)
internal UniqueConstraint get_PrimaryKeyConstraint()
public DataRowCollection get_Rows()
public ISite get_Site()
public void set_Site(ISite value)
public string get_TableName()
public void set_TableName(string value)
internal RecordCache get_RecordCache()
private DataRowBuilder get_RowBuilder()
internal bool get_EnforceConstraints()
internal void set_EnforceConstraints(bool value)
internal void AssertNotNullConstraints()
internal bool RowsExist(DataColumn[] columns, DataColumn[] relatedColumns, DataRow row)
private bool RowsExist(DataColumn[] columns, int index)
public void AcceptChanges()
public void BeginInit()
public void BeginLoadData()
public void Clear()
public DataTable Clone()
public object Compute(string expression, string filter)
public DataTable Copy()
internal void CopyRow(DataRow fromRow, DataRow toRow)
private void CopyProperties(DataTable Copy)
private void CopyConstraints(DataTable copy)
public void EndInit()
internal bool get_InitInProgress()
internal void set_InitInProgress(bool value)
internal void FinishInit()
public void EndLoadData()
public DataTable GetChanges()
public DataTable GetChanges(DataRowState rowStates)
public DataRow[] GetErrors()
protected DataTable CreateInstance()
protected Type GetRowType()
public void ImportRow(DataRow row)
internal int get_DefaultValuesRowIndex()
public void GetObjectData(SerializationInfo info, StreamingContext context)
public DataRow LoadDataRow(Object[] values, bool fAcceptChanges)
internal DataRow LoadDataRow(IDataRecord record, Int32[] mapping, int length, bool fAcceptChanges)
public DataRow NewRow()
internal int CreateRecord(Object[] values)
private void EnsureDefaultValueRowIndex()
protected internal DataRow[] NewRowArray(int size)
protected DataRow NewRowFromBuilder(DataRowBuilder builder)
internal DataRow NewNotInitializedRow()
public void RejectChanges()
public void Reset()
public DataRow[] Select()
public DataRow[] Select(string filterExpression)
public DataRow[] Select(string filterExpression, string sort)
public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates)
private void AddIndex(Index index)
internal Index GetIndex(DataColumn[] columns, ListSortDirection[] sort, DataViewRowState rowState, IExpression filter, bool reset)
internal Index GetIndex(DataColumn[] columns, ListSortDirection[] sort, DataViewRowState rowState, IExpression filter, bool reset, bool addIndex)
internal Index FindIndex(DataColumn[] columns)
internal Index FindIndex(DataColumn[] columns, ListSortDirection[] sort, DataViewRowState rowState, IExpression filter)
internal void ResetIndexes()
internal void ResetCaseSensitiveIndexes()
internal void DropIndex(Index index)
internal void DropReferencedIndexes(DataColumn column)
internal void AddRowToIndexes(DataRow row)
internal void DeleteRowFromIndexes(DataRow row)
public string ToString()
protected void OnColumnChanged(DataColumnChangeEventArgs e)
internal void RaiseOnColumnChanged(DataColumnChangeEventArgs e)
protected void OnColumnChanging(DataColumnChangeEventArgs e)
internal void RaiseOnColumnChanging(DataColumnChangeEventArgs e)
protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent)
protected internal void OnRemoveColumn(DataColumn column)
protected void OnRowChanged(DataRowChangeEventArgs e)
protected void OnRowChanging(DataRowChangeEventArgs e)
protected void OnRowDeleted(DataRowChangeEventArgs e)
protected void OnRowDeleting(DataRowChangeEventArgs e)
internal DataColumn[] ParseSortString(DataTable table, string sort, ListSortDirection[]& sortDirections, bool rejectNoResult)
private void UpdatePropertyDescriptorsCache()
internal PropertyDescriptorCollection GetPropertyDescriptorCollection()
internal void ResetPropertyDescriptorsCache()
internal void SetRowsID()
protected XmlSchema GetSchema()
public XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet)
public XmlReadMode ReadXml(Stream stream)
public XmlReadMode ReadXml(string fileName)
public XmlReadMode ReadXml(TextReader reader)
public XmlReadMode ReadXml(XmlReader reader)
public XmlReadMode ReadXml_internal(XmlReader reader, bool serializable)
private void DenyXmlResolving(DataTable table, DataSet ds, XmlReadMode mode, bool isTableNameBlank, bool isPartOfDataSet)
public void ReadXmlSchema(Stream stream)
public void ReadXmlSchema(TextReader reader)
public void ReadXmlSchema(string fileName)
public void ReadXmlSchema(XmlReader reader)
protected void ReadXmlSerializable(XmlReader reader)
private XmlWriterSettings GetWriterSettings()
public void WriteXml(Stream stream)
public void WriteXml(TextWriter writer)
public void WriteXml(XmlWriter writer)
public void WriteXml(string fileName)
public void WriteXml(Stream stream, XmlWriteMode mode)
public void WriteXml(TextWriter writer, XmlWriteMode mode)
public void WriteXml(XmlWriter writer, XmlWriteMode mode)
public void WriteXml(string fileName, XmlWriteMode mode)
public void WriteXml(Stream stream, bool writeHierarchy)
public void WriteXml(string fileName, bool writeHierarchy)
public void WriteXml(TextWriter writer, bool writeHierarchy)
public void WriteXml(XmlWriter writer, bool writeHierarchy)
public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy)
public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy)
private void FindAllChildren(List`1<DataTable> list, DataTable root)
public void WriteXmlSchema(Stream stream)
public void WriteXmlSchema(TextWriter writer)
public void WriteXmlSchema(XmlWriter writer)
public void WriteXmlSchema(string fileName)
public void WriteXmlSchema(Stream stream, bool writeHierarchy)
public void WriteXmlSchema(TextWriter writer, bool writeHierarchy)
public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy)
public void WriteXmlSchema(string fileName, bool writeHierarchy)
public bool get_IsInitialized()
private void OnTableInitialized(EventArgs e)
private void DataTableInitialized()
public SerializationFormat get_RemotingFormat()
public void set_RemotingFormat(SerializationFormat value)
internal void DeserializeConstraints(ArrayList arrayList)
private DataRowState GetCurrentRowState(BitArray rowStateBitArray, int i)
internal void DeserializeRecords(ArrayList arrayList, ArrayList nullBits, BitArray rowStateBitArray)
private void BinaryDeserializeTable(SerializationInfo info)
internal void BinarySerializeProperty(SerializationInfo info)
internal void SerializeConstraints(SerializationInfo info, string prefix)
internal void BinarySerialize(SerializationInfo info, string prefix)
public DataTableReader CreateDataReader()
public void Load(IDataReader reader)
public void Load(IDataReader reader, LoadOption loadOption)
public void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler)
public DataRow LoadDataRow(Object[] values, LoadOption loadOption)
public void Merge(DataTable table)
public void Merge(DataTable table, bool preserveChanges)
public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal int CompareRecords(int x, int y)
protected void OnTableCleared(DataTableClearEventArgs e)
internal void DataTableCleared()
protected void OnTableClearing(DataTableClearEventArgs e)
internal void DataTableClearing()
protected void OnTableNewRow(DataTableNewRowEventArgs e)
private void NewRowAdded(DataRow dr)
}
public System.Data.DataTableClearEventArgs : EventArgs {
private DataTable _table
public DataTable Table
public string TableName
public string TableNamespace
public void .ctor(DataTable table)
public DataTable get_Table()
public string get_TableName()
public string get_TableNamespace()
}
public System.Data.DataTableClearEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataTableClearEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.DataTableCollection : InternalDataCollectionBase {
private DataSet dataSet
private DataTable[] mostRecentTables
private CollectionChangeEventHandler CollectionChanged
private CollectionChangeEventHandler CollectionChanging
public DataTable Item
public DataTable Item
protected ArrayList List
public DataTable Item
internal void .ctor(DataSet dataSet)
public void add_CollectionChanged(CollectionChangeEventHandler value)
public void remove_CollectionChanged(CollectionChangeEventHandler value)
public void add_CollectionChanging(CollectionChangeEventHandler value)
public void remove_CollectionChanging(CollectionChangeEventHandler value)
public DataTable get_Item(int index)
public DataTable get_Item(string name)
protected ArrayList get_List()
public DataTable Add()
public void Add(DataTable table)
public DataTable Add(string name)
public void AddRange(DataTable[] tables)
internal void PostAddRange()
public bool CanRemove(DataTable table)
public void Clear()
public bool Contains(string name)
public int IndexOf(DataTable table)
public int IndexOf(string tableName)
public void Remove(DataTable table)
public void Remove(string name)
public void RemoveAt(int index)
internal void OnCollectionChanging(CollectionChangeEventArgs ccevent)
internal void OnCollectionChanged(CollectionChangeEventArgs ccevent)
private int IndexOf(string name, bool error, int start)
private void NameTable(DataTable Table)
private bool CanRemove(DataTable table, bool throwException)
private void RaiseForeignKeyReferenceException(string table, string constraint)
public DataTable get_Item(string name, string tbNamespace)
public DataTable Add(string name, string tbNamespace)
public bool Contains(string name, string tableNamespace)
public int IndexOf(string tableName, string tableNamespace)
public void Remove(string name, string tableNamespace)
private int IndexOf(string name, string ns, bool error)
private int IndexOf(string name, bool error)
public void CopyTo(DataTable[] array, int index)
internal void BinarySerialize_Schema(SerializationInfo si)
internal void BinarySerialize_Data(SerializationInfo si)
}
public System.Data.DataTableNewRowEventArgs : EventArgs {
private DataRow _row
public DataRow Row
public void .ctor(DataRow row)
public DataRow get_Row()
}
public System.Data.DataTableNewRowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, DataTableNewRowEventArgs e)
public IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.DataTablePropertyDescriptor : PropertyDescriptor {
private DataTable table
public DataTable Table
public bool IsReadOnly
public Type ComponentType
public Type PropertyType
internal void .ctor(DataTable table)
public DataTable get_Table()
public object GetValue(object component)
public bool CanResetValue(object component)
public bool Equals(object other)
public int GetHashCode()
public bool ShouldSerializeValue(object component)
public void ResetValue(object component)
public void SetValue(object component, object value)
public bool get_IsReadOnly()
public Type get_ComponentType()
public Type get_PropertyType()
}
public System.Data.DataTableReader : DbDataReader {
private bool _closed
private DataTable[] _tables
private int _current
private int _index
private DataTable _schemaTable
private bool _tableCleared
private bool _subscribed
private DataRow _rowRef
private bool _schemaChanged
public int Depth
public int FieldCount
public bool HasRows
public bool IsClosed
public object Item
private DataTable CurrentTable
private DataRow CurrentRow
public object Item
public int RecordsAffected
public void .ctor(DataTable dt)
public void .ctor(DataTable[] dataTables)
public int get_Depth()
public int get_FieldCount()
public bool get_HasRows()
public bool get_IsClosed()
public object get_Item(int index)
private DataTable get_CurrentTable()
private DataRow get_CurrentRow()
public object get_Item(string name)
public int get_RecordsAffected()
private void SubscribeEvents()
private void UnsubscribeEvents()
public void Close()
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public IEnumerator GetEnumerator()
public Type GetProviderSpecificFieldType(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public object GetProviderSpecificValue(int i)
public int GetProviderSpecificValues(Object[] values)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
public DataTable GetSchemaTable()
private void Validate()
private void ValidateClosed()
private void ValidateSchemaIntact()
private void ThrowInvalidCastException(Type sourceType, Type destType)
private bool MoveNext()
public bool NextResult()
public bool Read()
private void OnColumnChanged(object sender, PropertyChangedEventArgs args)
private void OnColumnCollectionChanged(object sender, CollectionChangeEventArgs args)
private void OnRowChanged(object src, DataRowChangeEventArgs args)
private void OnTableCleared(object src, DataTableClearEventArgs args)
}
internal System.Data.DataTableTypeConverter : ReferenceConverter {
public bool GetPropertiesSupported(ITypeDescriptorContext context)
}
public System.Data.DataView : MarshalByValueComponent {
internal DataTable dataTable
private string rowFilter
private IExpression rowFilterExpr
private string sort
private ListSortDirection[] sortOrder
private PropertyDescriptor sortProperty
private DataColumn[] sortColumns
internal DataViewRowState rowState
internal DataRowView[] rowCache
private bool isInitPhase
private bool inEndInit
private DataTable initTable
private bool initApplyDefaultSort
private string initSort
private string initRowFilter
private DataViewRowState initRowState
private bool allowNew
private bool allowEdit
private bool allowDelete
private bool applyDefaultSort
private bool isOpen
private bool useDefaultSort
private Index _index
internal DataRow _lastAdded
private DataViewManager dataViewManager
internal ListChangedEventArgs ListResetEventArgs
private bool dataViewInitialized
private ListChangedEventHandler ListChanged
private EventHandler Initialized
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
private bool System.ComponentModel.IBindingList.AllowEdit
private bool System.ComponentModel.IBindingList.AllowNew
private bool System.ComponentModel.IBindingList.AllowRemove
private bool System.ComponentModel.IBindingList.IsSorted
private ListSortDirection System.ComponentModel.IBindingList.SortDirection
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
private bool System.ComponentModel.IBindingList.SupportsChangeNotification
private bool System.ComponentModel.IBindingList.SupportsSearching
private bool System.ComponentModel.IBindingList.SupportsSorting
private string System.ComponentModel.IBindingListView.Filter
private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions
private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting
private bool System.ComponentModel.IBindingListView.SupportsFiltering
public bool AllowDelete
public bool AllowEdit
public bool AllowNew
public bool ApplyDefaultSort
public int Count
public DataViewManager DataViewManager
public DataRowView Item
public string RowFilter
public DataViewRowState RowStateFilter
public string Sort
public DataTable Table
protected bool IsOpen
internal Index Index
internal IExpression FilterExpression
public bool IsInitialized
public void .ctor(DataTable table)
internal void .ctor(DataTable table, DataViewManager manager)
public void .ctor(DataTable table, string RowFilter, string Sort, DataViewRowState RowState)
internal void .ctor(DataTable table, DataViewManager manager, string RowFilter, string Sort, DataViewRowState RowState)
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
public void add_Initialized(EventHandler value)
public void remove_Initialized(EventHandler value)
private PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors)
private string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int recordIndex)
private void System.Collections.IList.set_Item(int recordIndex, object value)
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property)
private object System.ComponentModel.IBindingList.AddNew()
private void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction)
private int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key)
private void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.RemoveSort()
private bool System.ComponentModel.IBindingList.get_AllowEdit()
private bool System.ComponentModel.IBindingList.get_AllowNew()
private bool System.ComponentModel.IBindingList.get_AllowRemove()
private bool System.ComponentModel.IBindingList.get_IsSorted()
private ListSortDirection System.ComponentModel.IBindingList.get_SortDirection()
private PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty()
private bool System.ComponentModel.IBindingList.get_SupportsChangeNotification()
private bool System.ComponentModel.IBindingList.get_SupportsSearching()
private bool System.ComponentModel.IBindingList.get_SupportsSorting()
private string System.ComponentModel.IBindingListView.get_Filter()
private void System.ComponentModel.IBindingListView.set_Filter(string value)
private ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions()
private bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting()
private bool System.ComponentModel.IBindingListView.get_SupportsFiltering()
private void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts)
private void System.ComponentModel.IBindingListView.RemoveFilter()
public bool get_AllowDelete()
public void set_AllowDelete(bool value)
public bool get_AllowEdit()
public void set_AllowEdit(bool value)
public bool get_AllowNew()
public void set_AllowNew(bool value)
public bool get_ApplyDefaultSort()
public void set_ApplyDefaultSort(bool value)
public int get_Count()
public DataViewManager get_DataViewManager()
public DataRowView get_Item(int recordIndex)
public string get_RowFilter()
public void set_RowFilter(string value)
public DataViewRowState get_RowStateFilter()
public void set_RowStateFilter(DataViewRowState value)
public string get_Sort()
public void set_Sort(string value)
public DataTable get_Table()
public void set_Table(DataTable value)
public DataRowView AddNew()
internal void CompleteLastAdded(bool add)
public void BeginInit()
public void CopyTo(Array array, int index)
public void Delete(int index)
public void EndInit()
public int Find(object key)
public int Find(Object[] key)
public DataRowView[] FindRows(object key)
public DataRowView[] FindRows(Object[] key)
public IEnumerator GetEnumerator()
protected bool get_IsOpen()
internal Index get_Index()
internal void set_Index(Index value)
protected void Close()
protected void Dispose(bool disposing)
protected void IndexListChanged(object sender, ListChangedEventArgs e)
protected void OnListChanged(ListChangedEventArgs e)
internal void ChangedList(ListChangedType listChangedType, int newIndex, int oldIndex)
protected void Open()
private void RegisterEventHandlers()
private void OnRowCollectionChanged(object sender, ListChangedEventArgs args)
private void UnregisterEventHandlers()
private void OnColumnChanged(object sender, DataColumnChangeEventArgs args)
private void OnRowChanged(object sender, DataRowChangeEventArgs args)
private void OnRowDeleted(object sender, DataRowChangeEventArgs args)
protected void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e)
private void OnConstraintCollectionChanged(object sender, CollectionChangeEventArgs args)
private void OnRelationCollectionChanged(object sender, CollectionChangeEventArgs args)
protected void Reset()
protected void UpdateIndex()
protected void UpdateIndex(bool force)
internal IExpression get_FilterExpression()
private void InitDataRowViewArray(Int32[] records, int size)
private int IndexOf(DataRow dr)
private void PopulateDefaultSort()
private void PopulateDefaultSort(UniqueConstraint uc)
internal DataView CreateChildView(DataRelation relation, int index)
private int GetRecord(int index)
internal DataRowVersion GetRowVersion(int index)
public bool get_IsInitialized()
private void DataViewInitialized(bool value)
private void OnDataViewInitialized(EventArgs e)
public bool Equals(DataView dv)
public DataTable ToTable()
public DataTable ToTable(string tableName)
public DataTable ToTable(bool isDistinct, String[] columnNames)
public DataTable ToTable(string tablename, bool isDistinct, String[] columnNames)
}
public System.Data.DataViewManager : MarshalByValueComponent {
private DataSet dataSet
private DataViewManagerListItemTypeDescriptor descriptor
private DataViewSettingCollection settings
private string xml
private ListChangedEventHandler ListChanged
private int System.Collections.ICollection.Count
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.IList.IsFixedSize
private bool System.Collections.IList.IsReadOnly
private object System.Collections.IList.Item
private bool System.ComponentModel.IBindingList.AllowEdit
private bool System.ComponentModel.IBindingList.AllowNew
private bool System.ComponentModel.IBindingList.AllowRemove
private bool System.ComponentModel.IBindingList.IsSorted
private ListSortDirection System.ComponentModel.IBindingList.SortDirection
private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
private bool System.ComponentModel.IBindingList.SupportsChangeNotification
private bool System.ComponentModel.IBindingList.SupportsSearching
private bool System.ComponentModel.IBindingList.SupportsSorting
public DataSet DataSet
public string DataViewSettingCollectionString
public DataViewSettingCollection DataViewSettings
public void .ctor(DataSet dataSet)
public void add_ListChanged(ListChangedEventHandler value)
public void remove_ListChanged(ListChangedEventHandler value)
private int System.Collections.ICollection.get_Count()
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.IList.get_IsFixedSize()
private bool System.Collections.IList.get_IsReadOnly()
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
private bool System.ComponentModel.IBindingList.get_AllowEdit()
private bool System.ComponentModel.IBindingList.get_AllowNew()
private bool System.ComponentModel.IBindingList.get_AllowRemove()
private bool System.ComponentModel.IBindingList.get_IsSorted()
private ListSortDirection System.ComponentModel.IBindingList.get_SortDirection()
private PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty()
private bool System.ComponentModel.IBindingList.get_SupportsChangeNotification()
private bool System.ComponentModel.IBindingList.get_SupportsSearching()
private bool System.ComponentModel.IBindingList.get_SupportsSorting()
private void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property)
private object System.ComponentModel.IBindingList.AddNew()
private void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction)
private int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key)
private void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property)
private void System.ComponentModel.IBindingList.RemoveSort()
private void System.Collections.ICollection.CopyTo(Array array, int index)
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
private int System.Collections.IList.Add(object value)
private void System.Collections.IList.Clear()
private bool System.Collections.IList.Contains(object value)
private int System.Collections.IList.IndexOf(object value)
private void System.Collections.IList.Insert(int index, object value)
private void System.Collections.IList.Remove(object value)
private void System.Collections.IList.RemoveAt(int index)
private PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors)
private string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors)
public DataSet get_DataSet()
public void set_DataSet(DataSet value)
public string get_DataViewSettingCollectionString()
public void set_DataViewSettingCollectionString(string value)
public DataViewSettingCollection get_DataViewSettings()
private void SetDataSet(DataSet ds)
private void ParseSettingString(string source)
private void ReadTableSetting(XmlReader reader)
private string BuildSettingString()
private string Escape(string s)
public DataView CreateDataView(DataTable table)
protected void OnListChanged(ListChangedEventArgs e)
protected void RelationCollectionChanged(object sender, CollectionChangeEventArgs e)
protected void TableCollectionChanged(object sender, CollectionChangeEventArgs e)
private ListChangedEventArgs CollectionToListChangeEventArgs(CollectionChangeEventArgs e)
}
internal System.Data.DataViewManagerListItemTypeDescriptor : object {
private DataViewManager dvm
internal DataViewManager DataViewManager
internal void .ctor(DataViewManager dvm)
private AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes()
private string System.ComponentModel.ICustomTypeDescriptor.GetClassName()
private string System.ComponentModel.ICustomTypeDescriptor.GetComponentName()
private TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter()
private EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent()
private PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty()
private object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType)
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents()
private EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes)
private PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes)
private object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd)
internal DataViewManager get_DataViewManager()
public PropertyDescriptorCollection GetProperties()
}
public System.Data.DataViewRowState : Enum {
public int value__
public DataViewRowState None
public DataViewRowState Unchanged
public DataViewRowState Added
public DataViewRowState Deleted
public DataViewRowState ModifiedCurrent
public DataViewRowState CurrentRows
public DataViewRowState ModifiedOriginal
public DataViewRowState OriginalRows
}
public System.Data.DataViewSetting : object {
private bool applyDefaultSort
private DataViewManager dataViewManager
private string rowFilter
private DataViewRowState rowStateFilter
private string sort
private DataTable dataTable
public bool ApplyDefaultSort
public DataViewManager DataViewManager
public string RowFilter
public DataViewRowState RowStateFilter
public string Sort
public DataTable Table
internal void .ctor(DataViewManager manager, DataTable table)
public bool get_ApplyDefaultSort()
public void set_ApplyDefaultSort(bool value)
public DataViewManager get_DataViewManager()
public string get_RowFilter()
public void set_RowFilter(string value)
public DataViewRowState get_RowStateFilter()
public void set_RowStateFilter(DataViewRowState value)
public string get_Sort()
public void set_Sort(string value)
public DataTable get_Table()
}
public System.Data.DataViewSettingCollection : object {
private ArrayList settingList
public int Count
public bool IsReadOnly
public bool IsSynchronized
public DataViewSetting Item
public DataViewSetting Item
public DataViewSetting Item
public object SyncRoot
internal void .ctor(DataViewManager manager)
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public DataViewSetting get_Item(DataTable table)
public void set_Item(DataTable table, DataViewSetting value)
public DataViewSetting get_Item(string tableName)
public DataViewSetting get_Item(int index)
public void set_Item(int index, DataViewSetting value)
public object get_SyncRoot()
public void CopyTo(Array ar, int index)
public void CopyTo(DataViewSetting[] ar, int index)
public IEnumerator GetEnumerator()
}
internal System.Data.DbCommandInfo : object {
public DbCommand Command
public DbSourceMethodInfo[] Methods
}
public System.Data.DBConcurrencyException : SystemException {
private DataRow[] rows
public DataRow Row
public int RowCount
public void .ctor(string message)
public void .ctor(string message, Exception inner)
public void .ctor(string message, Exception inner, DataRow[] dataRows)
private void .ctor(SerializationInfo si, StreamingContext sc)
public DataRow get_Row()
public void set_Row(DataRow value)
public int get_RowCount()
public void CopyToRows(DataRow[] array)
public void CopyToRows(DataRow[] array, int ArrayIndex)
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
internal System.Data.DbSourceMethodInfo : object {
public GenerateMethodsType MethodType
public string Name
public string Modifier
public string QueryType
public string ScalarCallRetval
}
public System.Data.DbType : Enum {
public int value__
public DbType AnsiString
public DbType Binary
public DbType Byte
public DbType Boolean
public DbType Currency
public DbType Date
public DbType DateTime
public DbType Decimal
public DbType Double
public DbType Guid
public DbType Int16
public DbType Int32
public DbType Int64
public DbType Object
public DbType SByte
public DbType Single
public DbType String
public DbType Time
public DbType UInt16
public DbType UInt32
public DbType UInt64
public DbType VarNumeric
public DbType AnsiStringFixedLength
public DbType Xml
public DbType DateTime2
public DbType DateTimeOffset
public DbType StringFixedLength
}
internal System.Data.DefaultValueTypeConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.DelegateColumnValueChange : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(DataColumn column, DataRow row, object proposedValue)
public IAsyncResult BeginInvoke(DataColumn column, DataRow row, object proposedValue, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.DelegateConstraintNameChange : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, string newName)
public IAsyncResult BeginInvoke(object sender, string newName, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.DelegateValidateRemoveConstraint : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(ConstraintCollection sender, Constraint constraintToRemove, Boolean& fail, String& failReason)
public IAsyncResult BeginInvoke(ConstraintCollection sender, Constraint constraintToRemove, Boolean& fail, String& failReason, AsyncCallback callback, object object)
public void EndInvoke(Boolean& fail, String& failReason, IAsyncResult result)
}
public System.Data.DeletedRowInaccessibleException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.Doublet : object {
public int count
public ArrayList columnNames
public void .ctor(int count, string columnname)
}
public System.Data.DuplicateNameException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.ElementMappingType : Enum {
public int value__
public ElementMappingType Simple
public ElementMappingType Repeated
public ElementMappingType Complex
}
public System.Data.EvaluateException : InvalidExpressionException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.FillErrorEventArgs : EventArgs {
private DataTable data_table
private Object[] values
private Exception errors
private bool f_continue
public bool Continue
public DataTable DataTable
public Exception Errors
public Object[] Values
public void .ctor(DataTable dataTable, Object[] values)
public bool get_Continue()
public void set_Continue(bool value)
public DataTable get_DataTable()
public Exception get_Errors()
public void set_Errors(Exception value)
public Object[] get_Values()
}
public System.Data.FillErrorEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, FillErrorEventArgs e)
public IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.ForeignKeyConstraint : Constraint {
private UniqueConstraint _parentUniqueConstraint
private DataColumn[] _parentColumns
private DataColumn[] _childColumns
private Rule _deleteRule
private Rule _updateRule
private AcceptRejectRule _acceptRejectRule
private string _parentTableName
private string _parentTableNamespace
private string _childTableName
private String[] _parentColumnNames
private String[] _childColumnNames
public AcceptRejectRule AcceptRejectRule
public DataColumn[] Columns
public Rule DeleteRule
public Rule UpdateRule
public DataColumn[] RelatedColumns
public DataTable RelatedTable
public DataTable Table
internal UniqueConstraint ParentConstraint
public void .ctor(DataColumn parentColumn, DataColumn childColumn)
public void .ctor(DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string constraintName, DataColumn parentColumn, DataColumn childColumn)
public void .ctor(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns)
public void .ctor(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule)
public void .ctor(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule)
internal void FinishInit(DataTable childTable)
private void _foreignKeyConstraint(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns)
private void _validateColumns(DataColumn[] parentColumns, DataColumn[] childColumns)
private void _ensureUniqueConstraintExists(ConstraintCollection collection, DataColumn[] parentColumns)
public AcceptRejectRule get_AcceptRejectRule()
public void set_AcceptRejectRule(AcceptRejectRule value)
public DataColumn[] get_Columns()
public Rule get_DeleteRule()
public void set_DeleteRule(Rule value)
public Rule get_UpdateRule()
public void set_UpdateRule(Rule value)
public DataColumn[] get_RelatedColumns()
public DataTable get_RelatedTable()
public DataTable get_Table()
internal UniqueConstraint get_ParentConstraint()
public bool Equals(object key)
public int GetHashCode()
internal void AddToConstraintCollectionSetup(ConstraintCollection collection)
internal void RemoveFromConstraintCollectionCleanup(ConstraintCollection collection)
internal bool IsConstraintViolated()
internal void AssertConstraint(DataRow row)
internal bool IsColumnContained(DataColumn column)
internal bool CanRemoveFromCollection(ConstraintCollection col, bool shouldThrow)
private string GetErrorMessage(DataRow row)
}
internal System.Data.GenerateMethodsType : Enum {
public int value__
public GenerateMethodsType None
public GenerateMethodsType Get
public GenerateMethodsType Fill
public GenerateMethodsType Both
}
internal System.Data.Generator : object {
private DataSet ds
private CodeNamespace cns
private ClassGeneratorOptions opts
private CodeCompileUnit cunit
private CodeTypeDeclaration dsType
public void .ctor(DataSet ds, CodeNamespace cns, ICodeGenerator codeGen, ClassGeneratorOptions options)
public void .ctor(DataSet ds, CodeNamespace cns, CodeDomProvider codeProvider, ClassGeneratorOptions options)
public void .ctor(DataSet ds, CodeCompileUnit cunit, CodeNamespace cns, CodeDomProvider codeProvider, ClassGeneratorOptions options)
public void Run()
private CodeThisReferenceExpression This()
private CodeBaseReferenceExpression Base()
private CodePrimitiveExpression Const(object value)
private CodeTypeReference TypeRef(Type t)
private CodeTypeReference TypeRef(string name)
private CodeTypeReference TypeRefArray(Type t, int dimension)
private CodeTypeReference TypeRefArray(string name, int dimension)
private CodeParameterDeclarationExpression Param(string t, string name)
private CodeParameterDeclarationExpression Param(Type t, string name)
private CodeParameterDeclarationExpression Param(CodeTypeReference t, string name)
private CodeArgumentReferenceExpression ParamRef(string name)
private CodeCastExpression Cast(string t, CodeExpression exp)
private CodeCastExpression Cast(Type t, CodeExpression exp)
private CodeCastExpression Cast(CodeTypeReference t, CodeExpression exp)
private CodeExpression New(Type t, CodeExpression[] parameters)
private CodeExpression New(string t, CodeExpression[] parameters)
private CodeExpression NewArray(Type t, CodeExpression[] parameters)
private CodeExpression NewArray(Type t, int size)
private CodeVariableReferenceExpression Local(string name)
private CodeFieldReferenceExpression FieldRef(string name)
private CodeFieldReferenceExpression FieldRef(CodeExpression exp, string name)
private CodePropertyReferenceExpression PropRef(string name)
private CodePropertyReferenceExpression PropRef(CodeExpression target, string name)
private CodeIndexerExpression IndexerRef(CodeExpression target, CodeExpression parameters)
private CodeIndexerExpression IndexerRef(CodeExpression param)
private CodeEventReferenceExpression EventRef(string name)
private CodeEventReferenceExpression EventRef(CodeExpression target, string name)
private CodeMethodInvokeExpression MethodInvoke(string name, CodeExpression[] parameters)
private CodeMethodInvokeExpression MethodInvoke(CodeExpression target, string name, CodeExpression[] parameters)
private CodeBinaryOperatorExpression EqualsValue(CodeExpression exp1, CodeExpression exp2)
private CodeBinaryOperatorExpression Equals(CodeExpression exp1, CodeExpression exp2)
private CodeBinaryOperatorExpression Inequals(CodeExpression exp1, CodeExpression exp2)
private CodeBinaryOperatorExpression GreaterThan(CodeExpression exp1, CodeExpression exp2)
private CodeBinaryOperatorExpression LessThan(CodeExpression exp1, CodeExpression exp2)
private CodeBinaryOperatorExpression Compute(CodeExpression exp1, CodeExpression exp2, CodeBinaryOperatorType ops)
private CodeBinaryOperatorExpression BitOps(CodeExpression exp1, CodeExpression exp2, CodeBinaryOperatorType ops)
private CodeBinaryOperatorExpression BooleanOps(CodeExpression exp1, CodeExpression exp2, CodeBinaryOperatorType ops)
private CodeTypeReferenceExpression TypeRefExp(Type t)
private CodeTypeOfExpression TypeOfRef(string name)
private CodeExpressionStatement Eval(CodeExpression exp)
private CodeAssignStatement Let(CodeExpression exp, CodeExpression value)
private CodeMethodReturnStatement Return(CodeExpression exp)
private CodeVariableDeclarationStatement VarDecl(Type t, string name, CodeExpression init)
private CodeVariableDeclarationStatement VarDecl(string t, string name, CodeExpression init)
private CodeCommentStatement Comment(string comment)
private CodeThrowExceptionStatement Throw(CodeExpression exp)
private CodeTypeDeclaration GenerateDataSetType()
private CodeConstructor CreateDataSetDefaultCtor()
private CodeConstructor CreateDataSetSerializationCtor()
private CodeMemberMethod CreateDataSetCloneMethod(CodeTypeDeclaration dsType)
private CodeMemberMethod CreateDataSetGetSchema()
private CodeMemberMethod CreateDataSetGetSchemaSerializable()
private CodeMemberMethod CreateDataSetInitializeClass()
private void CreateUniqueKeyStatements(CodeMemberMethod m, UniqueConstraint uc, string tableField)
private void CreateForeignKeyStatements(CodeMemberMethod m, ForeignKeyConstraint fkc, string tableField, string rtableField)
private CodeMemberMethod CreateDataSetInitializeFields()
private CodeMemberMethod CreateDataSetSchemaChanged()
private void CreateDataSetTableMembers(CodeTypeDeclaration dsType, DataTable table)
private void CreateDataSetRelationMembers(CodeTypeDeclaration dsType, DataRelation relation)
private CodeTypeDeclaration GenerateDataTableType(DataTable dt)
private CodeConstructor CreateTableCtor1(DataTable dt)
private CodeConstructor CreateTableCtor2(DataTable dt)
private CodeMemberMethod CreateTableInitializeClass(DataTable dt)
private CodeMemberMethod CreateTableInitializeFields(DataTable dt)
private CodeMemberMethod CreateTableClone(DataTable dt)
private CodeMemberMethod CreateTableGetEnumerator(DataTable dt)
private CodeMemberMethod CreateTableCreateInstance(DataTable dt)
private CodeMemberField CreateTableColumnField(DataTable dt, DataColumn col)
private CodeMemberProperty CreateTableColumnProperty(DataTable dt, DataColumn col)
private CodeMemberProperty CreateTableCount(DataTable dt)
private CodeMemberProperty CreateTableIndexer(DataTable dt)
private CodeMemberMethod CreateTableAddRow1(DataTable dt)
private CodeMemberMethod CreateTableAddRow2(DataTable dt)
private CodeMemberMethod CreateTableNewRow(DataTable dt)
private CodeMemberMethod CreateTableNewRowFromBuilder(DataTable dt)
private CodeMemberMethod CreateTableRemoveRow(DataTable dt)
private CodeMemberMethod CreateTableGetRowType(DataTable dt)
private CodeMemberMethod CreateTableEventStarter(DataTable dt, string type)
private CodeMemberEvent CreateTableEvent(DataTable dt, string nameSuffix)
public CodeTypeDeclaration GenerateDataRowType(DataTable dt)
private CodeConstructor CreateRowCtor(DataTable dt)
private string GetRowTableFieldName(DataTable dt)
private CodeMemberField CreateRowTableField(DataTable dt)
private CodeMemberProperty CreateRowColumnProperty(DataTable dt, DataColumn col)
private CodeMemberMethod CreateRowColumnIsNull(DataTable dt, DataColumn col)
private CodeMemberMethod CreateRowColumnSetNull(DataTable dt, DataColumn col)
private CodeMemberProperty CreateRowParentRowProperty(DataTable dt, DataRelation rel)
private CodeMemberMethod CreateRowGetChildRows(DataTable dt, DataRelation rel)
private CodeTypeDeclaration GenerateEventType(DataTable dt)
private CodeConstructor CreateEventCtor(DataTable dt)
private CodeMemberProperty CreateEventRow(DataTable dt)
private CodeMemberProperty CreateEventAction(DataTable dt)
private CodeTypeDeclaration GenerateTableAdapterType(TableAdapterSchemaInfo taInfo)
private CodeConstructor CreateTableAdapterDefaultCtor()
private void CreateDBAdapterFieldAndProperty(CodeTypeDeclaration t, DbDataAdapter adapter)
private void CreateDBConnectionFieldAndProperty(CodeTypeDeclaration t, DbConnection conn)
private void CreateDBCommandCollectionFieldAndProperty(CodeTypeDeclaration t, DbCommand cmd)
private void CreateAdapterClearBeforeFillFieldAndProperty(CodeTypeDeclaration t)
private void CreateAdapterInitializeMethod(CodeTypeDeclaration t, TableAdapterSchemaInfo taInfo)
private void AddDbCommandStatements(CodeMemberMethod m, CodeExpression expr, DbCommand cmd)
private void AddDbParameterStatements(CodeMemberMethod m, CodeExpression expr, DbParameter param)
private void CreateConnectionInitializeMethod(CodeTypeDeclaration t, TableAdapterSchemaInfo taInfo)
private void CreateCommandCollectionInitializeMethod(CodeTypeDeclaration t, TableAdapterSchemaInfo taInfo)
private void CreateDbSourceMethods(CodeTypeDeclaration t, TableAdapterSchemaInfo taInfo)
private void AddGeneratedMethodParametersAndStatements(CodeMemberMethod m, CodeExpression expr, DbCommand cmd)
private void CreateShortCommandMethods(CodeTypeDeclaration t, TableAdapterSchemaInfo taInfo)
}
public System.Data.IColumnMapping {
public string DataSetColumn
public string SourceColumn
public string get_DataSetColumn()
public void set_DataSetColumn(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
}
public System.Data.IColumnMappingCollection {
public object Item
public IColumnMapping Add(string sourceColumnName, string dataSetColumnName)
public bool Contains(string sourceColumnName)
public IColumnMapping GetByDataSetColumn(string dataSetColumnName)
public int IndexOf(string sourceColumnName)
public void RemoveAt(string sourceColumnName)
public object get_Item(string index)
public void set_Item(string index, object value)
}
public System.Data.IDataAdapter {
public MissingMappingAction MissingMappingAction
public MissingSchemaAction MissingSchemaAction
public ITableMappingCollection TableMappings
public int Fill(DataSet dataSet)
public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType)
public IDataParameter[] GetFillParameters()
public int Update(DataSet dataSet)
public MissingMappingAction get_MissingMappingAction()
public void set_MissingMappingAction(MissingMappingAction value)
public MissingSchemaAction get_MissingSchemaAction()
public void set_MissingSchemaAction(MissingSchemaAction value)
public ITableMappingCollection get_TableMappings()
}
public System.Data.IDataParameter {
public DbType DbType
public ParameterDirection Direction
public bool IsNullable
public string ParameterName
public string SourceColumn
public DataRowVersion SourceVersion
public object Value
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public string get_ParameterName()
public void set_ParameterName(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
}
public System.Data.IDataParameterCollection {
public object Item
public void RemoveAt(string parameterName)
public int IndexOf(string parameterName)
public bool Contains(string parameterName)
public object get_Item(string parameterName)
public void set_Item(string parameterName, object value)
}
public System.Data.IDataReader {
public int Depth
public bool IsClosed
public int RecordsAffected
public void Close()
public DataTable GetSchemaTable()
public bool NextResult()
public bool Read()
public int get_Depth()
public bool get_IsClosed()
public int get_RecordsAffected()
}
public System.Data.IDataRecord {
public int FieldCount
public object Item
public object Item
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
public char GetChar(int i)
public long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length)
public IDataReader GetData(int i)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool IsDBNull(int i)
public int get_FieldCount()
public object get_Item(string name)
public object get_Item(int i)
}
public System.Data.IDbCommand {
public string CommandText
public int CommandTimeout
public CommandType CommandType
public IDbConnection Connection
public IDataParameterCollection Parameters
public IDbTransaction Transaction
public UpdateRowSource UpdatedRowSource
public void Cancel()
public IDbDataParameter CreateParameter()
public int ExecuteNonQuery()
public IDataReader ExecuteReader()
public IDataReader ExecuteReader(CommandBehavior behavior)
public object ExecuteScalar()
public void Prepare()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public IDbConnection get_Connection()
public void set_Connection(IDbConnection value)
public IDataParameterCollection get_Parameters()
public IDbTransaction get_Transaction()
public void set_Transaction(IDbTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
}
public System.Data.IDbConnection {
public string ConnectionString
public int ConnectionTimeout
public string Database
public ConnectionState State
public IDbTransaction BeginTransaction()
public IDbTransaction BeginTransaction(IsolationLevel il)
public void ChangeDatabase(string databaseName)
public void Close()
public IDbCommand CreateCommand()
public void Open()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public string get_Database()
public ConnectionState get_State()
}
public System.Data.IDbDataAdapter {
public IDbCommand DeleteCommand
public IDbCommand InsertCommand
public IDbCommand SelectCommand
public IDbCommand UpdateCommand
public IDbCommand get_DeleteCommand()
public void set_DeleteCommand(IDbCommand value)
public IDbCommand get_InsertCommand()
public void set_InsertCommand(IDbCommand value)
public IDbCommand get_SelectCommand()
public void set_SelectCommand(IDbCommand value)
public IDbCommand get_UpdateCommand()
public void set_UpdateCommand(IDbCommand value)
}
public System.Data.IDbDataParameter {
public byte Precision
public byte Scale
public int Size
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
}
public System.Data.IDbTransaction {
public IDbConnection Connection
public IsolationLevel IsolationLevel
public void Commit()
public void Rollback()
public IDbConnection get_Connection()
public IsolationLevel get_IsolationLevel()
}
public System.Data.InRowChangingEventException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.InternalDataCollectionBase : object {
private ArrayList list
private bool readOnly
private bool synchronized
public int Count
public bool IsReadOnly
public bool IsSynchronized
protected ArrayList List
public object SyncRoot
public int get_Count()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
protected ArrayList get_List()
public object get_SyncRoot()
public void CopyTo(Array ar, int index)
public IEnumerator GetEnumerator()
internal Array ToArray(Type type)
}
public System.Data.InvalidConstraintException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.InvalidExpressionException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.ISafeDataRecord {
public bool GetBooleanSafe(int i)
public byte GetByteSafe(int i)
public char GetCharSafe(int i)
public DateTime GetDateTimeSafe(int i)
public decimal GetDecimalSafe(int i)
public double GetDoubleSafe(int i)
public float GetFloatSafe(int i)
public short GetInt16Safe(int i)
public int GetInt32Safe(int i)
public long GetInt64Safe(int i)
public string GetStringSafe(int i)
}
public System.Data.IsolationLevel : Enum {
public int value__
public IsolationLevel Chaos
public IsolationLevel ReadUncommitted
public IsolationLevel ReadCommitted
public IsolationLevel RepeatableRead
public IsolationLevel Serializable
public IsolationLevel Snapshot
public IsolationLevel Unspecified
}
public System.Data.ITableMapping {
public IColumnMappingCollection ColumnMappings
public string DataSetTable
public string SourceTable
public IColumnMappingCollection get_ColumnMappings()
public string get_DataSetTable()
public void set_DataSetTable(string value)
public string get_SourceTable()
public void set_SourceTable(string value)
}
public System.Data.ITableMappingCollection {
public object Item
public ITableMapping Add(string sourceTableName, string dataSetTableName)
public bool Contains(string sourceTableName)
public ITableMapping GetByDataSetTable(string dataSetTableName)
public int IndexOf(string sourceTableName)
public void RemoveAt(string sourceTableName)
public object get_Item(string index)
public void set_Item(string index, object value)
}
public System.Data.KeyRestrictionBehavior : Enum {
public int value__
public KeyRestrictionBehavior AllowOnly
public KeyRestrictionBehavior PreventUsage
}
public System.Data.LoadOption : Enum {
public int value__
public LoadOption OverwriteChanges
public LoadOption PreserveChanges
public LoadOption Upsert
}
public System.Data.MappingType : Enum {
public int value__
public MappingType Element
public MappingType Attribute
public MappingType SimpleContent
public MappingType Hidden
}
public System.Data.MergeFailedEventArgs : EventArgs {
private DataTable data_table
private string conflict
public DataTable Table
public string Conflict
public void .ctor(DataTable table, string conflict)
public DataTable get_Table()
public string get_Conflict()
}
public System.Data.MergeFailedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, MergeFailedEventArgs e)
public IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.MergeManager : object {
internal void Merge(DataSet targetSet, DataSet sourceSet, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal void Merge(DataSet targetSet, DataTable sourceTable, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal void Merge(DataTable targetTable, DataTable sourceTable, bool preserveChanges, MissingSchemaAction missingSchemaAction)
internal void Merge(DataSet targetSet, DataRow[] sourceRows, bool preserveChanges, MissingSchemaAction missingSchemaAction)
private void MergeRow(DataTable targetTable, DataRow row, bool preserveChanges)
private bool AdjustSchemaRelations(DataSet targetSet, DataSet sourceSet, MissingSchemaAction missingSchemaAction)
private DataColumn[] ResolveColumns(DataTable targetTable, DataColumn[] sourceColumns)
private bool AdjustSchema(DataSet targetSet, DataTable sourceTable, MissingSchemaAction missingSchemaAction, DataTable& newTable)
private bool AdjustSchema(DataTable targetTable, DataTable sourceTable, MissingSchemaAction missingSchemaAction)
private bool AdjustPrimaryKeys(DataTable targetTable, DataTable sourceTable)
private void fillData(DataTable targetTable, DataTable sourceTable, bool preserveChanges)
private void checkColumnTypes(DataTable targetTable, DataTable sourceTable)
private bool CompareColumnArrays(DataColumn[] arr1, DataColumn[] arr2)
private void RaiseMergeFailedEvent(DataTable targetTable, string errMsg)
}
public System.Data.MissingMappingAction : Enum {
public int value__
public MissingMappingAction Passthrough
public MissingMappingAction Ignore
public MissingMappingAction Error
}
public System.Data.MissingPrimaryKeyException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.MissingSchemaAction : Enum {
public int value__
public MissingSchemaAction Add
public MissingSchemaAction Ignore
public MissingSchemaAction Error
public MissingSchemaAction AddWithKey
}
internal System.Data.Node : object {
protected int _iBalance
internal Node _nNext
protected Node _nLeft
protected Node _nRight
protected Node _nParent
protected DataRow _row
internal DataRow Row
internal Node Left
internal Node Right
internal Node Parent
public void .ctor(DataRow row)
internal int GetBalance()
internal void Delete()
internal DataRow get_Row()
internal Node get_Left()
internal void set_Left(Node value)
internal Node get_Right()
internal void set_Right(Node value)
internal Node get_Parent()
internal void set_Parent(Node value)
internal bool IsRoot()
internal void SetBalance(int b)
internal bool From()
internal Object[] GetData()
internal bool Equals(Node n)
}
public System.Data.NoNullAllowedException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.Odbc.FieldIdentifier : Enum {
public short value__
public FieldIdentifier AutoUniqueValue
public FieldIdentifier BaseColumnName
public FieldIdentifier BaseTableName
public FieldIdentifier CaseSensitive
public FieldIdentifier CatelogName
public FieldIdentifier ConsiseType
public FieldIdentifier Count
public FieldIdentifier DisplaySize
public FieldIdentifier FixedPrecScale
public FieldIdentifier Label
public FieldIdentifier Length
public FieldIdentifier LiteralPrefix
public FieldIdentifier LiteralSuffix
public FieldIdentifier LocalTypeName
public FieldIdentifier Name
public FieldIdentifier Nullable
public FieldIdentifier NumPrecRadix
public FieldIdentifier OctetLength
public FieldIdentifier Precision
public FieldIdentifier Scale
public FieldIdentifier SchemaName
public FieldIdentifier Searchable
public FieldIdentifier TableName
public FieldIdentifier Type
public FieldIdentifier TypeName
public FieldIdentifier Unnamed
public FieldIdentifier Unsigned
public FieldIdentifier Updatable
}
internal System.Data.Odbc.libodbc : object {
internal int SQL_OV_ODBC2
internal int SQL_OV_ODBC3
internal string SQLSTATE_RIGHT_TRUNC
internal char C_NULL
internal int SQL_NTS
internal short SQL_TRUE
internal short SQL_FALSE
internal short SQL_INDEX_UNIQUE
internal short SQL_INDEX_ALL
internal short SQL_QUICK
internal short SQL_ENSURE
internal short SQL_NO_NULLS
internal short SQL_NULLABLE
internal short SQL_NULLABLE_UNKNOWN
internal short SQL_ATTR_READONLY
internal short SQL_ATTR_WRITE
internal short SQL_ATTR_READWRITE_UNKNOWN
internal OdbcInputOutputDirection ConvertParameterDirection(ParameterDirection dir)
internal OdbcReturn SQLAllocHandle(OdbcHandleType HandleType, IntPtr InputHandle, IntPtr& OutputHandlePtr)
internal OdbcReturn SQLSetEnvAttr(IntPtr EnvHandle, OdbcEnv Attribute, IntPtr Value, int StringLength)
internal OdbcReturn SQLConnect(IntPtr ConnectionHandle, string ServerName, short NameLength1, string UserName, short NameLength2, string Authentication, short NameLength3)
internal OdbcReturn SQLDriverConnect(IntPtr ConnectionHandle, IntPtr WindowHandle, string InConnectionString, short StringLength1, string OutConnectionString, short BufferLength, Int16& StringLength2Ptr, ushort DriverCompletion)
internal OdbcReturn SQLExecDirect(IntPtr StatementHandle, string StatementText, int TextLength)
internal OdbcReturn SQLRowCount(IntPtr StatementHandle, Int32& RowCount)
internal OdbcReturn SQLNumResultCols(IntPtr StatementHandle, Int16& ColumnCount)
internal OdbcReturn SQLFetch(IntPtr StatementHandle)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Boolean& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Double& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Int64& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Int16& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Single& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, OdbcTimestamp& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Int32& TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLGetData(IntPtr StatementHandle, ushort ColumnNumber, SQL_C_TYPE TargetType, Byte[] TargetPtr, int BufferLen, Int32& Len)
internal OdbcReturn SQLDescribeCol(IntPtr StatementHandle, ushort ColumnNumber, Byte[] ColumnName, short BufferLength, Int16& NameLength, Int16& DataType, UInt32& ColumnSize, Int16& DecimalDigits, Int16& Nullable)
internal OdbcReturn SQLFreeHandle(ushort HandleType, IntPtr SqlHandle)
internal OdbcReturn SQLDisconnect(IntPtr ConnectionHandle)
internal OdbcReturn SQLPrepare(IntPtr StatementHandle, string Statement, int TextLength)
internal OdbcReturn SQLExecute(IntPtr StatementHandle)
internal OdbcReturn SQLGetConnectAttr(IntPtr ConnectionHandle, OdbcConnectionAttribute Attribute, Int32& value, int BufferLength, Int32& StringLength)
internal OdbcReturn SQLSetConnectAttr(IntPtr ConnectionHandle, OdbcConnectionAttribute Attribute, IntPtr Value, int Length)
internal OdbcReturn SQLEndTran(int HandleType, IntPtr Handle, short CompletionType)
internal OdbcReturn SQLBindParameter(IntPtr StatementHandle, ushort ParamNum, short InputOutputType, SQL_C_TYPE ValueType, SQL_TYPE ParamType, UInt32 ColSize, short DecimalDigits, IntPtr ParamValue, int BufLen, IntPtr StrLen)
internal OdbcReturn SQLCancel(IntPtr StatementHandle)
internal OdbcReturn SQLCloseCursor(IntPtr StatementHandle)
internal OdbcReturn SQLError(IntPtr EnvironmentHandle, IntPtr ConnectionHandle, IntPtr StatementHandle, Byte[] Sqlstate, Int32& NativeError, Byte[] MessageText, short BufferLength, Int16& TextLength)
internal OdbcReturn SQLGetStmtAttr(IntPtr StatementHandle, int Attribute, IntPtr& Value, int BufLen, int StrLen)
internal OdbcReturn SQLSetDescField(IntPtr DescriptorHandle, short RecNumber, short FieldIdentifier, Byte[] Value, int BufLen)
internal OdbcReturn SQLGetDiagRec(OdbcHandleType HandleType, IntPtr Handle, ushort RecordNumber, Byte[] Sqlstate, Int32& NativeError, Byte[] MessageText, short BufferLength, Int16& TextLength)
internal OdbcReturn SQLMoreResults(IntPtr Handle)
internal OdbcReturn SQLFreeStmt(IntPtr Handle, SQLFreeStmtOptions option)
internal OdbcReturn SQLGetInfo(IntPtr connHandle, OdbcInfo info, Byte[] buffer, short buffLength, Int16& remainingStrLen)
internal OdbcReturn SQLColAttribute(IntPtr StmtHandle, short column, FieldIdentifier fieldId, Byte[] charAttributePtr, short bufferLength, Int16& strLengthPtr, Int32& numericAttributePtr)
internal OdbcReturn SQLPrimaryKeys(IntPtr StmtHandle, string catalog, short catalogLength, string schema, short schemaLength, string tableName, short tableLength)
internal OdbcReturn SQLStatistics(IntPtr StmtHandle, string catalog, short catalogLength, string schema, short schemaLength, string tableName, short tableLength, short unique, short Reserved)
internal OdbcReturn SQLBindCol(IntPtr StmtHandle, short column, SQL_C_TYPE targetType, Byte[] buffer, int bufferLength, Int32& indicator)
internal OdbcReturn SQLBindCol(IntPtr StmtHandle, short column, SQL_C_TYPE targetType, Int16& value, int bufferLength, Int32& indicator)
}
internal System.Data.Odbc.NativeBuffer : object {
private IntPtr _ptr
private int _length
private bool disposed
public IntPtr Handle
public int Size
public IntPtr get_Handle()
public void set_Handle(IntPtr value)
public int get_Size()
public void AllocBuffer(int length)
public void FreeBuffer()
public void EnsureAlloc(int length)
public void Dispose(bool disposing)
public void Dispose()
protected void Finalize()
public IntPtr op_Implicit(NativeBuffer buf)
}
internal System.Data.Odbc.OdbcCategoryAttribute : CategoryAttribute {
private string category
public string Category
public void .ctor(string category)
public string get_Category()
protected string GetLocalizedString(string value)
}
internal System.Data.Odbc.OdbcColumn : object {
internal string ColumnName
internal OdbcType OdbcType
private SQL_TYPE _sqlType
private SQL_C_TYPE _sqlCType
internal bool AllowDBNull
internal int MaxLength
internal int Digits
internal object Value
internal Type DataType
internal bool IsDateType
internal bool IsStringType
internal bool IsVariableSizeType
internal SQL_TYPE SqlType
internal SQL_C_TYPE SqlCType
internal void .ctor(string Name, OdbcType Type)
internal void .ctor(string Name, SQL_TYPE type)
internal Type get_DataType()
internal bool get_IsDateType()
internal bool get_IsStringType()
internal bool get_IsVariableSizeType()
internal SQL_TYPE get_SqlType()
internal void set_SqlType(SQL_TYPE value)
internal SQL_C_TYPE get_SqlCType()
internal void set_SqlCType(SQL_C_TYPE value)
internal void UpdateTypes(SQL_TYPE sqlType)
}
public System.Data.Odbc.OdbcCommand : DbCommand {
private int DEFAULT_COMMAND_TIMEOUT
private string commandText
private int timeout
private CommandType commandType
private UpdateRowSource updateRowSource
private OdbcConnection connection
private OdbcTransaction transaction
private OdbcParameterCollection _parameters
private bool designTimeVisible
private bool prepared
private IntPtr hstmt
private bool disposed
internal IntPtr hStmt
public string CommandText
public int CommandTimeout
public CommandType CommandType
public OdbcConnection Connection
public bool DesignTimeVisible
public OdbcParameterCollection Parameters
public OdbcTransaction Transaction
public UpdateRowSource UpdatedRowSource
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public void .ctor(string cmdText)
public void .ctor(string cmdText, OdbcConnection connection)
public void .ctor(string cmdText, OdbcConnection connection, OdbcTransaction transaction)
private object System.ICloneable.Clone()
internal IntPtr get_hStmt()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public OdbcConnection get_Connection()
public void set_Connection(OdbcConnection value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public OdbcParameterCollection get_Parameters()
public OdbcTransaction get_Transaction()
public void set_Transaction(OdbcTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
public void Cancel()
protected DbParameter CreateDbParameter()
public OdbcParameter CreateParameter()
internal void Unlink()
protected void Dispose(bool disposing)
private IntPtr ReAllocStatment()
private void FreeStatement()
private void FreeStatement(bool unlink)
private void ExecSQL(CommandBehavior behavior, bool createReader, string sql)
internal void FreeIfNotPrepared()
public int ExecuteNonQuery()
private int ExecuteNonQuery(string method, CommandBehavior behavior, bool createReader)
public void Prepare()
private void BindParameters()
public OdbcDataReader ExecuteReader()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public OdbcDataReader ExecuteReader(CommandBehavior behavior)
private OdbcDataReader ExecuteReader(string method, CommandBehavior behavior)
public object ExecuteScalar()
public void ResetCommandTimeout()
}
public System.Data.Odbc.OdbcCommandBuilder : DbCommandBuilder {
private OdbcDataAdapter _adapter
private DataTable _schema
private string _tableName
private OdbcCommand _insertCommand
private OdbcCommand _updateCommand
private OdbcCommand _deleteCommand
private bool _disposed
private OdbcRowUpdatingEventHandler rowUpdatingHandler
public OdbcDataAdapter DataAdapter
private OdbcCommand SelectCommand
private DataTable Schema
private string TableName
private bool IsCommandGenerated
public void .ctor(OdbcDataAdapter adapter)
public OdbcDataAdapter get_DataAdapter()
public void set_DataAdapter(OdbcDataAdapter value)
private OdbcCommand get_SelectCommand()
private DataTable get_Schema()
private string get_TableName()
public void DeriveParameters(OdbcCommand command)
private void Dispose(bool disposing)
private bool IsUpdatable(DataRow schemaRow)
private string GetColumnName(DataRow schemaRow)
private OdbcParameter AddParameter(OdbcCommand cmd, string paramName, OdbcType odbcType, int length, string sourceColumnName, DataRowVersion rowVersion)
private string CreateOptWhereClause(OdbcCommand command, int paramCount)
private void CreateNewCommand(OdbcCommand& command)
private OdbcCommand CreateInsertCommand(bool option)
public OdbcCommand GetInsertCommand()
public OdbcCommand GetInsertCommand(bool useColumnsForParameterNames)
private OdbcCommand CreateUpdateCommand(bool option)
public OdbcCommand GetUpdateCommand()
public OdbcCommand GetUpdateCommand(bool useColumnsForParameterNames)
private OdbcCommand CreateDeleteCommand(bool option)
public OdbcCommand GetDeleteCommand()
public OdbcCommand GetDeleteCommand(bool useColumnsForParameterNames)
private void RefreshSchema()
protected string GetParameterName(int parameterOrdinal)
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
public string QuoteIdentifier(string unquotedIdentifier)
public string QuoteIdentifier(string unquotedIdentifier, OdbcConnection connection)
public string UnquoteIdentifier(string quotedIdentifier, OdbcConnection connection)
public string UnquoteIdentifier(string quotedIdentifier)
private void OnRowUpdating(object sender, OdbcRowUpdatingEventArgs args)
private string GetQuotedString(string unquotedIdentifier)
private bool get_IsCommandGenerated()
private string GetQuoteCharacter(OdbcConnection conn)
}
public System.Data.Odbc.OdbcConnection : DbConnection {
private string connectionString
private int connectionTimeout
internal OdbcTransaction transaction
private IntPtr henv
private IntPtr hdbc
private bool disposed
private ArrayList linkedCommands
private OdbcInfoMessageEventHandler InfoMessage
private Dictionary`2<string, int> <>f__switch$map4
internal IntPtr hDbc
public string ConnectionString
public int ConnectionTimeout
public string Database
public ConnectionState State
public string DataSource
public string Driver
public string ServerVersion
internal string SafeDriver
public void .ctor(string connectionString)
public void add_InfoMessage(OdbcInfoMessageEventHandler value)
public void remove_InfoMessage(OdbcInfoMessageEventHandler value)
private object System.ICloneable.Clone()
internal IntPtr get_hDbc()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public void set_ConnectionTimeout(int value)
public string get_Database()
public ConnectionState get_State()
public string get_DataSource()
public string get_Driver()
public string get_ServerVersion()
internal string get_SafeDriver()
public OdbcTransaction BeginTransaction()
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public OdbcTransaction BeginTransaction(IsolationLevel isolevel)
public void Close()
public OdbcCommand CreateCommand()
public void ChangeDatabase(string value)
protected void Dispose(bool disposing)
protected DbCommand CreateDbCommand()
public void Open()
public void ReleaseObjectPool()
private void FreeHandles()
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
public void EnlistTransaction(Transaction transaction)
public void EnlistDistributedTransaction(ITransaction transaction)
internal string GetInfo(OdbcInfo info)
private string GetSafeInfo(OdbcInfo info)
private void RaiseStateChange(ConnectionState from, ConnectionState to)
private OdbcInfoMessageEventArgs CreateOdbcInfoMessageEvent(OdbcErrorCollection errors)
private void OnOdbcInfoMessage(OdbcInfoMessageEventArgs e)
internal OdbcException CreateOdbcException(OdbcHandleType HandleType, IntPtr Handle)
private string RemoveTrailingNullChar(string value)
internal void Link(OdbcCommand cmd)
internal void Unlink(OdbcCommand cmd)
private void MessageHandler(OdbcException e)
}
internal System.Data.Odbc.OdbcConnectionAttribute : Enum {
public int value__
public OdbcConnectionAttribute AutoCommit
public OdbcConnectionAttribute TransactionIsolation
public OdbcConnectionAttribute CurrentCatalog
public OdbcConnectionAttribute CoptTransactionIsolation
}
public System.Data.Odbc.OdbcConnectionStringBuilder : DbConnectionStringBuilder {
private string driver
private string dsn
public object Item
public ICollection Keys
public string Driver
public string Dsn
public void .ctor(string connectionString)
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public ICollection get_Keys()
public string get_Driver()
public void set_Driver(string value)
public string get_Dsn()
public void set_Dsn(string value)
public bool ContainsKey(string keyword)
public bool Remove(string keyword)
public void Clear()
public bool TryGetValue(string keyword, Object& value)
}
public System.Data.Odbc.OdbcDataAdapter : DbDataAdapter {
private OdbcCommand deleteCommand
private OdbcCommand insertCommand
private OdbcCommand selectCommand
private OdbcCommand updateCommand
private OdbcRowUpdatedEventHandler RowUpdated
private OdbcRowUpdatingEventHandler RowUpdating
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
public OdbcCommand DeleteCommand
public OdbcCommand InsertCommand
public OdbcCommand SelectCommand
public OdbcCommand UpdateCommand
public void .ctor(OdbcCommand selectCommand)
public void .ctor(string selectCommandText, OdbcConnection selectConnection)
public void .ctor(string selectCommandText, string selectConnectionString)
public void add_RowUpdated(OdbcRowUpdatedEventHandler value)
public void remove_RowUpdated(OdbcRowUpdatedEventHandler value)
public void add_RowUpdating(OdbcRowUpdatingEventHandler value)
public void remove_RowUpdating(OdbcRowUpdatingEventHandler value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private object System.ICloneable.Clone()
public OdbcCommand get_DeleteCommand()
public void set_DeleteCommand(OdbcCommand value)
public OdbcCommand get_InsertCommand()
public void set_InsertCommand(OdbcCommand value)
public OdbcCommand get_SelectCommand()
public void set_SelectCommand(OdbcCommand value)
public OdbcCommand get_UpdateCommand()
public void set_UpdateCommand(OdbcCommand value)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
}
public System.Data.Odbc.OdbcDataReader : DbDataReader {
private OdbcCommand command
private bool open
private int currentRow
private OdbcColumn[] cols
private IntPtr hstmt
private int _recordsAffected
private bool disposed
private DataTable _dataTableSchema
private CommandBehavior behavior
private CommandBehavior CommandBehavior
public int Depth
public int FieldCount
public bool IsClosed
public object Item
public object Item
public int RecordsAffected
public bool HasRows
private OdbcConnection Connection
internal void .ctor(OdbcCommand command, CommandBehavior behavior)
internal void .ctor(OdbcCommand command, CommandBehavior behavior, int recordAffected)
private CommandBehavior get_CommandBehavior()
private void set_CommandBehavior(CommandBehavior value)
public int get_Depth()
public int get_FieldCount()
public bool get_IsClosed()
public object get_Item(string value)
public object get_Item(int i)
public int get_RecordsAffected()
public bool get_HasRows()
private OdbcConnection get_Connection()
private int ColIndex(string colname)
private OdbcColumn GetColumn(int ordinal)
private void GetColumns()
public void Close()
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
private IDataReader GetData(int i)
public string GetDataTypeName(int i)
public DateTime GetDate(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string value)
public DataTable GetSchemaTable()
public string GetString(int i)
public TimeSpan GetTime(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public IEnumerator GetEnumerator()
protected void Dispose(bool disposing)
public bool IsDBNull(int i)
public bool NextResult()
private bool NextRow()
private int GetColumnAttribute(int column, FieldIdentifier fieldId)
private string GetColumnAttributeStr(int column, FieldIdentifier fieldId)
private String[] GetPrimaryKeys(string catalog, string schema, string table)
private ArrayList GetPrimaryKeysBySQLPrimaryKey(string catalog, string schema, string table)
private ArrayList GetPrimaryKeysBySQLStatistics(string catalog, string schema, string table)
public bool Read()
private string RemoveTrailingNullChar(string value)
}
internal System.Data.Odbc.OdbcDescriptionAttribute : DescriptionAttribute {
private string description
public string Description
public void .ctor(string description)
public string get_Description()
}
internal System.Data.Odbc.OdbcEnv : Enum {
public ushort value__
public OdbcEnv OdbcVersion
public OdbcEnv ConnectionPooling
public OdbcEnv CPMatch
}
public System.Data.Odbc.OdbcError : object {
private string _message
private string _source
private string _state
private int _nativeerror
public string Message
public int NativeError
public string Source
public string SQLState
internal void .ctor(OdbcConnection connection)
internal void .ctor(string message, string state, int nativeerror)
public string get_Message()
public int get_NativeError()
public string get_Source()
public string get_SQLState()
public string ToString()
internal void SetSource(string source)
}
public System.Data.Odbc.OdbcErrorCollection : object {
private ArrayList _items
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public int Count
public OdbcError Item
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public int get_Count()
public OdbcError get_Item(int i)
internal void Add(OdbcError error)
public void CopyTo(Array array, int i)
public IEnumerator GetEnumerator()
public void CopyTo(OdbcError[] array, int index)
}
public System.Data.Odbc.OdbcException : DbException {
private OdbcErrorCollection odbcErrors
public OdbcErrorCollection Errors
public string Source
internal void .ctor(OdbcErrorCollection errors)
private void .ctor(SerializationInfo si, StreamingContext sc)
public OdbcErrorCollection get_Errors()
public string get_Source()
public void GetObjectData(SerializationInfo si, StreamingContext context)
private string CreateMessage(OdbcErrorCollection errors)
}
public System.Data.Odbc.OdbcFactory : DbProviderFactory {
public OdbcFactory Instance
private object lockStatic
public DbConnection CreateConnection()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
internal System.Data.Odbc.OdbcHandleType : Enum {
public short value__
public OdbcHandleType Env
public OdbcHandleType Dbc
public OdbcHandleType Stmt
public OdbcHandleType Desc
}
internal System.Data.Odbc.OdbcInfo : Enum {
public ushort value__
public OdbcInfo DataSourceName
public OdbcInfo DriverName
public OdbcInfo DriverVersion
public OdbcInfo DatabaseName
public OdbcInfo DbmsVersion
public OdbcInfo IdentifierQuoteChar
}
public System.Data.Odbc.OdbcInfoMessageEventArgs : EventArgs {
private OdbcErrorCollection errors
public OdbcErrorCollection Errors
public string Message
internal void .ctor(OdbcErrorCollection errors)
public OdbcErrorCollection get_Errors()
public string get_Message()
public string ToString()
}
public System.Data.Odbc.OdbcInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.Odbc.OdbcInputOutputDirection : Enum {
public short value__
public OdbcInputOutputDirection Input
public OdbcInputOutputDirection InputOutput
public OdbcInputOutputDirection ResultCol
public OdbcInputOutputDirection Output
public OdbcInputOutputDirection ReturnValue
}
internal System.Data.Odbc.OdbcIsolationLevel : Enum {
public int value__
public OdbcIsolationLevel ReadUncommitted
public OdbcIsolationLevel ReadCommitted
public OdbcIsolationLevel RepeatableRead
public OdbcIsolationLevel Serializable
public OdbcIsolationLevel Snapshot
}
internal System.Data.Odbc.OdbcLengthIndicator : Enum {
public short value__
public OdbcLengthIndicator NoTotal
public OdbcLengthIndicator NullData
}
public System.Data.Odbc.OdbcMetaDataCollectionNames : object {
public string Columns
public string Indexes
public string ProcedureColumns
public string ProcedureParameters
public string Procedures
public string Tables
public string Views
}
public System.Data.Odbc.OdbcMetaDataColumnNames : object {
public string BooleanFalseLiteral
public string BooleanTrueLiteral
public string SQLType
}
public System.Data.Odbc.OdbcParameter : DbParameter {
private string name
private ParameterDirection direction
private bool isNullable
private int size
private DataRowVersion sourceVersion
private string sourceColumn
private byte _precision
private byte _scale
private object _value
private OdbcTypeMap _typeMap
private NativeBuffer _nativeBuffer
private NativeBuffer _cbLengthInd
private OdbcParameterCollection container
internal OdbcParameterCollection Container
public DbType DbType
public ParameterDirection Direction
public bool IsNullable
public OdbcType OdbcType
public string ParameterName
public byte Precision
public byte Scale
public int Size
public string SourceColumn
public DataRowVersion SourceVersion
public object Value
public bool SourceColumnNullMapping
public void .ctor(string name, object value)
public void .ctor(string name, OdbcType type)
public void .ctor(string name, OdbcType type, int size)
public void .ctor(string name, OdbcType type, int size, string sourcecolumn)
public void .ctor(string parameterName, OdbcType odbcType, int size, ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value)
private object System.ICloneable.Clone()
internal OdbcParameterCollection get_Container()
internal void set_Container(OdbcParameterCollection value)
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public OdbcType get_OdbcType()
public void set_OdbcType(OdbcType value)
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
internal void Bind(OdbcCommand command, IntPtr hstmt, int ParamNum)
public string ToString()
private int GetNativeSize()
private void AllocateBuffer()
internal void CopyValue()
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public void ResetDbType()
public void ResetOdbcType()
}
public System.Data.Odbc.OdbcParameterCollection : DbParameterCollection {
private ArrayList list
private int nullParamCount
public int Count
public OdbcParameter Item
public OdbcParameter Item
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public int get_Count()
public OdbcParameter get_Item(int index)
public void set_Item(int index, OdbcParameter value)
public OdbcParameter get_Item(string parameterName)
public void set_Item(string parameterName, OdbcParameter value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public int Add(object value)
public OdbcParameter Add(OdbcParameter value)
public OdbcParameter Add(string parameterName, object value)
public OdbcParameter Add(string parameterName, OdbcType odbcType)
public OdbcParameter Add(string parameterName, OdbcType odbcType, int size)
public OdbcParameter Add(string parameterName, OdbcType odbcType, int size, string sourceColumn)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string parameterName)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
protected DbParameter GetParameter(string name)
protected DbParameter GetParameter(int index)
protected void SetParameter(string name, DbParameter value)
protected void SetParameter(int index, DbParameter value)
public void AddRange(Array values)
public void AddRange(OdbcParameter[] values)
public void Insert(int index, OdbcParameter value)
public OdbcParameter AddWithValue(string parameterName, object value)
public void Remove(OdbcParameter value)
public bool Contains(OdbcParameter value)
public int IndexOf(OdbcParameter value)
public void CopyTo(OdbcParameter[] array, int index)
}
internal System.Data.Odbc.OdbcParameterConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.Odbc.OdbcPermission : DBDataPermission {
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
internal void .ctor(DBDataPermission permission)
internal void .ctor(DBDataPermissionAttribute attribute)
public IPermission Copy()
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
}
public System.Data.Odbc.OdbcPermissionAttribute : DBDataPermissionAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
internal System.Data.Odbc.OdbcReturn : Enum {
public short value__
public OdbcReturn Error
public OdbcReturn InvalidHandle
public OdbcReturn StillExecuting
public OdbcReturn NeedData
public OdbcReturn Success
public OdbcReturn SuccessWithInfo
public OdbcReturn NoData
}
public System.Data.Odbc.OdbcRowUpdatedEventArgs : RowUpdatedEventArgs {
public OdbcCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OdbcCommand get_Command()
}
public System.Data.Odbc.OdbcRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.Odbc.OdbcRowUpdatingEventArgs : RowUpdatingEventArgs {
public OdbcCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OdbcCommand get_Command()
public void set_Command(OdbcCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.Odbc.OdbcRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OdbcRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, OdbcRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.Odbc.OdbcTimestamp : ValueType {
internal short year
internal ushort month
internal ushort day
internal ushort hour
internal ushort minute
internal ushort second
internal ulong fraction
}
public System.Data.Odbc.OdbcTransaction : DbTransaction {
private bool disposed
private OdbcConnection connection
private IsolationLevel isolationlevel
private bool isOpen
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
public OdbcConnection Connection
internal void .ctor(OdbcConnection conn, IsolationLevel isolationlevel)
private void System.IDisposable.Dispose()
private void SetAutoCommit(OdbcConnection conn, bool isAuto)
private IsolationLevel GetIsolationLevel(OdbcConnection conn)
private IsolationLevel MapOdbcIsolationLevel(OdbcIsolationLevel odbcLevel)
protected void Dispose(bool disposing)
public void Commit()
public void Rollback()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public OdbcConnection get_Connection()
}
public System.Data.Odbc.OdbcType : Enum {
public int value__
public OdbcType BigInt
public OdbcType Binary
public OdbcType Bit
public OdbcType Char
public OdbcType Date
public OdbcType DateTime
public OdbcType Decimal
public OdbcType Double
public OdbcType Image
public OdbcType Int
public OdbcType NChar
public OdbcType NText
public OdbcType Numeric
public OdbcType NVarChar
public OdbcType Real
public OdbcType SmallDateTime
public OdbcType SmallInt
public OdbcType Text
public OdbcType Time
public OdbcType Timestamp
public OdbcType TinyInt
public OdbcType UniqueIdentifier
public OdbcType VarBinary
public OdbcType VarChar
}
internal System.Data.Odbc.OdbcTypeConverter : object {
public OdbcTypeMap GetTypeMap(OdbcType odbcType)
public OdbcTypeMap InferFromValue(object value)
public OdbcTypeMap GetTypeMap(SQL_TYPE sqlType)
public OdbcTypeMap GetTypeMap(DbType dbType)
}
internal System.Data.Odbc.OdbcTypeMap : ValueType {
public DbType DbType
public OdbcType OdbcType
public SQL_C_TYPE NativeType
public SQL_TYPE SqlType
private Hashtable maps
public Hashtable Maps
public void .ctor(DbType dbType, OdbcType odbcType, SQL_C_TYPE nativeType, SQL_TYPE sqlType)
public Hashtable get_Maps()
}
internal System.Data.Odbc.SQL_C_TYPE : Enum {
public short value__
public SQL_C_TYPE BINARY
public SQL_C_TYPE BIT
public SQL_C_TYPE BOOKMARK
public SQL_C_TYPE CHAR
public SQL_C_TYPE DATE
public SQL_C_TYPE DEFAULT
public SQL_C_TYPE DOUBLE
public SQL_C_TYPE FLOAT
public SQL_C_TYPE GUID
public SQL_C_TYPE INTERVAL_DAY
public SQL_C_TYPE INTERVAL_DAY_TO_HOUR
public SQL_C_TYPE INTERVAL_DAY_TO_MINUTE
public SQL_C_TYPE INTERVAL_DAY_TO_SECOND
public SQL_C_TYPE INTERVAL_HOUR
public SQL_C_TYPE INTERVAL_HOUR_TO_MINUTE
public SQL_C_TYPE INTERVAL_HOUR_TO_SECOND
public SQL_C_TYPE INTERVAL_MINUTE
public SQL_C_TYPE INTERVAL_MINUTE_TO_SECOND
public SQL_C_TYPE INTERVAL_MONTH
public SQL_C_TYPE INTERVAL_SECOND
public SQL_C_TYPE INTERVAL_YEAR
public SQL_C_TYPE INTERVAL_YEAR_TO_MONTH
public SQL_C_TYPE LONG
public SQL_C_TYPE NUMERIC
public SQL_C_TYPE SBIGINT
public SQL_C_TYPE SHORT
public SQL_C_TYPE SLONG
public SQL_C_TYPE SSHORT
public SQL_C_TYPE STINYINT
public SQL_C_TYPE TCHAR
public SQL_C_TYPE TIME
public SQL_C_TYPE TIMESTAMP
public SQL_C_TYPE TINYINT
public SQL_C_TYPE TYPE_DATE
public SQL_C_TYPE TYPE_TIME
public SQL_C_TYPE TYPE_TIMESTAMP
public SQL_C_TYPE UBIGINT
public SQL_C_TYPE ULONG
public SQL_C_TYPE USHORT
public SQL_C_TYPE UTINYINT
public SQL_C_TYPE WCHAR
public SQL_C_TYPE UNASSIGNED
}
internal System.Data.Odbc.SQL_TYPE : Enum {
public short value__
public SQL_TYPE BIGINT
public SQL_TYPE BINARY
public SQL_TYPE BIT
public SQL_TYPE CHAR
public SQL_TYPE DATE
public SQL_TYPE DECIMAL
public SQL_TYPE DOUBLE
public SQL_TYPE GUID
public SQL_TYPE INTEGER
public SQL_TYPE INTERVAL_DAY
public SQL_TYPE INTERVAL_DAY_TO_HOUR
public SQL_TYPE INTERVAL_DAY_TO_MINUTE
public SQL_TYPE INTERVAL_DAY_TO_SECOND
public SQL_TYPE INTERVAL_HOUR
public SQL_TYPE INTERVAL_HOUR_TO_MINUTE
public SQL_TYPE INTERVAL_HOUR_TO_SECOND
public SQL_TYPE INTERVAL_MINUTE
public SQL_TYPE INTERVAL_MINUTE_TO_SECOND
public SQL_TYPE INTERVAL_MONTH
public SQL_TYPE INTERVAL_SECOND
public SQL_TYPE INTERVAL_YEAR
public SQL_TYPE INTERVAL_YEAR_TO_MONTH
public SQL_TYPE LONGVARBINARY
public SQL_TYPE LONGVARCHAR
public SQL_TYPE NUMERIC
public SQL_TYPE REAL
public SQL_TYPE SMALLINT
public SQL_TYPE TIME
public SQL_TYPE TIMESTAMP
public SQL_TYPE TINYINT
public SQL_TYPE TYPE_DATE
public SQL_TYPE TYPE_TIME
public SQL_TYPE TYPE_TIMESTAMP
public SQL_TYPE VARBINARY
public SQL_TYPE VARCHAR
public SQL_TYPE WCHAR
public SQL_TYPE WLONGVARCHAR
public SQL_TYPE WVARCHAR
public SQL_TYPE UNASSIGNED
}
internal System.Data.OleDb.GdaCommandOptions : Enum {
public int value__
public GdaCommandOptions IgnoreErrors
public GdaCommandOptions StopOnErrors
public GdaCommandOptions BadOption
}
internal System.Data.OleDb.GdaCommandType : Enum {
public int value__
public GdaCommandType Sql
public GdaCommandType Xml
public GdaCommandType Procedure
public GdaCommandType Table
public GdaCommandType Schema
public GdaCommandType Invalid
}
internal System.Data.OleDb.GdaConnectionOptions : Enum {
public int value__
public GdaConnectionOptions ReadOnly
}
internal System.Data.OleDb.GdaDate : object {
public short year
public ushort month
public ushort day
}
internal System.Data.OleDb.GdaList : object {
public IntPtr data
public IntPtr next
public IntPtr prev
}
internal System.Data.OleDb.GdaTime : object {
public ushort hour
public ushort minute
public ushort second
public long timezone
}
internal System.Data.OleDb.GdaTimestamp : object {
public short year
public ushort month
public ushort day
public ushort hour
public ushort minute
public ushort second
public ulong fraction
public long timezone
}
internal System.Data.OleDb.GdaTransactionIsolation : Enum {
public int value__
public GdaTransactionIsolation Unknown
public GdaTransactionIsolation ReadCommitted
public GdaTransactionIsolation ReadUncommitted
public GdaTransactionIsolation RepeatableRead
public GdaTransactionIsolation Serializable
}
internal System.Data.OleDb.GdaValueType : Enum {
public int value__
public GdaValueType Null
public GdaValueType Bigint
public GdaValueType Binary
public GdaValueType Boolean
public GdaValueType Date
public GdaValueType Double
public GdaValueType GeometricPoint
public GdaValueType Integer
public GdaValueType List
public GdaValueType Numeric
public GdaValueType Single
public GdaValueType Smallint
public GdaValueType String
public GdaValueType Time
public GdaValueType Timestamp
public GdaValueType Tinyint
public GdaValueType Type
public GdaValueType Unknown
}
internal System.Data.OleDb.libgda : object {
private IntPtr gdaClient
public IntPtr GdaClient
public IntPtr get_GdaClient()
public void FreeObject(IntPtr obj)
public void gda_init(string app_id, string version, int nargs, String[] args)
public GdaValueType gda_value_get_type(IntPtr value)
public long gda_value_get_bigint(IntPtr value)
public bool gda_value_get_boolean(IntPtr value)
public IntPtr gda_value_get_date(IntPtr value)
public double gda_value_get_double(IntPtr value)
public int gda_value_get_integer(IntPtr value)
public float gda_value_get_single(IntPtr value)
public int gda_value_get_smallint(IntPtr value)
public string gda_value_get_string(IntPtr value)
public IntPtr gda_value_get_time(IntPtr value)
public IntPtr gda_value_get_timestamp(IntPtr value)
public byte gda_value_get_tinyint(IntPtr value)
public bool gda_value_is_null(IntPtr value)
public string gda_value_stringify(IntPtr value)
public IntPtr gda_parameter_list_new()
public string gda_type_to_string(GdaValueType type)
public int gda_data_model_get_n_rows(IntPtr model)
public int gda_data_model_get_n_columns(IntPtr model)
public IntPtr gda_data_model_get_value_at(IntPtr model, int col, int row)
public string gda_data_model_get_column_title(IntPtr model, int col)
public IntPtr gda_data_model_describe_column(IntPtr model, int col)
public int gda_data_model_get_column_position(IntPtr model, string name)
public void gda_field_attributes_free(IntPtr fa)
public string gda_field_attributes_get_name(IntPtr fa)
public GdaValueType gda_field_attributes_get_gdatype(IntPtr fa)
public long gda_field_attributes_get_defined_size(IntPtr fa)
public long gda_field_attributes_get_scale(IntPtr fa)
public bool gda_field_attributes_get_allow_null(IntPtr fa)
public bool gda_field_attributes_get_primary_key(IntPtr fa)
public bool gda_field_attributes_get_unique_key(IntPtr fa)
public IntPtr gda_client_new()
public IntPtr gda_client_open_connection(IntPtr client, string dsn, string username, string password, GdaConnectionOptions options)
public IntPtr gda_client_open_connection_from_string(IntPtr client, string provider, string cnc_string, GdaConnectionOptions options)
public bool gda_connection_is_open(IntPtr cnc)
public bool gda_connection_close(IntPtr cnc)
public string gda_connection_get_server_version(IntPtr cnc)
public string gda_connection_get_database(IntPtr cnc)
public string gda_connection_get_dsn(IntPtr cnc)
public string gda_connection_get_cnc_string(IntPtr cnc)
public string gda_connection_get_provider(IntPtr cnc)
public string gda_connection_get_username(IntPtr cnc)
public string gda_connection_get_password(IntPtr cnc)
public bool gda_connection_change_database(IntPtr cnc, string name)
public IntPtr gda_transaction_new(string name)
public IntPtr gda_transaction_get_name(IntPtr xaction)
public IntPtr gda_transaction_set_name(IntPtr xaction, string name)
public GdaTransactionIsolation gda_transaction_get_isolation_level(IntPtr xaction)
public void gda_transaction_set_isolation_level(IntPtr xaction, GdaTransactionIsolation level)
public bool gda_connection_begin_transaction(IntPtr cnc, IntPtr xaction)
public bool gda_connection_commit_transaction(IntPtr cnc, IntPtr xaction)
public bool gda_connection_rollback_transaction(IntPtr cnc, IntPtr xaction)
public IntPtr gda_connection_execute_command(IntPtr cnc, IntPtr cmd, IntPtr parameterList)
public int gda_connection_execute_non_query(IntPtr cnc, IntPtr command, IntPtr parameterList)
public IntPtr gda_connection_execute_single_command(IntPtr cnc, IntPtr command, IntPtr parameterList)
public IntPtr gda_connection_get_errors(IntPtr cnc)
public IntPtr gda_command_new(string text, GdaCommandType type, GdaCommandOptions options)
public void gda_command_set_text(IntPtr cmd, string text)
public void gda_command_set_command_type(IntPtr cmd, GdaCommandType type)
public string gda_error_get_description(IntPtr error)
public long gda_error_get_number(IntPtr error)
public string gda_error_get_source(IntPtr error)
public string gda_error_get_sqlstate(IntPtr error)
}
public System.Data.OleDb.OleDbCommand : DbCommand {
private int DEFAULT_COMMAND_TIMEOUT
private string commandText
private int timeout
private CommandType commandType
private OleDbConnection connection
private OleDbParameterCollection parameters
private OleDbTransaction transaction
private bool designTimeVisible
private OleDbDataReader dataReader
private CommandBehavior behavior
private IntPtr gdaCommand
private UpdateRowSource updatedRowSource
private bool disposed
private IDbConnection System.Data.IDbCommand.Connection
private IDataParameterCollection System.Data.IDbCommand.Parameters
private IDbTransaction System.Data.IDbCommand.Transaction
public string CommandText
public int CommandTimeout
public CommandType CommandType
public OleDbConnection Connection
public bool DesignTimeVisible
public OleDbParameterCollection Parameters
public OleDbTransaction Transaction
public UpdateRowSource UpdatedRowSource
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public void .ctor(string cmdText)
public void .ctor(string cmdText, OleDbConnection connection)
public void .ctor(string cmdText, OleDbConnection connection, OleDbTransaction transaction)
private IDbConnection System.Data.IDbCommand.get_Connection()
private void System.Data.IDbCommand.set_Connection(IDbConnection value)
private IDataParameterCollection System.Data.IDbCommand.get_Parameters()
private IDbTransaction System.Data.IDbCommand.get_Transaction()
private void System.Data.IDbCommand.set_Transaction(IDbTransaction value)
private IDataReader System.Data.IDbCommand.ExecuteReader()
private IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior)
private object System.ICloneable.Clone()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public OleDbConnection get_Connection()
public void set_Connection(OleDbConnection value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public OleDbParameterCollection get_Parameters()
internal void set_Parameters(OleDbParameterCollection value)
public OleDbTransaction get_Transaction()
public void set_Transaction(OleDbTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public void Cancel()
public OleDbParameter CreateParameter()
protected void Dispose(bool disposing)
private void SetupGdaCommand()
public int ExecuteNonQuery()
public OleDbDataReader ExecuteReader()
public OleDbDataReader ExecuteReader(CommandBehavior behavior)
public object ExecuteScalar()
public OleDbCommand Clone()
public void Prepare()
public void ResetCommandTimeout()
protected DbParameter CreateDbParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
}
public System.Data.OleDb.OleDbCommandBuilder : DbCommandBuilder {
private OleDbDataAdapter adapter
public OleDbDataAdapter DataAdapter
public void .ctor(OleDbDataAdapter adapter)
public OleDbDataAdapter get_DataAdapter()
public void set_DataAdapter(OleDbDataAdapter value)
protected void ApplyParameterInfo(DbParameter dbParameter, DataRow row, StatementType statementType, bool whereClause)
public void DeriveParameters(OleDbCommand command)
public OleDbCommand GetDeleteCommand()
public OleDbCommand GetDeleteCommand(bool useColumnsForParameterNames)
public OleDbCommand GetInsertCommand()
public OleDbCommand GetInsertCommand(bool useColumnsForParameterNames)
protected string GetParameterName(int position)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int position)
public OleDbCommand GetUpdateCommand()
public OleDbCommand GetUpdateCommand(bool useColumnsForParameterNames)
public string QuoteIdentifier(string unquotedIdentifier)
public string QuoteIdentifier(string unquotedIdentifier, OleDbConnection connection)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
public string UnquoteIdentifier(string quotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier, OleDbConnection connection)
}
public System.Data.OleDb.OleDbConnection : DbConnection {
private string connectionString
private int connectionTimeout
private IntPtr gdaConnection
private OleDbInfoMessageEventHandler InfoMessage
public string ConnectionString
public int ConnectionTimeout
public string Database
public string DataSource
public string Provider
public string ServerVersion
public ConnectionState State
internal IntPtr GdaConnection
public void .ctor(string connectionString)
public void add_InfoMessage(OleDbInfoMessageEventHandler value)
public void remove_InfoMessage(OleDbInfoMessageEventHandler value)
private object System.ICloneable.Clone()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public string get_Database()
public string get_DataSource()
public string get_Provider()
public string get_ServerVersion()
public ConnectionState get_State()
internal IntPtr get_GdaConnection()
public OleDbTransaction BeginTransaction()
public OleDbTransaction BeginTransaction(IsolationLevel isolationLevel)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
protected DbCommand CreateDbCommand()
public void ChangeDatabase(string value)
public void Close()
public OleDbCommand CreateCommand()
protected void Dispose(bool disposing)
public DataTable GetOleDbSchemaTable(Guid schema, Object[] restrictions)
public void Open()
public void ReleaseObjectPool()
public void EnlistDistributedTransaction(ITransaction transaction)
public void EnlistTransaction(Transaction transaction)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
public void ResetState()
}
public System.Data.OleDb.OleDbDataAdapter : DbDataAdapter {
private OleDbCommand deleteCommand
private OleDbCommand insertCommand
private OleDbCommand selectCommand
private OleDbCommand updateCommand
private OleDbRowUpdatedEventHandler RowUpdated
private OleDbRowUpdatingEventHandler RowUpdating
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
public OleDbCommand DeleteCommand
public OleDbCommand InsertCommand
public OleDbCommand SelectCommand
public OleDbCommand UpdateCommand
public void .ctor(OleDbCommand selectCommand)
public void .ctor(string selectCommandText, OleDbConnection selectConnection)
public void .ctor(string selectCommandText, string selectConnectionString)
public void add_RowUpdated(OleDbRowUpdatedEventHandler value)
public void remove_RowUpdated(OleDbRowUpdatedEventHandler value)
public void add_RowUpdating(OleDbRowUpdatingEventHandler value)
public void remove_RowUpdating(OleDbRowUpdatingEventHandler value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private object System.ICloneable.Clone()
public OleDbCommand get_DeleteCommand()
public void set_DeleteCommand(OleDbCommand value)
public OleDbCommand get_InsertCommand()
public void set_InsertCommand(OleDbCommand value)
public OleDbCommand get_SelectCommand()
public void set_SelectCommand(OleDbCommand value)
public OleDbCommand get_UpdateCommand()
public void set_UpdateCommand(OleDbCommand value)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
public int Fill(DataTable dataTable, object ADODBRecordSet)
public int Fill(DataSet dataSet, object ADODBRecordSet, string srcTable)
}
public System.Data.OleDb.OleDbDataReader : DbDataReader {
private OleDbCommand command
private bool open
private ArrayList gdaResults
private int currentResult
private int currentRow
private bool disposed
public int Depth
public int FieldCount
public bool IsClosed
public object Item
public object Item
public int RecordsAffected
public bool HasRows
public int VisibleFieldCount
internal void .ctor(OleDbCommand command, ArrayList results)
private void System.IDisposable.Dispose()
public int get_Depth()
public int get_FieldCount()
public bool get_IsClosed()
public object get_Item(string name)
public object get_Item(int index)
public int get_RecordsAffected()
public bool get_HasRows()
public int get_VisibleFieldCount()
public void Close()
public bool GetBoolean(int ordinal)
public byte GetByte(int ordinal)
public long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int ordinal)
public long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length)
public OleDbDataReader GetData(int ordinal)
protected DbDataReader GetDbDataReader(int ordinal)
public string GetDataTypeName(int index)
public DateTime GetDateTime(int ordinal)
public decimal GetDecimal(int ordinal)
public double GetDouble(int ordinal)
public Type GetFieldType(int index)
public float GetFloat(int ordinal)
public Guid GetGuid(int ordinal)
public short GetInt16(int ordinal)
public int GetInt32(int ordinal)
public long GetInt64(int ordinal)
public string GetName(int index)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
public string GetString(int ordinal)
public TimeSpan GetTimeSpan(int ordinal)
public object GetValue(int ordinal)
public int GetValues(Object[] values)
public IEnumerator GetEnumerator()
public bool IsDBNull(int ordinal)
public bool NextResult()
public bool Read()
private void Dispose(bool disposing)
}
public System.Data.OleDb.OleDbError : object {
private string message
private int nativeError
private string source
private string sqlState
public string Message
public int NativeError
public string Source
public string SQLState
internal void .ctor(string msg, int code, string source, string sql)
public string get_Message()
public int get_NativeError()
public string get_Source()
public string get_SQLState()
public string ToString()
}
public System.Data.OleDb.OleDbErrorCollection : object {
private ArrayList items
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public int Count
public OleDbError Item
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public int get_Count()
public OleDbError get_Item(int index)
internal void Add(OleDbError error)
public void CopyTo(Array array, int index)
public void CopyTo(OleDbError[] array, int index)
public IEnumerator GetEnumerator()
}
public System.Data.OleDb.OleDbException : DbException {
private OleDbConnection connection
public int ErrorCode
public OleDbErrorCollection Errors
public string Message
public string Source
internal void .ctor(OleDbConnection cnc)
public int get_ErrorCode()
public OleDbErrorCollection get_Errors()
public string get_Message()
public string get_Source()
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.OleDb.OleDbFactory : DbProviderFactory {
public OleDbFactory Instance
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
public System.Data.OleDb.OleDbInfoMessageEventArgs : EventArgs {
public int ErrorCode
public OleDbErrorCollection Errors
public string Message
public string Source
public int get_ErrorCode()
public OleDbErrorCollection get_Errors()
public string get_Message()
public string get_Source()
public string ToString()
}
public System.Data.OleDb.OleDbInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbLiteral : Enum {
public int value__
public OleDbLiteral Binary_Literal
public OleDbLiteral Catalog_Name
public OleDbLiteral Catalog_Separator
public OleDbLiteral Char_Literal
public OleDbLiteral Column_Alias
public OleDbLiteral Column_Name
public OleDbLiteral Correlation_Name
public OleDbLiteral Cube_Name
public OleDbLiteral Cursor_Name
public OleDbLiteral Dimension_Name
public OleDbLiteral Escape_Percent_Prefix
public OleDbLiteral Escape_Percent_Suffix
public OleDbLiteral Escape_Underscore_Prefix
public OleDbLiteral Escape_Underscore_Suffix
public OleDbLiteral Hierarchy_Name
public OleDbLiteral Index_Name
public OleDbLiteral Invalid
public OleDbLiteral Level_Name
public OleDbLiteral Like_Percent
public OleDbLiteral Like_Underscore
public OleDbLiteral Member_Name
public OleDbLiteral Procedure_Name
public OleDbLiteral Property_Name
public OleDbLiteral Quote_Prefix
public OleDbLiteral Quote_Suffix
public OleDbLiteral Schema_Name
public OleDbLiteral Schema_Separator
public OleDbLiteral Table_Name
public OleDbLiteral Text_Command
public OleDbLiteral User_Name
public OleDbLiteral View_Name
}
public System.Data.OleDb.OleDbMetaDataCollectionNames : object {
public string Catalogs
public string Collations
public string Columns
public string Indexes
public string ProcedureColumns
public string ProcedureParameters
public string Procedures
public string Tables
public string Views
}
public System.Data.OleDb.OleDbParameter : DbParameter {
private string name
private object value
private int size
private bool isNullable
private byte precision
private byte scale
private DataRowVersion sourceVersion
private string sourceColumn
private bool sourceColumnNullMapping
private ParameterDirection direction
private OleDbType oleDbType
private DbType dbType
private OleDbParameterCollection container
private IntPtr gdaParameter
public DbType DbType
public ParameterDirection Direction
public bool IsNullable
public OleDbType OleDbType
public string ParameterName
public byte Precision
public byte Scale
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
public object Value
internal OleDbParameterCollection Container
internal IntPtr GdaParameter
public void .ctor(string name, object value)
public void .ctor(string name, OleDbType dataType)
public void .ctor(string name, OleDbType dataType, int size)
public void .ctor(string name, OleDbType dataType, int size, string srcColumn)
public void .ctor(string parameterName, OleDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string srcColumn, DataRowVersion srcVersion, object value)
public void .ctor(string parameterName, OleDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value)
private object System.ICloneable.Clone()
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public OleDbType get_OleDbType()
public void set_OleDbType(OleDbType value)
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
internal OleDbParameterCollection get_Container()
internal void set_Container(OleDbParameterCollection value)
internal IntPtr get_GdaParameter()
public void ResetDbType()
public void ResetOleDbType()
public string ToString()
private OleDbType DbTypeToOleDbType(DbType dbType)
private DbType OleDbTypeToDbType(OleDbType oleDbType)
private OleDbType GetOleDbType(object value)
}
public System.Data.OleDb.OleDbParameterCollection : DbParameterCollection {
private ArrayList list
public int Count
public OleDbParameter Item
public OleDbParameter Item
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
internal IntPtr GdaParameterList
public int get_Count()
public OleDbParameter get_Item(int index)
public void set_Item(int index, OleDbParameter value)
public OleDbParameter get_Item(string parameterName)
public void set_Item(string parameterName, OleDbParameter value)
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
internal IntPtr get_GdaParameterList()
public int Add(object value)
public OleDbParameter Add(OleDbParameter value)
public OleDbParameter Add(string parameterName, object value)
public OleDbParameter AddWithValue(string parameterName, object value)
public OleDbParameter Add(string parameterName, OleDbType oleDbType)
public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size)
public OleDbParameter Add(string parameterName, OleDbType oleDbType, int size, string sourceColumn)
public void AddRange(Array values)
public void AddRange(OleDbParameter[] values)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public bool Contains(OleDbParameter value)
public void CopyTo(Array array, int index)
public void CopyTo(OleDbParameter[] array, int index)
public IEnumerator GetEnumerator()
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
public int IndexOf(object value)
public int IndexOf(OleDbParameter value)
public int IndexOf(string parameterName)
public void Insert(int index, object value)
public void Insert(int index, OleDbParameter value)
public void Remove(object value)
public void Remove(OleDbParameter value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
}
internal System.Data.OleDb.OleDbParameterConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.OleDb.OleDbPermission : DBDataPermission {
private string _provider
public string Provider
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
internal void .ctor(DBDataPermission permission)
internal void .ctor(DBDataPermissionAttribute attribute)
public string get_Provider()
public void set_Provider(string value)
public IPermission Copy()
}
public System.Data.OleDb.OleDbPermissionAttribute : DBDataPermissionAttribute {
private string _provider
public string Provider
public void .ctor(SecurityAction action)
public string get_Provider()
public void set_Provider(string value)
public IPermission CreatePermission()
}
public System.Data.OleDb.OleDbRowUpdatedEventArgs : RowUpdatedEventArgs {
public OleDbCommand Command
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OleDbCommand get_Command()
}
public System.Data.OleDb.OleDbRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbRowUpdatingEventArgs : RowUpdatingEventArgs {
public OleDbCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public OleDbCommand get_Command()
public void set_Command(OleDbCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.OleDb.OleDbRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, OleDbRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, OleDbRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.OleDb.OleDbSchemaGuid : object {
public Guid Assertions
public Guid Catalogs
public Guid Character_Sets
public Guid Check_Constraints
public Guid Check_Constraints_By_Table
public Guid Collations
public Guid Columns
public Guid Column_Domain_Usage
public Guid Column_Privileges
public Guid Constraint_Column_Usage
public Guid Constraint_Table_Usage
public Guid DbInfoLiterals
public Guid Foreign_Keys
public Guid Indexes
public Guid Key_Column_Usage
public Guid Primary_Keys
public Guid Procedures
public Guid Procedure_Columns
public Guid Procedure_Parameters
public Guid Provider_Types
public Guid Referential_Constraints
public Guid Schemata
public Guid Sql_Languages
public Guid Statistics
public Guid Tables
public Guid Tables_Info
public Guid Table_Constraints
public Guid Table_Privileges
public Guid Table_Statistics
public Guid Translations
public Guid Trustee
public Guid Usage_Privileges
public Guid Views
public Guid View_Column_Usage
public Guid View_Table_Usage
}
public System.Data.OleDb.OleDbTransaction : DbTransaction {
private bool disposed
private OleDbConnection connection
private IntPtr gdaTransaction
private int depth
private bool isOpen
public OleDbConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
internal void .ctor(OleDbConnection connection, int depth)
internal void .ctor(OleDbConnection connection)
internal void .ctor(OleDbConnection connection, int depth, IsolationLevel isolevel)
internal void .ctor(OleDbConnection connection, IsolationLevel isolevel)
public OleDbConnection get_Connection()
protected DbConnection get_DbConnection()
public IsolationLevel get_IsolationLevel()
public OleDbTransaction Begin()
public OleDbTransaction Begin(IsolationLevel isolevel)
public void Commit()
protected void Dispose(bool disposing)
public void Rollback()
}
public System.Data.OleDb.OleDbType : Enum {
public int value__
public OleDbType BigInt
public OleDbType Binary
public OleDbType Boolean
public OleDbType BSTR
public OleDbType Char
public OleDbType Currency
public OleDbType Date
public OleDbType DBDate
public OleDbType DBTime
public OleDbType DBTimeStamp
public OleDbType Decimal
public OleDbType Double
public OleDbType Empty
public OleDbType Error
public OleDbType Filetime
public OleDbType Guid
public OleDbType IDispatch
public OleDbType Integer
public OleDbType IUnknown
public OleDbType LongVarBinary
public OleDbType LongVarChar
public OleDbType LongVarWChar
public OleDbType Numeric
public OleDbType PropVariant
public OleDbType Single
public OleDbType SmallInt
public OleDbType TinyInt
public OleDbType UnsignedBigInt
public OleDbType UnsignedInt
public OleDbType UnsignedSmallInt
public OleDbType UnsignedTinyInt
public OleDbType VarBinary
public OleDbType VarChar
public OleDbType Variant
public OleDbType VarNumeric
public OleDbType VarWChar
public OleDbType WChar
}
public System.Data.OperationAbortedException : SystemException {
internal void .ctor(string s)
internal void .ctor(string s, Exception innerException)
internal void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.ParameterDirection : Enum {
public int value__
public ParameterDirection Input
public ParameterDirection Output
public ParameterDirection InputOutput
public ParameterDirection ReturnValue
}
public System.Data.PropertyAttributes : Enum {
public int value__
public PropertyAttributes NotSupported
public PropertyAttributes Required
public PropertyAttributes Optional
public PropertyAttributes Read
public PropertyAttributes Write
}
public System.Data.PropertyCollection : Hashtable {
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.QueryType : Enum {
public int value__
public QueryType NoData
public QueryType Rowset
public QueryType Scalar
}
public System.Data.ReadOnlyException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
internal System.Data.RelatedDataView : DataView {
private Object[] _keyValues
private DataColumn[] _columns
internal IExpression FilterExpression
internal void .ctor(DataColumn[] relatedColumns, Object[] keyValues)
private void Mono.Data.SqlExpressions.IExpression.ResetExpression()
internal IExpression get_FilterExpression()
public bool Equals(object obj)
public int GetHashCode()
public object Eval(DataRow row)
public bool EvalBoolean(DataRow row)
public bool DependsOn(DataColumn other)
}
internal System.Data.RelationshipConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
internal System.Data.RelationStructure : object {
public string ExplicitName
public string ParentTableName
public string ChildTableName
public string ParentColumnName
public string ChildColumnName
public bool IsNested
public bool CreateConstraint
}
internal System.Data.RelationStructureCollection : CollectionBase {
public RelationStructure Item
public RelationStructure Item
public void Add(RelationStructure rel)
public RelationStructure get_Item(int i)
public RelationStructure get_Item(string parent, string child)
}
internal System.Data.ResDescriptionAttribute : DescriptionAttribute {
private string description
public string Description
public void .ctor(string description)
public string get_Description()
}
public System.Data.RowNotInTableException : DataException {
public void .ctor(string s)
public void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.Rule : Enum {
public int value__
public Rule None
public Rule Cascade
public Rule SetNull
public Rule SetDefault
}
public System.Data.SchemaSerializationMode : Enum {
public int value__
public SchemaSerializationMode IncludeSchema
public SchemaSerializationMode ExcludeSchema
}
public System.Data.SchemaType : Enum {
public int value__
public SchemaType Source
public SchemaType Mapped
}
public System.Data.SerializationFormat : Enum {
public int value__
public SerializationFormat Xml
public SerializationFormat Binary
}
public System.Data.Sql.SqlDataSourceEnumerator : DbDataSourceEnumerator {
public SqlDataSourceEnumerator Instance
public SqlDataSourceEnumerator get_Instance()
public DataTable GetDataSources()
}
public System.Data.Sql.SqlNotificationRequest : object {
private string userData
private string options
private int timeout
public string UserData
public string Options
public int Timeout
public void .ctor(string userData, string options, int timeout)
public string get_UserData()
public void set_UserData(string value)
public string get_Options()
public void set_Options(string value)
public int get_Timeout()
public void set_Timeout(int value)
}
internal System.Data.SqlClient.NetworkLibraryConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.OnChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlNotificationEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlNotificationEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SortOrder : Enum {
public int value__
public SortOrder Ascending
public SortOrder Descending
public SortOrder Unspecified
}
internal System.Data.SqlClient.SqlAsyncResult : object {
private SqlAsyncState _sqlState
private WaitHandle _waitHandle
private bool _completed
private bool _completedSyncly
private bool _ended
private AsyncCallback _userCallback
private object _retValue
private string _endMethod
private IAsyncResult _internal
public object AsyncState
internal SqlAsyncState SqlAsyncState
public WaitHandle AsyncWaitHandle
public bool IsCompleted
public bool CompletedSynchronously
internal object ReturnValue
public string EndMethod
public bool Ended
internal IAsyncResult InternalResult
public AsyncCallback BubbleCallback
public void .ctor(AsyncCallback userCallback, SqlAsyncState sqlState)
public void .ctor(AsyncCallback userCallback, object state)
public object get_AsyncState()
internal SqlAsyncState get_SqlAsyncState()
public WaitHandle get_AsyncWaitHandle()
public bool get_IsCompleted()
public bool get_CompletedSynchronously()
internal object get_ReturnValue()
internal void set_ReturnValue(object value)
public string get_EndMethod()
public void set_EndMethod(string value)
public bool get_Ended()
public void set_Ended(bool value)
internal IAsyncResult get_InternalResult()
internal void set_InternalResult(IAsyncResult value)
public AsyncCallback get_BubbleCallback()
internal void MarkComplete()
public void Bubbleback(IAsyncResult ar)
}
internal System.Data.SqlClient.SqlAsyncState : object {
private object _userState
public object UserState
public void .ctor(object userState)
public object get_UserState()
public void set_UserState(object value)
}
public System.Data.SqlClient.SqlBulkCopy : object {
private int _batchSize
private int _notifyAfter
private int _bulkCopyTimeout
private SqlBulkCopyColumnMappingCollection _columnMappingCollection
private string _destinationTableName
private bool ordinalMapping
private bool sqlRowsCopied
private bool identityInsert
private bool isLocalConnection
private SqlConnection connection
private SqlBulkCopyOptions copyOptions
private SqlRowsCopiedEventHandler SqlRowsCopied
public int BatchSize
public int BulkCopyTimeout
public SqlBulkCopyColumnMappingCollection ColumnMappings
public string DestinationTableName
public int NotifyAfter
public void .ctor(SqlConnection connection)
public void .ctor(string connectionString)
public void .ctor(string connectionString, SqlBulkCopyOptions copyOptions)
public void .ctor(SqlConnection connection, SqlBulkCopyOptions copyOptions, SqlTransaction externalTransaction)
public void add_SqlRowsCopied(SqlRowsCopiedEventHandler value)
public void remove_SqlRowsCopied(SqlRowsCopiedEventHandler value)
private void System.IDisposable.Dispose()
public int get_BatchSize()
public void set_BatchSize(int value)
public int get_BulkCopyTimeout()
public void set_BulkCopyTimeout(int value)
public SqlBulkCopyColumnMappingCollection get_ColumnMappings()
public string get_DestinationTableName()
public void set_DestinationTableName(string value)
public int get_NotifyAfter()
public void set_NotifyAfter(int value)
public void Close()
private DataTable[] GetColumnMetaData()
private string GenerateColumnMetaData(SqlCommand tmpCmd, DataTable colMetaData, DataTable tableCollations)
private void ValidateColumnMapping(DataTable table, DataTable tableCollations)
private void BulkCopyToServer(DataTable table, DataRowState state)
public void WriteToServer(DataRow[] rows)
public void WriteToServer(DataTable table)
public void WriteToServer(IDataReader reader)
public void WriteToServer(DataTable table, DataRowState rowState)
private void RowsCopied(long rowsCopied)
}
public System.Data.SqlClient.SqlBulkCopyColumnMapping : object {
private int sourceOrdinal
private int destinationOrdinal
private string sourceColumn
private string destinationColumn
public string DestinationColumn
public string SourceColumn
public int DestinationOrdinal
public int SourceOrdinal
public void .ctor(int sourceColumnOrdinal, int destinationOrdinal)
public void .ctor(int sourceColumnOrdinal, string destinationColumn)
public void .ctor(string sourceColumn, int destinationOrdinal)
public void .ctor(string sourceColumn, string destinationColumn)
public string get_DestinationColumn()
public void set_DestinationColumn(string value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public int get_DestinationOrdinal()
public void set_DestinationOrdinal(int value)
public int get_SourceOrdinal()
public void set_SourceOrdinal(int value)
}
public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection : CollectionBase {
public SqlBulkCopyColumnMapping Item
public SqlBulkCopyColumnMapping get_Item(int index)
public SqlBulkCopyColumnMapping Add(SqlBulkCopyColumnMapping bulkCopyColumnMapping)
public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, int destinationColumnIndex)
public SqlBulkCopyColumnMapping Add(int sourceColumnIndex, string destinationColumn)
public SqlBulkCopyColumnMapping Add(string sourceColumn, int destinationColumnIndex)
public SqlBulkCopyColumnMapping Add(string sourceColumn, string destinationColumn)
public void Clear()
public bool Contains(SqlBulkCopyColumnMapping value)
public int IndexOf(SqlBulkCopyColumnMapping value)
public void CopyTo(SqlBulkCopyColumnMapping[] array, int index)
public void Insert(int index, SqlBulkCopyColumnMapping value)
public void Remove(SqlBulkCopyColumnMapping value)
public void RemoveAt(int index)
}
public System.Data.SqlClient.SqlBulkCopyOptions : Enum {
public int value__
public SqlBulkCopyOptions CheckConstraints
public SqlBulkCopyOptions Default
public SqlBulkCopyOptions FireTriggers
public SqlBulkCopyOptions KeepIdentity
public SqlBulkCopyOptions KeepNulls
public SqlBulkCopyOptions TableLock
public SqlBulkCopyOptions UseInternalTransaction
}
public System.Data.SqlClient.SqlClientFactory : DbProviderFactory {
public SqlClientFactory Instance
public bool CanCreateDataSourceEnumerator
public bool get_CanCreateDataSourceEnumerator()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbDataSourceEnumerator CreateDataSourceEnumerator()
public DbParameter CreateParameter()
public CodeAccessPermission CreatePermission(PermissionState state)
}
public System.Data.SqlClient.SqlClientMetaDataCollectionNames : object {
public string Columns
public string Databases
public string ForeignKeys
public string IndexColumns
public string Indexes
public string Parameters
public string ProcedureColumns
public string Procedures
public string Tables
public string UserDefinedTypes
public string Users
public string ViewColumns
public string Views
}
public System.Data.SqlClient.SqlClientPermission : DBDataPermission {
public void .ctor(PermissionState state)
public void .ctor(PermissionState state, bool allowBlankPassword)
internal void .ctor(DBDataPermission permission)
internal void .ctor(DBDataPermissionAttribute attribute)
public IPermission Copy()
public void Add(string connectionString, string restrictions, KeyRestrictionBehavior behavior)
}
public System.Data.SqlClient.SqlClientPermissionAttribute : DBDataPermissionAttribute {
public void .ctor(SecurityAction action)
public IPermission CreatePermission()
}
public System.Data.SqlClient.SqlCommand : DbCommand {
private int DEFAULT_COMMAND_TIMEOUT
private int commandTimeout
private bool designTimeVisible
private string commandText
private CommandType commandType
private SqlConnection connection
private SqlTransaction transaction
private UpdateRowSource updatedRowSource
private CommandBehavior behavior
private SqlParameterCollection parameters
private string preparedStatement
private bool disposed
private SqlNotificationRequest notification
private bool notificationAutoEnlist
private StatementCompletedEventHandler StatementCompleted
internal CommandBehavior CommandBehavior
public string CommandText
public int CommandTimeout
public CommandType CommandType
public SqlConnection Connection
public bool DesignTimeVisible
public SqlParameterCollection Parameters
internal Tds Tds
public SqlTransaction Transaction
public UpdateRowSource UpdatedRowSource
public SqlNotificationRequest Notification
public bool NotificationAutoEnlist
protected DbConnection DbConnection
protected DbParameterCollection DbParameterCollection
protected DbTransaction DbTransaction
public void .ctor(string cmdText)
public void .ctor(string cmdText, SqlConnection connection)
public void .ctor(string cmdText, SqlConnection connection, SqlTransaction transaction)
private void .ctor(string commandText, SqlConnection connection, SqlTransaction transaction, CommandType commandType, UpdateRowSource updatedRowSource, bool designTimeVisible, int commandTimeout, SqlParameterCollection parameters)
public void add_StatementCompleted(StatementCompletedEventHandler value)
public void remove_StatementCompleted(StatementCompletedEventHandler value)
private object System.ICloneable.Clone()
internal CommandBehavior get_CommandBehavior()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
public SqlConnection get_Connection()
public void set_Connection(SqlConnection value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public SqlParameterCollection get_Parameters()
internal Tds get_Tds()
public SqlTransaction get_Transaction()
public void set_Transaction(SqlTransaction value)
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public SqlNotificationRequest get_Notification()
public void set_Notification(SqlNotificationRequest value)
public bool get_NotificationAutoEnlist()
public void set_NotificationAutoEnlist(bool value)
public void Cancel()
public SqlCommand Clone()
internal void CloseDataReader()
public SqlParameter CreateParameter()
private string EscapeProcName(string name, bool schema)
internal void DeriveParameters()
private void Execute(bool wantResults)
public int ExecuteNonQuery()
public SqlDataReader ExecuteReader()
public SqlDataReader ExecuteReader(CommandBehavior behavior)
public object ExecuteScalar()
public XmlReader ExecuteXmlReader()
internal void GetOutputParameters()
protected void Dispose(bool disposing)
public void Prepare()
public void ResetCommandTimeout()
private void Unprepare()
private void ValidateCommand(string method, bool async)
protected DbParameter CreateDbParameter()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
protected DbParameterCollection get_DbParameterCollection()
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
internal IAsyncResult BeginExecuteInternal(CommandBehavior behavior, bool wantResults, AsyncCallback callback, object state)
internal void EndExecuteInternal(IAsyncResult ar)
public IAsyncResult BeginExecuteNonQuery()
public IAsyncResult BeginExecuteNonQuery(AsyncCallback callback, object stateObject)
public int EndExecuteNonQuery(IAsyncResult asyncResult)
public IAsyncResult BeginExecuteReader()
public IAsyncResult BeginExecuteReader(CommandBehavior behavior)
public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject)
public IAsyncResult BeginExecuteReader(AsyncCallback callback, object stateObject, CommandBehavior behavior)
public SqlDataReader EndExecuteReader(IAsyncResult asyncResult)
public IAsyncResult BeginExecuteXmlReader(AsyncCallback callback, object stateObject)
public IAsyncResult BeginExecuteXmlReader()
public XmlReader EndExecuteXmlReader(IAsyncResult asyncResult)
internal void ValidateAsyncResult(IAsyncResult ar, string endMethod)
}
public System.Data.SqlClient.SqlCommandBuilder : DbCommandBuilder {
private string _catalogSeparator
private string _schemaSeparator
private CatalogLocation _catalogLocation
public SqlDataAdapter DataAdapter
public string QuotePrefix
public string QuoteSuffix
public string CatalogSeparator
public string SchemaSeparator
public CatalogLocation CatalogLocation
public void .ctor(SqlDataAdapter adapter)
public SqlDataAdapter get_DataAdapter()
public void set_DataAdapter(SqlDataAdapter value)
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public void DeriveParameters(SqlCommand command)
public SqlCommand GetDeleteCommand()
public SqlCommand GetInsertCommand()
public SqlCommand GetUpdateCommand()
public SqlCommand GetUpdateCommand(bool useColumnsForParameterNames)
public SqlCommand GetDeleteCommand(bool useColumnsForParameterNames)
public SqlCommand GetInsertCommand(bool useColumnsForParameterNames)
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
private bool IncludedInInsert(DataRow schemaRow)
private bool IncludedInUpdate(DataRow schemaRow)
private bool IncludedInWhereClause(DataRow schemaRow)
protected void ApplyParameterInfo(DbParameter parameter, DataRow datarow, StatementType statementType, bool whereClause)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterName(string parameterName)
protected string GetParameterPlaceholder(int parameterOrdinal)
private void RowUpdatingHandler(object sender, SqlRowUpdatingEventArgs args)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
protected DataTable GetSchemaTable(DbCommand srcCommand)
protected DbCommand InitializeCommand(DbCommand command)
}
public System.Data.SqlClient.SqlConnection : DbConnection {
private int DEFAULT_PACKETSIZE
private int MAX_PACKETSIZE
private int MIN_PACKETSIZE
private int DEFAULT_CONNECTIONTIMEOUT
private int DEFAULT_MAXPOOLSIZE
private int MIN_MAXPOOLSIZE
private int DEFAULT_MINPOOLSIZE
private int DEFAULT_PORT
private bool disposed
private TdsConnectionPoolManager sqlConnectionPools
private TdsConnectionPool pool
private string connectionString
private SqlTransaction transaction
private TdsConnectionParameters parms
private bool connectionReset
private bool pooling
private string dataSource
private int connectionTimeout
private int minPoolSize
private int maxPoolSize
private int packetSize
private int port
private bool fireInfoMessageEventOnUserErrors
private bool statisticsEnabled
private ConnectionState state
private SqlDataReader dataReader
private XmlReader xmlReader
private Tds tds
private bool async
private bool userInstance
private SqlInfoMessageEventHandler InfoMessage
private Dictionary`2<string, int> <>f__switch$map6
private Dictionary`2<string, int> <>f__switch$map7
public string ConnectionString
public int ConnectionTimeout
public string Database
internal SqlDataReader DataReader
public string DataSource
public int PacketSize
public string ServerVersion
public ConnectionState State
internal Tds Tds
internal SqlTransaction Transaction
public string WorkstationId
internal XmlReader XmlReader
public bool FireInfoMessageEventOnUserErrors
public bool StatisticsEnabled
internal bool AsyncProcessing
public void .ctor(string connectionString)
public void add_InfoMessage(SqlInfoMessageEventHandler value)
public void remove_InfoMessage(SqlInfoMessageEventHandler value)
private object System.ICloneable.Clone()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public int get_ConnectionTimeout()
public string get_Database()
internal SqlDataReader get_DataReader()
internal void set_DataReader(SqlDataReader value)
public string get_DataSource()
public int get_PacketSize()
public string get_ServerVersion()
public ConnectionState get_State()
internal Tds get_Tds()
internal SqlTransaction get_Transaction()
internal void set_Transaction(SqlTransaction value)
public string get_WorkstationId()
internal XmlReader get_XmlReader()
internal void set_XmlReader(XmlReader value)
public bool get_FireInfoMessageEventOnUserErrors()
public void set_FireInfoMessageEventOnUserErrors(bool value)
public bool get_StatisticsEnabled()
public void set_StatisticsEnabled(bool value)
private void ErrorHandler(object sender, TdsInternalErrorMessageEventArgs e)
private void MessageHandler(object sender, TdsInternalInfoMessageEventArgs e)
public SqlTransaction BeginTransaction()
public SqlTransaction BeginTransaction(IsolationLevel iso)
public SqlTransaction BeginTransaction(string transactionName)
public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName)
public void ChangeDatabase(string database)
private void ChangeState(ConnectionState currentState)
public void Close()
public SqlCommand CreateCommand()
private SqlInfoMessageEventArgs CreateSqlInfoMessageEvent(TdsInternalErrorCollection errors)
private StateChangeEventArgs CreateStateChangeEvent(ConnectionState originalState, ConnectionState currentState)
protected void Dispose(bool disposing)
public void EnlistDistributedTransaction(ITransaction transaction)
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
protected DbCommand CreateDbCommand()
public void Open()
private bool ParseDataSource(string theDataSource, Int32& thePort, String& theServerName)
private bool ConvertIntegratedSecurity(string value)
private bool ConvertToBoolean(string key, string value, bool defaultValue)
private int ConvertToInt32(string key, string value, int defaultValue)
private int DiscoverTcpPortViaSqlMonitor(string ServerName, string InstanceName)
private void SetConnectionString(string connectionString)
private void SetDefaultConnectionParameters()
private void SetProperties(string name, string value)
private bool IsValidDatabaseName(string database)
private void OnSqlInfoMessage(SqlInfoMessageEventArgs value)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
public void ChangePassword(string connectionString, string newPassword)
public void ClearAllPools()
public void ClearPool(SqlConnection connection)
internal bool get_AsyncProcessing()
}
public System.Data.SqlClient.SqlConnectionStringBuilder : DbConnectionStringBuilder {
private string DEF_APPLICATIONNAME
private bool DEF_ASYNCHRONOUSPROCESSING
private string DEF_ATTACHDBFILENAME
private bool DEF_CONNECTIONRESET
private int DEF_CONNECTTIMEOUT
private string DEF_CURRENTLANGUAGE
private string DEF_DATASOURCE
private bool DEF_ENCRYPT
private bool DEF_ENLIST
private string DEF_FAILOVERPARTNER
private string DEF_INITIALCATALOG
private bool DEF_INTEGRATEDSECURITY
private int DEF_LOADBALANCETIMEOUT
private int DEF_MAXPOOLSIZE
private int DEF_MINPOOLSIZE
private bool DEF_MULTIPLEACTIVERESULTSETS
private string DEF_NETWORKLIBRARY
private int DEF_PACKETSIZE
private string DEF_PASSWORD
private bool DEF_PERSISTSECURITYINFO
private bool DEF_POOLING
private bool DEF_REPLICATION
private string DEF_USERID
private string DEF_WORKSTATIONID
private string DEF_TYPESYSTEMVERSION
private bool DEF_TRUSTSERVERCERTIFICATE
private bool DEF_USERINSTANCE
private bool DEF_CONTEXTCONNECTION
private string DEF_TRANSACTIONBINDING
private string _applicationName
private bool _asynchronousProcessing
private string _attachDBFilename
private bool _connectionReset
private int _connectTimeout
private string _currentLanguage
private string _dataSource
private bool _encrypt
private bool _enlist
private string _failoverPartner
private string _initialCatalog
private bool _integratedSecurity
private int _loadBalanceTimeout
private int _maxPoolSize
private int _minPoolSize
private bool _multipleActiveResultSets
private string _networkLibrary
private int _packetSize
private string _password
private bool _persistSecurityInfo
private bool _pooling
private bool _replication
private string _userID
private string _workstationID
private bool _trustServerCertificate
private string _typeSystemVersion
private bool _userInstance
private bool _contextConnection
private string _transactionBinding
private Dictionary`2<string, string> _keywords
private Dictionary`2<string, object> _defaults
private Dictionary`2<string, int> <>f__switch$map8
public string ApplicationName
public bool AsynchronousProcessing
public string AttachDBFilename
public bool ConnectionReset
public int ConnectTimeout
public string CurrentLanguage
public string DataSource
public bool Encrypt
public bool Enlist
public string FailoverPartner
public string InitialCatalog
public bool IntegratedSecurity
public bool IsFixedSize
public object Item
public ICollection Keys
public int LoadBalanceTimeout
public int MaxPoolSize
public int MinPoolSize
public bool MultipleActiveResultSets
public string NetworkLibrary
public int PacketSize
public string Password
public bool PersistSecurityInfo
public bool Pooling
public bool Replication
public string UserID
public ICollection Values
public string WorkstationID
public bool TrustServerCertificate
public string TypeSystemVersion
public bool UserInstance
public bool ContextConnection
public void .ctor(string connectionString)
public string get_ApplicationName()
public void set_ApplicationName(string value)
public bool get_AsynchronousProcessing()
public void set_AsynchronousProcessing(bool value)
public string get_AttachDBFilename()
public void set_AttachDBFilename(string value)
public bool get_ConnectionReset()
public void set_ConnectionReset(bool value)
public int get_ConnectTimeout()
public void set_ConnectTimeout(int value)
public string get_CurrentLanguage()
public void set_CurrentLanguage(string value)
public string get_DataSource()
public void set_DataSource(string value)
public bool get_Encrypt()
public void set_Encrypt(bool value)
public bool get_Enlist()
public void set_Enlist(bool value)
public string get_FailoverPartner()
public void set_FailoverPartner(string value)
public string get_InitialCatalog()
public void set_InitialCatalog(string value)
public bool get_IntegratedSecurity()
public void set_IntegratedSecurity(bool value)
public bool get_IsFixedSize()
public object get_Item(string keyword)
public void set_Item(string keyword, object value)
public ICollection get_Keys()
public int get_LoadBalanceTimeout()
public void set_LoadBalanceTimeout(int value)
public int get_MaxPoolSize()
public void set_MaxPoolSize(int value)
public int get_MinPoolSize()
public void set_MinPoolSize(int value)
public bool get_MultipleActiveResultSets()
public void set_MultipleActiveResultSets(bool value)
public string get_NetworkLibrary()
public void set_NetworkLibrary(string value)
public int get_PacketSize()
public void set_PacketSize(int value)
public string get_Password()
public void set_Password(string value)
public bool get_PersistSecurityInfo()
public void set_PersistSecurityInfo(bool value)
public bool get_Pooling()
public void set_Pooling(bool value)
public bool get_Replication()
public void set_Replication(bool value)
public string get_UserID()
public void set_UserID(string value)
public ICollection get_Values()
public string get_WorkstationID()
public void set_WorkstationID(string value)
public bool get_TrustServerCertificate()
public void set_TrustServerCertificate(bool value)
public string get_TypeSystemVersion()
public void set_TypeSystemVersion(string value)
public bool get_UserInstance()
public void set_UserInstance(bool value)
public bool get_ContextConnection()
public void set_ContextConnection(bool value)
private void Init()
public void Clear()
public bool ContainsKey(string keyword)
public bool Remove(string keyword)
public bool ShouldSerialize(string keyword)
public bool TryGetValue(string keyword, Object& value)
private string MapKeyword(string keyword)
private void SetValue(string key, object value)
}
public System.Data.SqlClient.SqlDataAdapter : DbDataAdapter {
private int updateBatchSize
private SqlRowUpdatedEventHandler RowUpdated
private SqlRowUpdatingEventHandler RowUpdating
private IDbCommand System.Data.IDbDataAdapter.SelectCommand
private IDbCommand System.Data.IDbDataAdapter.InsertCommand
private IDbCommand System.Data.IDbDataAdapter.UpdateCommand
private IDbCommand System.Data.IDbDataAdapter.DeleteCommand
public SqlCommand DeleteCommand
public SqlCommand InsertCommand
public SqlCommand SelectCommand
public SqlCommand UpdateCommand
public int UpdateBatchSize
public void .ctor(SqlCommand selectCommand)
public void .ctor(string selectCommandText, SqlConnection selectConnection)
public void .ctor(string selectCommandText, string selectConnectionString)
public void add_RowUpdated(SqlRowUpdatedEventHandler value)
public void remove_RowUpdated(SqlRowUpdatedEventHandler value)
public void add_RowUpdating(SqlRowUpdatingEventHandler value)
public void remove_RowUpdating(SqlRowUpdatingEventHandler value)
private IDbCommand System.Data.IDbDataAdapter.get_SelectCommand()
private void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_InsertCommand()
private void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand()
private void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value)
private IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand()
private void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value)
private object System.ICloneable.Clone()
public SqlCommand get_DeleteCommand()
public void set_DeleteCommand(SqlCommand value)
public SqlCommand get_InsertCommand()
public void set_InsertCommand(SqlCommand value)
public SqlCommand get_SelectCommand()
public void set_SelectCommand(SqlCommand value)
public SqlCommand get_UpdateCommand()
public void set_UpdateCommand(SqlCommand value)
public int get_UpdateBatchSize()
public void set_UpdateBatchSize(int value)
protected RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
protected void OnRowUpdated(RowUpdatedEventArgs value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
protected int AddToBatch(IDbCommand command)
protected void ClearBatch()
protected int ExecuteBatch()
protected IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex)
protected void InitializeBatching()
protected void TerminateBatching()
}
public System.Data.SqlClient.SqlDataReader : DbDataReader {
private int COLUMN_NAME_IDX
private int COLUMN_ORDINAL_IDX
private int COLUMN_SIZE_IDX
private int NUMERIC_PRECISION_IDX
private int NUMERIC_SCALE_IDX
private int IS_UNIQUE_IDX
private int IS_KEY_IDX
private int BASE_SERVER_NAME_IDX
private int BASE_CATALOG_NAME_IDX
private int BASE_COLUMN_NAME_IDX
private int BASE_SCHEMA_NAME_IDX
private int BASE_TABLE_NAME_IDX
private int DATA_TYPE_IDX
private int ALLOW_DBNULL_IDX
private int PROVIDER_TYPE_IDX
private int IS_ALIASED_IDX
private int IS_EXPRESSION_IDX
private int IS_IDENTITY_IDX
private int IS_AUTO_INCREMENT_IDX
private int IS_ROW_VERSION_IDX
private int IS_HIDDEN_IDX
private int IS_LONG_IDX
private int IS_READ_ONLY_IDX
private int PROVIDER_SPECIFIC_TYPE_IDX
private int DATA_TYPE_NAME_IDX
private int XML_SCHEMA_COLLCTN_DB_IDX
private int XML_SCHEMA_COLLCTN_OWN_SCHEMA_IDX
private int XML_SCHEMA_COLLCTN_NAME_IDX
private int UDT_ASMBLY_QUALIFIED_NAME_IDX
private int NON_VER_PROVIDER_TYPE_IDX
private int IS_COLUMN_SET
private SqlCommand command
private bool disposed
private bool isClosed
private bool moreResults
private int resultsRead
private int rowsRead
private DataTable schemaTable
private bool haveRead
private bool readResult
private bool readResultUsed
private int visibleFieldCount
public int Depth
public int FieldCount
public bool IsClosed
public object Item
public object Item
public int RecordsAffected
public bool HasRows
public int VisibleFieldCount
protected SqlConnection Connection
internal void .ctor(SqlCommand command)
public int get_Depth()
public int get_FieldCount()
public bool get_IsClosed()
public object get_Item(int i)
public object get_Item(string name)
public int get_RecordsAffected()
public bool get_HasRows()
public int get_VisibleFieldCount()
protected SqlConnection get_Connection()
protected bool IsCommandBehavior(CommandBehavior condition)
public void Close()
private DataTable ConstructSchemaTable()
private string GetSchemaRowTypeName(TdsColumnType ctype, int csize, short precision, short scale)
private Type GetSchemaRowFieldType(TdsColumnType ctype, int csize, short precision, short scale)
private SqlDbType GetSchemaRowDbType(int ordinal)
private SqlDbType GetSchemaRowDbType(TdsColumnType ctype, int csize, short precision, short scale)
private void GetSchemaRowType(TdsColumnType ctype, int csize, short precision, short scale, Int32& dbType, Type& fieldType, Boolean& isLong, String& typeName)
private void Dispose(bool disposing)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length)
public char GetChar(int i)
public long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
private object GetSchemaValue(TdsDataColumn schema, string key)
private object GetSchemaValue(object value)
public SqlBinary GetSqlBinary(int i)
public SqlBoolean GetSqlBoolean(int i)
public SqlByte GetSqlByte(int i)
public SqlDateTime GetSqlDateTime(int i)
public SqlDecimal GetSqlDecimal(int i)
public SqlDouble GetSqlDouble(int i)
public SqlGuid GetSqlGuid(int i)
public SqlInt16 GetSqlInt16(int i)
public SqlInt32 GetSqlInt32(int i)
public SqlInt64 GetSqlInt64(int i)
public SqlMoney GetSqlMoney(int i)
public SqlSingle GetSqlSingle(int i)
public SqlString GetSqlString(int i)
public SqlXml GetSqlXml(int i)
public object GetSqlValue(int i)
public int GetSqlValues(Object[] values)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public IEnumerator GetEnumerator()
public bool IsDBNull(int i)
public bool NextResult()
public bool Read()
internal bool ReadRecord()
private void ValidateState()
private void EnsureDataAvailable()
private InvalidCastException CreateGetBytesOnInvalidColumnTypeException(int ordinal)
public Type GetProviderSpecificFieldType(int i)
public object GetProviderSpecificValue(int i)
public int GetProviderSpecificValues(Object[] values)
public SqlBytes GetSqlBytes(int i)
}
internal System.Data.SqlClient.SqlDataSourceConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.SqlDependency : object {
private string uniqueId
private OnChangeEventHandler OnChange
public string Id
public bool HasChanges
public void .ctor(SqlCommand command)
public void .ctor(SqlCommand command, string options, int timeout)
public void add_OnChange(OnChangeEventHandler value)
public void remove_OnChange(OnChangeEventHandler value)
public string get_Id()
public bool get_HasChanges()
public void AddCommandDependency(SqlCommand command)
public bool Start(string connectionString)
public bool Start(string connectionString, string queue)
public bool Stop(string connectionString)
public bool Stop(string connectionString, string queue)
}
public System.Data.SqlClient.SqlError : object {
private byte errorClass
private int lineNumber
private string message
private int number
private string procedure
private string source
private byte state
private string server
public byte Class
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
internal void .ctor(byte errorClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
public byte get_Class()
public int get_LineNumber()
public string get_Message()
public int get_Number()
public string get_Procedure()
public string get_Server()
public string get_Source()
public byte get_State()
public string ToString()
}
public System.Data.SqlClient.SqlErrorCollection : object {
private ArrayList list
private bool System.Collections.ICollection.IsSynchronized
private object System.Collections.ICollection.SyncRoot
public int Count
public SqlError Item
internal void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
private bool System.Collections.ICollection.get_IsSynchronized()
private object System.Collections.ICollection.get_SyncRoot()
public int get_Count()
public SqlError get_Item(int index)
internal void Add(SqlError error)
internal void Add(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public void CopyTo(SqlError[] array, int index)
}
public System.Data.SqlClient.SqlException : DbException {
private string DEF_MESSAGE
private SqlErrorCollection errors
public byte Class
public SqlErrorCollection Errors
public int LineNumber
public string Message
public int Number
public string Procedure
public string Server
public string Source
public byte State
internal void .ctor(string message, Exception inner)
internal void .ctor(string message, Exception inner, SqlError sqlError)
internal void .ctor(byte theClass, int lineNumber, string message, int number, string procedure, string server, string source, byte state)
private void .ctor(SerializationInfo si, StreamingContext sc)
public byte get_Class()
public SqlErrorCollection get_Errors()
public int get_LineNumber()
public string get_Message()
public int get_Number()
public string get_Procedure()
public string get_Server()
public string get_Source()
public byte get_State()
internal SqlException FromTdsInternalException(TdsInternalException e)
public void GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlClient.SqlInfoMessageEventArgs : EventArgs {
private SqlErrorCollection errors
public SqlErrorCollection Errors
public string Message
public string Source
internal void .ctor(TdsInternalErrorCollection tdsErrors)
public SqlErrorCollection get_Errors()
public string get_Message()
public string get_Source()
public string ToString()
}
public System.Data.SqlClient.SqlInfoMessageEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlInfoMessageEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlInfoMessageEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal System.Data.SqlClient.SqlInitialCatalogConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.SqlNotificationEventArgs : EventArgs {
private SqlNotificationType type
private SqlNotificationInfo info
private SqlNotificationSource source
public SqlNotificationType Type
public SqlNotificationInfo Info
public SqlNotificationSource Source
public void .ctor(SqlNotificationType type, SqlNotificationInfo info, SqlNotificationSource source)
public SqlNotificationType get_Type()
public SqlNotificationInfo get_Info()
public SqlNotificationSource get_Source()
}
public System.Data.SqlClient.SqlNotificationInfo : Enum {
public int value__
public SqlNotificationInfo AlreadyChanged
public SqlNotificationInfo Alter
public SqlNotificationInfo Delete
public SqlNotificationInfo Drop
public SqlNotificationInfo Error
public SqlNotificationInfo Expired
public SqlNotificationInfo Insert
public SqlNotificationInfo Invalid
public SqlNotificationInfo Isolation
public SqlNotificationInfo Options
public SqlNotificationInfo PreviousFire
public SqlNotificationInfo Query
public SqlNotificationInfo Resource
public SqlNotificationInfo Restart
public SqlNotificationInfo TemplateLimit
public SqlNotificationInfo Truncate
public SqlNotificationInfo Unknown
public SqlNotificationInfo Update
}
public System.Data.SqlClient.SqlNotificationSource : Enum {
public int value__
public SqlNotificationSource Client
public SqlNotificationSource Data
public SqlNotificationSource Database
public SqlNotificationSource Environment
public SqlNotificationSource Execution
public SqlNotificationSource Object
public SqlNotificationSource Owner
public SqlNotificationSource Statement
public SqlNotificationSource System
public SqlNotificationSource Timeout
public SqlNotificationSource Unknown
}
public System.Data.SqlClient.SqlNotificationType : Enum {
public int value__
public SqlNotificationType Change
public SqlNotificationType Subscribe
public SqlNotificationType Unknown
}
public System.Data.SqlClient.SqlParameter : DbParameter {
private TdsMetaParameter metaParameter
private SqlParameterCollection container
private DbType dbType
private ParameterDirection direction
private bool isTypeSet
private int offset
private SqlDbType sqlDbType
private string sourceColumn
private DataRowVersion sourceVersion
private SqlCompareOptions compareInfo
private int localeId
private Type sqlType
private bool typeChanged
private bool sourceColumnNullMapping
private string xmlSchemaCollectionDatabase
private string xmlSchemaCollectionOwningSchema
private string xmlSchemaCollectionName
private Hashtable type_mapping
private Dictionary`2<string, int> <>f__switch$map9
private Dictionary`2<string, int> <>f__switch$mapA
internal SqlParameterCollection Container
public DbType DbType
public ParameterDirection Direction
internal TdsMetaParameter MetaParameter
public bool IsNullable
public int Offset
public string ParameterName
public byte Precision
public byte Scale
public int Size
public string SourceColumn
public DataRowVersion SourceVersion
public SqlDbType SqlDbType
public object Value
public SqlCompareOptions CompareInfo
public int LocaleId
public object SqlValue
public bool SourceColumnNullMapping
public string XmlSchemaCollectionDatabase
public string XmlSchemaCollectionName
public string XmlSchemaCollectionOwningSchema
internal Type SystemType
internal object FrameworkDbType
public void .ctor(string parameterName, object value)
public void .ctor(string parameterName, SqlDbType dbType)
public void .ctor(string parameterName, SqlDbType dbType, int size)
public void .ctor(string parameterName, SqlDbType dbType, int size, string sourceColumn)
public void .ctor(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, object value)
public void .ctor(string parameterName, SqlDbType dbType, int size, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value, string xmlSchemaCollectionDatabase, string xmlSchemaCollectionOwningSchema, string xmlSchemaCollectionName)
internal void .ctor(Object[] dbValues)
private object System.ICloneable.Clone()
internal SqlParameterCollection get_Container()
internal void set_Container(SqlParameterCollection value)
internal void CheckIfInitialized()
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
internal TdsMetaParameter get_MetaParameter()
public bool get_IsNullable()
public void set_IsNullable(bool value)
public int get_Offset()
public void set_Offset(int value)
public string get_ParameterName()
public void set_ParameterName(string value)
public byte get_Precision()
public void set_Precision(byte value)
public byte get_Scale()
public void set_Scale(byte value)
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public SqlDbType get_SqlDbType()
public void set_SqlDbType(SqlDbType value)
public object get_Value()
public void set_Value(object value)
public SqlCompareOptions get_CompareInfo()
public void set_CompareInfo(SqlCompareOptions value)
public int get_LocaleId()
public void set_LocaleId(int value)
public object get_SqlValue()
public void set_SqlValue(object value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public string get_XmlSchemaCollectionDatabase()
public void set_XmlSchemaCollectionDatabase(string value)
public string get_XmlSchemaCollectionName()
public void set_XmlSchemaCollectionName(string value)
public string get_XmlSchemaCollectionOwningSchema()
public void set_XmlSchemaCollectionOwningSchema(string value)
private void InferSqlType(object value)
internal Type get_SystemType()
internal object get_FrameworkDbType()
internal void set_FrameworkDbType(object value)
private DbType DbTypeFromName(string name)
private void SetDbType(DbType type)
private SqlDbType FrameworkDbTypeFromName(string dbTypeName)
internal void SetSqlDbType(SqlDbType type)
public string ToString()
private object GetFrameworkValue(object rawValue, Boolean& updated)
private object GetSqlValue(object value)
private object SqlTypeToFrameworkType(object value)
internal object ConvertToFrameworkType(object value)
private object ConvertToFrameworkType(object value, Type frameworkType)
public void ResetDbType()
public void ResetSqlDbType()
}
public System.Data.SqlClient.SqlParameterCollection : DbParameterCollection {
private ArrayList list
private TdsMetaParameterCollection metaParameters
private SqlCommand command
public int Count
public bool IsFixedSize
public bool IsReadOnly
public bool IsSynchronized
public object SyncRoot
public SqlParameter Item
public SqlParameter Item
internal TdsMetaParameterCollection MetaParameters
internal void .ctor(SqlCommand command)
public int get_Count()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public bool get_IsSynchronized()
public object get_SyncRoot()
public SqlParameter get_Item(int index)
public void set_Item(int index, SqlParameter value)
public SqlParameter get_Item(string parameterName)
public void set_Item(string parameterName, SqlParameter value)
protected DbParameter GetParameter(int index)
protected DbParameter GetParameter(string parameterName)
protected void SetParameter(int index, DbParameter value)
protected void SetParameter(string parameterName, DbParameter value)
internal TdsMetaParameterCollection get_MetaParameters()
public int Add(object value)
public SqlParameter Add(SqlParameter value)
public SqlParameter Add(string parameterName, object value)
public SqlParameter AddWithValue(string parameterName, object value)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size)
public SqlParameter Add(string parameterName, SqlDbType sqlDbType, int size, string sourceColumn)
public void Clear()
public bool Contains(object value)
public bool Contains(string value)
public bool Contains(SqlParameter value)
public void CopyTo(Array array, int index)
public IEnumerator GetEnumerator()
public int IndexOf(object value)
public int IndexOf(string parameterName)
public int IndexOf(SqlParameter value)
public void Insert(int index, object value)
public void Insert(int index, SqlParameter value)
public void Remove(object value)
public void Remove(SqlParameter value)
public void RemoveAt(int index)
public void RemoveAt(string parameterName)
public void AddRange(Array values)
public void AddRange(SqlParameter[] values)
public void CopyTo(SqlParameter[] array, int index)
}
internal System.Data.SqlClient.SqlParameterConverter : ExpandableObjectConverter {
public object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
public bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
}
public System.Data.SqlClient.SqlRowsCopiedEventArgs : EventArgs {
private long rowsCopied
private bool abort
public bool Abort
public long RowsCopied
public void .ctor(long rowsCopied)
public bool get_Abort()
public void set_Abort(bool value)
public long get_RowsCopied()
}
public System.Data.SqlClient.SqlRowsCopiedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowsCopiedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowsCopiedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SqlRowUpdatedEventArgs : RowUpdatedEventArgs {
public SqlCommand Command
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public SqlCommand get_Command()
}
public System.Data.SqlClient.SqlRowUpdatedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowUpdatedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowUpdatedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SqlRowUpdatingEventArgs : RowUpdatingEventArgs {
public SqlCommand Command
protected IDbCommand BaseCommand
public void .ctor(DataRow row, IDbCommand command, StatementType statementType, DataTableMapping tableMapping)
public SqlCommand get_Command()
public void set_Command(SqlCommand value)
protected IDbCommand get_BaseCommand()
protected void set_BaseCommand(IDbCommand value)
}
public System.Data.SqlClient.SqlRowUpdatingEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SqlRowUpdatingEventArgs e)
public IAsyncResult BeginInvoke(object sender, SqlRowUpdatingEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.SqlClient.SqlTransaction : DbTransaction {
private bool disposed
private SqlConnection connection
private IsolationLevel isolationLevel
private bool isOpen
public SqlConnection Connection
internal bool IsOpen
public IsolationLevel IsolationLevel
protected DbConnection DbConnection
internal void .ctor(SqlConnection connection, IsolationLevel isolevel)
public SqlConnection get_Connection()
internal bool get_IsOpen()
public IsolationLevel get_IsolationLevel()
protected DbConnection get_DbConnection()
public void Commit()
protected void Dispose(bool disposing)
public void Rollback()
public void Rollback(string transactionName)
public void Save(string savePointName)
}
internal System.Data.SqlClient.SqlXmlTextReader : TextReader {
private bool disposed
private bool eof
private SqlDataReader reader
private string localBuffer
private int position
internal void .ctor(SqlDataReader reader)
private void System.IDisposable.Dispose()
public void Close()
protected void Dispose(bool disposing)
private bool GetNextBuffer()
public int Peek()
public int Read()
public int Read(Char[] buffer, int index, int count)
public int ReadBlock(Char[] buffer, int index, int count)
public string ReadLine()
public string ReadToEnd()
}
public System.Data.SqlDbType : Enum {
public int value__
public SqlDbType BigInt
public SqlDbType Binary
public SqlDbType Bit
public SqlDbType Char
public SqlDbType DateTime
public SqlDbType Decimal
public SqlDbType Float
public SqlDbType Image
public SqlDbType Int
public SqlDbType Money
public SqlDbType NChar
public SqlDbType NText
public SqlDbType NVarChar
public SqlDbType Real
public SqlDbType UniqueIdentifier
public SqlDbType SmallDateTime
public SqlDbType SmallInt
public SqlDbType SmallMoney
public SqlDbType Text
public SqlDbType Timestamp
public SqlDbType TinyInt
public SqlDbType VarBinary
public SqlDbType VarChar
public SqlDbType Variant
public SqlDbType Xml
public SqlDbType Udt
public SqlDbType Date
public SqlDbType Time
}
public System.Data.SqlTypes.INullable {
public bool IsNull
public bool get_IsNull()
}
public System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception inner)
private void GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlTypes.SqlBinary : ValueType {
private Byte[] value
private bool notNull
public SqlBinary Null
public bool IsNull
public byte Item
public int Length
public Byte[] Value
public void .ctor(Byte[] value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public byte get_Item(int index)
public int get_Length()
public Byte[] get_Value()
public SqlBinary Add(SqlBinary x, SqlBinary y)
public int CompareTo(object value)
public int CompareTo(SqlBinary value)
public SqlBinary Concat(SqlBinary x, SqlBinary y)
public bool Equals(object value)
public SqlBoolean Equals(SqlBinary x, SqlBinary y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlBinary x, SqlBinary y)
public SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBoolean LessThan(SqlBinary x, SqlBinary y)
public SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBoolean NotEquals(SqlBinary x, SqlBinary y)
public SqlGuid ToSqlGuid()
public string ToString()
private int Compare(SqlBinary x, SqlBinary y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlBinary op_Addition(SqlBinary x, SqlBinary y)
public SqlBoolean op_Equality(SqlBinary x, SqlBinary y)
public SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y)
public SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y)
public SqlBoolean op_Inequality(SqlBinary x, SqlBinary y)
public SqlBoolean op_LessThan(SqlBinary x, SqlBinary y)
public SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y)
public Byte[] op_Explicit(SqlBinary x)
public SqlBinary op_Explicit(SqlGuid x)
public SqlBinary op_Implicit(Byte[] x)
}
public System.Data.SqlTypes.SqlBoolean : ValueType {
private byte value
private bool notNull
public SqlBoolean False
public SqlBoolean Null
public SqlBoolean One
public SqlBoolean True
public SqlBoolean Zero
private Dictionary`2<string, int> <>f__switch$map3
public byte ByteValue
public bool IsFalse
public bool IsNull
public bool IsTrue
public bool Value
public void .ctor(bool value)
public void .ctor(int value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public byte get_ByteValue()
public bool get_IsFalse()
public bool get_IsNull()
public bool get_IsTrue()
public bool get_Value()
public SqlBoolean And(SqlBoolean x, SqlBoolean y)
public int CompareTo(object value)
public int CompareTo(SqlBoolean value)
public bool Equals(object value)
public SqlBoolean Equals(SqlBoolean x, SqlBoolean y)
public SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y)
public SqlBoolean LessThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y)
public int GetHashCode()
public SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y)
public SqlBoolean OnesComplement(SqlBoolean x)
public SqlBoolean Or(SqlBoolean x, SqlBoolean y)
public SqlBoolean Parse(string s)
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public SqlBoolean Xor(SqlBoolean x, SqlBoolean y)
private int Compare(SqlBoolean x, SqlBoolean y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y)
public bool op_False(SqlBoolean x)
public SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_LogicalNot(SqlBoolean x)
public SqlBoolean op_OnesComplement(SqlBoolean x)
public SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y)
public SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y)
public bool op_True(SqlBoolean x)
public bool op_Explicit(SqlBoolean x)
public SqlBoolean op_Explicit(SqlByte x)
public SqlBoolean op_Explicit(SqlDecimal x)
public SqlBoolean op_Explicit(SqlDouble x)
public SqlBoolean op_Explicit(SqlInt16 x)
public SqlBoolean op_Explicit(SqlInt32 x)
public SqlBoolean op_Explicit(SqlInt64 x)
public SqlBoolean op_Explicit(SqlMoney x)
public SqlBoolean op_Explicit(SqlSingle x)
public SqlBoolean op_Explicit(SqlString x)
public SqlBoolean op_Implicit(bool x)
}
public System.Data.SqlTypes.SqlByte : ValueType {
private byte value
private bool notNull
public SqlByte MaxValue
public SqlByte MinValue
public SqlByte Null
public SqlByte Zero
public bool IsNull
public byte Value
public void .ctor(byte value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public byte get_Value()
public SqlByte Add(SqlByte x, SqlByte y)
public SqlByte BitwiseAnd(SqlByte x, SqlByte y)
public SqlByte BitwiseOr(SqlByte x, SqlByte y)
public int CompareTo(object value)
public int CompareTo(SqlByte value)
public SqlByte Divide(SqlByte x, SqlByte y)
public bool Equals(object value)
public SqlBoolean Equals(SqlByte x, SqlByte y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlByte x, SqlByte y)
public SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y)
public SqlBoolean LessThan(SqlByte x, SqlByte y)
public SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y)
public SqlByte Mod(SqlByte x, SqlByte y)
public SqlByte Modulus(SqlByte x, SqlByte y)
public SqlByte Multiply(SqlByte x, SqlByte y)
public SqlBoolean NotEquals(SqlByte x, SqlByte y)
public SqlByte OnesComplement(SqlByte x)
public SqlByte Parse(string s)
public SqlByte Subtract(SqlByte x, SqlByte y)
public SqlBoolean ToSqlBoolean()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public SqlByte Xor(SqlByte x, SqlByte y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlByte op_Addition(SqlByte x, SqlByte y)
public SqlByte op_BitwiseAnd(SqlByte x, SqlByte y)
public SqlByte op_BitwiseOr(SqlByte x, SqlByte y)
public SqlByte op_Division(SqlByte x, SqlByte y)
public SqlBoolean op_Equality(SqlByte x, SqlByte y)
public SqlByte op_ExclusiveOr(SqlByte x, SqlByte y)
public SqlBoolean op_GreaterThan(SqlByte x, SqlByte y)
public SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y)
public SqlBoolean op_Inequality(SqlByte x, SqlByte y)
public SqlBoolean op_LessThan(SqlByte x, SqlByte y)
public SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y)
public SqlByte op_Modulus(SqlByte x, SqlByte y)
public SqlByte op_Multiply(SqlByte x, SqlByte y)
public SqlByte op_OnesComplement(SqlByte x)
public SqlByte op_Subtraction(SqlByte x, SqlByte y)
public SqlByte op_Explicit(SqlBoolean x)
public byte op_Explicit(SqlByte x)
public SqlByte op_Explicit(SqlDecimal x)
public SqlByte op_Explicit(SqlDouble x)
public SqlByte op_Explicit(SqlInt16 x)
public SqlByte op_Explicit(SqlInt32 x)
public SqlByte op_Explicit(SqlInt64 x)
public SqlByte op_Explicit(SqlMoney x)
public SqlByte op_Explicit(SqlSingle x)
public SqlByte op_Explicit(SqlString x)
public SqlByte op_Implicit(byte x)
}
public System.Data.SqlTypes.SqlBytes : object {
private bool notNull
private Byte[] buffer
private StorageState storage
private Stream stream
public Byte[] Buffer
public bool IsNull
public byte Item
public long Length
public long MaxLength
public SqlBytes Null
public StorageState Storage
public Stream Stream
public Byte[] Value
public void .ctor(Byte[] buffer)
public void .ctor(SqlBinary value)
public void .ctor(Stream s)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public Byte[] get_Buffer()
public bool get_IsNull()
public void set_Item(long offset, byte value)
public byte get_Item(long offset)
public long get_Length()
public long get_MaxLength()
public SqlBytes get_Null()
public StorageState get_Storage()
public void set_Stream(Stream value)
public Stream get_Stream()
public Byte[] get_Value()
public void SetLength(long value)
public void SetNull()
public SqlBinary ToSqlBinary()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count)
public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count)
public SqlBytes op_Explicit(SqlBinary value)
public SqlBinary op_Explicit(SqlBytes value)
}
public System.Data.SqlTypes.SqlChars : object {
private bool notNull
private Char[] buffer
private StorageState storage
public Char[] Buffer
public bool IsNull
public char Item
public long Length
public long MaxLength
public SqlChars Null
public StorageState Storage
public Char[] Value
public void .ctor(Char[] buffer)
public void .ctor(SqlString value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context)
public Char[] get_Buffer()
public bool get_IsNull()
public void set_Item(long offset, char value)
public char get_Item(long offset)
public long get_Length()
public long get_MaxLength()
public SqlChars get_Null()
public StorageState get_Storage()
public Char[] get_Value()
public void SetLength(long value)
public void SetNull()
public SqlString ToSqlString()
public long Read(long offset, Char[] buffer, int offsetInBuffer, int count)
public void Write(long offset, Char[] buffer, int offsetInBuffer, int count)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlString op_Explicit(SqlChars value)
public SqlChars op_Explicit(SqlString value)
}
public System.Data.SqlTypes.SqlCompareOptions : Enum {
public int value__
public SqlCompareOptions BinarySort
public SqlCompareOptions IgnoreCase
public SqlCompareOptions IgnoreKanaType
public SqlCompareOptions IgnoreNonSpace
public SqlCompareOptions IgnoreWidth
public SqlCompareOptions None
}
public System.Data.SqlTypes.SqlDateTime : ValueType {
private DateTime value
private bool notNull
public SqlDateTime MaxValue
public SqlDateTime MinValue
public SqlDateTime Null
public int SQLTicksPerHour
public int SQLTicksPerMinute
public int SQLTicksPerSecond
private DateTime zero_day
public int DayTicks
public bool IsNull
public int TimeTicks
public DateTime Value
public void .ctor(DateTime value)
public void .ctor(int dayTicks, int timeTicks)
public void .ctor(int year, int month, int day)
public void .ctor(int year, int month, int day, int hour, int minute, int second)
public void .ctor(int year, int month, int day, int hour, int minute, int second, double millisecond)
public void .ctor(int year, int month, int day, int hour, int minute, int second, int bilisecond)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
private int TimeSpanTicksToSQLTicks(long ticks)
private long SQLTicksToMilliseconds(int timeTicks)
public int get_DayTicks()
public bool get_IsNull()
public int get_TimeTicks()
public DateTime get_Value()
private void CheckRange(SqlDateTime target)
public int CompareTo(object value)
public int CompareTo(SqlDateTime value)
public bool Equals(object value)
public SqlBoolean Equals(SqlDateTime x, SqlDateTime y)
public int GetHashCode()
public SqlDateTime Add(SqlDateTime x, TimeSpan t)
public SqlDateTime Subtract(SqlDateTime x, TimeSpan t)
public SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean LessThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y)
public SqlDateTime Parse(string s)
public SqlString ToSqlString()
public string ToString()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlDateTime op_Addition(SqlDateTime x, TimeSpan t)
public SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y)
public SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y)
public SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t)
public DateTime op_Explicit(SqlDateTime x)
public SqlDateTime op_Explicit(SqlString x)
public SqlDateTime op_Implicit(DateTime value)
}
public System.Data.SqlTypes.SqlDecimal : ValueType {
private int SCALE_SHIFT
private int SIGN_SHIFT
private int RESERVED_SS32_BITS
private ulong LIT_GUINT64_HIGHBIT
private ulong LIT_GUINT32_HIGHBIT
private byte DECIMAL_MAX_INTFACTORS
private Int32[] value
private byte precision
private byte scale
private bool positive
private bool notNull
private UInt32[] constantsDecadeInt32Factors
public byte MaxPrecision
public byte MaxScale
public SqlDecimal MaxValue
public SqlDecimal MinValue
public SqlDecimal Null
public Byte[] BinData
public Int32[] Data
public bool IsNull
public bool IsPositive
public byte Precision
public byte Scale
public decimal Value
public void .ctor(decimal value)
public void .ctor(double dVal)
public void .ctor(int value)
public void .ctor(long value)
public void .ctor(byte bPrecision, byte bScale, bool fPositive, Int32[] bits)
public void .ctor(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public Byte[] get_BinData()
public Int32[] get_Data()
public bool get_IsNull()
public bool get_IsPositive()
public byte get_Precision()
public byte get_Scale()
public decimal get_Value()
public SqlDecimal Abs(SqlDecimal n)
public SqlDecimal Add(SqlDecimal x, SqlDecimal y)
public SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound)
public SqlDecimal Ceiling(SqlDecimal n)
public int CompareTo(object value)
public int CompareTo(SqlDecimal value)
public SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale)
public SqlDecimal Divide(SqlDecimal x, SqlDecimal y)
public bool Equals(object value)
public SqlBoolean Equals(SqlDecimal x, SqlDecimal y)
public SqlDecimal Floor(SqlDecimal n)
internal SqlDecimal FromTdsBigDecimal(TdsBigDecimal x)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlBoolean LessThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlDecimal Multiply(SqlDecimal x, SqlDecimal y)
public SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y)
public SqlDecimal Parse(string s)
public SqlDecimal Power(SqlDecimal n, double exp)
public SqlDecimal Round(SqlDecimal n, int position)
public SqlInt32 Sign(SqlDecimal n)
public SqlDecimal Subtract(SqlDecimal x, SqlDecimal y)
private byte GetPrecision(decimal value)
public double ToDouble()
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
private int Div128By32(UInt64& hi, UInt64& lo, UInt32 divider)
private int Div128By32(UInt64& hi, UInt64& lo, UInt32 divider, UInt32& rest)
private SqlDecimal DecimalDiv(SqlDecimal x, SqlDecimal y)
private void Rescale128(UInt64& clo, UInt64& chi, Int32& scale, int texp, int minScale, int maxScale, int roundFlag)
private void Normalize128(UInt64& clo, UInt64& chi, Int32& scale, int roundFlag, int roundBit)
private void RoundUp128(UInt64& lo, UInt64& hi)
private void DecimalDivSub(SqlDecimal& x, SqlDecimal& y, UInt64& clo, UInt64& chi, Int32& exp)
private void RShift128(UInt64& lo, UInt64& hi)
private void LShift128(UInt64& lo, UInt64& hi)
private void LShift128(UInt32& lo, UInt32& mi, UInt32& mi2, UInt32& hi)
private void Div192By128To128(ulong xlo, ulong xmi, ulong xhi, UInt32 ylo, UInt32 ymi, UInt32 ymi2, UInt32 yhi, UInt64& clo, UInt64& chi)
private UInt32 Div192By128To32WithRest(UInt64& xlo, UInt64& xmi, UInt64& xhi, UInt32 ylo, UInt32 ymi, UInt32 ymi2, UInt32 yhi)
private void Mult128By32(UInt64& clo, UInt64& chi, UInt32 factor, int roundBit)
private void Mult128By32To128(UInt32 xlo, UInt32 xmi, UInt32 xmi2, UInt32 xhi, UInt32 factor, UInt64& clo, UInt64& chi)
private void Add192(ulong xlo, ulong xmi, ulong xhi, ulong ylo, ulong ymi, ulong yhi, UInt64& clo, UInt64& cmi, UInt64& chi)
private void Sub192(ulong xlo, ulong xmi, ulong xhi, ulong ylo, ulong ymi, ulong yhi, UInt64& lo, UInt64& mi, UInt64& hi)
public SqlDecimal Truncate(SqlDecimal n, int position)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Division(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y)
public SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y)
public SqlDecimal op_UnaryNegation(SqlDecimal x)
public SqlDecimal op_Explicit(SqlBoolean x)
public decimal op_Explicit(SqlDecimal x)
public SqlDecimal op_Explicit(SqlDouble x)
public SqlDecimal op_Explicit(SqlSingle x)
public SqlDecimal op_Explicit(SqlString x)
public SqlDecimal op_Explicit(double x)
public SqlDecimal op_Implicit(long x)
public SqlDecimal op_Implicit(decimal x)
public SqlDecimal op_Implicit(SqlByte x)
public SqlDecimal op_Implicit(SqlInt16 x)
public SqlDecimal op_Implicit(SqlInt32 x)
public SqlDecimal op_Implicit(SqlInt64 x)
public SqlDecimal op_Implicit(SqlMoney x)
}
public System.Data.SqlTypes.SqlDouble : ValueType {
private double value
private bool notNull
public SqlDouble MaxValue
public SqlDouble MinValue
public SqlDouble Null
public SqlDouble Zero
public bool IsNull
public double Value
public void .ctor(double value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public double get_Value()
public SqlDouble Add(SqlDouble x, SqlDouble y)
public int CompareTo(object value)
public int CompareTo(SqlDouble value)
public SqlDouble Divide(SqlDouble x, SqlDouble y)
public bool Equals(object value)
public SqlBoolean Equals(SqlDouble x, SqlDouble y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlDouble x, SqlDouble y)
public SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y)
public SqlBoolean LessThan(SqlDouble x, SqlDouble y)
public SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y)
public SqlDouble Multiply(SqlDouble x, SqlDouble y)
public SqlBoolean NotEquals(SqlDouble x, SqlDouble y)
public SqlDouble Parse(string s)
public SqlDouble Subtract(SqlDouble x, SqlDouble y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlDouble op_Addition(SqlDouble x, SqlDouble y)
public SqlDouble op_Division(SqlDouble x, SqlDouble y)
public SqlBoolean op_Equality(SqlDouble x, SqlDouble y)
public SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y)
public SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y)
public SqlBoolean op_Inequality(SqlDouble x, SqlDouble y)
public SqlBoolean op_LessThan(SqlDouble x, SqlDouble y)
public SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y)
public SqlDouble op_Multiply(SqlDouble x, SqlDouble y)
public SqlDouble op_Subtraction(SqlDouble x, SqlDouble y)
public SqlDouble op_UnaryNegation(SqlDouble x)
public SqlDouble op_Explicit(SqlBoolean x)
public double op_Explicit(SqlDouble x)
public SqlDouble op_Explicit(SqlString x)
public SqlDouble op_Implicit(double x)
public SqlDouble op_Implicit(SqlByte x)
public SqlDouble op_Implicit(SqlDecimal x)
public SqlDouble op_Implicit(SqlInt16 x)
public SqlDouble op_Implicit(SqlInt32 x)
public SqlDouble op_Implicit(SqlInt64 x)
public SqlDouble op_Implicit(SqlMoney x)
public SqlDouble op_Implicit(SqlSingle x)
}
public System.Data.SqlTypes.SqlGuid : ValueType {
private Guid value
private bool notNull
public SqlGuid Null
public bool IsNull
public Guid Value
public void .ctor(Byte[] value)
public void .ctor(Guid g)
public void .ctor(string s)
public void .ctor(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public Guid get_Value()
public int CompareTo(object value)
public int CompareTo(SqlGuid value)
public bool Equals(object value)
public SqlBoolean Equals(SqlGuid x, SqlGuid y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlGuid x, SqlGuid y)
public SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean LessThan(SqlGuid x, SqlGuid y)
public SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean NotEquals(SqlGuid x, SqlGuid y)
public SqlGuid Parse(string s)
public Byte[] ToByteArray()
public SqlBinary ToSqlBinary()
public SqlString ToSqlString()
public string ToString()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlBoolean op_Equality(SqlGuid x, SqlGuid y)
public SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y)
public SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y)
public SqlBoolean op_Inequality(SqlGuid x, SqlGuid y)
public SqlBoolean op_LessThan(SqlGuid x, SqlGuid y)
public SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y)
public SqlGuid op_Explicit(SqlBinary x)
public Guid op_Explicit(SqlGuid x)
public SqlGuid op_Explicit(SqlString x)
public SqlGuid op_Implicit(Guid x)
}
public System.Data.SqlTypes.SqlInt16 : ValueType {
private short value
private bool notNull
public SqlInt16 MaxValue
public SqlInt16 MinValue
public SqlInt16 Null
public SqlInt16 Zero
public bool IsNull
public short Value
public void .ctor(short value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public short get_Value()
public SqlInt16 Add(SqlInt16 x, SqlInt16 y)
public SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y)
public SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y)
public int CompareTo(object value)
public int CompareTo(SqlInt16 value)
private int CompareSqlInt16(SqlInt16 value)
public SqlInt16 Divide(SqlInt16 x, SqlInt16 y)
public bool Equals(object value)
public SqlBoolean Equals(SqlInt16 x, SqlInt16 y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlBoolean LessThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlInt16 Mod(SqlInt16 x, SqlInt16 y)
public SqlInt16 Modulus(SqlInt16 x, SqlInt16 y)
public SqlInt16 Multiply(SqlInt16 x, SqlInt16 y)
public SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y)
public SqlInt16 OnesComplement(SqlInt16 x)
public SqlInt16 Parse(string s)
public SqlInt16 Subtract(SqlInt16 x, SqlInt16 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public SqlInt16 Xor(SqlInt16 x, SqlInt16 y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Division(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y)
public SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_OnesComplement(SqlInt16 x)
public SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y)
public SqlInt16 op_UnaryNegation(SqlInt16 x)
public SqlInt16 op_Explicit(SqlBoolean x)
public SqlInt16 op_Explicit(SqlDecimal x)
public SqlInt16 op_Explicit(SqlDouble x)
public short op_Explicit(SqlInt16 x)
public SqlInt16 op_Explicit(SqlInt32 x)
public SqlInt16 op_Explicit(SqlInt64 x)
public SqlInt16 op_Explicit(SqlMoney x)
public SqlInt16 op_Explicit(SqlSingle x)
public SqlInt16 op_Explicit(SqlString x)
public SqlInt16 op_Implicit(short x)
public SqlInt16 op_Implicit(SqlByte x)
}
public System.Data.SqlTypes.SqlInt32 : ValueType {
private int value
private bool notNull
public SqlInt32 MaxValue
public SqlInt32 MinValue
public SqlInt32 Null
public SqlInt32 Zero
public bool IsNull
public int Value
public void .ctor(int value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public int get_Value()
public SqlInt32 Add(SqlInt32 x, SqlInt32 y)
public SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y)
public SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y)
public int CompareTo(object value)
public int CompareTo(SqlInt32 value)
private int CompareSqlInt32(SqlInt32 value)
public SqlInt32 Divide(SqlInt32 x, SqlInt32 y)
public bool Equals(object value)
public SqlBoolean Equals(SqlInt32 x, SqlInt32 y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlBoolean LessThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlInt32 Mod(SqlInt32 x, SqlInt32 y)
public SqlInt32 Modulus(SqlInt32 x, SqlInt32 y)
public SqlInt32 Multiply(SqlInt32 x, SqlInt32 y)
public SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y)
public SqlInt32 OnesComplement(SqlInt32 x)
public SqlInt32 Parse(string s)
public SqlInt32 Subtract(SqlInt32 x, SqlInt32 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public SqlInt32 Xor(SqlInt32 x, SqlInt32 y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Division(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y)
public SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_OnesComplement(SqlInt32 x)
public SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y)
public SqlInt32 op_UnaryNegation(SqlInt32 x)
public SqlInt32 op_Explicit(SqlBoolean x)
public SqlInt32 op_Explicit(SqlDecimal x)
public SqlInt32 op_Explicit(SqlDouble x)
public int op_Explicit(SqlInt32 x)
public SqlInt32 op_Explicit(SqlInt64 x)
public SqlInt32 op_Explicit(SqlMoney x)
public SqlInt32 op_Explicit(SqlSingle x)
public SqlInt32 op_Explicit(SqlString x)
public SqlInt32 op_Implicit(int x)
public SqlInt32 op_Implicit(SqlByte x)
public SqlInt32 op_Implicit(SqlInt16 x)
}
public System.Data.SqlTypes.SqlInt64 : ValueType {
private long value
private bool notNull
public SqlInt64 MaxValue
public SqlInt64 MinValue
public SqlInt64 Null
public SqlInt64 Zero
public bool IsNull
public long Value
public void .ctor(long value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public long get_Value()
public SqlInt64 Add(SqlInt64 x, SqlInt64 y)
public SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y)
public SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y)
public int CompareTo(object value)
public int CompareTo(SqlInt64 value)
private int CompareSqlInt64(SqlInt64 value)
public SqlInt64 Divide(SqlInt64 x, SqlInt64 y)
public bool Equals(object value)
public SqlBoolean Equals(SqlInt64 x, SqlInt64 y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlBoolean LessThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlInt64 Mod(SqlInt64 x, SqlInt64 y)
public SqlInt64 Modulus(SqlInt64 x, SqlInt64 y)
public SqlInt64 Multiply(SqlInt64 x, SqlInt64 y)
public SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y)
public SqlInt64 OnesComplement(SqlInt64 x)
public SqlInt64 Parse(string s)
public SqlInt64 Subtract(SqlInt64 x, SqlInt64 y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public SqlInt64 Xor(SqlInt64 x, SqlInt64 y)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Division(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y)
public SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_OnesComplement(SqlInt64 x)
public SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y)
public SqlInt64 op_UnaryNegation(SqlInt64 x)
public SqlInt64 op_Explicit(SqlBoolean x)
public SqlInt64 op_Explicit(SqlDecimal x)
public SqlInt64 op_Explicit(SqlDouble x)
public long op_Explicit(SqlInt64 x)
public SqlInt64 op_Explicit(SqlMoney x)
public SqlInt64 op_Explicit(SqlSingle x)
public SqlInt64 op_Explicit(SqlString x)
public SqlInt64 op_Implicit(long x)
public SqlInt64 op_Implicit(SqlByte x)
public SqlInt64 op_Implicit(SqlInt16 x)
public SqlInt64 op_Implicit(SqlInt32 x)
}
public System.Data.SqlTypes.SqlMoney : ValueType {
private decimal value
private bool notNull
public SqlMoney MaxValue
public SqlMoney MinValue
public SqlMoney Null
public SqlMoney Zero
private NumberFormatInfo MoneyFormat
public bool IsNull
public decimal Value
public void .ctor(decimal value)
public void .ctor(double value)
public void .ctor(int value)
public void .ctor(long value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public decimal get_Value()
public SqlMoney Add(SqlMoney x, SqlMoney y)
public int CompareTo(object value)
private int CompareSqlMoney(SqlMoney value)
public int CompareTo(SqlMoney value)
public SqlMoney Divide(SqlMoney x, SqlMoney y)
public bool Equals(object value)
public SqlBoolean Equals(SqlMoney x, SqlMoney y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlMoney x, SqlMoney y)
public SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y)
public SqlBoolean LessThan(SqlMoney x, SqlMoney y)
public SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y)
public SqlMoney Multiply(SqlMoney x, SqlMoney y)
public SqlBoolean NotEquals(SqlMoney x, SqlMoney y)
public SqlMoney Parse(string s)
public SqlMoney Subtract(SqlMoney x, SqlMoney y)
public decimal ToDecimal()
public double ToDouble()
public int ToInt32()
public long ToInt64()
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlSingle ToSqlSingle()
public SqlString ToSqlString()
public string ToString()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlMoney op_Addition(SqlMoney x, SqlMoney y)
public SqlMoney op_Division(SqlMoney x, SqlMoney y)
public SqlBoolean op_Equality(SqlMoney x, SqlMoney y)
public SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y)
public SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y)
public SqlBoolean op_Inequality(SqlMoney x, SqlMoney y)
public SqlBoolean op_LessThan(SqlMoney x, SqlMoney y)
public SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y)
public SqlMoney op_Multiply(SqlMoney x, SqlMoney y)
public SqlMoney op_Subtraction(SqlMoney x, SqlMoney y)
public SqlMoney op_UnaryNegation(SqlMoney x)
public SqlMoney op_Explicit(SqlBoolean x)
public SqlMoney op_Explicit(SqlDecimal x)
public SqlMoney op_Explicit(SqlDouble x)
public decimal op_Explicit(SqlMoney x)
public SqlMoney op_Explicit(SqlSingle x)
public SqlMoney op_Explicit(SqlString x)
public SqlMoney op_Explicit(double x)
public SqlMoney op_Implicit(long x)
public SqlMoney op_Implicit(decimal x)
public SqlMoney op_Implicit(SqlByte x)
public SqlMoney op_Implicit(SqlInt16 x)
public SqlMoney op_Implicit(SqlInt32 x)
public SqlMoney op_Implicit(SqlInt64 x)
}
public System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlTypes.SqlSingle : ValueType {
private float value
private bool notNull
public SqlSingle MaxValue
public SqlSingle MinValue
public SqlSingle Null
public SqlSingle Zero
public bool IsNull
public float Value
public void .ctor(double value)
public void .ctor(float value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public float get_Value()
public SqlSingle Add(SqlSingle x, SqlSingle y)
public int CompareTo(object value)
public int CompareTo(SqlSingle value)
private int CompareSqlSingle(SqlSingle value)
public SqlSingle Divide(SqlSingle x, SqlSingle y)
public bool Equals(object value)
public SqlBoolean Equals(SqlSingle x, SqlSingle y)
public int GetHashCode()
public SqlBoolean GreaterThan(SqlSingle x, SqlSingle y)
public SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y)
public SqlBoolean LessThan(SqlSingle x, SqlSingle y)
public SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y)
public SqlSingle Multiply(SqlSingle x, SqlSingle y)
public SqlBoolean NotEquals(SqlSingle x, SqlSingle y)
public SqlSingle Parse(string s)
public SqlSingle Subtract(SqlSingle x, SqlSingle y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlString ToSqlString()
public string ToString()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlSingle op_Addition(SqlSingle x, SqlSingle y)
public SqlSingle op_Division(SqlSingle x, SqlSingle y)
public SqlBoolean op_Equality(SqlSingle x, SqlSingle y)
public SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y)
public SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y)
public SqlBoolean op_Inequality(SqlSingle x, SqlSingle y)
public SqlBoolean op_LessThan(SqlSingle x, SqlSingle y)
public SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y)
public SqlSingle op_Multiply(SqlSingle x, SqlSingle y)
public SqlSingle op_Subtraction(SqlSingle x, SqlSingle y)
public SqlSingle op_UnaryNegation(SqlSingle x)
public SqlSingle op_Explicit(SqlBoolean x)
public SqlSingle op_Explicit(SqlDouble x)
public float op_Explicit(SqlSingle x)
public SqlSingle op_Explicit(SqlString x)
public SqlSingle op_Implicit(float x)
public SqlSingle op_Implicit(SqlByte x)
public SqlSingle op_Implicit(SqlDecimal x)
public SqlSingle op_Implicit(SqlInt16 x)
public SqlSingle op_Implicit(SqlInt32 x)
public SqlSingle op_Implicit(SqlInt64 x)
public SqlSingle op_Implicit(SqlMoney x)
}
public System.Data.SqlTypes.SqlString : ValueType {
private string value
private bool notNull
private int lcid
private SqlCompareOptions compareOptions
public int BinarySort
public int IgnoreCase
public int IgnoreKanaType
public int IgnoreNonSpace
public int IgnoreWidth
public SqlString Null
internal NumberFormatInfo DecimalFormat
public CompareInfo CompareInfo
public CultureInfo CultureInfo
public bool IsNull
public int LCID
public SqlCompareOptions SqlCompareOptions
public string Value
private CompareOptions CompareOptions
public void .ctor(string data)
public void .ctor(string data, int lcid)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data)
public void .ctor(string data, int lcid, SqlCompareOptions compareOptions)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count)
public void .ctor(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public CompareInfo get_CompareInfo()
public CultureInfo get_CultureInfo()
public bool get_IsNull()
public int get_LCID()
public SqlCompareOptions get_SqlCompareOptions()
public string get_Value()
private CompareOptions get_CompareOptions()
public SqlString Clone()
public CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions)
public int CompareTo(object value)
private int CompareSqlString(SqlString value)
public SqlString Concat(SqlString x, SqlString y)
public bool Equals(object value)
public SqlBoolean Equals(SqlString x, SqlString y)
public int GetHashCode()
public Byte[] GetNonUnicodeBytes()
public Byte[] GetUnicodeBytes()
public SqlBoolean GreaterThan(SqlString x, SqlString y)
public SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y)
public SqlBoolean LessThan(SqlString x, SqlString y)
public SqlBoolean LessThanOrEqual(SqlString x, SqlString y)
public SqlBoolean NotEquals(SqlString x, SqlString y)
public SqlBoolean ToSqlBoolean()
public SqlByte ToSqlByte()
public SqlDateTime ToSqlDateTime()
public SqlDecimal ToSqlDecimal()
public SqlDouble ToSqlDouble()
public SqlGuid ToSqlGuid()
public SqlInt16 ToSqlInt16()
public SqlInt32 ToSqlInt32()
public SqlInt64 ToSqlInt64()
public SqlMoney ToSqlMoney()
public SqlSingle ToSqlSingle()
public string ToString()
public SqlString Add(SqlString x, SqlString y)
public int CompareTo(SqlString value)
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public SqlString op_Addition(SqlString x, SqlString y)
public SqlBoolean op_Equality(SqlString x, SqlString y)
public SqlBoolean op_GreaterThan(SqlString x, SqlString y)
public SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y)
public SqlBoolean op_Inequality(SqlString x, SqlString y)
public SqlBoolean op_LessThan(SqlString x, SqlString y)
public SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y)
public SqlString op_Explicit(SqlBoolean x)
public SqlString op_Explicit(SqlByte x)
public SqlString op_Explicit(SqlDateTime x)
public SqlString op_Explicit(SqlDecimal x)
public SqlString op_Explicit(SqlDouble x)
public SqlString op_Explicit(SqlGuid x)
public SqlString op_Explicit(SqlInt16 x)
public SqlString op_Explicit(SqlInt32 x)
public SqlString op_Explicit(SqlInt64 x)
public SqlString op_Explicit(SqlMoney x)
public SqlString op_Explicit(SqlSingle x)
public string op_Explicit(SqlString x)
public SqlString op_Implicit(string x)
}
public System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
private void .ctor(SerializationInfo si, StreamingContext sc)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlTypes.SqlTypeException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception e)
protected void .ctor(SerializationInfo si, StreamingContext sc)
private void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
}
public System.Data.SqlTypes.SqlXml : object {
private bool notNull
private string xmlValue
public bool IsNull
public SqlXml Null
public string Value
public void .ctor(Stream value)
public void .ctor(XmlReader value)
private XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
private void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r)
private void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer)
public bool get_IsNull()
public SqlXml get_Null()
public string get_Value()
public XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet)
public XmlReader CreateReader()
}
public System.Data.SqlTypes.StorageState : Enum {
public int value__
public StorageState Buffer
public StorageState Stream
public StorageState UnmanagedBuffer
}
public System.Data.StateChangeEventArgs : EventArgs {
private ConnectionState originalState
private ConnectionState currentState
public ConnectionState CurrentState
public ConnectionState OriginalState
public void .ctor(ConnectionState originalState, ConnectionState currentState)
public ConnectionState get_CurrentState()
public ConnectionState get_OriginalState()
}
public System.Data.StateChangeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StateChangeEventArgs e)
public IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.StatementCompletedEventArgs : EventArgs {
private int recordCount
public int RecordCount
public void .ctor(int recordCount)
public int get_RecordCount()
}
public System.Data.StatementCompletedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StatementCompletedEventArgs e)
public IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public System.Data.StatementType : Enum {
public int value__
public StatementType Select
public StatementType Insert
public StatementType Update
public StatementType Batch
public StatementType Delete
}
public System.Data.StrongTypingException : DataException {
public void .ctor(string message)
public void .ctor(string s, Exception innerException)
protected void .ctor(SerializationInfo info, StreamingContext context)
}
public System.Data.SyntaxErrorException : InvalidExpressionException {
public void .ctor(string s)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception inner)
}
internal System.Data.TableAdapterSchemaInfo : object {
public DbProviderFactory Provider
public DbDataAdapter Adapter
public DbConnection Connection
public string ConnectionString
public string BaseClass
public string Name
public bool ShortCommands
public ArrayList Commands
public void .ctor(DbProviderFactory provider)
}
internal System.Data.TableMapping : object {
private bool existsInDataSet
public DataTable Table
public ArrayList Elements
public ArrayList Attributes
public DataColumn SimpleContent
public DataColumn PrimaryKey
public DataColumn ReferenceKey
public int lastElementIndex
public TableMapping ParentTable
public TableMappingCollection ChildTables
public bool ExistsInDataSet
public void .ctor(string name, string ns)
public void .ctor(DataTable dt)
public bool get_ExistsInDataSet()
public bool ContainsColumn(string name)
public DataColumn GetColumn(string name)
public void RemoveElementColumn(string name)
}
internal System.Data.TableMappingCollection : CollectionBase {
public TableMapping Item
public void Add(TableMapping map)
public TableMapping get_Item(string name)
}
internal System.Data.TableStructure : object {
public DataTable Table
public Hashtable OrdinalColumns
public ArrayList NonOrdinalColumns
public DataColumn PrimaryKey
public void .ctor(DataTable table)
public bool ContainsColumn(string name)
}
internal System.Data.TableStructureCollection : CollectionBase {
public TableStructure Item
public TableStructure Item
public void Add(TableStructure table)
public TableStructure get_Item(int i)
public TableStructure get_Item(string name)
}
public System.Data.TypedDataSetGenerator : object {
public void Generate(DataSet dataSet, CodeNamespace codeNamespace, ICodeGenerator codeGen)
public string GenerateIdName(string name, ICodeGenerator codeGen)
}
public System.Data.TypedDataSetGeneratorException : DataException {
private ArrayList errorList
public ArrayList ErrorList
public void .ctor(ArrayList list)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string error)
public void .ctor(string error, Exception inner)
public ArrayList get_ErrorList()
public void GetObjectData(SerializationInfo info, StreamingContext context)
}
public System.Data.UniqueConstraint : Constraint {
private bool _isPrimaryKey
private bool _belongsToCollection
private DataTable _dataTable
private DataColumn[] _dataColumns
private String[] _dataColumnNames
private ForeignKeyConstraint _childConstraint
internal ForeignKeyConstraint ChildConstraint
public DataColumn[] Columns
public bool IsPrimaryKey
public DataTable Table
public void .ctor(DataColumn column)
public void .ctor(DataColumn[] columns)
public void .ctor(DataColumn column, bool isPrimaryKey)
public void .ctor(DataColumn[] columns, bool isPrimaryKey)
public void .ctor(string name, DataColumn column)
public void .ctor(string name, DataColumn[] columns)
public void .ctor(string name, DataColumn column, bool isPrimaryKey)
public void .ctor(string name, DataColumn[] columns, bool isPrimaryKey)
public void .ctor(string name, String[] columnNames, bool isPrimaryKey)
private void _uniqueConstraint(string name, DataColumn column, bool isPrimaryKey)
private void _uniqueConstraint(string name, DataColumn[] columns, bool isPrimaryKey)
private void _validateColumns(DataColumn[] columns)
private void _validateColumns(DataColumn[] columns, DataTable& table)
private void _validateColumn(DataColumn column)
internal void SetAsPrimaryKey(ConstraintCollection collection, UniqueConstraint newPrimaryKey)
internal UniqueConstraint GetPrimaryKeyConstraint(ConstraintCollection collection)
internal UniqueConstraint GetUniqueConstraintForColumnSet(ConstraintCollection collection, DataColumn[] columns)
internal ForeignKeyConstraint get_ChildConstraint()
internal void set_ChildConstraint(ForeignKeyConstraint value)
internal void FinishInit(DataTable _setTable)
public DataColumn[] get_Columns()
public bool get_IsPrimaryKey()
public DataTable get_Table()
internal void SetIsPrimaryKey(bool value)
public bool Equals(object key2)
public int GetHashCode()
internal void AddToConstraintCollectionSetup(ConstraintCollection collection)
internal void RemoveFromConstraintCollectionCleanup(ConstraintCollection collection)
internal bool IsConstraintViolated()
internal void AssertConstraint(DataRow row)
internal bool IsColumnContained(DataColumn column)
internal bool CanRemoveFromCollection(ConstraintCollection col, bool shouldThrow)
private string GetErrorMessage(DataRow row)
}
public System.Data.UpdateRowSource : Enum {
public int value__
public UpdateRowSource None
public UpdateRowSource OutputParameters
public UpdateRowSource FirstReturnedRecord
public UpdateRowSource Both
}
public System.Data.UpdateStatus : Enum {
public int value__
public UpdateStatus Continue
public UpdateStatus ErrorsOccurred
public UpdateStatus SkipCurrentRow
public UpdateStatus SkipAllRemainingRows
}
public System.Data.VersionNotFoundException : DataException {
public void .ctor(string s)
protected void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(string message, Exception inner)
}
internal System.Data.XmlConstants : object {
public string SchemaPrefix
public string SchemaNamespace
public string XmlnsNS
public string XmlNS
public string SchemaElement
public string AttributeFormDefault
public string ElementFormDefault
public string Qualified
public string Unqualified
public string Element
public string Choice
public string ComplexType
public string SimpleType
public string Restriction
public string MaxLength
public string Sequence
public string MaxOccurs
public string MinOccurs
public string Unbounded
public string Name
public string Type
public string Id
public string TargetNamespace
public string Form
public string Attribute
public string Default
public string Caption
public string Base
public string Value
public string DataType
public string AutoIncrement
public string AutoIncrementSeed
public string AutoIncrementStep
public string MsdataPrefix
public string MsdataNamespace
public string MsdatasourceNamespace
public string MspropPrefix
public string MspropNamespace
public string DiffgrPrefix
public string DiffgrNamespace
public string TnsPrefix
public string IsDataSet
public string Locale
public string Ordinal
public string IsNested
public string ConstraintOnly
public string RelationName
public string ConstraintName
public string PrimaryKey
public string ColumnName
public string ReadOnly
public string UseCurrentCulture
public XmlQualifiedName QnString
public XmlQualifiedName QnShort
public XmlQualifiedName QnInt
public XmlQualifiedName QnLong
public XmlQualifiedName QnBoolean
public XmlQualifiedName QnUnsignedByte
public XmlQualifiedName QnChar
public XmlQualifiedName QnDateTime
public XmlQualifiedName QnDecimal
public XmlQualifiedName QnDouble
public XmlQualifiedName QnSbyte
public XmlQualifiedName QnFloat
public XmlQualifiedName QnDuration
public XmlQualifiedName QnUnsignedShort
public XmlQualifiedName QnUnsignedInt
public XmlQualifiedName QnUnsignedLong
public XmlQualifiedName QnUri
public XmlQualifiedName QnBase64Binary
public XmlQualifiedName QnXmlQualifiedName
}
internal System.Data.XmlDataInferenceLoader : object {
private DataSet dataset
private XmlDocument document
private XmlReadMode mode
private ArrayList ignoredNamespaces
private TableMappingCollection tables
private RelationStructureCollection relations
private void .ctor(DataSet ds, XmlDocument doc, XmlReadMode mode, String[] ignoredNamespaces)
public void Infer(DataSet dataset, XmlDocument document, XmlReadMode mode, String[] ignoredNamespaces)
private void ReadXml()
private void InferTopLevelTable(XmlElement el)
private void InferColumnElement(TableMapping table, XmlElement el)
private void CheckExtraneousElementColumn(TableMapping parentTable, XmlElement el)
private void PopulatePrimaryKey(TableMapping table)
private void PopulateRelationStructure(string parent, string child, string pkeyColumn)
private void InferRepeatedElement(TableMapping parentTable, XmlElement el)
private void InferTableElement(TableMapping parentTable, XmlElement el)
private TableMapping GetMappedTable(TableMapping parent, string tableName, string ns)
private DataColumn GetMappedColumn(TableMapping table, string name, string prefix, string ns, MappingType type, Type optColType)
private void SetAsExistingTable(XmlElement el, Hashtable existingTables)
private ElementMappingType GetElementMappingType(XmlElement el, ArrayList ignoredNamespaces, Hashtable existingTables)
private bool IsDocumentElementTable()
internal bool IsDocumentElementTable(XmlElement top, ArrayList ignoredNamespaces)
}
internal System.Data.XmlDataLoader : object {
private DataSet DSet
public void .ctor(DataSet set)
public XmlReadMode LoadData(XmlReader reader, XmlReadMode mode)
private void ReadModeSchema(XmlReader reader, XmlReadMode mode)
internal object StringToObject(Type type, string value)
private void AddRowToTable(XmlNode tableNode, DataColumn relationColumn, bool inferSchema, bool fillRows)
private int XmlNodeElementsDepth(XmlNode node)
private bool HaveChildElements(XmlNode node)
private bool HaveText(XmlNode node)
private bool IsRepeat(XmlNode node)
private bool HaveAttributes(XmlNode node)
private bool IsInferredAsTable(XmlNode node)
private bool IsRepeatedHaveChildNodes(XmlNode node)
}
internal System.Data.XmlDataReader : object {
private string xmlnsNS
private DataSet dataset
private XmlReader reader
private XmlReadMode mode
public void .ctor(DataSet ds, XmlReader xr, XmlReadMode m)
public void ReadXml(DataSet dataset, XmlReader reader, XmlReadMode mode)
private void Process()
private bool IsTopLevelDataSet()
private void ReadTopLevelElement()
private void ReadDataSetContent()
private void ReadElement(DataRow row)
private void ReadElementAttribute(DataRow row)
private void ReadElementContent(DataRow row)
private void ReadElementElement(DataRow row)
internal object StringToObject(Type type, string value)
}
internal System.Data.XmlDiffLoader : object {
private DataSet DSet
private DataTable table
private Hashtable DiffGrRows
private Hashtable ErrorRows
private Dictionary`2<string, int> <>f__switch$map0
public void .ctor(DataSet DSet)
public void .ctor(DataTable table)
public void Load(XmlReader reader)
private void LoadCurrent(XmlReader reader)
private void LoadBefore(XmlReader reader)
private void LoadErrors(XmlReader reader)
private void LoadColumns(DataTable Table, DataRow Row, XmlReader reader, DataRowVersion loadType)
private void LoadColumnAttributes(DataTable Table, DataRow Row, XmlReader reader, DataRowVersion loadType)
private void LoadColumnChildren(DataTable Table, DataRow Row, XmlReader reader, DataRowVersion loadType)
private void LoadBeforeTable(DataTable Table, XmlReader reader)
private void LoadCurrentTable(DataTable Table, XmlReader reader)
private DataTable GetTable(string name)
}
public System.Data.XmlReadMode : Enum {
public int value__
public XmlReadMode Auto
public XmlReadMode ReadSchema
public XmlReadMode IgnoreSchema
public XmlReadMode InferSchema
public XmlReadMode DiffGram
public XmlReadMode InferTypedSchema
public XmlReadMode Fragment
}
internal System.Data.XmlSchemaDataImporter : object {
private XmlSchemaDatatype schemaIntegerType
private XmlSchemaDatatype schemaDecimalType
private XmlSchemaComplexType schemaAnyType
private DataSet dataset
private bool forDataSet
private XmlSchema schema
private ArrayList relations
private Hashtable reservedConstraints
private XmlSchemaElement datasetElement
private ArrayList topLevelElements
private ArrayList targetElements
private TableStructure currentTable
private TableAdapterSchemaInfo currentAdapter
private Dictionary`2<string, int> <>f__switch$mapB
private Dictionary`2<string, int> <>f__switch$mapC
private Dictionary`2<string, int> <>f__switch$mapD
private Dictionary`2<string, int> <>f__switch$mapE
private Dictionary`2<string, int> <>f__switch$mapF
private Dictionary`2<string, int> <>f__switch$map10
internal TableAdapterSchemaInfo CurrentAdapter
public void .ctor(DataSet dataset, XmlReader reader, bool forDataSet)
internal TableAdapterSchemaInfo get_CurrentAdapter()
public void Process()
private bool IsDataSetElement(XmlSchemaElement el)
private bool ContainsColumn(XmlSchemaParticle p)
private void ProcessGlobalElement(XmlSchemaElement el)
private void ProcessDataSetElement(XmlSchemaElement el)
private void HandleDataSetContentTypeParticle(XmlSchemaParticle p)
private void ProcessDataTableElement(XmlSchemaElement el)
private DataRelation GenerateRelationship(RelationStructure rs)
private DataColumn CreateChildColumn(DataColumn parentColumn, DataTable childTable)
private void ImportColumnGroupBase(XmlSchemaElement parent, XmlSchemaGroupBase gb)
private XmlSchemaDatatype GetSchemaPrimitiveType(object type)
private void ImportColumnAttribute(XmlSchemaAttribute attr)
private void ImportColumnElement(XmlSchemaElement parent, XmlSchemaElement el)
private void ImportColumnMetaInfo(XmlSchemaAnnotated obj, XmlQualifiedName name, DataColumn col)
private void FillDataColumnComplexElement(XmlSchemaElement parent, XmlSchemaElement el, DataColumn col)
private bool DataSetDefinesKey(string name)
private void AddParentKeyColumn(XmlSchemaElement parent, XmlSchemaElement el, DataColumn col)
private void FillDataColumnRepeatedSimpleElement(XmlSchemaElement parent, XmlSchemaElement el, DataColumn col)
private void FillDataColumnSimpleElement(XmlSchemaElement el, DataColumn col)
private void AddColumn(DataColumn col)
private void FillFacet(DataColumn col, XmlSchemaSimpleType st)
private Type ConvertDatatype(XmlSchemaDatatype dt)
private string GetSelectorTarget(string xpath)
private void ReserveSelfIdentity(XmlSchemaIdentityConstraint ic)
private void ProcessSelfIdentity(ConstraintStructure c)
private void ReserveRelationIdentity(XmlSchemaElement element, XmlSchemaKeyref keyref)
private void ProcessRelationIdentity(XmlSchemaElement element, ConstraintStructure c)
private UniqueConstraint FindConstraint(string name, XmlSchemaElement element)
private void HandleAnnotations(XmlSchemaAnnotation an, bool nested)
private void HandleDataSourceAnnotation(XmlElement el, bool nested)
private void ProcessTableAdapter(XmlElement el, DbProviderFactory provider, string connStr)
private void ProcessDbSource(XmlElement el)
private DbCommand ProcessDbCommand(XmlElement el)
private ArrayList ProcessDbParameters(XmlElement el)
private void ProcessColumnMapping(XmlElement el, DataTableMapping tableMapping)
private void HandleRelationshipAnnotation(XmlElement el, bool nested)
private object GetElementDefaultValue(XmlSchemaElement elem)
private object GetAttributeDefaultValue(XmlSchemaAttribute attr)
}
internal System.Data.XmlSchemaWriter : object {
private string xmlnsxs
private XmlWriter w
private DataTable[] tables
private DataRelation[] relations
private string mainDataTable
private string dataSetName
private string dataSetNamespace
private PropertyCollection dataSetProperties
private CultureInfo dataSetLocale
private ArrayList globalTypeTables
private Hashtable additionalNamespaces
private ArrayList annotation
public string ConstraintPrefix
public void .ctor(DataSet dataset, XmlWriter writer, DataTableCollection tables, DataRelationCollection relations)
public void .ctor(XmlWriter writer, DataTable[] tables, DataRelation[] relations, string mainDataTable, string dataSetName, CultureInfo locale)
public void WriteXmlSchema(DataSet dataset, XmlWriter writer)
public void WriteXmlSchema(DataSet dataset, XmlWriter writer, DataTableCollection tables, DataRelationCollection relations)
internal void WriteXmlSchema(XmlWriter writer, DataTable[] tables, DataRelation[] relations, string mainDataTable, string dataSetName, CultureInfo locale)
public string get_ConstraintPrefix()
public void WriteSchema()
private void WriteDataSetElement()
private void WriteDataRelationAnnotation(DataRelation rel)
private void WriteConstraints()
private void AddUniqueConstraints(UniqueConstraint uniq, ArrayList names)
private void AddForeignKeys(DataRelation rel, ArrayList names, bool isConstraintOnly)
private bool CheckExtendedPropertyExists(DataTable[] tables, DataRelation[] relations)
private void AddExtendedPropertyAttributes(PropertyCollection props)
private void WriteTableElement(DataTable table)
private void WriteTableType(DataTable table)
private void WriteTableTypeParticles(DataColumn col)
private void WriteChildRelations(DataRelation rel)
private void WriteTableAttributes(ArrayList atts)
private void WriteSimpleType(DataColumn col)
private void WriteQName(XmlQualifiedName name)
private void CheckNamespace(string prefix, string ns, ListDictionary names, ListDictionary includes)
private void HandleExternalNamespace(string prefix, string ns, ListDictionary includes)
private XmlQualifiedName MapType(Type type)
}
public System.Data.XmlWriteMode : Enum {
public int value__
public XmlWriteMode WriteSchema
public XmlWriteMode IgnoreSchema
public XmlWriteMode DiffGram
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
public System.Xml.XmlDataDocument : XmlDocument {
private DataSet dataSet
private int dataRowID
private ArrayList dataRowIDList
private bool raiseDataSetEvents
private bool raiseDocumentEvents
private DataColumnChangeEventHandler columnChanged
private DataRowChangeEventHandler rowDeleted
private DataRowChangeEventHandler rowChanged
private CollectionChangeEventHandler tablesChanged
public DataSet DataSet
public void .ctor(DataSet dataset)
private void .ctor(DataSet dataset, bool clone)
public DataSet get_DataSet()
private void FillNodeRows(XmlElement parent, DataTable dt, ICollection rows)
public XmlNode CloneNode(bool deep)
public XmlElement CreateElement(string prefix, string localName, string namespaceURI)
public XmlEntityReference CreateEntityReference(string name)
public XmlElement GetElementById(string elemId)
public XmlElement GetElementFromRow(DataRow r)
public DataRow GetRowFromElement(XmlElement e)
public void Load(Stream inStream)
public void Load(string filename)
public void Load(TextReader txtReader)
public void Load(XmlReader reader)
protected XPathNavigator CreateNavigator(XmlNode node)
private void OnNodeChanging(object sender, XmlNodeChangedEventArgs args)
private void OnNodeChanged(object sender, XmlNodeChangedEventArgs args)
private void OnNodeRemoving(object sender, XmlNodeChangedEventArgs args)
private void OnNodeRemoved(object sender, XmlNodeChangedEventArgs args)
private void OnNodeInserting(object sender, XmlNodeChangedEventArgs args)
private void OnNodeInserted(object sender, XmlNodeChangedEventArgs args)
private void CheckDescendantRelationship(XmlNode n)
private void CheckDescendantRelationship(XmlNode p, DataRow row)
private void FillRelationship(DataRow row, DataRow childRow, XmlNode parentNode, XmlNode childNode)
private void OnDataTableChanged(object sender, CollectionChangeEventArgs eventArgs)
private void OnDataTableColumnChanged(object sender, DataColumnChangeEventArgs eventArgs)
private void OnDataTableRowDeleted(object sender, DataRowChangeEventArgs eventArgs)
private void OnDataTableRowChanged(object sender, DataRowChangeEventArgs eventArgs)
private void OnDataTableRowAdded(DataRowChangeEventArgs args)
private void FillNodeChildrenFromRow(DataRow row, XmlElement element)
private void OnDataTableRowRollback(DataRowChangeEventArgs args)
private void InitDelegateFields()
private void RemoveXmlDocumentListeners()
private void AddXmlDocumentListeners()
internal object StringToObject(Type type, string value)
}
internal XmlHelper : object {
private Hashtable localSchemaNameCache
private Hashtable localXmlNameCache
internal string Decode(string xmlName)
internal string Encode(string schemaName)
internal void ClearCache()
}
internal XmlTableWriter : object {
internal void WriteTables(XmlWriter writer, XmlWriteMode mode, List`1<DataTable> tables, List`1<DataRelation> relations, string mainDataTable, string dataSetName)
internal void WriteTableList(XmlWriter writer, XmlWriteMode mode, List`1<DataTable> tables, DataRowVersion version)
}
