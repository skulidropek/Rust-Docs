internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
public System.EnterpriseServices.AccessChecksLevelOption : Enum {
public int value__
public AccessChecksLevelOption Application
public AccessChecksLevelOption ApplicationComponent
}
public System.EnterpriseServices.ActivationOption : Enum {
public int value__
public ActivationOption Library
public ActivationOption Server
}
public System.EnterpriseServices.Activity : object {
public void .ctor(ServiceConfig cfg)
public void AsynchronousCall(IServiceCall serviceCall)
public void BindToCurrentThread()
public void SynchronousCall(IServiceCall serviceCall)
public void UnbindFromThread()
}
public System.EnterpriseServices.ApplicationAccessControlAttribute : Attribute {
private AccessChecksLevelOption accessChecksLevel
private AuthenticationOption authentication
private ImpersonationLevelOption impersonation
private bool val
public AccessChecksLevelOption AccessChecksLevel
public AuthenticationOption Authentication
public ImpersonationLevelOption ImpersonationLevel
public bool Value
public void .ctor(bool val)
private bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info)
private bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache)
private bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s)
public AccessChecksLevelOption get_AccessChecksLevel()
public void set_AccessChecksLevel(AccessChecksLevelOption value)
public AuthenticationOption get_Authentication()
public void set_Authentication(AuthenticationOption value)
public ImpersonationLevelOption get_ImpersonationLevel()
public void set_ImpersonationLevel(ImpersonationLevelOption value)
public bool get_Value()
public void set_Value(bool value)
}
public System.EnterpriseServices.ApplicationActivationAttribute : Attribute {
private ActivationOption opt
private string soapMailbox
private string soapVRoot
public string SoapMailbox
public string SoapVRoot
public ActivationOption Value
public void .ctor(ActivationOption opt)
private bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info)
private bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache)
private bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s)
public string get_SoapMailbox()
public void set_SoapMailbox(string value)
public string get_SoapVRoot()
public void set_SoapVRoot(string value)
public ActivationOption get_Value()
}
public System.EnterpriseServices.ApplicationIDAttribute : Attribute {
private Guid guid
public Guid Value
public void .ctor(string guid)
private bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info)
private bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache)
private bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s)
public Guid get_Value()
}
public System.EnterpriseServices.ApplicationNameAttribute : Attribute {
private string name
public string Value
public void .ctor(string name)
private bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info)
private bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache)
private bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s)
public string get_Value()
}
public System.EnterpriseServices.ApplicationQueuingAttribute : Attribute {
private bool enabled
private int maxListenerThreads
private bool queueListenerEnabled
public bool Enabled
public int MaxListenerThreads
public bool QueueListenerEnabled
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_MaxListenerThreads()
public void set_MaxListenerThreads(int value)
public bool get_QueueListenerEnabled()
public void set_QueueListenerEnabled(bool value)
}
public System.EnterpriseServices.AuthenticationOption : Enum {
public int value__
public AuthenticationOption Call
public AuthenticationOption Connect
public AuthenticationOption Default
public AuthenticationOption Integrity
public AuthenticationOption None
public AuthenticationOption Packet
public AuthenticationOption Privacy
}
public System.EnterpriseServices.AutoCompleteAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.BindingOption : Enum {
public int value__
public BindingOption NoBinding
public BindingOption BindingToPoolThread
}
public System.EnterpriseServices.BOID : ValueType {
public Byte[] rgb
}
public System.EnterpriseServices.BYOT : object {
public object CreateWithTipTransaction(string url, Type t)
public object CreateWithTransaction(object transaction, Type t)
}
internal System.EnterpriseServices.CompensatingResourceManager._LogRecord : ValueType {
public int dwCrmFlags
public int dwSequenceNumber
public object blobUserData
}
public System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.CompensatingResourceManager.Clerk : object {
public int LogRecordCount
public string TransactionUOW
public void .ctor(string compensator, string description, CompensatorOptions flags)
public void .ctor(Type compensator, string description, CompensatorOptions flags)
public int get_LogRecordCount()
public string get_TransactionUOW()
protected void Finalize()
public void ForceLog()
public void ForceTransactionToAbort()
public void ForgetLogRecord()
public void WriteLogRecord(object record)
}
public System.EnterpriseServices.CompensatingResourceManager.ClerkInfo : object {
public string ActivityId
public Clerk Clerk
public string Compensator
public string Description
public string InstanceId
public string TransactionUOW
protected void Finalize()
public string get_ActivityId()
public Clerk get_Clerk()
public string get_Compensator()
public string get_Description()
public string get_InstanceId()
public string get_TransactionUOW()
}
public System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor : object {
public int Count
public ClerkInfo Item
public ClerkInfo Item
protected void Finalize()
public int get_Count()
public ClerkInfo get_Item(string index)
public ClerkInfo get_Item(int index)
public IEnumerator GetEnumerator()
public void Populate()
}
public System.EnterpriseServices.CompensatingResourceManager.Compensator : ServicedComponent {
public Clerk Clerk
public Clerk get_Clerk()
public bool AbortRecord(LogRecord rec)
public void BeginAbort(bool fRecovery)
public void BeginCommit(bool fRecovery)
public void BeginPrepare()
public bool CommitRecord(LogRecord rec)
public void EndAbort()
public void EndCommit()
public bool EndPrepare()
public bool PrepareRecord(LogRecord rec)
}
public System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions : Enum {
public int value__
public CompensatorOptions PreparePhase
public CompensatorOptions CommitPhase
public CompensatorOptions AbortPhase
public CompensatorOptions AllPhases
public CompensatorOptions FailIfInDoubtsRemain
}
public System.EnterpriseServices.CompensatingResourceManager.LogRecord : object {
private LogRecordFlags flags
private object record
private int sequence
public LogRecordFlags Flags
public object Record
public int Sequence
internal void .ctor(_LogRecord logRecord)
public LogRecordFlags get_Flags()
public object get_Record()
public int get_Sequence()
}
public System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags : Enum {
public int value__
public LogRecordFlags ForgetTarget
public LogRecordFlags WrittenDuringPrepare
public LogRecordFlags WrittenDuringCommit
public LogRecordFlags WrittenDuringAbort
public LogRecordFlags WrittenDurringRecovery
public LogRecordFlags WrittenDuringReplay
public LogRecordFlags ReplayInProgress
}
public System.EnterpriseServices.CompensatingResourceManager.TransactionState : Enum {
public int value__
public TransactionState Active
public TransactionState Committed
public TransactionState Aborted
public TransactionState Indoubt
}
public System.EnterpriseServices.ComponentAccessControlAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.COMTIIntrinsicsAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.ConstructionEnabledAttribute : Attribute {
private string def
private bool enabled
public string Default
public bool Enabled
public void .ctor(bool val)
public string get_Default()
public void set_Default(string value)
public bool get_Enabled()
public void set_Enabled(bool value)
}
public System.EnterpriseServices.ContextUtil : object {
private bool deactivateOnReturn
private TransactionVote myTransactionVote
public Guid ActivityId
public Guid ApplicationId
public Guid ApplicationInstanceId
public Guid ContextId
public bool DeactivateOnReturn
public bool IsInTransaction
public bool IsSecurityEnabled
public TransactionVote MyTransactionVote
public Guid PartitionId
public object Transaction
public Transaction SystemTransaction
public Guid TransactionId
public Guid get_ActivityId()
public Guid get_ApplicationId()
public Guid get_ApplicationInstanceId()
public Guid get_ContextId()
public bool get_DeactivateOnReturn()
public void set_DeactivateOnReturn(bool value)
public bool get_IsInTransaction()
public bool get_IsSecurityEnabled()
public TransactionVote get_MyTransactionVote()
public void set_MyTransactionVote(TransactionVote value)
public Guid get_PartitionId()
public object get_Transaction()
public Transaction get_SystemTransaction()
public Guid get_TransactionId()
public void DisableCommit()
public void EnableCommit()
public object GetNamedProperty(string name)
public bool IsCallerInRole(string role)
public bool IsDefaultContext()
public void SetAbort()
public void SetComplete()
public void SetNamedProperty(string name, object value)
}
public System.EnterpriseServices.DescriptionAttribute : Attribute {
public void .ctor(string desc)
}
public System.EnterpriseServices.EventClassAttribute : Attribute {
private bool allowInProcSubscribers
private bool fireInParallel
private string publisherFilter
public bool AllowInprocSubscribers
public bool FireInParallel
public string PublisherFilter
public bool get_AllowInprocSubscribers()
public void set_AllowInprocSubscribers(bool value)
public bool get_FireInParallel()
public void set_FireInParallel(bool value)
public string get_PublisherFilter()
public void set_PublisherFilter(string value)
}
public System.EnterpriseServices.EventTrackingEnabledAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.ExceptionClassAttribute : Attribute {
private string name
public string Value
public void .ctor(string name)
public string get_Value()
}
public System.EnterpriseServices.IAsyncErrorNotify {
public void OnError(int hresult)
}
internal System.EnterpriseServices.IConfigurationAttribute {
public bool AfterSaveChanges(Hashtable info)
public bool Apply(Hashtable info)
public bool IsValidTarget(string s)
}
public System.EnterpriseServices.IISIntrinsicsAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.ImpersonationLevelOption : Enum {
public int value__
public ImpersonationLevelOption Anonymous
public ImpersonationLevelOption Default
public ImpersonationLevelOption Delegate
public ImpersonationLevelOption Identify
public ImpersonationLevelOption Impersonate
}
public System.EnterpriseServices.InheritanceOption : Enum {
public int value__
public InheritanceOption Inherit
public InheritanceOption Ignore
}
public System.EnterpriseServices.InstallationFlags : Enum {
public int value__
public InstallationFlags Configure
public InstallationFlags ConfigureComponentsOnly
public InstallationFlags CreateTargetApplication
public InstallationFlags Default
public InstallationFlags ExpectExistingTypeLib
public InstallationFlags FindOrCreateTargetApplication
public InstallationFlags Install
public InstallationFlags ReconfigureExistingApplication
public InstallationFlags Register
public InstallationFlags ReportWarningsToConsole
}
public System.EnterpriseServices.InterfaceQueuingAttribute : Attribute {
private bool enabled
private string interfaceName
public bool Enabled
public string Interface
public void .ctor(bool enabled)
public bool get_Enabled()
public void set_Enabled(bool value)
public string get_Interface()
public void set_Interface(string value)
}
public System.EnterpriseServices.Internal.AppDomainHelper : object {
protected void Finalize()
}
public System.EnterpriseServices.Internal.ClientRemotingConfig : object {
public bool Write(string DestinationDirectory, string VRoot, string BaseUrl, string AssemblyName, string TypeName, string ProgId, string Mode, string Transport)
}
public System.EnterpriseServices.Internal.ClrObjectFactory : object {
public object CreateFromAssembly(string AssemblyName, string TypeName, string Mode)
public object CreateFromMailbox(string Mailbox, string Mode)
public object CreateFromVroot(string VrootUrl, string Mode)
public object CreateFromWsdl(string WsdlUrl, string Mode)
}
public System.EnterpriseServices.Internal.ComManagedImportUtil : object {
public void GetComponentInfo(string assemblyPath, String& numComponents, String& componentInfo)
public void InstallAssembly(string asmpath, string parname, string appname)
}
public System.EnterpriseServices.Internal.ComSoapPublishError : object {
public void Report(string s)
}
public System.EnterpriseServices.Internal.GenerateMetadata : object {
public string Generate(string strSrcTypeLib, string outPath)
public string GenerateMetaData(string strSrcTypeLib, string outPath, Byte[] PublicKey, StrongNameKeyPair KeyPair)
public string GenerateSigned(string strSrcTypeLib, string outPath, bool InstallGac, String& Error)
public int SearchPath(string path, string fileName, string extension, int numBufferChars, string buffer, Int32[] filePart)
}
public System.EnterpriseServices.Internal.IClrObjectFactory {
public object CreateFromAssembly(string assembly, string type, string mode)
public object CreateFromMailbox(string Mailbox, string Mode)
public object CreateFromVroot(string VrootUrl, string Mode)
public object CreateFromWsdl(string WsdlUrl, string Mode)
}
public System.EnterpriseServices.Internal.IComManagedImportUtil {
public void GetComponentInfo(string assemblyPath, String& numComponents, String& componentInfo)
public void InstallAssembly(string filename, string parname, string appname)
}
public System.EnterpriseServices.Internal.IComSoapIISVRoot {
public void Create(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error)
public void Delete(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error)
}
public System.EnterpriseServices.Internal.IComSoapMetadata {
public string Generate(string SrcTypeLibFileName, string OutPath)
public string GenerateSigned(string SrcTypeLibFileName, string OutPath, bool InstallGac, String& Error)
}
public System.EnterpriseServices.Internal.IComSoapPublisher {
public void CreateMailBox(string RootMailServer, string MailBox, String& SmtpName, String& Domain, String& PhysicalPath, String& Error)
public void CreateVirtualRoot(string Operation, string FullUrl, String& BaseUrl, String& VirtualRoot, String& PhysicalPath, String& Error)
public void DeleteMailBox(string RootMailServer, string MailBox, String& Error)
public void DeleteVirtualRoot(string RootWebServer, string FullUrl, String& Error)
public void GacInstall(string AssemblyPath)
public void GacRemove(string AssemblyPath)
public void GetAssemblyNameForCache(string TypeLibPath, String& CachePath)
public string GetTypeNameFromProgId(string AssemblyPath, string ProgId)
public void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, String& AssemblyName, String& TypeName, String& Error)
public void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, String& AssemblyName, String& TypeName, String& Error)
public void RegisterAssembly(string AssemblyPath)
public void UnRegisterAssembly(string AssemblyPath)
}
public System.EnterpriseServices.Internal.IISVirtualRoot : object {
public void Create(string RootWeb, string inPhysicalDirectory, string VirtualDirectory, String& Error)
public void Delete(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error)
}
public System.EnterpriseServices.Internal.IServerWebConfig {
public void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string Mode, String& Error)
public void Create(string FilePath, string FileRootName, String& Error)
}
public System.EnterpriseServices.Internal.ISoapClientImport {
public void ProcessClientTlbEx(string progId, string virtualRoot, string baseUrl, string authentication, string assemblyName, string typeName)
}
public System.EnterpriseServices.Internal.ISoapServerTlb {
public void AddServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string clientActivated, string wellKnown, string discoFile, string operation, String& assemblyName, String& typeName)
public void DeleteServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string operation, string assemblyName, string typeName)
}
public System.EnterpriseServices.Internal.ISoapServerVRoot {
public void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, String& baseUrl, String& virtualRoot, String& physicalPath)
public void DeleteVirtualRootEx(string rootWebServer, string baseUrl, string virtualRoot)
public void GetVirtualRootStatus(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& exists, String& secureSockets, String& windowsAuth, String& anonymous, String& homePage, String& discoFile, String& physicalPath, String& baseUrl, String& virtualRoot)
}
public System.EnterpriseServices.Internal.ISoapUtility {
public void GetServerBinPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& binPath)
public void GetServerPhysicalPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& physicalPath)
public void Present()
}
public System.EnterpriseServices.Internal.Publish : object {
public void CreateMailBox(string RootMailServer, string MailBox, String& SmtpName, String& Domain, String& PhysicalPath, String& Error)
public void CreateVirtualRoot(string Operation, string FullUrl, String& BaseUrl, String& VirtualRoot, String& PhysicalPath, String& Error)
public void DeleteMailBox(string RootMailServer, string MailBox, String& Error)
public void DeleteVirtualRoot(string RootWebServer, string FullUrl, String& Error)
public void GacInstall(string AssemblyPath)
public void GacRemove(string AssemblyPath)
public void GetAssemblyNameForCache(string TypeLibPath, String& CachePath)
public string GetClientPhysicalPath(bool CreateDir)
public string GetTypeNameFromProgId(string AssemblyPath, string ProgId)
public void ParseUrl(string FullUrl, String& BaseUrl, String& VirtualRoot)
public void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, String& AssemblyName, String& TypeName, String& Error)
public void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, String& strAssemblyName, String& TypeName, String& Error)
public void RegisterAssembly(string AssemblyPath)
public void UnRegisterAssembly(string AssemblyPath)
}
public System.EnterpriseServices.Internal.ServerWebConfig : object {
public void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, String& Error)
public void Create(string FilePath, string FilePrefix, String& Error)
}
public System.EnterpriseServices.Internal.SoapClientImport : object {
public void ProcessClientTlbEx(string progId, string virtualRoot, string baseUrl, string authentication, string assemblyName, string typeName)
}
public System.EnterpriseServices.Internal.SoapServerTlb : object {
public void AddServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string inBaseUrl, string inVirtualRoot, string clientActivated, string wellKnown, string discoFile, string operation, String& strAssemblyName, String& typeName)
public void DeleteServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string operation, string assemblyName, string typeName)
}
public System.EnterpriseServices.Internal.SoapServerVRoot : object {
public void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, String& baseUrl, String& virtualRoot, String& physicalPath)
public void DeleteVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot)
public void GetVirtualRootStatus(string RootWebServer, string inBaseUrl, string inVirtualRoot, String& Exists, String& SSL, String& WindowsAuth, String& Anonymous, String& HomePage, String& DiscoFile, String& PhysicalPath, String& BaseUrl, String& VirtualRoot)
}
public System.EnterpriseServices.Internal.SoapUtility : object {
public void GetServerBinPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& binPath)
public void GetServerPhysicalPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& physicalPath)
public void Present()
}
public System.EnterpriseServices.IPlaybackControl {
public void FinalClientRetry()
public void FinalServerRetry()
}
public System.EnterpriseServices.IProcessInitControl {
public void ResetInitializerTimeout(int dwSecondsRemaining)
}
public System.EnterpriseServices.IProcessInitializer {
public void Shutdown()
public void Startup(object punkProcessControl)
}
public System.EnterpriseServices.IRegistrationHelper {
public void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags)
public void UninstallAssembly(string assembly, string application)
}
public System.EnterpriseServices.IRemoteDispatch {
public string RemoteDispatchAutoDone(string s)
public string RemoteDispatchNotAutoDone(string s)
}
internal System.EnterpriseServices.ISecurityCallContext {
public int Count
public int get_Count()
public void GetEnumerator(IEnumerator& enumerator)
public object GetItem(string user)
public bool IsCallerInRole(string role)
public bool IsSecurityEnabled()
public bool IsUserInRole(Object& user, string role)
}
internal System.EnterpriseServices.ISecurityCallersColl {
public int Count
public int get_Count()
public void GetEnumerator(IEnumerator& enumerator)
public ISecurityIdentityColl GetItem(int idx)
}
internal System.EnterpriseServices.ISecurityIdentityColl {
public int Count
public int get_Count()
public void GetEnumerator(IEnumerator& enumerator)
public SecurityIdentity GetItem(int idx)
}
public System.EnterpriseServices.IServiceCall {
public void OnCall()
}
public System.EnterpriseServices.IServicedComponentInfo {
public void GetComponentInfo(Int32& infoMask, String[]& infoArray)
}
internal System.EnterpriseServices.ISharedProperty {
public object Value
public object get_Value()
public void set_Value(object value)
}
internal System.EnterpriseServices.ISharedPropertyGroup {
public ISharedProperty CreateProperty(string name, Boolean& fExists)
public ISharedProperty CreatePropertyByPosition(int position, Boolean& fExists)
public ISharedProperty Property(string name)
public ISharedProperty PropertyByPosition(int position)
}
public System.EnterpriseServices.ITransaction {
public void Abort(BOID& pboidReason, int fRetaining, int fAsync)
public void Commit(int fRetaining, int grfTC, int grfRM)
public void GetTransactionInfo(XACTTRANSINFO& pinfo)
}
public System.EnterpriseServices.JustInTimeActivationAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.LoadBalancingSupportedAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.MustRunInClientContextAttribute : Attribute {
private bool val
public bool Value
public void .ctor(bool val)
public bool get_Value()
}
public System.EnterpriseServices.ObjectPoolingAttribute : Attribute {
private int creationTimeout
private bool enabled
private int minPoolSize
private int maxPoolSize
public int CreationTimeout
public bool Enabled
public int MaxPoolSize
public int MinPoolSize
public void .ctor(bool enable)
public void .ctor(int minPoolSize, int maxPoolSize)
public void .ctor(bool enable, int minPoolSize, int maxPoolSize)
public int get_CreationTimeout()
public void set_CreationTimeout(int value)
public bool get_Enabled()
public void set_Enabled(bool value)
public int get_MaxPoolSize()
public void set_MaxPoolSize(int value)
public int get_MinPoolSize()
public void set_MinPoolSize(int value)
public bool AfterSaveChanges(Hashtable info)
public bool Apply(Hashtable info)
public bool IsValidTarget(string s)
}
public System.EnterpriseServices.PartitionOption : Enum {
public int value__
public PartitionOption Ignore
public PartitionOption Inherit
public PartitionOption New
}
public System.EnterpriseServices.PropertyLockMode : Enum {
public int value__
public PropertyLockMode Method
public PropertyLockMode SetGet
}
public System.EnterpriseServices.PropertyReleaseMode : Enum {
public int value__
public PropertyReleaseMode Process
public PropertyReleaseMode Standard
}
public System.EnterpriseServices.RegistrationConfig : object {
public string Application
public string ApplicationRootDirectory
public string AssemblyFile
public InstallationFlags InstallationFlags
public string Partition
public string TypeLibrary
public string get_Application()
public void set_Application(string value)
public string get_ApplicationRootDirectory()
public void set_ApplicationRootDirectory(string value)
public string get_AssemblyFile()
public void set_AssemblyFile(string value)
public InstallationFlags get_InstallationFlags()
public void set_InstallationFlags(InstallationFlags value)
public string get_Partition()
public void set_Partition(string value)
public string get_TypeLibrary()
public void set_TypeLibrary(string value)
}
public System.EnterpriseServices.RegistrationErrorInfo : object {
private int errorCode
private string errorString
private string majorRef
private string minorRef
private string name
public int ErrorCode
public string ErrorString
public string MajorRef
public string MinorRef
public string Name
internal void .ctor(string name, string majorRef, string minorRef, int errorCode)
public int get_ErrorCode()
public string get_ErrorString()
public string get_MajorRef()
public string get_MinorRef()
public string get_Name()
}
public System.EnterpriseServices.RegistrationException : SystemException {
private RegistrationErrorInfo[] errorInfo
public RegistrationErrorInfo[] ErrorInfo
public void .ctor(string msg)
public void .ctor(string msg, Exception inner)
public RegistrationErrorInfo[] get_ErrorInfo()
public void GetObjectData(SerializationInfo info, StreamingContext ctx)
}
public System.EnterpriseServices.RegistrationHelper : MarshalByRefObject {
public void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags)
public void InstallAssembly(string assembly, String& application, string partition, String& tlb, InstallationFlags installFlags)
public void InstallAssemblyFromConfig(RegistrationConfig& regConfig)
public void UninstallAssembly(string assembly, string application)
public void UninstallAssembly(string assembly, string application, string partition)
public void UninstallAssemblyFromConfig(RegistrationConfig& regConfig)
}
public System.EnterpriseServices.RegistrationHelperTx : ServicedComponent {
protected internal void Activate()
protected internal void Deactivate()
public void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags, object sync)
public void InstallAssembly(string assembly, String& application, string partition, String& tlb, InstallationFlags installFlags, object sync)
public void InstallAssemblyFromConfig(RegistrationConfig& regConfig, object sync)
public bool IsInTransaction()
public void UninstallAssembly(string assembly, string application, object sync)
public void UninstallAssembly(string assembly, string application, string partition, object sync)
public void UninstallAssemblyFromConfig(RegistrationConfig& regConfig, object sync)
}
public System.EnterpriseServices.ResourcePool : object {
public void .ctor(TransactionEndDelegate cb)
public object GetResource()
public bool PutResource(object resource)
}
public System.EnterpriseServices.SecurityCallContext : object {
public SecurityCallers Callers
public SecurityCallContext CurrentCall
public SecurityIdentity DirectCaller
public bool IsSecurityEnabled
public int MinAuthenticationLevel
public int NumCallers
public SecurityIdentity OriginalCaller
internal void .ctor(ISecurityCallContext context)
public SecurityCallers get_Callers()
public SecurityCallContext get_CurrentCall()
public SecurityIdentity get_DirectCaller()
public bool get_IsSecurityEnabled()
public int get_MinAuthenticationLevel()
public int get_NumCallers()
public SecurityIdentity get_OriginalCaller()
public bool IsCallerInRole(string role)
public bool IsUserInRole(string user, string role)
}
public System.EnterpriseServices.SecurityCallers : object {
public int Count
public SecurityIdentity Item
internal void .ctor(ISecurityCallersColl collection)
public int get_Count()
public SecurityIdentity get_Item(int idx)
public IEnumerator GetEnumerator()
}
public System.EnterpriseServices.SecurityIdentity : object {
public string AccountName
public AuthenticationOption AuthenticationLevel
public int AuthenticationService
public ImpersonationLevelOption ImpersonationLevel
internal void .ctor(ISecurityIdentityColl collection)
public string get_AccountName()
public AuthenticationOption get_AuthenticationLevel()
public int get_AuthenticationService()
public ImpersonationLevelOption get_ImpersonationLevel()
}
public System.EnterpriseServices.SecurityRoleAttribute : Attribute {
private string description
private bool everyone
private string role
public string Description
public string Role
public bool SetEveryoneAccess
public void .ctor(string role)
public void .ctor(string role, bool everyone)
public string get_Description()
public void set_Description(string value)
public string get_Role()
public void set_Role(string value)
public bool get_SetEveryoneAccess()
public void set_SetEveryoneAccess(bool value)
}
public System.EnterpriseServices.ServiceConfig : object {
public BindingOption Binding
public Transaction BringYourOwnSystemTransaction
public ITransaction BringYourOwnTransaction
public bool COMTIIntrinsicsEnabled
public bool IISIntrinsicsEnabled
public InheritanceOption Inheritance
public TransactionIsolationLevel IsolationLevel
public Guid PartitionId
public PartitionOption PartitionOption
public string SxsDirectory
public string SxsName
public SxsOption SxsOption
public SynchronizationOption Synchronization
public ThreadPoolOption ThreadPool
public string TipUrl
public string TrackingAppName
public string TrackingComponentName
public bool TrackingEnabled
public TransactionOption Transaction
public string TransactionDescription
public int TransactionTimeout
public BindingOption get_Binding()
public void set_Binding(BindingOption value)
public Transaction get_BringYourOwnSystemTransaction()
public void set_BringYourOwnSystemTransaction(Transaction value)
public ITransaction get_BringYourOwnTransaction()
public void set_BringYourOwnTransaction(ITransaction value)
public bool get_COMTIIntrinsicsEnabled()
public void set_COMTIIntrinsicsEnabled(bool value)
public bool get_IISIntrinsicsEnabled()
public void set_IISIntrinsicsEnabled(bool value)
public InheritanceOption get_Inheritance()
public void set_Inheritance(InheritanceOption value)
public TransactionIsolationLevel get_IsolationLevel()
public void set_IsolationLevel(TransactionIsolationLevel value)
public Guid get_PartitionId()
public void set_PartitionId(Guid value)
public PartitionOption get_PartitionOption()
public void set_PartitionOption(PartitionOption value)
public string get_SxsDirectory()
public void set_SxsDirectory(string value)
public string get_SxsName()
public void set_SxsName(string value)
public SxsOption get_SxsOption()
public void set_SxsOption(SxsOption value)
public SynchronizationOption get_Synchronization()
public void set_Synchronization(SynchronizationOption value)
public ThreadPoolOption get_ThreadPool()
public void set_ThreadPool(ThreadPoolOption value)
public string get_TipUrl()
public void set_TipUrl(string value)
public string get_TrackingAppName()
public void set_TrackingAppName(string value)
public string get_TrackingComponentName()
public void set_TrackingComponentName(string value)
public bool get_TrackingEnabled()
public void set_TrackingEnabled(bool value)
public TransactionOption get_Transaction()
public void set_Transaction(TransactionOption value)
public string get_TransactionDescription()
public void set_TransactionDescription(string value)
public int get_TransactionTimeout()
public void set_TransactionTimeout(int value)
}
public System.EnterpriseServices.ServicedComponent : ContextBoundObject {
protected internal void Activate()
protected internal bool CanBePooled()
protected internal void Construct(string s)
protected internal void Deactivate()
public void Dispose()
protected void Dispose(bool disposing)
public void DisposeObject(ServicedComponent sc)
private string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(string s)
private string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(string s)
private void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32& infoMask, String[]& infoArray)
}
public System.EnterpriseServices.ServicedComponentException : SystemException {
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
}
public System.EnterpriseServices.ServiceDomain : object {
public void Enter(ServiceConfig cfg)
public TransactionStatus Leave()
}
public System.EnterpriseServices.SharedProperty : object {
private ISharedProperty property
public object Value
internal void .ctor(ISharedProperty property)
public object get_Value()
public void set_Value(object value)
}
public System.EnterpriseServices.SharedPropertyGroup : object {
private ISharedPropertyGroup propertyGroup
internal void .ctor(ISharedPropertyGroup propertyGroup)
public SharedProperty CreateProperty(string name, Boolean& fExists)
public SharedProperty CreatePropertyByPosition(int position, Boolean& fExists)
public SharedProperty Property(string name)
public SharedProperty PropertyByPosition(int position)
}
public System.EnterpriseServices.SharedPropertyGroupManager : object {
public SharedPropertyGroup CreatePropertyGroup(string name, PropertyLockMode& dwIsoMode, PropertyReleaseMode& dwRelMode, Boolean& fExist)
public IEnumerator GetEnumerator()
public SharedPropertyGroup Group(string name)
}
public System.EnterpriseServices.SxsOption : Enum {
public int value__
public SxsOption Ignore
public SxsOption Inherit
public SxsOption New
}
public System.EnterpriseServices.SynchronizationAttribute : Attribute {
private SynchronizationOption val
public SynchronizationOption Value
public void .ctor(SynchronizationOption val)
public SynchronizationOption get_Value()
}
public System.EnterpriseServices.SynchronizationOption : Enum {
public int value__
public SynchronizationOption Disabled
public SynchronizationOption NotSupported
public SynchronizationOption Required
public SynchronizationOption RequiresNew
public SynchronizationOption Supported
}
public System.EnterpriseServices.ThreadPoolOption : Enum {
public int value__
public ThreadPoolOption None
public ThreadPoolOption Inherit
public ThreadPoolOption STA
public ThreadPoolOption MTA
}
public System.EnterpriseServices.TransactionAttribute : Attribute {
private TransactionIsolationLevel isolation
private int timeout
private TransactionOption val
public TransactionIsolationLevel Isolation
public int Timeout
public TransactionOption Value
public void .ctor(TransactionOption val)
public TransactionIsolationLevel get_Isolation()
public void set_Isolation(TransactionIsolationLevel value)
public int get_Timeout()
public void set_Timeout(int value)
public TransactionOption get_Value()
}
public System.EnterpriseServices.TransactionIsolationLevel : Enum {
public int value__
public TransactionIsolationLevel Any
public TransactionIsolationLevel ReadCommitted
public TransactionIsolationLevel ReadUncommitted
public TransactionIsolationLevel RepeatableRead
public TransactionIsolationLevel Serializable
}
public System.EnterpriseServices.TransactionOption : Enum {
public int value__
public TransactionOption Disabled
public TransactionOption NotSupported
public TransactionOption Supported
public TransactionOption Required
public TransactionOption RequiresNew
}
public System.EnterpriseServices.TransactionStatus : Enum {
public int value__
public TransactionStatus Commited
public TransactionStatus LocallyOk
public TransactionStatus NoTransaction
public TransactionStatus Aborting
public TransactionStatus Aborted
}
public System.EnterpriseServices.TransactionVote : Enum {
public int value__
public TransactionVote Abort
public TransactionVote Commit
}
public System.EnterpriseServices.XACTTRANSINFO : ValueType {
public int grfRMSupported
public int grfRMSupportedRetaining
public int grfTCSupported
public int grfTCSupportedRetaining
public int isoFlags
public int isoLevel
public BOID uow
}
internal System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoExtensionAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoInternalNoteAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoLimitationAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoNotSupportedAttribute : MonoTODOAttribute {
public void .ctor(string comment)
}
internal System.MonoTODOAttribute : Attribute {
private string comment
public string Comment
public void .ctor(string comment)
public string get_Comment()
}
internal Unity.ThrowStub : ObjectDisposedException {
public void ThrowNotSupportedException()
}
