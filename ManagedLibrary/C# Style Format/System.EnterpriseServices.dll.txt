internal static class Consts : object {
    public static string MonoCorlibVersion;
    public static string MonoVersion;
    public static string MonoCompany;
    public static string MonoProduct;
    public static string MonoCopyright;
    public static string FxVersion;
    public static string FxFileVersion;
    public static string EnvironmentVersion;
    public static string VsVersion;
    public static string VsFileVersion;
    private static string PublicKeyToken;
    public static string AssemblyI18N;
    public static string AssemblyMicrosoft_JScript;
    public static string AssemblyMicrosoft_VisualStudio;
    public static string AssemblyMicrosoft_VisualStudio_Web;
    public static string AssemblyMicrosoft_VSDesigner;
    public static string AssemblyMono_Http;
    public static string AssemblyMono_Posix;
    public static string AssemblyMono_Security;
    public static string AssemblyMono_Messaging_RabbitMQ;
    public static string AssemblyCorlib;
    public static string AssemblySystem;
    public static string AssemblySystem_Data;
    public static string AssemblySystem_Design;
    public static string AssemblySystem_DirectoryServices;
    public static string AssemblySystem_Drawing;
    public static string AssemblySystem_Drawing_Design;
    public static string AssemblySystem_Messaging;
    public static string AssemblySystem_Security;
    public static string AssemblySystem_ServiceProcess;
    public static string AssemblySystem_Web;
    public static string AssemblySystem_Windows_Forms;
    public static string AssemblySystem_2_0;
    public static string AssemblySystemCore_3_5;
    public static string AssemblySystem_Core;
    public static string WindowsBase_3_0;
    public static string AssemblyWindowsBase;
    public static string AssemblyPresentationCore_3_5;
    public static string AssemblyPresentationCore_4_0;
    public static string AssemblyPresentationFramework_3_5;
    public static string AssemblySystemServiceModel_3_0;
}
public enum System.EnterpriseServices.AccessChecksLevelOption : Enum {
    public int value__;
    public static AccessChecksLevelOption Application;
    public static AccessChecksLevelOption ApplicationComponent;
}
public enum System.EnterpriseServices.ActivationOption : Enum {
    public int value__;
    public static ActivationOption Library;
    public static ActivationOption Server;
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.Activity : object {
    [MonoTODOAttribute]
public Activity(ServiceConfig cfg);
    [MonoTODOAttribute]
public void AsynchronousCall(IServiceCall serviceCall);
    [MonoTODOAttribute]
public void BindToCurrentThread();
    [MonoTODOAttribute]
public void SynchronousCall(IServiceCall serviceCall);
    [MonoTODOAttribute]
public void UnbindFromThread();
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("1")]
public class System.EnterpriseServices.ApplicationAccessControlAttribute : Attribute {
    private AccessChecksLevelOption accessChecksLevel;
    private AuthenticationOption authentication;
    private ImpersonationLevelOption impersonation;
    private bool val;
    public AccessChecksLevelOption AccessChecksLevel { get; public set; }
    public AuthenticationOption Authentication { get; public set; }
    public ImpersonationLevelOption ImpersonationLevel { get; public set; }
    public bool Value { get; public set; }
    public ApplicationAccessControlAttribute(bool val);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info);
    [MonoTODOAttribute]
private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s);
    public AccessChecksLevelOption get_AccessChecksLevel();
    public void set_AccessChecksLevel(AccessChecksLevelOption value);
    public AuthenticationOption get_Authentication();
    public void set_Authentication(AuthenticationOption value);
    public ImpersonationLevelOption get_ImpersonationLevel();
    public void set_ImpersonationLevel(ImpersonationLevelOption value);
    public bool get_Value();
    public void set_Value(bool value);
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ApplicationActivationAttribute : Attribute {
    private ActivationOption opt;
    private string soapMailbox;
    private string soapVRoot;
    public string SoapMailbox { get; public set; }
    public string SoapVRoot { get; public set; }
    public ActivationOption Value { get; }
    public ApplicationActivationAttribute(ActivationOption opt);
    [MonoTODOAttribute]
private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info);
    [MonoTODOAttribute]
private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s);
    public string get_SoapMailbox();
    public void set_SoapMailbox(string value);
    public string get_SoapVRoot();
    public void set_SoapVRoot(string value);
    public ActivationOption get_Value();
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ApplicationIDAttribute : Attribute {
    private Guid guid;
    public Guid Value { get; }
    public ApplicationIDAttribute(string guid);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s);
    public Guid get_Value();
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ApplicationNameAttribute : Attribute {
    private string name;
    public string Value { get; }
    public ApplicationNameAttribute(string name);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.AfterSaveChanges(Hashtable info);
    [MonoTODOAttribute]
private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.Apply(Hashtable cache);
    private sealed virtual override bool System.EnterpriseServices.IConfigurationAttribute.IsValidTarget(string s);
    public string get_Value();
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("1")]
public class System.EnterpriseServices.ApplicationQueuingAttribute : Attribute {
    private bool enabled;
    private int maxListenerThreads;
    private bool queueListenerEnabled;
    public bool Enabled { get; public set; }
    public int MaxListenerThreads { get; public set; }
    public bool QueueListenerEnabled { get; public set; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MaxListenerThreads();
    public void set_MaxListenerThreads(int value);
    public bool get_QueueListenerEnabled();
    public void set_QueueListenerEnabled(bool value);
}
public enum System.EnterpriseServices.AuthenticationOption : Enum {
    public int value__;
    public static AuthenticationOption Call;
    public static AuthenticationOption Connect;
    public static AuthenticationOption Default;
    public static AuthenticationOption Integrity;
    public static AuthenticationOption None;
    public static AuthenticationOption Packet;
    public static AuthenticationOption Privacy;
}
[AttributeUsageAttribute("64")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.AutoCompleteAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public AutoCompleteAttribute(bool val);
    public bool get_Value();
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.BindingOption : Enum {
    public int value__;
    public static BindingOption NoBinding;
    public static BindingOption BindingToPoolThread;
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.BOID : ValueType {
    public Byte[] rgb;
}
public class System.EnterpriseServices.BYOT : object {
    [MonoTODOAttribute]
public static object CreateWithTipTransaction(string url, Type t);
    [MonoTODOAttribute]
public static object CreateWithTransaction(object transaction, Type t);
}
internal class System.EnterpriseServices.CompensatingResourceManager._LogRecord : ValueType {
    public int dwCrmFlags;
    public int dwSequenceNumber;
    public object blobUserData;
}
[AttributeUsageAttribute("1")]
[ComVisibleAttribute("False")]
[ProgIdAttribute("System.EnterpriseServices.Crm.ApplicationCrmEnabledAttribute")]
public class System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public ApplicationCrmEnabledAttribute(bool val);
    public bool get_Value();
}
public class System.EnterpriseServices.CompensatingResourceManager.Clerk : object {
    public int LogRecordCount { get; }
    public string TransactionUOW { get; }
    [MonoTODOAttribute]
public Clerk(string compensator, string description, CompensatorOptions flags);
    [MonoTODOAttribute]
public Clerk(Type compensator, string description, CompensatorOptions flags);
    [MonoTODOAttribute]
public int get_LogRecordCount();
    [MonoTODOAttribute]
public string get_TransactionUOW();
    [MonoTODOAttribute]
protected virtual override void Finalize();
    [MonoTODOAttribute]
public void ForceLog();
    [MonoTODOAttribute]
public void ForceTransactionToAbort();
    [MonoTODOAttribute]
public void ForgetLogRecord();
    [MonoTODOAttribute]
public void WriteLogRecord(object record);
}
public class System.EnterpriseServices.CompensatingResourceManager.ClerkInfo : object {
    [MonoTODOAttribute]
public string ActivityId { get; }
    [MonoTODOAttribute]
public Clerk Clerk { get; }
    [MonoTODOAttribute]
public string Compensator { get; }
    [MonoTODOAttribute]
public string Description { get; }
    [MonoTODOAttribute]
public string InstanceId { get; }
    [MonoTODOAttribute]
public string TransactionUOW { get; }
    [MonoTODOAttribute]
protected virtual override void Finalize();
    public string get_ActivityId();
    public Clerk get_Clerk();
    public string get_Compensator();
    public string get_Description();
    public string get_InstanceId();
    public string get_TransactionUOW();
}
[DefaultMemberAttribute("Item")]
public class System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor : object {
    [MonoTODOAttribute]
public int Count { get; }
    [MonoTODOAttribute]
public ClerkInfo Item { get; }
    [MonoTODOAttribute]
public ClerkInfo Item { get; }
    [MonoTODOAttribute]
protected virtual override void Finalize();
    public int get_Count();
    public ClerkInfo get_Item(string index);
    public ClerkInfo get_Item(int index);
    [MonoTODOAttribute]
public sealed virtual IEnumerator GetEnumerator();
    [MonoTODOAttribute]
public void Populate();
}
public class System.EnterpriseServices.CompensatingResourceManager.Compensator : ServicedComponent {
    public Clerk Clerk { get; }
    [MonoTODOAttribute]
public Clerk get_Clerk();
    [MonoTODOAttribute]
public virtual bool AbortRecord(LogRecord rec);
    [MonoTODOAttribute]
public virtual void BeginAbort(bool fRecovery);
    [MonoTODOAttribute]
public virtual void BeginCommit(bool fRecovery);
    [MonoTODOAttribute]
public virtual void BeginPrepare();
    [MonoTODOAttribute]
public virtual bool CommitRecord(LogRecord rec);
    [MonoTODOAttribute]
public virtual void EndAbort();
    [MonoTODOAttribute]
public virtual void EndCommit();
    [MonoTODOAttribute]
public virtual bool EndPrepare();
    [MonoTODOAttribute]
public virtual bool PrepareRecord(LogRecord rec);
}
[FlagsAttribute]
public enum System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions : Enum {
    public int value__;
    public static CompensatorOptions PreparePhase;
    public static CompensatorOptions CommitPhase;
    public static CompensatorOptions AbortPhase;
    public static CompensatorOptions AllPhases;
    public static CompensatorOptions FailIfInDoubtsRemain;
}
public class System.EnterpriseServices.CompensatingResourceManager.LogRecord : object {
    private LogRecordFlags flags;
    private object record;
    private int sequence;
    public LogRecordFlags Flags { get; }
    public object Record { get; }
    public int Sequence { get; }
    [MonoTODOAttribute]
internal LogRecord(_LogRecord logRecord);
    public LogRecordFlags get_Flags();
    public object get_Record();
    public int get_Sequence();
}
[FlagsAttribute]
public enum System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags : Enum {
    public int value__;
    public static LogRecordFlags ForgetTarget;
    public static LogRecordFlags WrittenDuringPrepare;
    public static LogRecordFlags WrittenDuringCommit;
    public static LogRecordFlags WrittenDuringAbort;
    public static LogRecordFlags WrittenDurringRecovery;
    public static LogRecordFlags WrittenDuringReplay;
    public static LogRecordFlags ReplayInProgress;
}
public enum System.EnterpriseServices.CompensatingResourceManager.TransactionState : Enum {
    public int value__;
    public static TransactionState Active;
    public static TransactionState Committed;
    public static TransactionState Aborted;
    public static TransactionState Indoubt;
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("4")]
public class System.EnterpriseServices.ComponentAccessControlAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public ComponentAccessControlAttribute(bool val);
    public bool get_Value();
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("4")]
public class System.EnterpriseServices.COMTIIntrinsicsAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public COMTIIntrinsicsAttribute(bool val);
    public bool get_Value();
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("4")]
public class System.EnterpriseServices.ConstructionEnabledAttribute : Attribute {
    private string def;
    private bool enabled;
    public string Default { get; public set; }
    public bool Enabled { get; public set; }
    public ConstructionEnabledAttribute(bool val);
    public string get_Default();
    public void set_Default(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
}
public class System.EnterpriseServices.ContextUtil : object {
    private static bool deactivateOnReturn;
    private static TransactionVote myTransactionVote;
    public static Guid ActivityId { get; }
    public static Guid ApplicationId { get; }
    public static Guid ApplicationInstanceId { get; }
    public static Guid ContextId { get; }
    public static bool DeactivateOnReturn { get; public set; }
    public static bool IsInTransaction { get; }
    public static bool IsSecurityEnabled { get; }
    [MonoTODOAttribute]
public static TransactionVote MyTransactionVote { get; public set; }
    public static Guid PartitionId { get; }
    public static object Transaction { get; }
    public static Transaction SystemTransaction { get; }
    public static Guid TransactionId { get; }
    [MonoTODOAttribute]
public static Guid get_ActivityId();
    [MonoTODOAttribute]
public static Guid get_ApplicationId();
    [MonoTODOAttribute]
public static Guid get_ApplicationInstanceId();
    [MonoTODOAttribute]
public static Guid get_ContextId();
    public static bool get_DeactivateOnReturn();
    public static void set_DeactivateOnReturn(bool value);
    [MonoTODOAttribute]
public static bool get_IsInTransaction();
    [MonoTODOAttribute]
public static bool get_IsSecurityEnabled();
    public static TransactionVote get_MyTransactionVote();
    public static void set_MyTransactionVote(TransactionVote value);
    [MonoTODOAttribute]
public static Guid get_PartitionId();
    [MonoTODOAttribute]
public static object get_Transaction();
    [MonoTODOAttribute]
public static Transaction get_SystemTransaction();
    [MonoTODOAttribute]
public static Guid get_TransactionId();
    [MonoTODOAttribute]
public static void DisableCommit();
    [MonoTODOAttribute]
public static void EnableCommit();
    [MonoTODOAttribute]
public static object GetNamedProperty(string name);
    [MonoTODOAttribute]
public static bool IsCallerInRole(string role);
    [MonoTODOAttribute]
public static bool IsDefaultContext();
    [MonoTODOAttribute]
public static void SetAbort();
    [MonoTODOAttribute]
public static void SetComplete();
    [MonoTODOAttribute]
public static void SetNamedProperty(string name, object value);
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("1093")]
public class System.EnterpriseServices.DescriptionAttribute : Attribute {
    public DescriptionAttribute(string desc);
}
[ComVisibleAttribute("False")]
[AttributeUsageAttribute("4")]
public class System.EnterpriseServices.EventClassAttribute : Attribute {
    private bool allowInProcSubscribers;
    private bool fireInParallel;
    private string publisherFilter;
    public bool AllowInprocSubscribers { get; public set; }
    public bool FireInParallel { get; public set; }
    public string PublisherFilter { get; public set; }
    public bool get_AllowInprocSubscribers();
    public void set_AllowInprocSubscribers(bool value);
    public bool get_FireInParallel();
    public void set_FireInParallel(bool value);
    public string get_PublisherFilter();
    public void set_PublisherFilter(string value);
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.EventTrackingEnabledAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public EventTrackingEnabledAttribute(bool val);
    public bool get_Value();
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ExceptionClassAttribute : Attribute {
    private string name;
    public string Value { get; }
    public ExceptionClassAttribute(string name);
    public string get_Value();
}
[GuidAttribute("FE6777FB-A674-4177-8F32-6D707E113484")]
[InterfaceTypeAttribute("1")]
public interface System.EnterpriseServices.IAsyncErrorNotify {
    public abstract virtual void OnError(int hresult);
}
internal interface System.EnterpriseServices.IConfigurationAttribute {
    public abstract virtual bool AfterSaveChanges(Hashtable info);
    public abstract virtual bool Apply(Hashtable info);
    public abstract virtual bool IsValidTarget(string s);
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.IISIntrinsicsAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public IISIntrinsicsAttribute(bool val);
    public bool get_Value();
}
public enum System.EnterpriseServices.ImpersonationLevelOption : Enum {
    public int value__;
    public static ImpersonationLevelOption Anonymous;
    public static ImpersonationLevelOption Default;
    public static ImpersonationLevelOption Delegate;
    public static ImpersonationLevelOption Identify;
    public static ImpersonationLevelOption Impersonate;
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.InheritanceOption : Enum {
    public int value__;
    public static InheritanceOption Inherit;
    public static InheritanceOption Ignore;
}
[FlagsAttribute]
public enum System.EnterpriseServices.InstallationFlags : Enum {
    public int value__;
    public static InstallationFlags Configure;
    public static InstallationFlags ConfigureComponentsOnly;
    public static InstallationFlags CreateTargetApplication;
    public static InstallationFlags Default;
    public static InstallationFlags ExpectExistingTypeLib;
    public static InstallationFlags FindOrCreateTargetApplication;
    public static InstallationFlags Install;
    public static InstallationFlags ReconfigureExistingApplication;
    public static InstallationFlags Register;
    public static InstallationFlags ReportWarningsToConsole;
}
[AttributeUsageAttribute("1028")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.InterfaceQueuingAttribute : Attribute {
    private bool enabled;
    private string interfaceName;
    public bool Enabled { get; public set; }
    public string Interface { get; public set; }
    public InterfaceQueuingAttribute(bool enabled);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_Interface();
    public void set_Interface(string value);
}
[GuidAttribute("ef24f689-14f8-4d92-b4af-d7b1f0e70fd4")]
public class System.EnterpriseServices.Internal.AppDomainHelper : object {
    [MonoTODOAttribute]
protected virtual override void Finalize();
}
[GuidAttribute("458aa3b5-265a-4b75-bc05-9bea4630cf18")]
public class System.EnterpriseServices.Internal.AssemblyLocator : MarshalByRefObject {
}
public class System.EnterpriseServices.Internal.ClientRemotingConfig : object {
    [MonoTODOAttribute]
public static bool Write(string DestinationDirectory, string VRoot, string BaseUrl, string AssemblyName, string TypeName, string ProgId, string Mode, string Transport);
}
[GuidAttribute("ecabafd1-7f19-11d2-978e-0000f8757e2a")]
public class System.EnterpriseServices.Internal.ClrObjectFactory : object {
    [MonoTODOAttribute]
public sealed virtual object CreateFromAssembly(string AssemblyName, string TypeName, string Mode);
    [MonoTODOAttribute]
public sealed virtual object CreateFromMailbox(string Mailbox, string Mode);
    [MonoTODOAttribute]
public sealed virtual object CreateFromVroot(string VrootUrl, string Mode);
    [MonoTODOAttribute]
public sealed virtual object CreateFromWsdl(string WsdlUrl, string Mode);
}
[GuidAttribute("3b0398c9-7812-4007-85cb-18c771f2206f")]
public class System.EnterpriseServices.Internal.ComManagedImportUtil : object {
    [MonoTODOAttribute]
public sealed virtual void GetComponentInfo(string assemblyPath, String& numComponents, String& componentInfo);
    [MonoTODOAttribute]
public sealed virtual void InstallAssembly(string asmpath, string parname, string appname);
}
public class System.EnterpriseServices.Internal.ComSoapPublishError : object {
    [MonoTODOAttribute]
public static void Report(string s);
}
[GuidAttribute("d8013ff1-730b-45e2-ba24-874b7242c425")]
public class System.EnterpriseServices.Internal.GenerateMetadata : object {
    [MonoTODOAttribute]
public sealed virtual string Generate(string strSrcTypeLib, string outPath);
    [MonoTODOAttribute]
public string GenerateMetaData(string strSrcTypeLib, string outPath, Byte[] PublicKey, StrongNameKeyPair KeyPair);
    [MonoTODOAttribute]
public sealed virtual string GenerateSigned(string strSrcTypeLib, string outPath, bool InstallGac, String& Error);
    [MonoTODOAttribute]
public static int SearchPath(string path, string fileName, string extension, int numBufferChars, string buffer, Int32[] filePart);
}
[GuidAttribute("ecabafd2-7f19-11d2-978e-0000f8757e2a")]
public interface System.EnterpriseServices.Internal.IClrObjectFactory {
    [DispIdAttribute("1")]
public abstract virtual object CreateFromAssembly(string assembly, string type, string mode);
    [DispIdAttribute("4")]
public abstract virtual object CreateFromMailbox(string Mailbox, string Mode);
    [DispIdAttribute("2")]
public abstract virtual object CreateFromVroot(string VrootUrl, string Mode);
    [DispIdAttribute("3")]
public abstract virtual object CreateFromWsdl(string WsdlUrl, string Mode);
}
[GuidAttribute("c3f8f66b-91be-4c99-a94f-ce3b0a951039")]
public interface System.EnterpriseServices.Internal.IComManagedImportUtil {
    [DispIdAttribute("4")]
public abstract virtual void GetComponentInfo(string assemblyPath, String& numComponents, String& componentInfo);
    [DispIdAttribute("5")]
public abstract virtual void InstallAssembly(string filename, string parname, string appname);
}
[GuidAttribute("d8013ef0-730b-45e2-ba24-874b7242c425")]
public interface System.EnterpriseServices.Internal.IComSoapIISVRoot {
    [DispIdAttribute("1")]
public abstract virtual void Create(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error);
    [DispIdAttribute("2")]
public abstract virtual void Delete(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error);
}
[GuidAttribute("d8013ff0-730b-45e2-ba24-874b7242c425")]
public interface System.EnterpriseServices.Internal.IComSoapMetadata {
    [DispIdAttribute("1")]
public abstract virtual string Generate(string SrcTypeLibFileName, string OutPath);
    [DispIdAttribute("2")]
public abstract virtual string GenerateSigned(string SrcTypeLibFileName, string OutPath, bool InstallGac, String& Error);
}
[GuidAttribute("d8013eee-730b-45e2-ba24-874b7242c425")]
public interface System.EnterpriseServices.Internal.IComSoapPublisher {
    [DispIdAttribute("6")]
public abstract virtual void CreateMailBox(string RootMailServer, string MailBox, String& SmtpName, String& Domain, String& PhysicalPath, String& Error);
    [DispIdAttribute("4")]
public abstract virtual void CreateVirtualRoot(string Operation, string FullUrl, String& BaseUrl, String& VirtualRoot, String& PhysicalPath, String& Error);
    [DispIdAttribute("7")]
public abstract virtual void DeleteMailBox(string RootMailServer, string MailBox, String& Error);
    [DispIdAttribute("5")]
public abstract virtual void DeleteVirtualRoot(string RootWebServer, string FullUrl, String& Error);
    [DispIdAttribute("13")]
public abstract virtual void GacInstall(string AssemblyPath);
    [DispIdAttribute("14")]
public abstract virtual void GacRemove(string AssemblyPath);
    [DispIdAttribute("15")]
public abstract virtual void GetAssemblyNameForCache(string TypeLibPath, String& CachePath);
    [DispIdAttribute("10")]
public abstract virtual string GetTypeNameFromProgId(string AssemblyPath, string ProgId);
    [DispIdAttribute("9")]
public abstract virtual void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, String& AssemblyName, String& TypeName, String& Error);
    [DispIdAttribute("8")]
public abstract virtual void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, String& AssemblyName, String& TypeName, String& Error);
    [DispIdAttribute("11")]
public abstract virtual void RegisterAssembly(string AssemblyPath);
    [DispIdAttribute("12")]
public abstract virtual void UnRegisterAssembly(string AssemblyPath);
}
[GuidAttribute("d8013ef1-730b-45e2-ba24-874b7242c425")]
public class System.EnterpriseServices.Internal.IISVirtualRoot : object {
    [MonoTODOAttribute]
public sealed virtual void Create(string RootWeb, string inPhysicalDirectory, string VirtualDirectory, String& Error);
    [MonoTODOAttribute]
public sealed virtual void Delete(string RootWeb, string PhysicalDirectory, string VirtualDirectory, String& Error);
}
[GuidAttribute("6261e4b5-572a-4142-a2f9-1fe1a0c97097")]
public interface System.EnterpriseServices.Internal.IServerWebConfig {
    [DispIdAttribute("1")]
public abstract virtual void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string Mode, String& Error);
    [DispIdAttribute("2")]
public abstract virtual void Create(string FilePath, string FileRootName, String& Error);
}
[GuidAttribute("E7F0F021-9201-47e4-94DA-1D1416DEC27A")]
public interface System.EnterpriseServices.Internal.ISoapClientImport {
    [DispIdAttribute("1")]
public abstract virtual void ProcessClientTlbEx(string progId, string virtualRoot, string baseUrl, string authentication, string assemblyName, string typeName);
}
[GuidAttribute("1E7BA9F7-21DB-4482-929E-21BDE2DFE51C")]
public interface System.EnterpriseServices.Internal.ISoapServerTlb {
    [DispIdAttribute("1")]
public abstract virtual void AddServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string clientActivated, string wellKnown, string discoFile, string operation, String& assemblyName, String& typeName);
    [DispIdAttribute("2")]
public abstract virtual void DeleteServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string operation, string assemblyName, string typeName);
}
[GuidAttribute("A31B6577-71D2-4344-AEDF-ADC1B0DC5347")]
public interface System.EnterpriseServices.Internal.ISoapServerVRoot {
    [DispIdAttribute("1")]
public abstract virtual void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, String& baseUrl, String& virtualRoot, String& physicalPath);
    [DispIdAttribute("2")]
public abstract virtual void DeleteVirtualRootEx(string rootWebServer, string baseUrl, string virtualRoot);
    [DispIdAttribute("3")]
public abstract virtual void GetVirtualRootStatus(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& exists, String& secureSockets, String& windowsAuth, String& anonymous, String& homePage, String& discoFile, String& physicalPath, String& baseUrl, String& virtualRoot);
}
[GuidAttribute("5AC4CB7E-F89F-429b-926B-C7F940936BF4")]
public interface System.EnterpriseServices.Internal.ISoapUtility {
    [DispIdAttribute("2")]
public abstract virtual void GetServerBinPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& binPath);
    [DispIdAttribute("1")]
public abstract virtual void GetServerPhysicalPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& physicalPath);
    [DispIdAttribute("3")]
public abstract virtual void Present();
}
[GuidAttribute("d8013eef-730b-45e2-ba24-874b7242c425")]
public class System.EnterpriseServices.Internal.Publish : object {
    [MonoTODOAttribute]
public sealed virtual void CreateMailBox(string RootMailServer, string MailBox, String& SmtpName, String& Domain, String& PhysicalPath, String& Error);
    [MonoTODOAttribute]
public sealed virtual void CreateVirtualRoot(string Operation, string FullUrl, String& BaseUrl, String& VirtualRoot, String& PhysicalPath, String& Error);
    [MonoTODOAttribute]
public sealed virtual void DeleteMailBox(string RootMailServer, string MailBox, String& Error);
    [MonoTODOAttribute]
public sealed virtual void DeleteVirtualRoot(string RootWebServer, string FullUrl, String& Error);
    [MonoTODOAttribute]
public sealed virtual void GacInstall(string AssemblyPath);
    [MonoTODOAttribute]
public sealed virtual void GacRemove(string AssemblyPath);
    [MonoTODOAttribute]
public sealed virtual void GetAssemblyNameForCache(string TypeLibPath, String& CachePath);
    [MonoTODOAttribute]
public static string GetClientPhysicalPath(bool CreateDir);
    [MonoTODOAttribute]
public sealed virtual string GetTypeNameFromProgId(string AssemblyPath, string ProgId);
    [MonoTODOAttribute]
public static void ParseUrl(string FullUrl, String& BaseUrl, String& VirtualRoot);
    [MonoTODOAttribute]
public sealed virtual void ProcessClientTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string VRoot, string BaseUrl, string Mode, string Transport, String& AssemblyName, String& TypeName, String& Error);
    [MonoTODOAttribute]
public sealed virtual void ProcessServerTlb(string ProgId, string SrcTlbPath, string PhysicalPath, string Operation, String& strAssemblyName, String& TypeName, String& Error);
    [MonoTODOAttribute]
public sealed virtual void RegisterAssembly(string AssemblyPath);
    [MonoTODOAttribute]
public sealed virtual void UnRegisterAssembly(string AssemblyPath);
}
public class System.EnterpriseServices.Internal.ServerWebConfig : object {
    [MonoTODOAttribute]
public sealed virtual void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, String& Error);
    [MonoTODOAttribute]
public sealed virtual void Create(string FilePath, string FilePrefix, String& Error);
}
[GuidAttribute("346D5B9F-45E1-45c0-AADF-1B7D221E9063")]
public class System.EnterpriseServices.Internal.SoapClientImport : object {
    [MonoTODOAttribute]
public sealed virtual void ProcessClientTlbEx(string progId, string virtualRoot, string baseUrl, string authentication, string assemblyName, string typeName);
}
[GuidAttribute("F6B6768F-F99E-4152-8ED2-0412F78517FB")]
public class System.EnterpriseServices.Internal.SoapServerTlb : object {
    [MonoTODOAttribute]
public sealed virtual void AddServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string inBaseUrl, string inVirtualRoot, string clientActivated, string wellKnown, string discoFile, string operation, String& strAssemblyName, String& typeName);
    [MonoTODOAttribute]
public sealed virtual void DeleteServerTlb(string progId, string classId, string interfaceId, string srcTlbPath, string rootWebServer, string baseUrl, string virtualRoot, string operation, string assemblyName, string typeName);
}
[GuidAttribute("CAA817CC-0C04-4d22-A05C-2B7E162F4E8F")]
public class System.EnterpriseServices.Internal.SoapServerVRoot : object {
    [MonoTODOAttribute]
public sealed virtual void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, String& baseUrl, String& virtualRoot, String& physicalPath);
    [MonoTODOAttribute]
public sealed virtual void DeleteVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot);
    [MonoTODOAttribute]
public sealed virtual void GetVirtualRootStatus(string RootWebServer, string inBaseUrl, string inVirtualRoot, String& Exists, String& SSL, String& WindowsAuth, String& Anonymous, String& HomePage, String& DiscoFile, String& PhysicalPath, String& BaseUrl, String& VirtualRoot);
}
[GuidAttribute("5F9A955F-AA55-4127-A32B-33496AA8A44E")]
public class System.EnterpriseServices.Internal.SoapUtility : object {
    [MonoTODOAttribute]
public sealed virtual void GetServerBinPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& binPath);
    [MonoTODOAttribute]
public sealed virtual void GetServerPhysicalPath(string rootWebServer, string inBaseUrl, string inVirtualRoot, String& physicalPath);
    [MonoTODOAttribute]
public sealed virtual void Present();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("51372AFD-CAE7-11CF-BE81-00AA00A2FA25")]
public interface System.EnterpriseServices.IPlaybackControl {
    public abstract virtual void FinalClientRetry();
    public abstract virtual void FinalServerRetry();
}
[GuidAttribute("72380d55-8d2b-43a3-8513-2b6ef31434e9")]
[InterfaceTypeAttribute("1")]
public interface System.EnterpriseServices.IProcessInitControl {
    public abstract virtual void ResetInitializerTimeout(int dwSecondsRemaining);
}
[GuidAttribute("1113f52d-dc7f-4943-aed6-88d04027e32a")]
[InterfaceTypeAttribute("1")]
public interface System.EnterpriseServices.IProcessInitializer {
    public abstract virtual void Shutdown();
    public abstract virtual void Startup(object punkProcessControl);
}
[GuidAttribute("55e3ea25-55cb-4650-8887-18e8d30bb4bc")]
[InterfaceTypeAttribute("1")]
public interface System.EnterpriseServices.IRegistrationHelper {
    public abstract virtual void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags);
    public abstract virtual void UninstallAssembly(string assembly, string application);
}
[GuidAttribute("6619a740-8154-43be-a186-0319578e02db")]
public interface System.EnterpriseServices.IRemoteDispatch {
    [AutoCompleteAttribute]
public abstract virtual string RemoteDispatchAutoDone(string s);
    [AutoCompleteAttribute("False")]
public abstract virtual string RemoteDispatchNotAutoDone(string s);
}
internal interface System.EnterpriseServices.ISecurityCallContext {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void GetEnumerator(IEnumerator& enumerator);
    public abstract virtual object GetItem(string user);
    public abstract virtual bool IsCallerInRole(string role);
    public abstract virtual bool IsSecurityEnabled();
    public abstract virtual bool IsUserInRole(Object& user, string role);
}
internal interface System.EnterpriseServices.ISecurityCallersColl {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void GetEnumerator(IEnumerator& enumerator);
    public abstract virtual ISecurityIdentityColl GetItem(int idx);
}
internal interface System.EnterpriseServices.ISecurityIdentityColl {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void GetEnumerator(IEnumerator& enumerator);
    public abstract virtual SecurityIdentity GetItem(int idx);
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("BD3E2E12-42DD-40f4-A09A-95A50C58304B")]
public interface System.EnterpriseServices.IServiceCall {
    public abstract virtual void OnCall();
}
[InterfaceTypeAttribute("1")]
[GuidAttribute("8165B19E-8D3A-4d0b-80C8-97DE310DB583")]
public interface System.EnterpriseServices.IServicedComponentInfo {
    public abstract virtual void GetComponentInfo(Int32& infoMask, String[]& infoArray);
}
internal interface System.EnterpriseServices.ISharedProperty {
    public object Value { get; public set; }
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
internal interface System.EnterpriseServices.ISharedPropertyGroup {
    public abstract virtual ISharedProperty CreateProperty(string name, Boolean& fExists);
    public abstract virtual ISharedProperty CreatePropertyByPosition(int position, Boolean& fExists);
    public abstract virtual ISharedProperty Property(string name);
    public abstract virtual ISharedProperty PropertyByPosition(int position);
}
[GuidAttribute("0FB15084-AF41-11CE-BD2B-204C4F4F5020")]
[InterfaceTypeAttribute("1")]
public interface System.EnterpriseServices.ITransaction {
    public abstract virtual void Abort(BOID& pboidReason, int fRetaining, int fAsync);
    public abstract virtual void Commit(int fRetaining, int grfTC, int grfRM);
    public abstract virtual void GetTransactionInfo(XACTTRANSINFO& pinfo);
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.JustInTimeActivationAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public JustInTimeActivationAttribute(bool val);
    public bool get_Value();
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.LoadBalancingSupportedAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public LoadBalancingSupportedAttribute(bool val);
    public bool get_Value();
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.MustRunInClientContextAttribute : Attribute {
    private bool val;
    public bool Value { get; }
    public MustRunInClientContextAttribute(bool val);
    public bool get_Value();
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ObjectPoolingAttribute : Attribute {
    private int creationTimeout;
    private bool enabled;
    private int minPoolSize;
    private int maxPoolSize;
    public int CreationTimeout { get; public set; }
    public bool Enabled { get; public set; }
    public int MaxPoolSize { get; public set; }
    public int MinPoolSize { get; public set; }
    public ObjectPoolingAttribute(bool enable);
    public ObjectPoolingAttribute(int minPoolSize, int maxPoolSize);
    public ObjectPoolingAttribute(bool enable, int minPoolSize, int maxPoolSize);
    public int get_CreationTimeout();
    public void set_CreationTimeout(int value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MaxPoolSize();
    public void set_MaxPoolSize(int value);
    public int get_MinPoolSize();
    public void set_MinPoolSize(int value);
    [MonoTODOAttribute]
public sealed virtual bool AfterSaveChanges(Hashtable info);
    [MonoTODOAttribute]
public sealed virtual bool Apply(Hashtable info);
    [MonoTODOAttribute]
public sealed virtual bool IsValidTarget(string s);
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.PartitionOption : Enum {
    public int value__;
    public static PartitionOption Ignore;
    public static PartitionOption Inherit;
    public static PartitionOption New;
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.PrivateComponentAttribute : Attribute {
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.PropertyLockMode : Enum {
    public int value__;
    public static PropertyLockMode Method;
    public static PropertyLockMode SetGet;
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.PropertyReleaseMode : Enum {
    public int value__;
    public static PropertyReleaseMode Process;
    public static PropertyReleaseMode Standard;
}
[GuidAttribute("36dcda30-dc3b-4d93-be42-90b2d74c64e7")]
public class System.EnterpriseServices.RegistrationConfig : object {
    [MonoTODOAttribute]
public string Application { get; public set; }
    [MonoTODOAttribute]
public string ApplicationRootDirectory { get; public set; }
    [MonoTODOAttribute]
public string AssemblyFile { get; public set; }
    [MonoTODOAttribute]
public InstallationFlags InstallationFlags { get; public set; }
    [MonoTODOAttribute]
public string Partition { get; public set; }
    [MonoTODOAttribute]
public string TypeLibrary { get; public set; }
    public string get_Application();
    public void set_Application(string value);
    public string get_ApplicationRootDirectory();
    public void set_ApplicationRootDirectory(string value);
    public string get_AssemblyFile();
    public void set_AssemblyFile(string value);
    public InstallationFlags get_InstallationFlags();
    public void set_InstallationFlags(InstallationFlags value);
    public string get_Partition();
    public void set_Partition(string value);
    public string get_TypeLibrary();
    public void set_TypeLibrary(string value);
}
public class System.EnterpriseServices.RegistrationErrorInfo : object {
    private int errorCode;
    private string errorString;
    private string majorRef;
    private string minorRef;
    private string name;
    public int ErrorCode { get; }
    public string ErrorString { get; }
    public string MajorRef { get; }
    public string MinorRef { get; }
    public string Name { get; }
    [MonoTODOAttribute]
internal RegistrationErrorInfo(string name, string majorRef, string minorRef, int errorCode);
    public int get_ErrorCode();
    public string get_ErrorString();
    public string get_MajorRef();
    public string get_MinorRef();
    public string get_Name();
}
public class System.EnterpriseServices.RegistrationException : SystemException {
    private RegistrationErrorInfo[] errorInfo;
    public RegistrationErrorInfo[] ErrorInfo { get; }
    [MonoTODOAttribute]
public RegistrationException(string msg);
    public RegistrationException(string msg, Exception inner);
    public RegistrationErrorInfo[] get_ErrorInfo();
    [MonoTODOAttribute]
public virtual void GetObjectData(SerializationInfo info, StreamingContext ctx);
}
[GuidAttribute("89a86e7b-c229-4008-9baa-2f5c8411d7e0")]
public class System.EnterpriseServices.RegistrationHelper : MarshalByRefObject {
    public sealed virtual void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags);
    [MonoTODOAttribute]
public void InstallAssembly(string assembly, String& application, string partition, String& tlb, InstallationFlags installFlags);
    [MonoTODOAttribute]
public void InstallAssemblyFromConfig(RegistrationConfig& regConfig);
    public sealed virtual void UninstallAssembly(string assembly, string application);
    [MonoTODOAttribute]
public void UninstallAssembly(string assembly, string application, string partition);
    [MonoTODOAttribute]
public void UninstallAssemblyFromConfig(RegistrationConfig& regConfig);
}
[TransactionAttribute("4")]
[GuidAttribute("C89AC250-E18A-4FC7-ABD5-B8897B6A78A5")]
public class System.EnterpriseServices.RegistrationHelperTx : ServicedComponent {
    [MonoTODOAttribute]
protected internal virtual void Activate();
    [MonoTODOAttribute]
protected internal virtual void Deactivate();
    public void InstallAssembly(string assembly, String& application, String& tlb, InstallationFlags installFlags, object sync);
    [MonoTODOAttribute]
public void InstallAssembly(string assembly, String& application, string partition, String& tlb, InstallationFlags installFlags, object sync);
    [MonoTODOAttribute]
public void InstallAssemblyFromConfig(RegistrationConfig& regConfig, object sync);
    [MonoTODOAttribute]
public bool IsInTransaction();
    public void UninstallAssembly(string assembly, string application, object sync);
    [MonoTODOAttribute]
public void UninstallAssembly(string assembly, string application, string partition, object sync);
    [MonoTODOAttribute]
public void UninstallAssemblyFromConfig(RegistrationConfig& regConfig, object sync);
}
public class System.EnterpriseServices.ResourcePool : object {
    [MonoTODOAttribute]
public ResourcePool(TransactionEndDelegate cb);
    [MonoTODOAttribute]
public object GetResource();
    [MonoTODOAttribute]
public bool PutResource(object resource);
}
[AttributeUsageAttribute("68")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SecureMethodAttribute : Attribute {
}
public class System.EnterpriseServices.SecurityCallContext : object {
    public SecurityCallers Callers { get; }
    public static SecurityCallContext CurrentCall { get; }
    public SecurityIdentity DirectCaller { get; }
    public bool IsSecurityEnabled { get; }
    public int MinAuthenticationLevel { get; }
    public int NumCallers { get; }
    public SecurityIdentity OriginalCaller { get; }
    internal SecurityCallContext(ISecurityCallContext context);
    [MonoTODOAttribute]
public SecurityCallers get_Callers();
    [MonoTODOAttribute]
public static SecurityCallContext get_CurrentCall();
    [MonoTODOAttribute]
public SecurityIdentity get_DirectCaller();
    [MonoTODOAttribute]
public bool get_IsSecurityEnabled();
    [MonoTODOAttribute]
public int get_MinAuthenticationLevel();
    [MonoTODOAttribute]
public int get_NumCallers();
    [MonoTODOAttribute]
public SecurityIdentity get_OriginalCaller();
    [MonoTODOAttribute]
public bool IsCallerInRole(string role);
    [MonoTODOAttribute]
public bool IsUserInRole(string user, string role);
}
[DefaultMemberAttribute("Item")]
public class System.EnterpriseServices.SecurityCallers : object {
    public int Count { get; }
    public SecurityIdentity Item { get; }
    internal SecurityCallers(ISecurityCallersColl collection);
    [MonoTODOAttribute]
public int get_Count();
    [MonoTODOAttribute]
public SecurityIdentity get_Item(int idx);
    [MonoTODOAttribute]
public sealed virtual IEnumerator GetEnumerator();
}
public class System.EnterpriseServices.SecurityIdentity : object {
    public string AccountName { get; }
    public AuthenticationOption AuthenticationLevel { get; }
    public int AuthenticationService { get; }
    public ImpersonationLevelOption ImpersonationLevel { get; }
    [MonoTODOAttribute]
internal SecurityIdentity(ISecurityIdentityColl collection);
    [MonoTODOAttribute]
public string get_AccountName();
    [MonoTODOAttribute]
public AuthenticationOption get_AuthenticationLevel();
    [MonoTODOAttribute]
public int get_AuthenticationService();
    [MonoTODOAttribute]
public ImpersonationLevelOption get_ImpersonationLevel();
}
[AttributeUsageAttribute("1093")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SecurityRoleAttribute : Attribute {
    private string description;
    private bool everyone;
    private string role;
    public string Description { get; public set; }
    public string Role { get; public set; }
    public bool SetEveryoneAccess { get; public set; }
    public SecurityRoleAttribute(string role);
    public SecurityRoleAttribute(string role, bool everyone);
    public string get_Description();
    public void set_Description(string value);
    public string get_Role();
    public void set_Role(string value);
    public bool get_SetEveryoneAccess();
    public void set_SetEveryoneAccess(bool value);
}
[MonoTODOAttribute]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ServiceConfig : object {
    [MonoTODOAttribute]
public BindingOption Binding { get; public set; }
    [MonoTODOAttribute]
public Transaction BringYourOwnSystemTransaction { get; public set; }
    [MonoTODOAttribute]
public ITransaction BringYourOwnTransaction { get; public set; }
    [MonoTODOAttribute]
public bool COMTIIntrinsicsEnabled { get; public set; }
    [MonoTODOAttribute]
public bool IISIntrinsicsEnabled { get; public set; }
    [MonoTODOAttribute]
public InheritanceOption Inheritance { get; public set; }
    [MonoTODOAttribute]
public TransactionIsolationLevel IsolationLevel { get; public set; }
    [MonoTODOAttribute]
public Guid PartitionId { get; public set; }
    [MonoTODOAttribute]
public PartitionOption PartitionOption { get; public set; }
    [MonoTODOAttribute]
public string SxsDirectory { get; public set; }
    [MonoTODOAttribute]
public string SxsName { get; public set; }
    [MonoTODOAttribute]
public SxsOption SxsOption { get; public set; }
    [MonoTODOAttribute]
public SynchronizationOption Synchronization { get; public set; }
    [MonoTODOAttribute]
public ThreadPoolOption ThreadPool { get; public set; }
    [MonoTODOAttribute]
public string TipUrl { get; public set; }
    [MonoTODOAttribute]
public string TrackingAppName { get; public set; }
    [MonoTODOAttribute]
public string TrackingComponentName { get; public set; }
    [MonoTODOAttribute]
public bool TrackingEnabled { get; public set; }
    [MonoTODOAttribute]
public TransactionOption Transaction { get; public set; }
    [MonoTODOAttribute]
public string TransactionDescription { get; public set; }
    [MonoTODOAttribute]
public int TransactionTimeout { get; public set; }
    public BindingOption get_Binding();
    public void set_Binding(BindingOption value);
    public Transaction get_BringYourOwnSystemTransaction();
    public void set_BringYourOwnSystemTransaction(Transaction value);
    public ITransaction get_BringYourOwnTransaction();
    public void set_BringYourOwnTransaction(ITransaction value);
    public bool get_COMTIIntrinsicsEnabled();
    public void set_COMTIIntrinsicsEnabled(bool value);
    public bool get_IISIntrinsicsEnabled();
    public void set_IISIntrinsicsEnabled(bool value);
    public InheritanceOption get_Inheritance();
    public void set_Inheritance(InheritanceOption value);
    public TransactionIsolationLevel get_IsolationLevel();
    public void set_IsolationLevel(TransactionIsolationLevel value);
    public Guid get_PartitionId();
    public void set_PartitionId(Guid value);
    public PartitionOption get_PartitionOption();
    public void set_PartitionOption(PartitionOption value);
    public string get_SxsDirectory();
    public void set_SxsDirectory(string value);
    public string get_SxsName();
    public void set_SxsName(string value);
    public SxsOption get_SxsOption();
    public void set_SxsOption(SxsOption value);
    public SynchronizationOption get_Synchronization();
    public void set_Synchronization(SynchronizationOption value);
    public ThreadPoolOption get_ThreadPool();
    public void set_ThreadPool(ThreadPoolOption value);
    public string get_TipUrl();
    public void set_TipUrl(string value);
    public string get_TrackingAppName();
    public void set_TrackingAppName(string value);
    public string get_TrackingComponentName();
    public void set_TrackingComponentName(string value);
    public bool get_TrackingEnabled();
    public void set_TrackingEnabled(bool value);
    public TransactionOption get_Transaction();
    public void set_Transaction(TransactionOption value);
    public string get_TransactionDescription();
    public void set_TransactionDescription(string value);
    public int get_TransactionTimeout();
    public void set_TransactionTimeout(int value);
}
public abstract class System.EnterpriseServices.ServicedComponent : ContextBoundObject {
    [MonoTODOAttribute]
protected internal virtual void Activate();
    [MonoTODOAttribute]
protected internal virtual bool CanBePooled();
    [MonoTODOAttribute]
protected internal virtual void Construct(string s);
    [MonoTODOAttribute]
protected internal virtual void Deactivate();
    [MonoTODOAttribute]
public sealed virtual void Dispose();
    [MonoTODOAttribute]
protected virtual void Dispose(bool disposing);
    [MonoTODOAttribute]
public static void DisposeObject(ServicedComponent sc);
    [MonoTODOAttribute]
private sealed virtual override string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(string s);
    [MonoTODOAttribute]
private sealed virtual override string System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(string s);
    [MonoTODOAttribute]
private sealed virtual override void System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32& infoMask, String[]& infoArray);
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ServicedComponentException : SystemException {
    public ServicedComponentException(string message);
    public ServicedComponentException(string message, Exception innerException);
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.ServiceDomain : object {
    [MonoTODOAttribute]
public static void Enter(ServiceConfig cfg);
    [MonoTODOAttribute]
public static TransactionStatus Leave();
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SharedProperty : object {
    private ISharedProperty property;
    public object Value { get; public set; }
    internal SharedProperty(ISharedProperty property);
    public object get_Value();
    public void set_Value(object value);
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SharedPropertyGroup : object {
    private ISharedPropertyGroup propertyGroup;
    internal SharedPropertyGroup(ISharedPropertyGroup propertyGroup);
    public SharedProperty CreateProperty(string name, Boolean& fExists);
    public SharedProperty CreatePropertyByPosition(int position, Boolean& fExists);
    public SharedProperty Property(string name);
    public SharedProperty PropertyByPosition(int position);
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SharedPropertyGroupManager : object {
    [MonoTODOAttribute]
public SharedPropertyGroup CreatePropertyGroup(string name, PropertyLockMode& dwIsoMode, PropertyReleaseMode& dwRelMode, Boolean& fExist);
    [MonoTODOAttribute]
public sealed virtual IEnumerator GetEnumerator();
    [MonoTODOAttribute]
public SharedPropertyGroup Group(string name);
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.SxsOption : Enum {
    public int value__;
    public static SxsOption Ignore;
    public static SxsOption Inherit;
    public static SxsOption New;
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.SynchronizationAttribute : Attribute {
    private SynchronizationOption val;
    public SynchronizationOption Value { get; }
    public SynchronizationAttribute(SynchronizationOption val);
    public SynchronizationOption get_Value();
}
public enum System.EnterpriseServices.SynchronizationOption : Enum {
    public int value__;
    public static SynchronizationOption Disabled;
    public static SynchronizationOption NotSupported;
    public static SynchronizationOption Required;
    public static SynchronizationOption RequiresNew;
    public static SynchronizationOption Supported;
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.ThreadPoolOption : Enum {
    public int value__;
    public static ThreadPoolOption None;
    public static ThreadPoolOption Inherit;
    public static ThreadPoolOption STA;
    public static ThreadPoolOption MTA;
}
[AttributeUsageAttribute("4")]
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.TransactionAttribute : Attribute {
    private TransactionIsolationLevel isolation;
    private int timeout;
    private TransactionOption val;
    public TransactionIsolationLevel Isolation { get; public set; }
    public int Timeout { get; public set; }
    public TransactionOption Value { get; }
    public TransactionAttribute(TransactionOption val);
    public TransactionIsolationLevel get_Isolation();
    public void set_Isolation(TransactionIsolationLevel value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public TransactionOption get_Value();
}
public enum System.EnterpriseServices.TransactionIsolationLevel : Enum {
    public int value__;
    public static TransactionIsolationLevel Any;
    public static TransactionIsolationLevel ReadCommitted;
    public static TransactionIsolationLevel ReadUncommitted;
    public static TransactionIsolationLevel RepeatableRead;
    public static TransactionIsolationLevel Serializable;
}
public enum System.EnterpriseServices.TransactionOption : Enum {
    public int value__;
    public static TransactionOption Disabled;
    public static TransactionOption NotSupported;
    public static TransactionOption Supported;
    public static TransactionOption Required;
    public static TransactionOption RequiresNew;
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.TransactionStatus : Enum {
    public int value__;
    public static TransactionStatus Commited;
    public static TransactionStatus LocallyOk;
    public static TransactionStatus NoTransaction;
    public static TransactionStatus Aborting;
    public static TransactionStatus Aborted;
}
[ComVisibleAttribute("False")]
public enum System.EnterpriseServices.TransactionVote : Enum {
    public int value__;
    public static TransactionVote Abort;
    public static TransactionVote Commit;
}
[ComVisibleAttribute("False")]
public class System.EnterpriseServices.XACTTRANSINFO : ValueType {
    public int grfRMSupported;
    public int grfRMSupportedRetaining;
    public int grfTCSupported;
    public int grfTCSupportedRetaining;
    public int isoFlags;
    public int isoLevel;
    public BOID uow;
}
[AttributeUsageAttribute("32767")]
internal class System.MonoDocumentationNoteAttribute : MonoTODOAttribute {
    public MonoDocumentationNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoExtensionAttribute : MonoTODOAttribute {
    public MonoExtensionAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoInternalNoteAttribute : MonoTODOAttribute {
    public MonoInternalNoteAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoLimitationAttribute : MonoTODOAttribute {
    public MonoLimitationAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoNotSupportedAttribute : MonoTODOAttribute {
    public MonoNotSupportedAttribute(string comment);
}
[AttributeUsageAttribute("32767")]
internal class System.MonoTODOAttribute : Attribute {
    private string comment;
    public string Comment { get; }
    public MonoTODOAttribute(string comment);
    public string get_Comment();
}
internal class Unity.ThrowStub : ObjectDisposedException {
    public static void ThrowNotSupportedException();
}
