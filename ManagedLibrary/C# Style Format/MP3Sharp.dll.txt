public MP3Sharp.Buffer16BitStereo : ABuffer {
internal bool DoubleMonoToStereo
private int OUTPUT_CHANNELS
private Byte[] _Buffer
private Int32[] _BufferChannelOffsets
private int _End
private int _Offset
internal int BytesLeft
internal int get_BytesLeft()
internal int Read(Byte[] bufferOut, int offset, int count)
protected void Append(int channel, short sampleValue)
internal void AppendSamples(int channel, Single[] samples)
internal void ClearBuffer()
internal void SetStopFlag()
internal void WriteBuffer(int val)
internal void Close()
}
public MP3Sharp.Decoding.ABuffer : object {
internal int OBUFFERSIZE
internal int MAXCHANNELS
protected void Append(int channel, short sampleValue)
internal void AppendSamples(int channel, Single[] samples)
private short Clip(float sample)
internal void WriteBuffer(int val)
internal void Close()
internal void ClearBuffer()
internal void SetStopFlag()
}
internal MP3Sharp.Decoding.BitReserve : object {
private int BUFSIZE
private int BUFSIZE_MASK
private Int32[] _Buffer
private int _Offset
private int _Totbit
private int _BufByteIdx
private void InitBlock()
internal int HssTell()
internal int ReadBits(int n)
internal int ReadOneBit()
internal void PutBuffer(int val)
internal void RewindStreamBits(int bitCount)
internal void RewindStreamBytes(int byteCount)
}
public MP3Sharp.Decoding.Bitstream : object {
private int BUFFER_INT_SIZE
internal sbyte INITIAL_SYNC
internal sbyte STRICT_SYNC
private Int32[] _Bitmask
private PushbackStream _SourceStream
private int _BitIndex
private Crc16[] _CRC
private SByte[] _FrameBytes
private Int32[] _FrameBuffer
private int _FrameSize
private Header _Header
private bool _SingleChMode
private SByte[] _SyncBuffer
private int _SyncWord
private int _WordPointer
internal void .ctor(PushbackStream stream)
private void InitBlock()
internal void Close()
internal Header ReadFrame()
private Header ReadNextFrame()
internal void UnreadFrame()
internal void CloseFrame()
internal bool IsSyncCurrentPosition(int syncmode)
internal int ReadBits(int n)
internal int ReadCheckedBits(int n)
internal BitstreamException NewBitstreamException(int errorcode)
internal BitstreamException NewBitstreamException(int errorcode, Exception throwable)
internal int SyncHeader(sbyte syncmode)
internal bool IsSyncMark(int headerstring, int syncmode, int word)
internal void Read_frame_data(int bytesize)
internal void ParseFrame()
internal int GetBitsFromBuffer(int countBits)
internal void SetSyncWord(int syncword0)
private void ReadFully(SByte[] b, int offs, int len)
private int ReadBytes(SByte[] b, int offs, int len)
}
internal MP3Sharp.Decoding.BitstreamErrors : ValueType {
internal int UNKNOWN_ERROR
internal int UNKNOWN_SAMPLE_RATE
internal int STREA_ERROR
internal int UNEXPECTED_EOF
internal int STREA_EOF
internal int BITSTREA_LAST
internal int BITSTREAM_ERROR
internal int DECODER_ERROR
}
public MP3Sharp.Decoding.BitstreamException : MP3SharpException {
private int _ErrorCode
internal int ErrorCode
internal void .ctor(string message, Exception inner)
internal void .ctor(int errorcode, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
internal int get_ErrorCode()
public void GetObjectData(SerializationInfo info, StreamingContext context)
private void InitBlock()
internal string GetErrorString(int errorcode)
}
internal MP3Sharp.Decoding.CircularByteBuffer : object {
private Byte[] _DataArray
private int _Index
private int _Length
private int _NumValid
internal int BufferSize
internal byte Item
internal int NumValid
internal void .ctor(int size)
internal void .ctor(CircularByteBuffer cdb)
internal int get_BufferSize()
internal void set_BufferSize(int value)
internal byte get_Item(int index)
internal void set_Item(int index, byte value)
internal int get_NumValid()
internal void set_NumValid(int value)
internal CircularByteBuffer Copy()
internal void Reset()
internal byte Push(byte newValue)
internal byte Pop()
internal byte Peek()
private byte InternalGet(int offset)
private void InternalSet(int offset, byte valueToSet)
internal Byte[] GetRange(int str, int stp)
public string ToString()
}
public MP3Sharp.Decoding.Crc16 : object {
private short Polynomial
private short _CRC
internal void AddBits(int bitstring, int length)
internal short Checksum()
}
public MP3Sharp.Decoding.Decoder : object {
private Params DecoderDefaultParams
private Equalizer _Equalizer
private SynthesisFilter _LeftChannelFilter
private SynthesisFilter _RightChannelFilter
private bool _IsInitialized
private LayerIDecoder _L1Decoder
private LayerIIDecoder _L2Decoder
private LayerIIIDecoder _L3Decoder
private ABuffer _Output
private int _OutputChannels
private int _OutputFrequency
internal Params DefaultParams
internal Equalizer Equalizer
internal ABuffer OutputBuffer
internal int OutputFrequency
internal int OutputChannels
internal int OutputBlockSize
internal void .ctor(Params params0)
internal Params get_DefaultParams()
internal void set_Equalizer(Equalizer value)
internal void set_OutputBuffer(ABuffer value)
internal int get_OutputFrequency()
internal int get_OutputChannels()
internal int get_OutputBlockSize()
private void InitBlock()
internal ABuffer DecodeFrame(Header header, Bitstream stream)
protected DecoderException NewDecoderException(int errorcode)
protected DecoderException NewDecoderException(int errorcode, Exception throwable)
protected IFrameDecoder RetrieveDecoder(Header header, Bitstream stream, int layer)
private void Initialize(Header header)
}
internal MP3Sharp.Decoding.DecoderErrors : ValueType {
internal int UNKNOWN_ERROR
internal int UNSUPPORTED_LAYER
}
public MP3Sharp.Decoding.DecoderException : MP3SharpException {
private int _ErrorCode
internal int ErrorCode
internal void .ctor(string message, Exception inner)
internal void .ctor(int errorcode, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
internal int get_ErrorCode()
public void GetObjectData(SerializationInfo info, StreamingContext context)
private void InitBlock()
internal string GetErrorString(int errorcode)
}
public MP3Sharp.Decoding.Decoders.ASubband : object {
internal Single[] ScaleFactors
internal void ReadAllocation(Bitstream stream, Header header, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool ReadSampleData(Bitstream stream)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.IFrameDecoder {
public void DecodeFrame()
}
public MP3Sharp.Decoding.Decoders.LayerI.SubbandLayer1 : ASubband {
internal Single[] TableFactor
internal Single[] TableOffset
protected int Allocation
protected float Factor
protected float Offset
protected float Sample
protected int Samplelength
protected int Samplenumber
protected float Scalefactor
protected int Subbandnumber
internal void .ctor(int subbandnumber)
internal void ReadAllocation(Bitstream stream, Header header, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool ReadSampleData(Bitstream stream)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerI.SubbandLayer1IntensityStereo : SubbandLayer1 {
protected float Channel2Scalefactor
internal void .ctor(int subbandnumber)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerI.SubbandLayer1Stereo : SubbandLayer1 {
protected int Channel2Allocation
protected float Channel2Factor
protected float Channel2Offset
protected float Channel2Sample
protected int Channel2Samplelength
protected float Channel2Scalefactor
internal void .ctor(int subbandnumber)
internal void ReadAllocation(Bitstream stream, Header header, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool ReadSampleData(Bitstream stream)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerIDecoder : object {
protected ABuffer Buffer
protected Crc16 CRC
protected SynthesisFilter Filter1
protected SynthesisFilter Filter2
protected Header Header
protected int Mode
protected int NuSubbands
protected Bitstream Stream
protected ASubband[] Subbands
protected int WhichChannels
public void DecodeFrame()
internal void Create(Bitstream stream0, Header header0, SynthesisFilter filtera, SynthesisFilter filterb, ABuffer buffer0, int whichCh0)
protected void CreateSubbands()
protected void ReadAllocation()
protected void ReadScaleFactorSelection()
protected void ReadScaleFactors()
protected void ReadSampleData()
}
public MP3Sharp.Decoding.Decoders.LayerII.SubbandLayer2 : ASubband {
internal Single[] Grouping5Bits
internal Single[] Grouping7Bits
internal Single[] Grouping10Bits
internal Int32[] TableAb1Codelength
internal Single[][] TableAb1Groupingtables
internal Single[] TableAb1Factor
internal Single[] TableAb1C
internal Single[] TableAb1D
internal Single[][] TableAb234Groupingtables
internal Int32[] TableAb2Codelength
internal Single[] TableAb2Factor
internal Single[] TableAb2C
internal Single[] TableAb2D
internal Int32[] TableAb3Codelength
internal Single[] TableAb3Factor
internal Single[] TableAb3C
internal Single[] TableAb3D
internal Int32[] TableAb4Codelength
internal Single[] TableAb4Factor
internal Single[] TableAb4C
internal Single[] TableAb4D
internal Int32[] TableCdCodelength
internal Single[][] TableCdGroupingtables
internal Single[] TableCdFactor
internal Single[] TableCdC
internal Single[] TableCdD
protected int Allocation
protected Single[] CFactor
protected Int32[] Codelength
protected Single[] D
protected Single[] Factor
protected Single[][] Groupingtable
protected int Groupnumber
protected int Samplenumber
protected Single[] Samples
protected float Scalefactor1
protected float Scalefactor2
protected float Scalefactor3
protected int Scfsi
protected int Subbandnumber
internal void .ctor(int subbandnumber)
private void InitBlock()
protected int GetAllocationLength(Header header)
protected void PrepareForSampleRead(Header header, int allocation, int channel, Single[] factor, Int32[] codelength, Single[] c, Single[] d)
internal void ReadAllocation(Bitstream stream, Header header, Crc16 crc)
internal void ReadScaleFactorSelection(Bitstream stream, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool ReadSampleData(Bitstream stream)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerII.SubbandLayer2IntensityStereo : SubbandLayer2 {
protected float Channel2Scalefactor1
protected float Channel2Scalefactor2
protected float Channel2Scalefactor3
protected int Channel2Scfsi
internal void .ctor(int subbandnumber)
internal void ReadScaleFactorSelection(Bitstream stream, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerII.SubbandLayer2Stereo : SubbandLayer2 {
protected int Channel2Allocation
protected Single[] Channel2C
protected Int32[] Channel2Codelength
protected Single[] Channel2D
protected Single[] Channel2Factor
protected Single[] Channel2Samples
protected float Channel2Scalefactor1
protected float Channel2Scalefactor2
protected float Channel2Scalefactor3
protected int Channel2Scfsi
internal void .ctor(int subbandnumber)
internal void ReadAllocation(Bitstream stream, Header header, Crc16 crc)
internal void ReadScaleFactorSelection(Bitstream stream, Crc16 crc)
internal void ReadScaleFactor(Bitstream stream, Header header)
internal bool ReadSampleData(Bitstream stream)
internal bool PutNextSample(int channels, SynthesisFilter filter1, SynthesisFilter filter2)
}
public MP3Sharp.Decoding.Decoders.LayerIIDecoder : LayerIDecoder {
protected void CreateSubbands()
protected void ReadScaleFactorSelection()
}
public MP3Sharp.Decoding.Decoders.LayerIII.ChannelData : object {
internal GranuleInfo[] Granules
internal Int32[] ScaleFactorBits
}
public MP3Sharp.Decoding.Decoders.LayerIII.GranuleInfo : object {
internal int BigValues
internal int BlockType
internal int Count1TableSelect
internal int GlobalGain
internal int MixedBlockFlag
internal int Part23Length
internal int Preflag
internal int Region0Count
internal int Region1Count
internal int ScaleFacCompress
internal int ScaleFacScale
internal Int32[] SubblockGain
internal Int32[] TableSelect
internal int WindowSwitchingFlag
}
public MP3Sharp.Decoding.Decoders.LayerIII.Layer3SideInfo : object {
internal ChannelData[] Channels
internal int MainDataBegin
internal int PrivateBits
}
public MP3Sharp.Decoding.Decoders.LayerIII.SBI : object {
internal Int32[] L
internal Int32[] S
internal void .ctor(Int32[] thel, Int32[] thes)
}
public MP3Sharp.Decoding.Decoders.LayerIII.ScaleFactorData : object {
internal Int32[] L
internal Int32[][] S
}
public MP3Sharp.Decoding.Decoders.LayerIII.ScaleFactorTable : object {
internal Int32[] L
internal Int32[] S
private LayerIIIDecoder _EnclosingInstance
internal LayerIIIDecoder EnclosingInstance
internal void .ctor(LayerIIIDecoder enclosingInstance)
internal void .ctor(LayerIIIDecoder enclosingInstance, Int32[] thel, Int32[] thes)
internal LayerIIIDecoder get_EnclosingInstance()
private void InitBlock(LayerIIIDecoder enclosingInstance)
}
internal MP3Sharp.Decoding.Decoders.LayerIIIDecoder : object {
private int SSLIMIT
private int SBLIMIT
private Int32[][] Slen
internal Int32[] Pretab
internal Single[] TwoToNegativeHalfPow
internal Single[] PowerTable
internal Single[][] Io
internal Single[] Tan12
private Int32[][] _reorderTable
private Single[] Cs
private Single[] Ca
internal Single[][] Win
internal Int32[][][] NrOfSfbBlock
private ABuffer _Buffer
private int _Channels
private SynthesisFilter _Filter1
private SynthesisFilter _Filter2
private int _FirstChannel
private Header _Header
private Int32[] _Is1D
private Single[][] _K
private int _LastChannel
private Single[][][] _Lr
private int _MaxGr
private Int32[] _Nonzero
private Single[] _Out1D
private Single[][] _Prevblck
private Single[][][] _Ro
private ScaleFactorData[] _Scalefac
private SBI[] _SfBandIndex
private int _Sfreq
private Layer3SideInfo _SideInfo
private Bitstream _Stream
private int _WhichChannels
private BitReserve _BitReserve
private int _CheckSumHuff
private int _FrameStart
internal Int32[] IsPos
internal Single[] IsRatio
private Int32[] _NewSlen
private int _Part2Start
internal Single[] Rawout
private Single[] _Samples1
private Single[] _Samples2
internal Int32[] ScalefacBuffer
internal ScaleFactorTable Sftable
internal Single[] TsOutCopy
internal Int32[] V
internal Int32[] W
internal Int32[] X
internal Int32[] Y
internal void .ctor(Bitstream stream, Header header, SynthesisFilter filtera, SynthesisFilter filterb, ABuffer buffer, int whichCh)
public void DecodeFrame()
private void InitBlock()
internal void SeekNotify()
internal void Decode()
private bool ReadSideInfo()
private void ReadScaleFactors(int ch, int gr)
private void GetLSFScaleData(int ch, int gr)
private void GLSFScaleFactors(int ch, int gr)
private void HuffmanDecode(int ch, int gr)
private void GetKStereoValues(int isPos, int ioType, int i)
private void DequantizeSample(Single[][] xr, int ch, int gr)
private void Reorder(Single[][] xr, int ch, int gr)
private void Stereo(int gr)
private void Antialias(int ch, int gr)
private void Hybrid(int ch, int gr)
private void DoDownMix()
internal void InverseMdct(Single[] inValues, Single[] outValues, int blockType)
private Single[] CreatePowerTable()
internal Int32[] Reorder(Int32[] scalefacBand)
}
public MP3Sharp.Decoding.Equalizer : object {
private int BANDS
internal float BAND_NOT_PRESENT
internal Equalizer PassThruEq
private Single[] _Settings
internal Single[] FromFloatArray
internal Equalizer FromEqualizer
internal EQFunction FromEQFunction
internal int BandCount
internal Single[] BandFactors
internal void .ctor(Single[] settings)
internal void .ctor(EQFunction eq)
internal void set_FromFloatArray(Single[] value)
internal void set_FromEqualizer(Equalizer value)
internal void set_FromEQFunction(EQFunction value)
internal int get_BandCount()
internal Single[] get_BandFactors()
private void InitBlock()
internal void Reset()
internal float SetBand(int band, float neweq)
internal float GetBand(int band)
private float Limit(float eq)
internal float GetBandFactor(float eq)
}
public MP3Sharp.Decoding.Header : object {
internal int MPEG2_LSF
internal int MPEG25_LSF
internal int MPEG1
internal int STEREO
internal int JOINT_STEREO
internal int DUAL_CHANNEL
internal int SINGLE_CHANNEL
internal int FOURTYFOUR_POINT_ONE
internal int FOURTYEIGHT
internal int THIRTYTWO
internal Int32[][] Frequencies
internal Int32[][][] Bitrates
internal String[][][] BitrateStr
internal short Checksum
internal int NSlots
private Crc16 _CRC
internal int Framesize
private bool _Copyright
private bool _Original
private int _Headerstring
private int _Layer
private int _ProtectionBit
private int _BitrateIndex
private int _PaddingBit
private int _ModeExtension
private int _Mode
private int _NumberOfSubbands
private int _IntensityStereoBound
private int _SampleFrequency
private sbyte _Syncmode
private int _Version
internal int SyncHeader
internal int get_SyncHeader()
private void InitBlock()
public string ToString()
internal void read_header(Bitstream stream, Crc16[] crcp)
internal int Version()
internal int Layer()
internal int bitrate_index()
internal int sample_frequency()
internal int Frequency()
internal int Mode()
internal bool IsProtection()
internal bool IsCopyright()
internal bool IsOriginal()
internal bool IsChecksumOK()
internal bool IsPadding()
internal int Slots()
internal int mode_extension()
internal int CalculateFrameSize()
internal int MaxNumberOfFrame(int streamsize)
internal int min_number_of_frames(int streamsize)
internal float MsPerFrame()
internal float TotalMS(int streamsize)
internal string LayerAsString()
internal string BitrateAsString()
internal string SampleFrequencyAsString()
internal string ModeAsString()
internal string VersionAsString()
internal int NumberSubbands()
internal int IntensityStereoBound()
}
internal MP3Sharp.Decoding.Huffman : object {
private int MXOFF
private int HTN
private Int32[][] ValTab0
private Int32[][] ValTab1
private Int32[][] ValTab2
private Int32[][] ValTab3
private Int32[][] ValTab4
private Int32[][] ValTab5
private Int32[][] ValTab6
private Int32[][] ValTab7
private Int32[][] ValTab8
private Int32[][] ValTab9
private Int32[][] ValTab10
private Int32[][] ValTab11
private Int32[][] ValTab12
private Int32[][] ValTab13
private Int32[][] ValTab14
private Int32[][] ValTab15
private Int32[][] ValTab16
private Int32[][] ValTab24
private Int32[][] ValTab32
private Int32[][] ValTab33
internal Huffman[] HuffmanTable
private int _Linbits
private char _Tablename0
private char _Tablename1
private int _Treelen
private Int32[][] _Val
private int _Xlen
private int _Ylen
private Int32[] _Hlen
private int _Linmax
private int _RefRenamed
private Int32[] _Table
private char _Tablename2
private void .ctor(string s, int xlen, int ylen, int linbits, int linmax, int ref, Int32[] table, Int32[] hlen, Int32[][] val, int treelen)
internal int Decode(Huffman h, Int32[] x, Int32[] y, Int32[] v, Int32[] w, BitReserve br)
internal void Initialize()
}
public MP3Sharp.Decoding.OutputChannels : object {
internal int BOTH_CHANNELS
internal int LEFT_CHANNEL
internal int RIGHT_CHANNEL
internal int DOWNMIX_CHANNELS
internal OutputChannels Left
internal OutputChannels Right
internal OutputChannels Both
internal OutputChannels DownMix
private int _OutputChannels
internal int ChannelsOutputCode
internal int ChannelCount
private void .ctor(int channels)
internal int get_ChannelsOutputCode()
internal int get_ChannelCount()
internal OutputChannels FromInt(int code)
public bool Equals(object obj)
public int GetHashCode()
}
internal MP3Sharp.Decoding.OutputChannelsEnum : Enum {
public int value__
public OutputChannelsEnum BothChannels
public OutputChannelsEnum LeftChannel
public OutputChannelsEnum RightChannel
public OutputChannelsEnum DownmixChannels
}
public MP3Sharp.Decoding.PushbackStream : object {
private int _BackBufferSize
private CircularByteBuffer _CircularByteBuffer
private Stream _Stream
private Byte[] _TemporaryBuffer
private int _NumForwardBytesInBuffer
internal void .ctor(Stream s, int backBufferSize)
internal int Read(SByte[] toRead, int offset, int length)
internal void UnRead(int length)
internal void Close()
}
public MP3Sharp.Decoding.SampleBuffer : ABuffer {
private Int16[] _Buffer
private Int32[] _Bufferp
private int _Channels
private int _Frequency
internal int ChannelCount
internal int SampleFrequency
internal Int16[] Buffer
internal int BufferLength
internal void .ctor(int sampleFrequency, int numberOfChannels)
internal int get_ChannelCount()
internal int get_SampleFrequency()
internal Int16[] get_Buffer()
internal int get_BufferLength()
protected void Append(int channel, short valueRenamed)
internal void AppendSamples(int channel, Single[] samples)
internal void WriteBuffer(int val)
internal void Close()
internal void ClearBuffer()
internal void SetStopFlag()
}
public MP3Sharp.Decoding.SynthesisFilter : object {
private double MY_PI
private float Cos164
private float Cos364
private float Cos564
private float Cos764
private float Cos964
private float Cos1164
private float Cos1364
private float Cos1564
private float Cos1764
private float Cos1964
private float Cos2164
private float Cos2364
private float Cos2564
private float Cos2764
private float Cos2964
private float Cos3164
private float Cos132
private float Cos332
private float Cos532
private float Cos732
private float Cos932
private float Cos1132
private float Cos1332
private float Cos1532
private float Cos116
private float Cos316
private float Cos516
private float Cos716
private float Cos18
private float Cos38
private float Cos14
private Single[] _d
private Single[][] _d16
private Single[] DData
private int _Channel
private Single[] _Samples
private float _Scalefactor
private Single[] _V1
private Single[] _V2
private Single[] _TmpOut
private Single[] _ActualV
private int _ActualWritePos
private Single[] _Eq
internal Single[] Eq
internal void .ctor(int channelnumber, float factor, Single[] eq0)
internal void set_Eq(Single[] value)
private void InitBlock()
internal void Reset()
internal void AddSample(float sample, int subbandnumber)
internal void AddSamples(Single[] s)
private void ComputeNewValues()
private void compute_pc_samples0(ABuffer buffer)
private void compute_pc_samples1(ABuffer buffer)
private void compute_pc_samples2(ABuffer buffer)
private void compute_pc_samples3(ABuffer buffer)
private void compute_pc_samples4(ABuffer buffer)
private void compute_pc_samples5(ABuffer buffer)
private void compute_pc_samples6(ABuffer buffer)
private void compute_pc_samples7(ABuffer buffer)
private void compute_pc_samples8(ABuffer buffer)
private void compute_pc_samples9(ABuffer buffer)
private void compute_pc_samples10(ABuffer buffer)
private void compute_pc_samples11(ABuffer buffer)
private void compute_pc_samples12(ABuffer buffer)
private void compute_pc_samples13(ABuffer buffer)
private void compute_pc_samples14(ABuffer buffer)
private void Compute_pc_samples15(ABuffer buffer)
private void compute_pc_samples(ABuffer buffer)
internal void calculate_pc_samples(ABuffer buffer)
private Single[][] SplitArray(Single[] array, int blockSize)
private Single[] SubArray(Single[] array, int offs, int len)
}
public MP3Sharp.IO.RandomAccessFileStream : object {
internal FileStream CreateRandomAccessFile(string fileName, string mode)
}
public MP3Sharp.IO.RiffFile : object {
protected int DDC_SUCCESS
protected int DDC_FAILURE
protected int DDC_OUT_OF_MEMORY
protected int DDC_FILE_ERROR
protected int DDC_INVALID_CALL
protected int DDC_USER_ABORT
protected int DDC_INVALID_FILE
protected int RF_UNKNOWN
protected int RF_WRITE
protected int RF_READ
private RiffChunkHeader _RiffHeader
protected int Fmode
private Stream _File
internal int CurrentFileMode()
internal int Open(string filename, int newMode)
internal int Open(Stream stream, int newMode)
internal int Write(SByte[] data, int numBytes)
internal int Write(Int16[] data, int numBytes)
internal int Write(RiffChunkHeader riffHeader, int numBytes)
internal int Write(short data, int numBytes)
internal int Write(int data, int numBytes)
internal int Read(SByte[] data, int numBytes)
internal int Expect(string data, int numBytes)
internal int Close()
internal long CurrentFilePosition()
internal int Backpatch(long fileOffset, RiffChunkHeader data, int numBytes)
internal int Backpatch(long fileOffset, SByte[] data, int numBytes)
protected int Seek(long offset)
internal int FourCC(string chunkName)
}
public MP3Sharp.IO.WaveFile : RiffFile {
internal int MAX_WAVE_CHANNELS
private int _NumSamples
private RiffChunkHeader _PcmData
private WaveFormatChunk _WaveFormat
private bool _JustWriteLengthBytes
private long _PcmDataOffset
internal int OpenForWrite(string filename, Stream stream, int samplingRate, short bitsPerSample, short numChannels)
internal int WriteData(Int16[] data, int numData)
internal int Close()
internal int Close(bool justWriteLengthBytes)
internal int SamplingRate()
internal short BitsPerSample()
internal short NumChannels()
internal int NumSamples()
internal int OpenForWrite(string filename, WaveFile otherWave)
}
public MP3Sharp.IO.WaveFileBuffer : ABuffer {
private Int16[] _Buffer
private Int16[] _Bufferp
private int _Channels
private WaveFile _OutWave
internal void .ctor(int numberOfChannels, int freq, string fileName)
internal void .ctor(int numberOfChannels, int freq, Stream stream)
protected void Append(int channel, short valueRenamed)
internal void WriteBuffer(int val)
internal void Close(bool justWriteLengthBytes)
internal void Close()
internal void ClearBuffer()
internal void SetStopFlag()
}
public MP3Sharp.MP3SharpException : Exception {
internal void .ctor(string message)
internal void .ctor(string message, Exception inner)
protected void .ctor(SerializationInfo info, StreamingContext context)
internal void PrintStackTrace()
internal void PrintStackTrace(StreamWriter ps)
}
public MP3Sharp.MP3Stream : Stream {
private Bitstream _BitStream
private Decoder _Decoder
private Buffer16BitStereo _Buffer
private Stream _SourceStream
private int BACK_STREAM_BYTE_COUNT_REP
private short _ChannelCountRep
private SoundFormat FormatRep
private int _FrequencyRep
private bool <IsEOF>k__BackingField
public bool IsEOF
internal int ChunkSize
public bool CanRead
public bool CanSeek
public bool CanWrite
public long Length
public long Position
public int Frequency
internal short ChannelCount
internal SoundFormat Format
public bool get_IsEOF()
protected void set_IsEOF(bool value)
public void .ctor(string fileName)
public void .ctor(string fileName, int chunkSize)
public void .ctor(Stream sourceStream)
public void .ctor(Stream sourceStream, int chunkSize)
internal int get_ChunkSize()
public bool get_CanRead()
public bool get_CanSeek()
public bool get_CanWrite()
public long get_Length()
public long get_Position()
public void set_Position(long value)
public int get_Frequency()
internal short get_ChannelCount()
internal SoundFormat get_Format()
public void Flush()
public long Seek(long offset, SeekOrigin origin)
public void SetLength(long value)
public void Write(Byte[] buffer, int offset, int count)
internal int DecodeFrames(int frameCount)
public int Read(Byte[] buffer, int offset, int count)
public void Close()
private bool ReadFrame()
}
public MP3Sharp.SoundFormat : Enum {
public int value__
public SoundFormat Pcm16BitMono
public SoundFormat Pcm16BitStereo
}
public MP3Sharp.Support.SupportClass : object {
internal int URShift(int number, int bits)
internal int URShift(int number, long bits)
internal long URShift(long number, int bits)
internal long URShift(long number, long bits)
internal void WriteStackTrace(Exception throwable, TextWriter stream)
internal long Identity(long literal)
internal ulong Identity(ulong literal)
internal float Identity(float literal)
internal double Identity(double literal)
internal int ReadInput(Stream sourceStream, SByte[]& target, int start, int count)
internal Byte[] ToByteArray(SByte[] sbyteArray)
internal Byte[] ToByteArray(string sourceString)
internal void GetSBytesFromString(string sourceString, int sourceStart, int sourceEnd, SByte[]& destinationArray, int destinationStart)
}
