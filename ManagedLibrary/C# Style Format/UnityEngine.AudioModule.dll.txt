internal Unity.Audio.IValidatable {
public bool Valid
public bool get_Valid()
}
public UnityEngine.Audio.AudioClipPlayable : ValueType {
private PlayableHandle m_Handle
public AudioClipPlayable Create(PlayableGraph graph, AudioClip clip, bool looping)
private PlayableHandle CreateHandle(PlayableGraph graph, AudioClip clip, bool looping)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AudioClipPlayable playable)
public AudioClipPlayable op_Explicit(Playable playable)
public bool Equals(AudioClipPlayable other)
public AudioClip GetClip()
public void SetClip(AudioClip value)
public bool GetLooped()
public void SetLooped(bool value)
internal float GetVolume()
internal void SetVolume(float value)
internal float GetStereoPan()
internal void SetStereoPan(float value)
internal float GetSpatialBlend()
internal void SetSpatialBlend(float value)
public bool IsPlaying()
public bool IsChannelPlaying()
public double GetStartDelay()
internal void SetStartDelay(double value)
public double GetPauseDelay()
internal void GetPauseDelay(double value)
public void Seek(double startTime, double startDelay)
public void Seek(double startTime, double startDelay, double duration)
private AudioClip GetClipInternal(PlayableHandle& hdl)
private void SetClipInternal(PlayableHandle& hdl, AudioClip clip)
private bool GetLoopedInternal(PlayableHandle& hdl)
private void SetLoopedInternal(PlayableHandle& hdl, bool looped)
private float GetVolumeInternal(PlayableHandle& hdl)
private void SetVolumeInternal(PlayableHandle& hdl, float volume)
private float GetStereoPanInternal(PlayableHandle& hdl)
private void SetStereoPanInternal(PlayableHandle& hdl, float stereoPan)
private float GetSpatialBlendInternal(PlayableHandle& hdl)
private void SetSpatialBlendInternal(PlayableHandle& hdl, float spatialBlend)
private bool GetIsChannelPlayingInternal(PlayableHandle& hdl)
private double GetStartDelayInternal(PlayableHandle& hdl)
private void SetStartDelayInternal(PlayableHandle& hdl, double delay)
private double GetPauseDelayInternal(PlayableHandle& hdl)
private void SetPauseDelayInternal(PlayableHandle& hdl, double delay)
private bool InternalCreateAudioClipPlayable(PlayableGraph& graph, AudioClip clip, bool looping, PlayableHandle& handle)
private bool ValidateType(PlayableHandle& hdl)
}
public UnityEngine.Audio.AudioMixer : Object {
public AudioMixerGroup outputAudioMixerGroup
public AudioMixerUpdateMode updateMode
public AudioMixerGroup get_outputAudioMixerGroup()
public void set_outputAudioMixerGroup(AudioMixerGroup value)
public AudioMixerSnapshot FindSnapshot(string name)
public AudioMixerGroup[] FindMatchingGroups(string subPath)
internal void TransitionToSnapshot(AudioMixerSnapshot snapshot, float timeToReach)
private void TransitionToSnapshotInternal(AudioMixerSnapshot snapshot, float timeToReach)
public void TransitionToSnapshots(AudioMixerSnapshot[] snapshots, Single[] weights, float timeToReach)
public AudioMixerUpdateMode get_updateMode()
public void set_updateMode(AudioMixerUpdateMode value)
public bool SetFloat(string name, float value)
public bool ClearFloat(string name)
public bool GetFloat(string name, Single& value)
}
public UnityEngine.Audio.AudioMixerGroup : Object {
public AudioMixer audioMixer
public AudioMixer get_audioMixer()
}
public UnityEngine.Audio.AudioMixerPlayable : ValueType {
private PlayableHandle m_Handle
public AudioMixerPlayable Create(PlayableGraph graph, int inputCount, bool normalizeInputVolumes)
private PlayableHandle CreateHandle(PlayableGraph graph, int inputCount, bool normalizeInputVolumes)
internal void .ctor(PlayableHandle handle)
public PlayableHandle GetHandle()
public Playable op_Implicit(AudioMixerPlayable playable)
public AudioMixerPlayable op_Explicit(Playable playable)
public bool Equals(AudioMixerPlayable other)
private bool CreateAudioMixerPlayableInternal(PlayableGraph& graph, bool normalizeInputVolumes, PlayableHandle& handle)
}
public UnityEngine.Audio.AudioMixerSnapshot : Object {
public AudioMixer audioMixer
public AudioMixer get_audioMixer()
public void TransitionTo(float timeToReach)
}
public UnityEngine.Audio.AudioMixerUpdateMode : Enum {
public int value__
public AudioMixerUpdateMode Normal
public AudioMixerUpdateMode UnscaledTime
}
public UnityEngine.Audio.AudioPlayableBinding : object {
public PlayableBinding Create(string name, Object key)
private PlayableOutput CreateAudioOutput(PlayableGraph graph, string name)
}
internal UnityEngine.Audio.AudioPlayableGraphExtensions : object {
internal bool InternalCreateAudioOutput(PlayableGraph& graph, string name, PlayableOutputHandle& handle)
}
public UnityEngine.Audio.AudioPlayableOutput : ValueType {
private PlayableOutputHandle m_Handle
public AudioPlayableOutput Null
public AudioPlayableOutput Create(PlayableGraph graph, string name, AudioSource target)
internal void .ctor(PlayableOutputHandle handle)
public AudioPlayableOutput get_Null()
public PlayableOutputHandle GetHandle()
public PlayableOutput op_Implicit(AudioPlayableOutput output)
public AudioPlayableOutput op_Explicit(PlayableOutput output)
public AudioSource GetTarget()
public void SetTarget(AudioSource value)
public bool GetEvaluateOnSeek()
public void SetEvaluateOnSeek(bool value)
private AudioSource InternalGetTarget(PlayableOutputHandle& output)
private void InternalSetTarget(PlayableOutputHandle& output, AudioSource target)
private bool InternalGetEvaluateOnSeek(PlayableOutputHandle& output)
private void InternalSetEvaluateOnSeek(PlayableOutputHandle& output, bool value)
}
public UnityEngine.AudioChorusFilter : Behaviour {
public float dryMix
public float wetMix1
public float wetMix2
public float wetMix3
public float delay
public float rate
public float depth
public float feedback
public float get_dryMix()
public void set_dryMix(float value)
public float get_wetMix1()
public void set_wetMix1(float value)
public float get_wetMix2()
public void set_wetMix2(float value)
public float get_wetMix3()
public void set_wetMix3(float value)
public float get_delay()
public void set_delay(float value)
public float get_rate()
public void set_rate(float value)
public float get_depth()
public void set_depth(float value)
public float get_feedback()
public void set_feedback(float value)
}
public UnityEngine.AudioClip : Object {
private PCMReaderCallback m_PCMReaderCallback
private PCMSetPositionCallback m_PCMSetPositionCallback
public float length
public int samples
public int channels
public int frequency
public bool isReadyToPlay
public AudioClipLoadType loadType
public bool preloadAudioData
public bool ambisonic
public bool loadInBackground
public AudioDataLoadState loadState
private bool GetData(AudioClip clip, Single[] data, int numSamples, int samplesOffset)
private bool SetData(AudioClip clip, Single[] data, int numsamples, int samplesOffset)
private AudioClip Construct_Internal()
private string GetName()
private void CreateUserSound(string name, int lengthSamples, int channels, int frequency, bool stream)
public float get_length()
public int get_samples()
public int get_channels()
public int get_frequency()
public bool get_isReadyToPlay()
public AudioClipLoadType get_loadType()
public bool LoadAudioData()
public bool UnloadAudioData()
public bool get_preloadAudioData()
public bool get_ambisonic()
public bool get_loadInBackground()
public AudioDataLoadState get_loadState()
public bool GetData(Single[] data, int offsetSamples)
public bool SetData(Single[] data, int offsetSamples)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream, PCMReaderCallback pcmreadercallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool _3D, bool stream, PCMReaderCallback pcmreadercallback, PCMSetPositionCallback pcmsetpositioncallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream, PCMReaderCallback pcmreadercallback)
public AudioClip Create(string name, int lengthSamples, int channels, int frequency, bool stream, PCMReaderCallback pcmreadercallback, PCMSetPositionCallback pcmsetpositioncallback)
private void add_m_PCMReaderCallback(PCMReaderCallback value)
private void remove_m_PCMReaderCallback(PCMReaderCallback value)
private void add_m_PCMSetPositionCallback(PCMSetPositionCallback value)
private void remove_m_PCMSetPositionCallback(PCMSetPositionCallback value)
private void InvokePCMReaderCallback_Internal(Single[] data)
private void InvokePCMSetPositionCallback_Internal(int position)
}
public UnityEngine.AudioClipLoadType : Enum {
public int value__
public AudioClipLoadType DecompressOnLoad
public AudioClipLoadType CompressedInMemory
public AudioClipLoadType Streaming
}
public UnityEngine.AudioCompressionFormat : Enum {
public int value__
public AudioCompressionFormat PCM
public AudioCompressionFormat Vorbis
public AudioCompressionFormat ADPCM
public AudioCompressionFormat MP3
public AudioCompressionFormat VAG
public AudioCompressionFormat HEVAG
public AudioCompressionFormat XMA
public AudioCompressionFormat AAC
public AudioCompressionFormat GCADPCM
public AudioCompressionFormat ATRAC9
}
public UnityEngine.AudioConfiguration : ValueType {
public AudioSpeakerMode speakerMode
public int dspBufferSize
public int sampleRate
public int numRealVoices
public int numVirtualVoices
}
public UnityEngine.AudioDataLoadState : Enum {
public int value__
public AudioDataLoadState Unloaded
public AudioDataLoadState Loading
public AudioDataLoadState Loaded
public AudioDataLoadState Failed
}
public UnityEngine.AudioDistortionFilter : Behaviour {
public float distortionLevel
public float get_distortionLevel()
public void set_distortionLevel(float value)
}
public UnityEngine.AudioEchoFilter : Behaviour {
public float delay
public float decayRatio
public float dryMix
public float wetMix
public float get_delay()
public void set_delay(float value)
public float get_decayRatio()
public void set_decayRatio(float value)
public float get_dryMix()
public void set_dryMix(float value)
public float get_wetMix()
public void set_wetMix(float value)
}
public UnityEngine.AudioHighPassFilter : Behaviour {
public float cutoffFrequency
public float highpassResonanceQ
public float get_cutoffFrequency()
public void set_cutoffFrequency(float value)
public float get_highpassResonanceQ()
public void set_highpassResonanceQ(float value)
}
public UnityEngine.AudioListener : AudioBehaviour {
public float volume
public bool pause
public AudioVelocityUpdateMode velocityUpdateMode
private void GetOutputDataHelper(Single[] samples, int channel)
private void GetSpectrumDataHelper(Single[] samples, int channel, FFTWindow window)
public float get_volume()
public void set_volume(float value)
public bool get_pause()
public void set_pause(bool value)
public AudioVelocityUpdateMode get_velocityUpdateMode()
public void set_velocityUpdateMode(AudioVelocityUpdateMode value)
public Single[] GetOutputData(int numSamples, int channel)
public void GetOutputData(Single[] samples, int channel)
public Single[] GetSpectrumData(int numSamples, int channel, FFTWindow window)
public void GetSpectrumData(Single[] samples, int channel, FFTWindow window)
}
public UnityEngine.AudioLowPassFilter : Behaviour {
public AnimationCurve customCutoffCurve
public float cutoffFrequency
public float lowpassResonanceQ
private AnimationCurve GetCustomLowpassLevelCurveCopy()
private void SetCustomLowpassLevelCurveHelper(AudioLowPassFilter source, AnimationCurve curve)
public AnimationCurve get_customCutoffCurve()
public void set_customCutoffCurve(AnimationCurve value)
public float get_cutoffFrequency()
public void set_cutoffFrequency(float value)
public float get_lowpassResonanceQ()
public void set_lowpassResonanceQ(float value)
}
public UnityEngine.AudioRenderer : object {
public bool Start()
public bool Stop()
public int GetSampleCountForCaptureFrame()
internal bool AddMixerGroupSink(AudioMixerGroup mixerGroup, NativeArray`1<float> buffer, bool excludeFromMix)
public bool Render(NativeArray`1<float> buffer)
internal bool Internal_AudioRenderer_Start()
internal bool Internal_AudioRenderer_Stop()
internal int Internal_AudioRenderer_GetSampleCountForCaptureFrame()
internal bool Internal_AudioRenderer_AddMixerGroupSink(AudioMixerGroup mixerGroup, Void* ptr, int length, bool excludeFromMix)
internal bool Internal_AudioRenderer_Render(Void* ptr, int length)
}
public UnityEngine.AudioReverbFilter : Behaviour {
public AudioReverbPreset reverbPreset
public float dryLevel
public float room
public float roomHF
public float roomRolloffFactor
public float decayTime
public float decayHFRatio
public float reflectionsLevel
public float reflectionsDelay
public float reverbLevel
public float reverbDelay
public float diffusion
public float density
public float hfReference
public float roomLF
public float lfReference
public AudioReverbPreset get_reverbPreset()
public void set_reverbPreset(AudioReverbPreset value)
public float get_dryLevel()
public void set_dryLevel(float value)
public float get_room()
public void set_room(float value)
public float get_roomHF()
public void set_roomHF(float value)
public float get_roomRolloffFactor()
public void set_roomRolloffFactor(float value)
public float get_decayTime()
public void set_decayTime(float value)
public float get_decayHFRatio()
public void set_decayHFRatio(float value)
public float get_reflectionsLevel()
public void set_reflectionsLevel(float value)
public float get_reflectionsDelay()
public void set_reflectionsDelay(float value)
public float get_reverbLevel()
public void set_reverbLevel(float value)
public float get_reverbDelay()
public void set_reverbDelay(float value)
public float get_diffusion()
public void set_diffusion(float value)
public float get_density()
public void set_density(float value)
public float get_hfReference()
public void set_hfReference(float value)
public float get_roomLF()
public void set_roomLF(float value)
public float get_lfReference()
public void set_lfReference(float value)
}
public UnityEngine.AudioReverbPreset : Enum {
public int value__
public AudioReverbPreset Off
public AudioReverbPreset Generic
public AudioReverbPreset PaddedCell
public AudioReverbPreset Room
public AudioReverbPreset Bathroom
public AudioReverbPreset Livingroom
public AudioReverbPreset Stoneroom
public AudioReverbPreset Auditorium
public AudioReverbPreset Concerthall
public AudioReverbPreset Cave
public AudioReverbPreset Arena
public AudioReverbPreset Hangar
public AudioReverbPreset CarpetedHallway
public AudioReverbPreset Hallway
public AudioReverbPreset StoneCorridor
public AudioReverbPreset Alley
public AudioReverbPreset Forest
public AudioReverbPreset City
public AudioReverbPreset Mountains
public AudioReverbPreset Quarry
public AudioReverbPreset Plain
public AudioReverbPreset ParkingLot
public AudioReverbPreset SewerPipe
public AudioReverbPreset Underwater
public AudioReverbPreset Drugged
public AudioReverbPreset Dizzy
public AudioReverbPreset Psychotic
public AudioReverbPreset User
}
public UnityEngine.AudioReverbZone : Behaviour {
public float minDistance
public float maxDistance
public AudioReverbPreset reverbPreset
public int room
public int roomHF
public int roomLF
public float decayTime
public float decayHFRatio
public int reflections
public float reflectionsDelay
public int reverb
public float reverbDelay
public float HFReference
public float LFReference
public float roomRolloffFactor
public float diffusion
public float density
public float get_minDistance()
public void set_minDistance(float value)
public float get_maxDistance()
public void set_maxDistance(float value)
public AudioReverbPreset get_reverbPreset()
public void set_reverbPreset(AudioReverbPreset value)
public int get_room()
public void set_room(int value)
public int get_roomHF()
public void set_roomHF(int value)
public int get_roomLF()
public void set_roomLF(int value)
public float get_decayTime()
public void set_decayTime(float value)
public float get_decayHFRatio()
public void set_decayHFRatio(float value)
public int get_reflections()
public void set_reflections(int value)
public float get_reflectionsDelay()
public void set_reflectionsDelay(float value)
public int get_reverb()
public void set_reverb(int value)
public float get_reverbDelay()
public void set_reverbDelay(float value)
public float get_HFReference()
public void set_HFReference(float value)
public float get_LFReference()
public void set_LFReference(float value)
public float get_roomRolloffFactor()
public void set_roomRolloffFactor(float value)
public float get_diffusion()
public void set_diffusion(float value)
public float get_density()
public void set_density(float value)
}
public UnityEngine.AudioRolloffMode : Enum {
public int value__
public AudioRolloffMode Logarithmic
public AudioRolloffMode Linear
public AudioRolloffMode Custom
}
public UnityEngine.AudioSettings : object {
private AudioConfigurationChangeHandler OnAudioConfigurationChanged
public AudioSpeakerMode driverCapabilities
public AudioSpeakerMode speakerMode
internal int profilerCaptureFlags
public double dspTime
public int outputSampleRate
internal bool unityAudioDisabled
private AudioSpeakerMode GetSpeakerMode()
private bool SetConfiguration(AudioConfiguration config)
private int GetSampleRate()
public AudioSpeakerMode get_driverCapabilities()
public AudioSpeakerMode get_speakerMode()
public void set_speakerMode(AudioSpeakerMode value)
internal int get_profilerCaptureFlags()
public double get_dspTime()
public int get_outputSampleRate()
public void set_outputSampleRate(int value)
public void GetDSPBufferSize(Int32& bufferLength, Int32& numBuffers)
public void SetDSPBufferSize(int bufferLength, int numBuffers)
public string GetSpatializerPluginName()
public AudioConfiguration GetConfiguration()
public bool Reset(AudioConfiguration config)
public void add_OnAudioConfigurationChanged(AudioConfigurationChangeHandler value)
public void remove_OnAudioConfigurationChanged(AudioConfigurationChangeHandler value)
internal void InvokeOnAudioConfigurationChanged(bool deviceWasChanged)
internal bool get_unityAudioDisabled()
internal string GetAmbisonicDecoderPluginName()
private bool SetConfiguration_Injected(AudioConfiguration& config)
private void GetConfiguration_Injected(AudioConfiguration& ret)
}
public UnityEngine.AudioSource : AudioBehaviour {
public float volume
public float pitch
public float time
public int timeSamples
public AudioClip clip
public AudioMixerGroup outputAudioMixerGroup
public bool isPlaying
public bool isVirtual
public bool loop
public bool ignoreListenerVolume
public bool playOnAwake
public bool ignoreListenerPause
public AudioVelocityUpdateMode velocityUpdateMode
public float panStereo
public float spatialBlend
public bool spatialize
public bool spatializePostEffects
public float reverbZoneMix
public bool bypassEffects
public bool bypassListenerEffects
public bool bypassReverbZones
public float dopplerLevel
public float spread
public int priority
public bool mute
public float minDistance
public float maxDistance
public AudioRolloffMode rolloffMode
public float minVolume
public float maxVolume
public float rolloffFactor
private float GetPitch(AudioSource source)
private void SetPitch(AudioSource source, float pitch)
private void PlayHelper(AudioSource source, ulong delay)
private void Play(double delay)
private void PlayOneShotHelper(AudioSource source, AudioClip clip, float volumeScale)
private void Stop(bool stopOneShots)
private void SetCustomCurveHelper(AudioSource source, AudioSourceCurveType type, AnimationCurve curve)
private AnimationCurve GetCustomCurveHelper(AudioSource source, AudioSourceCurveType type)
private void GetOutputDataHelper(AudioSource source, Single[] samples, int channel)
private void GetSpectrumDataHelper(AudioSource source, Single[] samples, int channel, FFTWindow window)
public float get_volume()
public void set_volume(float value)
public float get_pitch()
public void set_pitch(float value)
public float get_time()
public void set_time(float value)
public int get_timeSamples()
public void set_timeSamples(int value)
public AudioClip get_clip()
public void set_clip(AudioClip value)
public AudioMixerGroup get_outputAudioMixerGroup()
public void set_outputAudioMixerGroup(AudioMixerGroup value)
public void Play()
public void Play(ulong delay)
public void PlayDelayed(float delay)
public void PlayScheduled(double time)
public void PlayOneShot(AudioClip clip)
public void PlayOneShot(AudioClip clip, float volumeScale)
public void SetScheduledStartTime(double time)
public void SetScheduledEndTime(double time)
public void Stop()
public void Pause()
public void UnPause()
public bool get_isPlaying()
public bool get_isVirtual()
public void PlayClipAtPoint(AudioClip clip, Vector3 position)
public void PlayClipAtPoint(AudioClip clip, Vector3 position, float volume)
public bool get_loop()
public void set_loop(bool value)
public bool get_ignoreListenerVolume()
public void set_ignoreListenerVolume(bool value)
public bool get_playOnAwake()
public void set_playOnAwake(bool value)
public bool get_ignoreListenerPause()
public void set_ignoreListenerPause(bool value)
public AudioVelocityUpdateMode get_velocityUpdateMode()
public void set_velocityUpdateMode(AudioVelocityUpdateMode value)
public float get_panStereo()
public void set_panStereo(float value)
public float get_spatialBlend()
public void set_spatialBlend(float value)
public bool get_spatialize()
public void set_spatialize(bool value)
public bool get_spatializePostEffects()
public void set_spatializePostEffects(bool value)
public void SetCustomCurve(AudioSourceCurveType type, AnimationCurve curve)
public AnimationCurve GetCustomCurve(AudioSourceCurveType type)
public float get_reverbZoneMix()
public void set_reverbZoneMix(float value)
public bool get_bypassEffects()
public void set_bypassEffects(bool value)
public bool get_bypassListenerEffects()
public void set_bypassListenerEffects(bool value)
public bool get_bypassReverbZones()
public void set_bypassReverbZones(bool value)
public float get_dopplerLevel()
public void set_dopplerLevel(float value)
public float get_spread()
public void set_spread(float value)
public int get_priority()
public void set_priority(int value)
public bool get_mute()
public void set_mute(bool value)
public float get_minDistance()
public void set_minDistance(float value)
public float get_maxDistance()
public void set_maxDistance(float value)
public AudioRolloffMode get_rolloffMode()
public void set_rolloffMode(AudioRolloffMode value)
public Single[] GetOutputData(int numSamples, int channel)
public void GetOutputData(Single[] samples, int channel)
public Single[] GetSpectrumData(int numSamples, int channel, FFTWindow window)
public void GetSpectrumData(Single[] samples, int channel, FFTWindow window)
public float get_minVolume()
public void set_minVolume(float value)
public float get_maxVolume()
public void set_maxVolume(float value)
public float get_rolloffFactor()
public void set_rolloffFactor(float value)
public bool SetSpatializerFloat(int index, float value)
public bool GetSpatializerFloat(int index, Single& value)
public bool GetAmbisonicDecoderFloat(int index, Single& value)
public bool SetAmbisonicDecoderFloat(int index, float value)
}
public UnityEngine.AudioSourceCurveType : Enum {
public int value__
public AudioSourceCurveType CustomRolloff
public AudioSourceCurveType SpatialBlend
public AudioSourceCurveType ReverbZoneMix
public AudioSourceCurveType Spread
}
public UnityEngine.AudioSpeakerMode : Enum {
public int value__
public AudioSpeakerMode Raw
public AudioSpeakerMode Mono
public AudioSpeakerMode Stereo
public AudioSpeakerMode Quad
public AudioSpeakerMode Surround
public AudioSpeakerMode Mode5point1
public AudioSpeakerMode Mode7point1
public AudioSpeakerMode Prologic
}
public UnityEngine.AudioVelocityUpdateMode : Enum {
public int value__
public AudioVelocityUpdateMode Auto
public AudioVelocityUpdateMode Fixed
public AudioVelocityUpdateMode Dynamic
}
internal UnityEngine.Experimental.Audio.AudioClipExtensionsInternal : object {
public UInt32 Internal_CreateAudioClipSampleProvider(AudioClip audioClip, ulong start, long end, bool loop, bool allowDrop)
}
public UnityEngine.Experimental.Audio.AudioSampleProvider : object {
private ConsumeSampleFramesNativeFunction m_ConsumeSampleFramesNativeFunction
private UInt32 <id>k__BackingField
private ushort <trackIndex>k__BackingField
private Object <owner>k__BackingField
private ushort <channelCount>k__BackingField
private UInt32 <sampleRate>k__BackingField
private SampleFramesHandler sampleFramesAvailable
private SampleFramesHandler sampleFramesOverflow
public UInt32 id
public ushort trackIndex
public Object owner
public bool valid
public ushort channelCount
public UInt32 sampleRate
public UInt32 maxSampleFrameCount
public UInt32 availableSampleFrameCount
public UInt32 freeSampleFrameCount
public UInt32 freeSampleFrameCountLowThreshold
public bool enableSampleFramesAvailableEvents
public bool enableSilencePadding
public ConsumeSampleFramesNativeFunction consumeSampleFramesNativeFunction
internal AudioSampleProvider Lookup(UInt32 providerId, Object ownerObj, ushort trackIndex)
internal AudioSampleProvider Create(ushort channelCount, UInt32 sampleRate)
private void .ctor(UInt32 providerId, Object ownerObj, ushort trackIdx)
protected void Finalize()
public void Dispose()
public UInt32 get_id()
private void set_id(UInt32 value)
public ushort get_trackIndex()
private void set_trackIndex(ushort value)
public Object get_owner()
private void set_owner(Object value)
public bool get_valid()
public ushort get_channelCount()
private void set_channelCount(ushort value)
public UInt32 get_sampleRate()
private void set_sampleRate(UInt32 value)
public UInt32 get_maxSampleFrameCount()
public UInt32 get_availableSampleFrameCount()
public UInt32 get_freeSampleFrameCount()
public UInt32 get_freeSampleFrameCountLowThreshold()
public void set_freeSampleFrameCountLowThreshold(UInt32 value)
public bool get_enableSampleFramesAvailableEvents()
public void set_enableSampleFramesAvailableEvents(bool value)
public bool get_enableSilencePadding()
public void set_enableSilencePadding(bool value)
public UInt32 ConsumeSampleFrames(NativeArray`1<float> sampleFrames)
public ConsumeSampleFramesNativeFunction get_consumeSampleFramesNativeFunction()
internal UInt32 QueueSampleFrames(NativeArray`1<float> sampleFrames)
public void add_sampleFramesAvailable(SampleFramesHandler value)
public void remove_sampleFramesAvailable(SampleFramesHandler value)
public void add_sampleFramesOverflow(SampleFramesHandler value)
public void remove_sampleFramesOverflow(SampleFramesHandler value)
public void SetSampleFramesAvailableNativeHandler(SampleFramesEventNativeFunction handler, IntPtr userData)
public void ClearSampleFramesAvailableNativeHandler()
public void SetSampleFramesOverflowNativeHandler(SampleFramesEventNativeFunction handler, IntPtr userData)
public void ClearSampleFramesOverflowNativeHandler()
private void InvokeSampleFramesAvailable(int sampleFrameCount)
private void InvokeSampleFramesOverflow(int droppedSampleFrameCount)
private UInt32 InternalCreateSampleProvider(ushort channelCount, UInt32 sampleRate)
internal void InternalRemove(UInt32 providerId)
private void InternalGetFormatInfo(UInt32 providerId, UInt16& chCount, UInt32& sRate)
private AudioSampleProvider InternalGetScriptingPtr(UInt32 providerId)
private void InternalSetScriptingPtr(UInt32 providerId, AudioSampleProvider provider)
internal bool InternalIsValid(UInt32 providerId)
private UInt32 InternalGetMaxSampleFrameCount(UInt32 providerId)
private UInt32 InternalGetAvailableSampleFrameCount(UInt32 providerId)
private UInt32 InternalGetFreeSampleFrameCount(UInt32 providerId)
private UInt32 InternalGetFreeSampleFrameCountLowThreshold(UInt32 providerId)
private void InternalSetFreeSampleFrameCountLowThreshold(UInt32 providerId, UInt32 sampleFrameCount)
private bool InternalGetEnableSampleFramesAvailableEvents(UInt32 providerId)
private void InternalSetEnableSampleFramesAvailableEvents(UInt32 providerId, bool enable)
private void InternalSetSampleFramesAvailableNativeHandler(UInt32 providerId, IntPtr handler, IntPtr userData)
private void InternalClearSampleFramesAvailableNativeHandler(UInt32 providerId)
private void InternalSetSampleFramesOverflowNativeHandler(UInt32 providerId, IntPtr handler, IntPtr userData)
private void InternalClearSampleFramesOverflowNativeHandler(UInt32 providerId)
private bool InternalGetEnableSilencePadding(UInt32 id)
private void InternalSetEnableSilencePadding(UInt32 id, bool enabled)
private IntPtr InternalGetConsumeSampleFramesNativeFunctionPtr()
private UInt32 InternalQueueSampleFrames(UInt32 id, IntPtr interleavedSampleFrames, UInt32 sampleFrameCount)
}
internal UnityEngine.Experimental.Audio.AudioSourceExtensionsInternal : object {
public void RegisterSampleProvider(AudioSource source, AudioSampleProvider provider)
public void UnregisterSampleProvider(AudioSource source, AudioSampleProvider provider)
private void Internal_RegisterSampleProviderWithAudioSource(AudioSource source, UInt32 providerId)
private void Internal_UnregisterSampleProviderFromAudioSource(AudioSource source, UInt32 providerId)
}
public UnityEngine.FFTWindow : Enum {
public int value__
public FFTWindow Rectangular
public FFTWindow Triangle
public FFTWindow Hamming
public FFTWindow Hanning
public FFTWindow Blackman
public FFTWindow BlackmanHarris
}
public UnityEngine.Microphone : object {
public String[] devices
private int GetMicrophoneDeviceIDFromName(string name)
private AudioClip StartRecord(int deviceID, bool loop, float lengthSec, int frequency)
private void EndRecord(int deviceID)
private bool IsRecording(int deviceID)
private int GetRecordPosition(int deviceID)
private void GetDeviceCaps(int deviceID, Int32& minFreq, Int32& maxFreq)
public AudioClip Start(string deviceName, bool loop, int lengthSec, int frequency)
public void End(string deviceName)
public String[] get_devices()
public bool IsRecording(string deviceName)
public int GetPosition(string deviceName)
public void GetDeviceCaps(string deviceName, Int32& minFreq, Int32& maxFreq)
}
public UnityEngine.MovieTexture : Texture {
public AudioClip audioClip
public bool loop
public bool isPlaying
public bool isReadyToPlay
public float duration
private void FeatureRemoved()
public void Play()
public void Stop()
public void Pause()
public AudioClip get_audioClip()
public bool get_loop()
public void set_loop(bool value)
public bool get_isPlaying()
public bool get_isReadyToPlay()
public float get_duration()
}
public UnityEngine.WebCamDevice : ValueType {
internal string m_Name
internal string m_DepthCameraName
internal int m_Flags
internal WebCamKind m_Kind
internal Resolution[] m_Resolutions
public string name
public bool isFrontFacing
public WebCamKind kind
public string depthCameraName
public bool isAutoFocusPointSupported
public Resolution[] availableResolutions
public string get_name()
public bool get_isFrontFacing()
public WebCamKind get_kind()
public string get_depthCameraName()
public bool get_isAutoFocusPointSupported()
public Resolution[] get_availableResolutions()
}
public UnityEngine.WebCamFlags : Enum {
public int value__
public WebCamFlags FrontFacing
public WebCamFlags AutoFocusPointSupported
}
public UnityEngine.WebCamKind : Enum {
public int value__
public WebCamKind WideAngle
public WebCamKind Telephoto
public WebCamKind ColorAndDepth
}
public UnityEngine.WebCamTexture : Texture {
public Nullable`1<Vector2> autoFocusPoint
internal Vector2 internalAutoFocusPoint
public bool isDepth
public bool isPlaying
public string deviceName
public float requestedFPS
public int requestedWidth
public int requestedHeight
public WebCamDevice[] devices
public int videoRotationAngle
public bool videoVerticallyMirrored
public bool didUpdateThisFrame
public Nullable`1<Vector2> get_autoFocusPoint()
public void set_autoFocusPoint(Nullable`1<Vector2> value)
internal Vector2 get_internalAutoFocusPoint()
internal void set_internalAutoFocusPoint(Vector2 value)
public bool get_isDepth()
private void Internal_CreateWebCamTexture(WebCamTexture self, string scriptingDevice, int requestedWidth, int requestedHeight, int maxFramerate)
public void .ctor(string deviceName, int requestedWidth, int requestedHeight, int requestedFPS)
public void .ctor(string deviceName, int requestedWidth, int requestedHeight)
public void .ctor(string deviceName)
public void .ctor(int requestedWidth, int requestedHeight, int requestedFPS)
public void .ctor(int requestedWidth, int requestedHeight)
public void Play()
private void INTERNAL_CALL_Play(WebCamTexture self)
public void Pause()
private void INTERNAL_CALL_Pause(WebCamTexture self)
public void Stop()
private void INTERNAL_CALL_Stop(WebCamTexture self)
public bool get_isPlaying()
public string get_deviceName()
public void set_deviceName(string value)
public float get_requestedFPS()
public void set_requestedFPS(float value)
public int get_requestedWidth()
public void set_requestedWidth(int value)
public int get_requestedHeight()
public void set_requestedHeight(int value)
public WebCamDevice[] get_devices()
public Color GetPixel(int x, int y)
private void INTERNAL_CALL_GetPixel(WebCamTexture self, int x, int y, Color& value)
public Color[] GetPixels()
public Color[] GetPixels(int x, int y, int blockWidth, int blockHeight)
public Color32[] GetPixels32(Color32[] colors)
public Color32[] GetPixels32()
public int get_videoRotationAngle()
public bool get_videoVerticallyMirrored()
public bool get_didUpdateThisFrame()
private void get_internalAutoFocusPoint_Injected(Vector2& ret)
private void set_internalAutoFocusPoint_Injected(Vector2& value)
}
