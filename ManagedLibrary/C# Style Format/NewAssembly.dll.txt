public AssetBundleBackend : FileSystemBackend {
public AssetBundle rootBundle
public AssetBundleManifest manifest
public Dictionary`2<string, AssetBundle> bundles
public Dictionary`2<string, AssetBundle> files
private string assetPath
private float <LoadProgress>k__BackingField
public bool Enabled
public float LoadProgress
public bool get_Enabled()
public float get_LoadProgress()
private void set_LoadProgress(float value)
public void Load(string assetRoot)
private AssetBundleCreateRequest LoadBundleAsync(string bundleName)
public AssetBundle LoadBundle(string bundleName)
public void BuildFileIndex()
public void Dispose()
public List`1<string> UnloadBundles(string partialName)
protected T LoadAsset(string filePath)
protected String[] LoadAssetList(string folder, string search)
public T[] LoadAllFromBundle(string bundleName, string editorSearch)
}
public FileSystem : object {
public bool LogDebug
public bool LogTime
public FileSystemBackend Backend
public GameObject[] LoadPrefabs(string folder)
public GameObject LoadPrefab(string filePath)
public String[] FindAll(string folder, string search)
public T[] LoadAll(string folder, string search)
public T[] LoadAllFromBundle(string bundleName, string editorSearch)
public T Load(string filePath, bool complain)
}
public FileSystemBackend : object {
public bool isError
public string loadingError
public Dictionary`2<string, Object> cache
public GameObject[] LoadPrefabs(string folder)
public GameObject LoadPrefab(string filePath)
public String[] FindAll(string folder, string search)
public T[] LoadAll(string folder, string search)
public T Load(string filePath)
protected void LoadError(string err)
public List`1<string> UnloadBundles(string partialName)
protected T LoadAsset(string filePath)
protected String[] LoadAssetList(string folder, string search)
public T[] LoadAllFromBundle(string bundleName, string editorSearch)
}
