internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string VsVersion
public string FxFileVersion
public string VsFileVersion
public string AssemblyI18N
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_Core
}
internal I18N.CJK.CodeTable : object {
private Stream stream
public void .ctor(string name)
public void Dispose()
public Byte[] GetSection(int num)
}
public I18N.CJK.CP50220 : ISO2022JPEncoding {
public string EncodingName
public string get_EncodingName()
}
public I18N.CJK.CP50221 : ISO2022JPEncoding {
public string EncodingName
public string get_EncodingName()
}
public I18N.CJK.CP50222 : ISO2022JPEncoding {
public string EncodingName
public string get_EncodingName()
}
public I18N.CJK.CP51932 : MonoEncoding {
private int EUC_JP_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public bool IsBrowserDisplay
public bool IsBrowserSave
public bool IsMailNewsDisplay
public bool IsMailNewsSave
public string WebName
public int GetByteCount(Char[] chars, int index, int length)
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetMaxByteCount(int charCount)
public int GetMaxCharCount(int byteCount)
public Encoder GetEncoder()
public Decoder GetDecoder()
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public bool get_IsBrowserDisplay()
public bool get_IsBrowserSave()
public bool get_IsMailNewsDisplay()
public bool get_IsMailNewsSave()
public string get_WebName()
}
internal I18N.CJK.CP51932Decoder : DbcsDecoder {
private int last_count
private int last_bytes
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetCharCount(Byte[] bytes, int index, int count, bool refresh)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh)
private Exception Insufficient()
}
public I18N.CJK.CP51932Encoder : MonoEncoder {
public void .ctor(MonoEncoding encoding)
public int GetByteCountImpl(Char* chars, int count, bool refresh)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool refresh)
}
internal I18N.CJK.CP51949 : KoreanEncoding {
private int EUCKR_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public string WebName
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public string get_WebName()
}
public I18N.CJK.CP932 : MonoEncoding {
private int SHIFTJIS_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public bool IsBrowserDisplay
public bool IsBrowserSave
public bool IsMailNewsDisplay
public bool IsMailNewsSave
public string WebName
public int WindowsCodePage
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetMaxByteCount(int charCount)
public int GetMaxCharCount(int byteCount)
public Decoder GetDecoder()
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public bool get_IsBrowserDisplay()
public bool get_IsBrowserSave()
public bool get_IsMailNewsDisplay()
public bool get_IsMailNewsSave()
public string get_WebName()
public int get_WindowsCodePage()
}
internal I18N.CJK.CP932Decoder : DbcsDecoder {
private JISConvert convert
private int last_byte_count
private int last_byte_chars
public void .ctor(JISConvert convert)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetCharCount(Byte[] bytes, int index, int count, bool refresh)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh)
}
internal I18N.CJK.CP936 : DbcsEncoding {
private int GB2312_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public bool IsBrowserDisplay
public bool IsBrowserSave
public bool IsMailNewsDisplay
public bool IsMailNewsSave
public string WebName
internal DbcsConvert GetConvert()
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public Decoder GetDecoder()
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public bool get_IsBrowserDisplay()
public bool get_IsBrowserSave()
public bool get_IsMailNewsDisplay()
public bool get_IsMailNewsSave()
public string get_WebName()
}
internal I18N.CJK.CP936Decoder : DbcsDecoder {
private int last_byte_count
private int last_byte_bytes
public void .ctor(DbcsConvert convert)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetCharCount(Byte[] bytes, int index, int count, bool refresh)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh)
}
internal I18N.CJK.CP949 : KoreanEncoding {
private int UHC_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public string WebName
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public string get_WebName()
}
internal I18N.CJK.CP950 : DbcsEncoding {
private int BIG5_CODE_PAGE
public string BodyName
public string EncodingName
public string HeaderName
public string WebName
internal DbcsConvert GetConvert()
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public Decoder GetDecoder()
public string get_BodyName()
public string get_EncodingName()
public string get_HeaderName()
public string get_WebName()
}
internal I18N.CJK.DbcsConvert : object {
public Byte[] n2u
public Byte[] u2n
internal DbcsConvert Gb2312
internal DbcsConvert Big5
internal DbcsConvert KS
internal void .ctor(string fileName)
}
internal I18N.CJK.DbcsEncoding : MonoEncoding {
public bool IsBrowserDisplay
public bool IsBrowserSave
public bool IsMailNewsDisplay
public bool IsMailNewsSave
public void .ctor(int codePage)
public void .ctor(int codePage, int windowsCodePage)
internal DbcsConvert GetConvert()
public int GetByteCount(Char[] chars, int index, int count)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public int GetMaxByteCount(int charCount)
public int GetMaxCharCount(int byteCount)
public bool get_IsBrowserDisplay()
public bool get_IsBrowserSave()
public bool get_IsMailNewsDisplay()
public bool get_IsMailNewsSave()
}
internal I18N.CJK.GB18030Decoder : DbcsDecoder {
private DbcsConvert gb2312
public int GetCharCount(Byte[] bytes, int start, int len)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal I18N.CJK.GB18030Encoder : MonoEncoder {
private DbcsConvert gb2312
private char incomplete_byte_count
private char incomplete_bytes
public void .ctor(MonoEncoding owner)
public int GetByteCountImpl(Char* chars, int count, bool refresh)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool refresh)
}
public I18N.CJK.GB18030Encoding : MonoEncoding {
public string EncodingName
public string HeaderName
public string BodyName
public string WebName
public bool IsMailNewsDisplay
public bool IsMailNewsSave
public bool IsBrowserDisplay
public bool IsBrowserSave
public string get_EncodingName()
public string get_HeaderName()
public string get_BodyName()
public string get_WebName()
public bool get_IsMailNewsDisplay()
public bool get_IsMailNewsSave()
public bool get_IsBrowserDisplay()
public bool get_IsBrowserSave()
public int GetMaxByteCount(int len)
public int GetMaxCharCount(int len)
public int GetByteCount(Char[] chars, int index, int length)
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int start, int len)
public int GetChars(Byte[] bytes, int byteIdx, int srclen, Char[] chars, int charIdx)
public Encoder GetEncoder()
public Decoder GetDecoder()
}
internal I18N.CJK.GB18030Source : object {
private Byte* gbx2uni
private Byte* uni2gbx
private int gbx2uniSize
private int uni2gbxSize
private long gbxBase
private long gbxSuppBase
private GB18030Map[] ranges
public void Unlinear(Byte[] bytes, int start, long gbx)
public void Unlinear(Byte* bytes, long gbx)
public long FromGBX(Byte[] bytes, int start)
public long FromUCSSurrogate(int cp)
public long FromUCS(int cp)
private long FromGBXRaw(byte b1, byte b2, byte b3, byte b4, bool supp)
private int ToUcsRaw(int idx)
private long ToGbxRaw(int idx)
}
internal I18N.CJK.ISO2022JPDecoder : Decoder {
private JISConvert convert
private bool allow_shift_io
private ISO2022JPMode m
private bool shifted_in_conv
private bool shifted_in_count
public void .ctor(bool allow1ByteKana, bool allowShiftIO)
public int GetCharCount(Byte[] bytes, int index, int count)
private int ToChar(int value)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public void Reset()
}
internal I18N.CJK.ISO2022JPEncoder : MonoEncoder {
private JISConvert convert
private bool allow_1byte_kana
private bool allow_shift_io
private ISO2022JPMode m
private bool shifted_in_count
private bool shifted_in_conv
private Char[] full_width_map
public void .ctor(MonoEncoding owner, bool allow1ByteKana, bool allowShiftIO)
public int GetByteCountImpl(Char* chars, int charCount, bool flush)
private void SwitchMode(Byte* bytes, Int32& byteIndex, Int32& byteCount, ISO2022JPMode& cur, ISO2022JPMode next)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool flush)
public void Reset()
}
public I18N.CJK.ISO2022JPEncoding : MonoEncoding {
private bool allow_1byte_kana
private bool allow_shift_io
public string BodyName
public string HeaderName
public string WebName
public void .ctor(int codePage, bool allow1ByteKana, bool allowShiftIO)
public string get_BodyName()
public string get_HeaderName()
public string get_WebName()
public int GetMaxByteCount(int charCount)
public int GetMaxCharCount(int byteCount)
public int GetByteCount(Char[] chars, int charIndex, int charCount)
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
}
internal I18N.CJK.ISO2022JPMode : Enum {
public int value__
public ISO2022JPMode ASCII
public ISO2022JPMode JISX0208
public ISO2022JPMode JISX0201
}
internal I18N.CJK.JISConvert : object {
private int JISX0208_To_Unicode
private int JISX0212_To_Unicode
private int CJK_To_JIS
private int Greek_To_JIS
private int Extra_To_JIS
public Byte[] jisx0208ToUnicode
public Byte[] jisx0212ToUnicode
public Byte[] cjkToJis
public Byte[] greekToJis
public Byte[] extraToJis
private JISConvert convert
private object lockobj
public JISConvert Convert
public JISConvert get_Convert()
}
internal I18N.CJK.KoreanEncoding : DbcsEncoding {
private bool useUHC
public void .ctor(int codepage, bool useUHC)
internal DbcsConvert GetConvert()
public int GetByteCountImpl(Char* chars, int count)
public int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount)
public int GetCharCount(Byte[] bytes, int index, int count)
public int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex)
public Decoder GetDecoder()
}
