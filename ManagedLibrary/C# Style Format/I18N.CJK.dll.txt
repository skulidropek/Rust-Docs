internal static class Consts : object {
    
public static string MonoVersion;
    
public static string MonoCompany;
    
public static string MonoProduct;
    
public static string MonoCopyright;
    
public static string FxVersion;
    
public static string VsVersion;
    
public static string FxFileVersion;
    
public static string VsFileVersion;
    
public static string AssemblyI18N;
    
public static string AssemblyMicrosoft_VisualStudio;
    
public static string AssemblyMicrosoft_VisualStudio_Web;
    
public static string AssemblyMicrosoft_VSDesigner;
    
public static string AssemblyMono_Http;
    
public static string AssemblyMono_Posix;
    
public static string AssemblyMono_Security;
    
public static string AssemblyMono_Messaging_RabbitMQ;
    
public static string AssemblyCorlib;
    
public static string AssemblySystem;
    
public static string AssemblySystem_Data;
    
public static string AssemblySystem_Design;
    
public static string AssemblySystem_DirectoryServices;
    
public static string AssemblySystem_Drawing;
    
public static string AssemblySystem_Drawing_Design;
    
public static string AssemblySystem_Messaging;
    
public static string AssemblySystem_Security;
    
public static string AssemblySystem_ServiceProcess;
    
public static string AssemblySystem_Web;
    
public static string AssemblySystem_Windows_Forms;
    
public static string AssemblySystem_Core;
}
internal class I18N.CJK.CodeTable : object {
    
private Stream stream;
    public CodeTable(string name);
    public sealed virtual void Dispose();
    public Byte[] GetSection(int num);
}
public class I18N.CJK.CP50220 : ISO2022JPEncoding {
    
public string EncodingName { get; }
    public virtual string get_EncodingName();
}
public class I18N.CJK.CP50221 : ISO2022JPEncoding {
    
public string EncodingName { get; }
    public virtual string get_EncodingName();
}
public class I18N.CJK.CP50222 : ISO2022JPEncoding {
    
public string EncodingName { get; }
    public virtual string get_EncodingName();
}
public class I18N.CJK.CP51932 : MonoEncoding {
    
private static int EUC_JP_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public bool IsBrowserDisplay { get; }
    
public bool IsBrowserSave { get; }
    
public bool IsMailNewsDisplay { get; }
    
public bool IsMailNewsSave { get; }
    
public string WebName { get; }
    public virtual int GetByteCount(Char[] chars, int index, int length);
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Encoder GetEncoder();
    public virtual Decoder GetDecoder();
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual string get_WebName();
}
internal class I18N.CJK.CP51932Decoder : DbcsDecoder {
    
private int last_count;
    
private int last_bytes;
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool refresh);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh);
    private Exception Insufficient();
}
public class I18N.CJK.CP51932Encoder : MonoEncoder {
    public CP51932Encoder(MonoEncoding encoding);
    public virtual int GetByteCountImpl(Char* chars, int count, bool refresh);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool refresh);
}
internal class I18N.CJK.CP51949 : KoreanEncoding {
    
private static int EUCKR_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public string WebName { get; }
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_WebName();
}
public class I18N.CJK.CP54936 : GB18030Encoding {
}
public class I18N.CJK.CP932 : MonoEncoding {
    
private static int SHIFTJIS_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public bool IsBrowserDisplay { get; }
    
public bool IsBrowserSave { get; }
    
public bool IsMailNewsDisplay { get; }
    
public bool IsMailNewsSave { get; }
    
public string WebName { get; }
    
public int WindowsCodePage { get; }
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual Decoder GetDecoder();
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual string get_WebName();
    public virtual int get_WindowsCodePage();
}
internal class I18N.CJK.CP932Decoder : DbcsDecoder {
    
private JISConvert convert;
    
private int last_byte_count;
    
private int last_byte_chars;
    public CP932Decoder(JISConvert convert);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool refresh);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh);
}
internal class I18N.CJK.CP936 : DbcsEncoding {
    
private static int GB2312_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public bool IsBrowserDisplay { get; }
    
public bool IsBrowserSave { get; }
    
public bool IsMailNewsDisplay { get; }
    
public bool IsMailNewsSave { get; }
    
public string WebName { get; }
    internal virtual DbcsConvert GetConvert();
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual string get_WebName();
}
internal class I18N.CJK.CP936Decoder : DbcsDecoder {
    
private int last_byte_count;
    
private int last_byte_bytes;
    public CP936Decoder(DbcsConvert convert);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count, bool refresh);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex, bool refresh);
}
internal class I18N.CJK.CP949 : KoreanEncoding {
    
private static int UHC_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public string WebName { get; }
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_WebName();
}
internal class I18N.CJK.CP950 : DbcsEncoding {
    
private static int BIG5_CODE_PAGE;
    
public string BodyName { get; }
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public string WebName { get; }
    internal virtual DbcsConvert GetConvert();
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
    public virtual string get_BodyName();
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_WebName();
}
internal class I18N.CJK.DbcsConvert : object {
    
public Byte[] n2u;
    
public Byte[] u2n;
    
internal static DbcsConvert Gb2312;
    
internal static DbcsConvert Big5;
    
internal static DbcsConvert KS;
    internal DbcsConvert(string fileName);
    private static DbcsConvert();
}
internal abstract class I18N.CJK.DbcsEncoding : MonoEncoding {
    
public bool IsBrowserDisplay { get; }
    
public bool IsBrowserSave { get; }
    
public bool IsMailNewsDisplay { get; }
    
public bool IsMailNewsSave { get; }
    public DbcsEncoding(int codePage);
    public DbcsEncoding(int codePage, int windowsCodePage);
    internal abstract virtual DbcsConvert GetConvert();
    public virtual int GetByteCount(Char[] chars, int index, int count);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
}
internal class I18N.CJK.ENCbig5 : CP950 {
}
public class I18N.CJK.ENCeuc_jp : CP51932 {
}
internal class I18N.CJK.ENCeuc_kr : CP51949 {
}
internal class I18N.CJK.ENCgb18030 : GB18030Encoding {
}
internal class I18N.CJK.ENCgb2312 : CP936 {
}
public class I18N.CJK.ENCiso_2022_jp : CP50220 {
}
public class I18N.CJK.ENCshift_jis : CP932 {
}
internal class I18N.CJK.ENCuhc : CP949 {
}
internal class I18N.CJK.GB18030Decoder : DbcsDecoder {
    
private static DbcsConvert gb2312;
    private static GB18030Decoder();
    public virtual int GetCharCount(Byte[] bytes, int start, int len);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal class I18N.CJK.GB18030Encoder : MonoEncoder {
    
private static DbcsConvert gb2312;
    
private char incomplete_byte_count;
    
private char incomplete_bytes;
    public GB18030Encoder(MonoEncoding owner);
    private static GB18030Encoder();
    public virtual int GetByteCountImpl(Char* chars, int count, bool refresh);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool refresh);
}
public class I18N.CJK.GB18030Encoding : MonoEncoding {
    
public string EncodingName { get; }
    
public string HeaderName { get; }
    
public string BodyName { get; }
    
public string WebName { get; }
    
public bool IsMailNewsDisplay { get; }
    
public bool IsMailNewsSave { get; }
    
public bool IsBrowserDisplay { get; }
    
public bool IsBrowserSave { get; }
    public virtual string get_EncodingName();
    public virtual string get_HeaderName();
    public virtual string get_BodyName();
    public virtual string get_WebName();
    public virtual bool get_IsMailNewsDisplay();
    public virtual bool get_IsMailNewsSave();
    public virtual bool get_IsBrowserDisplay();
    public virtual bool get_IsBrowserSave();
    public virtual int GetMaxByteCount(int len);
    public virtual int GetMaxCharCount(int len);
    public virtual int GetByteCount(Char[] chars, int index, int length);
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int start, int len);
    public virtual int GetChars(Byte[] bytes, int byteIdx, int srclen, Char[] chars, int charIdx);
    public virtual Encoder GetEncoder();
    public virtual Decoder GetDecoder();
}
internal class I18N.CJK.GB18030Source : object {
    
private static Byte* gbx2uni;
    
private static Byte* uni2gbx;
    
private static int gbx2uniSize;
    
private static int uni2gbxSize;
    
private static long gbxBase;
    
private static long gbxSuppBase;
    
private static GB18030Map[] ranges;
    private static GB18030Source();
    public static void Unlinear(Byte[] bytes, int start, long gbx);
    public static void Unlinear(Byte* bytes, long gbx);
    public static long FromGBX(Byte[] bytes, int start);
    public static long FromUCSSurrogate(int cp);
    public static long FromUCS(int cp);
    private static long FromGBXRaw(byte b1, byte b2, byte b3, byte b4, bool supp);
    private static int ToUcsRaw(int idx);
    private static long ToGbxRaw(int idx);
}
internal class I18N.CJK.ISO2022JPDecoder : Decoder {
    
private static JISConvert convert;
    
private bool allow_shift_io;
    
private ISO2022JPMode m;
    
private bool shifted_in_conv;
    
private bool shifted_in_count;
    public ISO2022JPDecoder(bool allow1ByteKana, bool allowShiftIO);
    private static ISO2022JPDecoder();
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    private int ToChar(int value);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual void Reset();
}
internal class I18N.CJK.ISO2022JPEncoder : MonoEncoder {
    
private static JISConvert convert;
    
private bool allow_1byte_kana;
    
private bool allow_shift_io;
    
private ISO2022JPMode m;
    
private bool shifted_in_count;
    
private bool shifted_in_conv;
    
private static Char[] full_width_map;
    public ISO2022JPEncoder(MonoEncoding owner, bool allow1ByteKana, bool allowShiftIO);
    private static ISO2022JPEncoder();
    public virtual int GetByteCountImpl(Char* chars, int charCount, bool flush);
    private void SwitchMode(Byte* bytes, Int32& byteIndex, Int32& byteCount, ISO2022JPMode& cur, ISO2022JPMode next);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount, bool flush);
    public virtual void Reset();
}
public class I18N.CJK.ISO2022JPEncoding : MonoEncoding {
    
private bool allow_1byte_kana;
    
private bool allow_shift_io;
    
public string BodyName { get; }
    
public string HeaderName { get; }
    
public string WebName { get; }
    public ISO2022JPEncoding(int codePage, bool allow1ByteKana, bool allowShiftIO);
    public virtual string get_BodyName();
    public virtual string get_HeaderName();
    public virtual string get_WebName();
    public virtual int GetMaxByteCount(int charCount);
    public virtual int GetMaxCharCount(int byteCount);
    public virtual int GetByteCount(Char[] chars, int charIndex, int charCount);
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
}
internal enum I18N.CJK.ISO2022JPMode : Enum {
    
public int value__;
    
public static ISO2022JPMode ASCII;
    
public static ISO2022JPMode JISX0208;
    
public static ISO2022JPMode JISX0201;
}
internal class I18N.CJK.JISConvert : object {
    
private static int JISX0208_To_Unicode;
    
private static int JISX0212_To_Unicode;
    
private static int CJK_To_JIS;
    
private static int Greek_To_JIS;
    
private static int Extra_To_JIS;
    
public Byte[] jisx0208ToUnicode;
    
public Byte[] jisx0212ToUnicode;
    
public Byte[] cjkToJis;
    
public Byte[] greekToJis;
    
public Byte[] extraToJis;
    
private static JISConvert convert;
    
private static object lockobj;
    
public static JISConvert Convert { get; }
    private static JISConvert();
    public static JISConvert get_Convert();
}
internal class I18N.CJK.KoreanEncoding : DbcsEncoding {
    
private bool useUHC;
    public KoreanEncoding(int codepage, bool useUHC);
    internal virtual DbcsConvert GetConvert();
    public virtual int GetByteCountImpl(Char* chars, int count);
    public virtual int GetBytesImpl(Char* chars, int charCount, Byte* bytes, int byteCount);
    public virtual int GetCharCount(Byte[] bytes, int index, int count);
    public virtual int GetChars(Byte[] bytes, int byteIndex, int byteCount, Char[] chars, int charIndex);
    public virtual Decoder GetDecoder();
}
