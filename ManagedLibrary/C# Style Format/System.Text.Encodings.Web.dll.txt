internal System.IO.TextWriterExtensions : object {
public void WritePartialString(TextWriter writer, string value, int offset, int count)
}
internal System.Text.Encodings.Web.DefaultHtmlEncoder : HtmlEncoder {
private AllowedCharactersBitmap _allowedCharacters
internal DefaultHtmlEncoder Singleton
private Char[] s_quote
private Char[] s_ampersand
private Char[] s_lessthan
private Char[] s_greaterthan
public int MaxOutputCharactersPerInputCharacter
public void .ctor(TextEncoderSettings settings)
internal void ForbidHtmlCharacters(AllowedCharactersBitmap allowedCharacters)
public void .ctor(UnicodeRange[] allowedRanges)
public bool WillEncode(int unicodeScalar)
public int FindFirstCharacterToEncode(Char* text, int textLength)
public int get_MaxOutputCharactersPerInputCharacter()
public bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
private bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
}
internal System.Text.Encodings.Web.DefaultJavaScriptEncoder : JavaScriptEncoder {
private AllowedCharactersBitmap _allowedCharacters
internal DefaultJavaScriptEncoder Singleton
private Char[] s_b
private Char[] s_t
private Char[] s_n
private Char[] s_f
private Char[] s_r
private Char[] s_back
public int MaxOutputCharactersPerInputCharacter
public void .ctor(TextEncoderSettings filter)
public void .ctor(UnicodeRange[] allowedRanges)
public bool WillEncode(int unicodeScalar)
public int FindFirstCharacterToEncode(Char* text, int textLength)
public int get_MaxOutputCharactersPerInputCharacter()
public bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
private bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten)
private bool TryWriteEncodedSingleCharacter(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten)
}
internal System.Text.Encodings.Web.DefaultUrlEncoder : UrlEncoder {
private AllowedCharactersBitmap _allowedCharacters
internal DefaultUrlEncoder Singleton
public int MaxOutputCharactersPerInputCharacter
public int get_MaxOutputCharactersPerInputCharacter()
public void .ctor(TextEncoderSettings filter)
public void .ctor(UnicodeRange[] allowedRanges)
public bool WillEncode(int unicodeScalar)
public int FindFirstCharacterToEncode(Char* text, int textLength)
public bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
}
internal System.Text.Encodings.Web.HexUtil : object {
internal char UInt32LsbToHexDigit(UInt32 value)
internal char Int32LsbToHexDigit(int value)
internal void ByteToHexDigits(byte value, Char& firstHexChar, Char& secondHexChar)
}
public System.Text.Encodings.Web.HtmlEncoder : TextEncoder {
public HtmlEncoder Default
public HtmlEncoder get_Default()
public HtmlEncoder Create(TextEncoderSettings settings)
public HtmlEncoder Create(UnicodeRange[] allowedRanges)
}
public System.Text.Encodings.Web.JavaScriptEncoder : TextEncoder {
public JavaScriptEncoder Default
public JavaScriptEncoder UnsafeRelaxedJsonEscaping
public JavaScriptEncoder get_Default()
public JavaScriptEncoder get_UnsafeRelaxedJsonEscaping()
public JavaScriptEncoder Create(TextEncoderSettings settings)
public JavaScriptEncoder Create(UnicodeRange[] allowedRanges)
}
public System.Text.Encodings.Web.TextEncoder : object {
private int EncodeStartingOutputBufferSize
private Byte[][] _asciiEscape
private Byte[] s_noEscape
public int MaxOutputCharactersPerInputCharacter
public bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
public int FindFirstCharacterToEncode(Char* text, int textLength)
public bool WillEncode(int unicodeScalar)
public int get_MaxOutputCharactersPerInputCharacter()
public string Encode(string value)
public void Encode(TextWriter output, string value)
public void Encode(TextWriter output, string value, int startIndex, int characterCount)
public void Encode(TextWriter output, Char[] value, int startIndex, int characterCount)
public OperationStatus EncodeUtf8(ReadOnlySpan`1<byte> utf8Source, Span`1<byte> utf8Destination, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock)
internal OperationStatus EncodeUtf8Shim(TextEncoder encoder, ReadOnlySpan`1<byte> utf8Source, Span`1<byte> utf8Destination, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock)
public OperationStatus Encode(ReadOnlySpan`1<char> source, Span`1<char> destination, Int32& charsConsumed, Int32& charsWritten, bool isFinalBlock)
private void Encode(TextWriter output, ReadOnlySpan`1<char> value)
private int FindFirstCharacterToEncode(ReadOnlySpan`1<char> text)
public int FindFirstCharacterToEncodeUtf8(ReadOnlySpan`1<byte> utf8Text)
internal int FindFirstCharacterToEncodeUtf8Shim(TextEncoder encoder, ReadOnlySpan`1<byte> utf8Text)
internal bool TryCopyCharacters(Char[] source, Char* destination, int destinationLength, Int32& numberOfCharactersWritten)
internal bool TryWriteScalarAsChar(int unicodeScalar, Char* destination, int destinationLength, Int32& numberOfCharactersWritten)
private void ValidateRanges(int startIndex, int characterCount, int actualInputLength)
private Byte[] GetAsciiEncoding(byte value)
private void ThrowArgumentException_MaxOutputCharsPerInputChar()
private OperationStatus <Encode>g__EncodeCore|14_0(ReadOnlySpan`1<char> source, Span`1<char> destination, Int32& charsConsumed, Int32& charsWritten, bool isFinalBlock)
}
public System.Text.Encodings.Web.TextEncoderSettings : object {
private AllowedCharactersBitmap _allowedCharactersBitmap
public void .ctor(TextEncoderSettings other)
public void .ctor(UnicodeRange[] allowedRanges)
public void AllowCharacter(char character)
public void AllowCharacters(Char[] characters)
public void AllowCodePoints(IEnumerable`1<int> codePoints)
public void AllowRange(UnicodeRange range)
public void AllowRanges(UnicodeRange[] ranges)
public void Clear()
public void ForbidCharacter(char character)
public void ForbidCharacters(Char[] characters)
public void ForbidRange(UnicodeRange range)
public void ForbidRanges(UnicodeRange[] ranges)
internal AllowedCharactersBitmap GetAllowedCharacters()
public IEnumerable`1<int> GetAllowedCodePoints()
}
internal System.Text.Encodings.Web.UnsafeRelaxedJavaScriptEncoder : JavaScriptEncoder {
private AllowedCharactersBitmap _allowedCharacters
internal UnsafeRelaxedJavaScriptEncoder s_singleton
private Char[] s_b
private Char[] s_t
private Char[] s_n
private Char[] s_f
private Char[] s_r
private Char[] s_back
private Char[] s_doubleQuote
public int MaxOutputCharactersPerInputCharacter
private void .ctor(TextEncoderSettings filter)
public bool WillEncode(int unicodeScalar)
public int FindFirstCharacterToEncode(Char* text, int textLength)
public int get_MaxOutputCharactersPerInputCharacter()
public bool TryEncodeUnicodeScalar(int unicodeScalar, Char* buffer, int bufferLength, Int32& numberOfCharactersWritten)
private bool TryWriteEncodedScalarAsNumericEntity(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten)
private bool TryWriteEncodedSingleCharacter(int unicodeScalar, Char* buffer, int length, Int32& numberOfCharactersWritten)
}
public System.Text.Encodings.Web.UrlEncoder : TextEncoder {
public UrlEncoder Default
public UrlEncoder get_Default()
public UrlEncoder Create(TextEncoderSettings settings)
public UrlEncoder Create(UnicodeRange[] allowedRanges)
}
internal System.Text.Internal.AllowedCharactersBitmap : ValueType {
private int ALLOWED_CHARS_BITMAP_LENGTH
private UInt32[] _allowedCharacters
public AllowedCharactersBitmap CreateNew()
private void .ctor(UInt32[] allowedCharacters)
public void AllowCharacter(char character)
public void ForbidCharacter(char character)
public void ForbidUndefinedCharacters()
public void Clear()
public AllowedCharactersBitmap Clone()
public bool IsCharacterAllowed(char character)
public bool IsUnicodeScalarAllowed(int unicodeScalar)
public int FindFirstCharacterToEncode(Char* text, int textLength)
}
internal System.Text.Unicode.UnicodeHelpers : object {
internal int UNICODE_LAST_CODEPOINT
private UInt32[] _definedCharacterBitmapBigEndian
private ReadOnlySpan`1<byte> DefinedCharsBitmapSpan
private UInt32[] CreateDefinedCharacterBitmapMachineEndian()
public OperationStatus DecodeScalarValueFromUtf8(ReadOnlySpan`1<byte> source, UInt32& result, Int32& bytesConsumed)
internal ReadOnlySpan`1<UInt32> GetDefinedCharacterBitmap()
internal void GetUtf16SurrogatePairFromAstralScalarValue(int scalar, Char& highSurrogate, Char& lowSurrogate)
internal int GetUtf8RepresentationForScalarValue(UInt32 scalar)
internal bool IsSupplementaryCodePoint(int scalar)
private ReadOnlySpan`1<byte> get_DefinedCharsBitmapSpan()
}
public System.Text.Unicode.UnicodeRange : object {
private int <FirstCodePoint>k__BackingField
private int <Length>k__BackingField
public int FirstCodePoint
public int Length
public void .ctor(int firstCodePoint, int length)
public int get_FirstCodePoint()
private void set_FirstCodePoint(int value)
public int get_Length()
private void set_Length(int value)
public UnicodeRange Create(char firstCharacter, char lastCharacter)
}
public System.Text.Unicode.UnicodeRanges : object {
private UnicodeRange _none
private UnicodeRange _all
private UnicodeRange _u0000
private UnicodeRange _u0080
private UnicodeRange _u0100
private UnicodeRange _u0180
private UnicodeRange _u0250
private UnicodeRange _u02B0
private UnicodeRange _u0300
private UnicodeRange _u0370
private UnicodeRange _u0400
private UnicodeRange _u0500
private UnicodeRange _u0530
private UnicodeRange _u0590
private UnicodeRange _u0600
private UnicodeRange _u0700
private UnicodeRange _u0750
private UnicodeRange _u0780
private UnicodeRange _u07C0
private UnicodeRange _u0800
private UnicodeRange _u0840
private UnicodeRange _u0860
private UnicodeRange _u08A0
private UnicodeRange _u0900
private UnicodeRange _u0980
private UnicodeRange _u0A00
private UnicodeRange _u0A80
private UnicodeRange _u0B00
private UnicodeRange _u0B80
private UnicodeRange _u0C00
private UnicodeRange _u0C80
private UnicodeRange _u0D00
private UnicodeRange _u0D80
private UnicodeRange _u0E00
private UnicodeRange _u0E80
private UnicodeRange _u0F00
private UnicodeRange _u1000
private UnicodeRange _u10A0
private UnicodeRange _u1100
private UnicodeRange _u1200
private UnicodeRange _u1380
private UnicodeRange _u13A0
private UnicodeRange _u1400
private UnicodeRange _u1680
private UnicodeRange _u16A0
private UnicodeRange _u1700
private UnicodeRange _u1720
private UnicodeRange _u1740
private UnicodeRange _u1760
private UnicodeRange _u1780
private UnicodeRange _u1800
private UnicodeRange _u18B0
private UnicodeRange _u1900
private UnicodeRange _u1950
private UnicodeRange _u1980
private UnicodeRange _u19E0
private UnicodeRange _u1A00
private UnicodeRange _u1A20
private UnicodeRange _u1AB0
private UnicodeRange _u1B00
private UnicodeRange _u1B80
private UnicodeRange _u1BC0
private UnicodeRange _u1C00
private UnicodeRange _u1C50
private UnicodeRange _u1C80
private UnicodeRange _u1C90
private UnicodeRange _u1CC0
private UnicodeRange _u1CD0
private UnicodeRange _u1D00
private UnicodeRange _u1D80
private UnicodeRange _u1DC0
private UnicodeRange _u1E00
private UnicodeRange _u1F00
private UnicodeRange _u2000
private UnicodeRange _u2070
private UnicodeRange _u20A0
private UnicodeRange _u20D0
private UnicodeRange _u2100
private UnicodeRange _u2150
private UnicodeRange _u2190
private UnicodeRange _u2200
private UnicodeRange _u2300
private UnicodeRange _u2400
private UnicodeRange _u2440
private UnicodeRange _u2460
private UnicodeRange _u2500
private UnicodeRange _u2580
private UnicodeRange _u25A0
private UnicodeRange _u2600
private UnicodeRange _u2700
private UnicodeRange _u27C0
private UnicodeRange _u27F0
private UnicodeRange _u2800
private UnicodeRange _u2900
private UnicodeRange _u2980
private UnicodeRange _u2A00
private UnicodeRange _u2B00
private UnicodeRange _u2C00
private UnicodeRange _u2C60
private UnicodeRange _u2C80
private UnicodeRange _u2D00
private UnicodeRange _u2D30
private UnicodeRange _u2D80
private UnicodeRange _u2DE0
private UnicodeRange _u2E00
private UnicodeRange _u2E80
private UnicodeRange _u2F00
private UnicodeRange _u2FF0
private UnicodeRange _u3000
private UnicodeRange _u3040
private UnicodeRange _u30A0
private UnicodeRange _u3100
private UnicodeRange _u3130
private UnicodeRange _u3190
private UnicodeRange _u31A0
private UnicodeRange _u31C0
private UnicodeRange _u31F0
private UnicodeRange _u3200
private UnicodeRange _u3300
private UnicodeRange _u3400
private UnicodeRange _u4DC0
private UnicodeRange _u4E00
private UnicodeRange _uA000
private UnicodeRange _uA490
private UnicodeRange _uA4D0
private UnicodeRange _uA500
private UnicodeRange _uA640
private UnicodeRange _uA6A0
private UnicodeRange _uA700
private UnicodeRange _uA720
private UnicodeRange _uA800
private UnicodeRange _uA830
private UnicodeRange _uA840
private UnicodeRange _uA880
private UnicodeRange _uA8E0
private UnicodeRange _uA900
private UnicodeRange _uA930
private UnicodeRange _uA960
private UnicodeRange _uA980
private UnicodeRange _uA9E0
private UnicodeRange _uAA00
private UnicodeRange _uAA60
private UnicodeRange _uAA80
private UnicodeRange _uAAE0
private UnicodeRange _uAB00
private UnicodeRange _uAB30
private UnicodeRange _uAB70
private UnicodeRange _uABC0
private UnicodeRange _uAC00
private UnicodeRange _uD7B0
private UnicodeRange _uF900
private UnicodeRange _uFB00
private UnicodeRange _uFB50
private UnicodeRange _uFE00
private UnicodeRange _uFE10
private UnicodeRange _uFE20
private UnicodeRange _uFE30
private UnicodeRange _uFE50
private UnicodeRange _uFE70
private UnicodeRange _uFF00
private UnicodeRange _uFFF0
public UnicodeRange None
public UnicodeRange All
public UnicodeRange BasicLatin
public UnicodeRange Latin1Supplement
public UnicodeRange LatinExtendedA
public UnicodeRange LatinExtendedB
public UnicodeRange IpaExtensions
public UnicodeRange SpacingModifierLetters
public UnicodeRange CombiningDiacriticalMarks
public UnicodeRange GreekandCoptic
public UnicodeRange Cyrillic
public UnicodeRange CyrillicSupplement
public UnicodeRange Armenian
public UnicodeRange Hebrew
public UnicodeRange Arabic
public UnicodeRange Syriac
public UnicodeRange ArabicSupplement
public UnicodeRange Thaana
public UnicodeRange NKo
public UnicodeRange Samaritan
public UnicodeRange Mandaic
public UnicodeRange SyriacSupplement
public UnicodeRange ArabicExtendedA
public UnicodeRange Devanagari
public UnicodeRange Bengali
public UnicodeRange Gurmukhi
public UnicodeRange Gujarati
public UnicodeRange Oriya
public UnicodeRange Tamil
public UnicodeRange Telugu
public UnicodeRange Kannada
public UnicodeRange Malayalam
public UnicodeRange Sinhala
public UnicodeRange Thai
public UnicodeRange Lao
public UnicodeRange Tibetan
public UnicodeRange Myanmar
public UnicodeRange Georgian
public UnicodeRange HangulJamo
public UnicodeRange Ethiopic
public UnicodeRange EthiopicSupplement
public UnicodeRange Cherokee
public UnicodeRange UnifiedCanadianAboriginalSyllabics
public UnicodeRange Ogham
public UnicodeRange Runic
public UnicodeRange Tagalog
public UnicodeRange Hanunoo
public UnicodeRange Buhid
public UnicodeRange Tagbanwa
public UnicodeRange Khmer
public UnicodeRange Mongolian
public UnicodeRange UnifiedCanadianAboriginalSyllabicsExtended
public UnicodeRange Limbu
public UnicodeRange TaiLe
public UnicodeRange NewTaiLue
public UnicodeRange KhmerSymbols
public UnicodeRange Buginese
public UnicodeRange TaiTham
public UnicodeRange CombiningDiacriticalMarksExtended
public UnicodeRange Balinese
public UnicodeRange Sundanese
public UnicodeRange Batak
public UnicodeRange Lepcha
public UnicodeRange OlChiki
public UnicodeRange CyrillicExtendedC
public UnicodeRange GeorgianExtended
public UnicodeRange SundaneseSupplement
public UnicodeRange VedicExtensions
public UnicodeRange PhoneticExtensions
public UnicodeRange PhoneticExtensionsSupplement
public UnicodeRange CombiningDiacriticalMarksSupplement
public UnicodeRange LatinExtendedAdditional
public UnicodeRange GreekExtended
public UnicodeRange GeneralPunctuation
public UnicodeRange SuperscriptsandSubscripts
public UnicodeRange CurrencySymbols
public UnicodeRange CombiningDiacriticalMarksforSymbols
public UnicodeRange LetterlikeSymbols
public UnicodeRange NumberForms
public UnicodeRange Arrows
public UnicodeRange MathematicalOperators
public UnicodeRange MiscellaneousTechnical
public UnicodeRange ControlPictures
public UnicodeRange OpticalCharacterRecognition
public UnicodeRange EnclosedAlphanumerics
public UnicodeRange BoxDrawing
public UnicodeRange BlockElements
public UnicodeRange GeometricShapes
public UnicodeRange MiscellaneousSymbols
public UnicodeRange Dingbats
public UnicodeRange MiscellaneousMathematicalSymbolsA
public UnicodeRange SupplementalArrowsA
public UnicodeRange BraillePatterns
public UnicodeRange SupplementalArrowsB
public UnicodeRange MiscellaneousMathematicalSymbolsB
public UnicodeRange SupplementalMathematicalOperators
public UnicodeRange MiscellaneousSymbolsandArrows
public UnicodeRange Glagolitic
public UnicodeRange LatinExtendedC
public UnicodeRange Coptic
public UnicodeRange GeorgianSupplement
public UnicodeRange Tifinagh
public UnicodeRange EthiopicExtended
public UnicodeRange CyrillicExtendedA
public UnicodeRange SupplementalPunctuation
public UnicodeRange CjkRadicalsSupplement
public UnicodeRange KangxiRadicals
public UnicodeRange IdeographicDescriptionCharacters
public UnicodeRange CjkSymbolsandPunctuation
public UnicodeRange Hiragana
public UnicodeRange Katakana
public UnicodeRange Bopomofo
public UnicodeRange HangulCompatibilityJamo
public UnicodeRange Kanbun
public UnicodeRange BopomofoExtended
public UnicodeRange CjkStrokes
public UnicodeRange KatakanaPhoneticExtensions
public UnicodeRange EnclosedCjkLettersandMonths
public UnicodeRange CjkCompatibility
public UnicodeRange CjkUnifiedIdeographsExtensionA
public UnicodeRange YijingHexagramSymbols
public UnicodeRange CjkUnifiedIdeographs
public UnicodeRange YiSyllables
public UnicodeRange YiRadicals
public UnicodeRange Lisu
public UnicodeRange Vai
public UnicodeRange CyrillicExtendedB
public UnicodeRange Bamum
public UnicodeRange ModifierToneLetters
public UnicodeRange LatinExtendedD
public UnicodeRange SylotiNagri
public UnicodeRange CommonIndicNumberForms
public UnicodeRange Phagspa
public UnicodeRange Saurashtra
public UnicodeRange DevanagariExtended
public UnicodeRange KayahLi
public UnicodeRange Rejang
public UnicodeRange HangulJamoExtendedA
public UnicodeRange Javanese
public UnicodeRange MyanmarExtendedB
public UnicodeRange Cham
public UnicodeRange MyanmarExtendedA
public UnicodeRange TaiViet
public UnicodeRange MeeteiMayekExtensions
public UnicodeRange EthiopicExtendedA
public UnicodeRange LatinExtendedE
public UnicodeRange CherokeeSupplement
public UnicodeRange MeeteiMayek
public UnicodeRange HangulSyllables
public UnicodeRange HangulJamoExtendedB
public UnicodeRange CjkCompatibilityIdeographs
public UnicodeRange AlphabeticPresentationForms
public UnicodeRange ArabicPresentationFormsA
public UnicodeRange VariationSelectors
public UnicodeRange VerticalForms
public UnicodeRange CombiningHalfMarks
public UnicodeRange CjkCompatibilityForms
public UnicodeRange SmallFormVariants
public UnicodeRange ArabicPresentationFormsB
public UnicodeRange HalfwidthandFullwidthForms
public UnicodeRange Specials
public UnicodeRange get_None()
public UnicodeRange get_All()
private UnicodeRange CreateEmptyRange(UnicodeRange& range)
private UnicodeRange CreateRange(UnicodeRange& range, char first, char last)
public UnicodeRange get_BasicLatin()
public UnicodeRange get_Latin1Supplement()
public UnicodeRange get_LatinExtendedA()
public UnicodeRange get_LatinExtendedB()
public UnicodeRange get_IpaExtensions()
public UnicodeRange get_SpacingModifierLetters()
public UnicodeRange get_CombiningDiacriticalMarks()
public UnicodeRange get_GreekandCoptic()
public UnicodeRange get_Cyrillic()
public UnicodeRange get_CyrillicSupplement()
public UnicodeRange get_Armenian()
public UnicodeRange get_Hebrew()
public UnicodeRange get_Arabic()
public UnicodeRange get_Syriac()
public UnicodeRange get_ArabicSupplement()
public UnicodeRange get_Thaana()
public UnicodeRange get_NKo()
public UnicodeRange get_Samaritan()
public UnicodeRange get_Mandaic()
public UnicodeRange get_SyriacSupplement()
public UnicodeRange get_ArabicExtendedA()
public UnicodeRange get_Devanagari()
public UnicodeRange get_Bengali()
public UnicodeRange get_Gurmukhi()
public UnicodeRange get_Gujarati()
public UnicodeRange get_Oriya()
public UnicodeRange get_Tamil()
public UnicodeRange get_Telugu()
public UnicodeRange get_Kannada()
public UnicodeRange get_Malayalam()
public UnicodeRange get_Sinhala()
public UnicodeRange get_Thai()
public UnicodeRange get_Lao()
public UnicodeRange get_Tibetan()
public UnicodeRange get_Myanmar()
public UnicodeRange get_Georgian()
public UnicodeRange get_HangulJamo()
public UnicodeRange get_Ethiopic()
public UnicodeRange get_EthiopicSupplement()
public UnicodeRange get_Cherokee()
public UnicodeRange get_UnifiedCanadianAboriginalSyllabics()
public UnicodeRange get_Ogham()
public UnicodeRange get_Runic()
public UnicodeRange get_Tagalog()
public UnicodeRange get_Hanunoo()
public UnicodeRange get_Buhid()
public UnicodeRange get_Tagbanwa()
public UnicodeRange get_Khmer()
public UnicodeRange get_Mongolian()
public UnicodeRange get_UnifiedCanadianAboriginalSyllabicsExtended()
public UnicodeRange get_Limbu()
public UnicodeRange get_TaiLe()
public UnicodeRange get_NewTaiLue()
public UnicodeRange get_KhmerSymbols()
public UnicodeRange get_Buginese()
public UnicodeRange get_TaiTham()
public UnicodeRange get_CombiningDiacriticalMarksExtended()
public UnicodeRange get_Balinese()
public UnicodeRange get_Sundanese()
public UnicodeRange get_Batak()
public UnicodeRange get_Lepcha()
public UnicodeRange get_OlChiki()
public UnicodeRange get_CyrillicExtendedC()
public UnicodeRange get_GeorgianExtended()
public UnicodeRange get_SundaneseSupplement()
public UnicodeRange get_VedicExtensions()
public UnicodeRange get_PhoneticExtensions()
public UnicodeRange get_PhoneticExtensionsSupplement()
public UnicodeRange get_CombiningDiacriticalMarksSupplement()
public UnicodeRange get_LatinExtendedAdditional()
public UnicodeRange get_GreekExtended()
public UnicodeRange get_GeneralPunctuation()
public UnicodeRange get_SuperscriptsandSubscripts()
public UnicodeRange get_CurrencySymbols()
public UnicodeRange get_CombiningDiacriticalMarksforSymbols()
public UnicodeRange get_LetterlikeSymbols()
public UnicodeRange get_NumberForms()
public UnicodeRange get_Arrows()
public UnicodeRange get_MathematicalOperators()
public UnicodeRange get_MiscellaneousTechnical()
public UnicodeRange get_ControlPictures()
public UnicodeRange get_OpticalCharacterRecognition()
public UnicodeRange get_EnclosedAlphanumerics()
public UnicodeRange get_BoxDrawing()
public UnicodeRange get_BlockElements()
public UnicodeRange get_GeometricShapes()
public UnicodeRange get_MiscellaneousSymbols()
public UnicodeRange get_Dingbats()
public UnicodeRange get_MiscellaneousMathematicalSymbolsA()
public UnicodeRange get_SupplementalArrowsA()
public UnicodeRange get_BraillePatterns()
public UnicodeRange get_SupplementalArrowsB()
public UnicodeRange get_MiscellaneousMathematicalSymbolsB()
public UnicodeRange get_SupplementalMathematicalOperators()
public UnicodeRange get_MiscellaneousSymbolsandArrows()
public UnicodeRange get_Glagolitic()
public UnicodeRange get_LatinExtendedC()
public UnicodeRange get_Coptic()
public UnicodeRange get_GeorgianSupplement()
public UnicodeRange get_Tifinagh()
public UnicodeRange get_EthiopicExtended()
public UnicodeRange get_CyrillicExtendedA()
public UnicodeRange get_SupplementalPunctuation()
public UnicodeRange get_CjkRadicalsSupplement()
public UnicodeRange get_KangxiRadicals()
public UnicodeRange get_IdeographicDescriptionCharacters()
public UnicodeRange get_CjkSymbolsandPunctuation()
public UnicodeRange get_Hiragana()
public UnicodeRange get_Katakana()
public UnicodeRange get_Bopomofo()
public UnicodeRange get_HangulCompatibilityJamo()
public UnicodeRange get_Kanbun()
public UnicodeRange get_BopomofoExtended()
public UnicodeRange get_CjkStrokes()
public UnicodeRange get_KatakanaPhoneticExtensions()
public UnicodeRange get_EnclosedCjkLettersandMonths()
public UnicodeRange get_CjkCompatibility()
public UnicodeRange get_CjkUnifiedIdeographsExtensionA()
public UnicodeRange get_YijingHexagramSymbols()
public UnicodeRange get_CjkUnifiedIdeographs()
public UnicodeRange get_YiSyllables()
public UnicodeRange get_YiRadicals()
public UnicodeRange get_Lisu()
public UnicodeRange get_Vai()
public UnicodeRange get_CyrillicExtendedB()
public UnicodeRange get_Bamum()
public UnicodeRange get_ModifierToneLetters()
public UnicodeRange get_LatinExtendedD()
public UnicodeRange get_SylotiNagri()
public UnicodeRange get_CommonIndicNumberForms()
public UnicodeRange get_Phagspa()
public UnicodeRange get_Saurashtra()
public UnicodeRange get_DevanagariExtended()
public UnicodeRange get_KayahLi()
public UnicodeRange get_Rejang()
public UnicodeRange get_HangulJamoExtendedA()
public UnicodeRange get_Javanese()
public UnicodeRange get_MyanmarExtendedB()
public UnicodeRange get_Cham()
public UnicodeRange get_MyanmarExtendedA()
public UnicodeRange get_TaiViet()
public UnicodeRange get_MeeteiMayekExtensions()
public UnicodeRange get_EthiopicExtendedA()
public UnicodeRange get_LatinExtendedE()
public UnicodeRange get_CherokeeSupplement()
public UnicodeRange get_MeeteiMayek()
public UnicodeRange get_HangulSyllables()
public UnicodeRange get_HangulJamoExtendedB()
public UnicodeRange get_CjkCompatibilityIdeographs()
public UnicodeRange get_AlphabeticPresentationForms()
public UnicodeRange get_ArabicPresentationFormsA()
public UnicodeRange get_VariationSelectors()
public UnicodeRange get_VerticalForms()
public UnicodeRange get_CombiningHalfMarks()
public UnicodeRange get_CjkCompatibilityForms()
public UnicodeRange get_SmallFormVariants()
public UnicodeRange get_ArabicPresentationFormsB()
public UnicodeRange get_HalfwidthandFullwidthForms()
public UnicodeRange get_Specials()
}
internal System.Text.UnicodeDebug : object {
internal void AssertIsHighSurrogateCodePoint(UInt32 codePoint)
internal void AssertIsLowSurrogateCodePoint(UInt32 codePoint)
internal void AssertIsValidCodePoint(UInt32 codePoint)
internal void AssertIsValidScalar(UInt32 scalarValue)
internal void AssertIsValidSupplementaryPlaneScalar(UInt32 scalarValue)
private string ToHexString(UInt32 codePoint)
}
internal System.Text.UnicodeUtility : object {
public UInt32 ReplacementChar
public int GetPlane(UInt32 codePoint)
public UInt32 GetScalarFromUtf16SurrogatePair(UInt32 highSurrogateCodePoint, UInt32 lowSurrogateCodePoint)
public int GetUtf16SequenceLength(UInt32 value)
public void GetUtf16SurrogatesFromSupplementaryPlaneScalar(UInt32 value, Char& highSurrogateCodePoint, Char& lowSurrogateCodePoint)
public int GetUtf8SequenceLength(UInt32 value)
public bool IsAsciiCodePoint(UInt32 value)
public bool IsBmpCodePoint(UInt32 value)
public bool IsHighSurrogateCodePoint(UInt32 value)
public bool IsInRangeInclusive(UInt32 value, UInt32 lowerBound, UInt32 upperBound)
public bool IsLowSurrogateCodePoint(UInt32 value)
public bool IsSurrogateCodePoint(UInt32 value)
public bool IsValidCodePoint(UInt32 codePoint)
public bool IsValidUnicodeScalar(UInt32 value)
}
internal System.Text.ValueStringBuilder : ValueType {
private Char[] _arrayToReturnToPool
private Span`1<char> _chars
private int _pos
public int Length
public int Capacity
public Char& Item
public Span`1<char> RawChars
public void .ctor(Span`1<char> initialBuffer)
public void .ctor(int initialCapacity)
public int get_Length()
public void set_Length(int value)
public int get_Capacity()
public void EnsureCapacity(int capacity)
public Char& GetPinnableReference()
public Char& GetPinnableReference(bool terminate)
public Char& get_Item(int index)
public string ToString()
public Span`1<char> get_RawChars()
public ReadOnlySpan`1<char> AsSpan(bool terminate)
public ReadOnlySpan`1<char> AsSpan()
public ReadOnlySpan`1<char> AsSpan(int start)
public ReadOnlySpan`1<char> AsSpan(int start, int length)
public bool TryCopyTo(Span`1<char> destination, Int32& charsWritten)
public void Insert(int index, char value, int count)
public void Insert(int index, string s)
public void Append(char c)
public void Append(string s)
private void AppendSlow(string s)
public void Append(char c, int count)
public void Append(Char* value, int length)
public void Append(ReadOnlySpan`1<char> value)
public Span`1<char> AppendSpan(int length)
private void GrowAndAppend(char c)
private void Grow(int additionalCapacityBeyondPos)
public void Dispose()
}
