public class ObjectStream.ConnectionExceptionEventHandler`2 : MulticastDelegate {
    public ConnectionExceptionEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(ObjectStreamConnection`2<TRead, TWrite> connection, Exception exception);
    public virtual IAsyncResult BeginInvoke(ObjectStreamConnection`2<TRead, TWrite> connection, Exception exception, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class ObjectStream.ConnectionFactory : object {
    public static ObjectStreamConnection`2<TRead, TWrite> CreateConnection(Stream inStream, Stream outStream);
}
public class ObjectStream.ConnectionMessageEventHandler`2 : MulticastDelegate {
    public ConnectionMessageEventHandler`2(object object, IntPtr method);
    public virtual void Invoke(ObjectStreamConnection`2<TRead, TWrite> connection, TRead message);
    public virtual IAsyncResult BeginInvoke(ObjectStreamConnection`2<TRead, TWrite> connection, TRead message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class ObjectStream.Data.CompilationResult : object {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    [CompilerGeneratedAttribute]

private Byte[] <Symbols>k__BackingField;
    
public string Name { get; public set; }
    
public Byte[] Data { get; public set; }
    
public Byte[] Symbols { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Symbols();
    [CompilerGeneratedAttribute]
public void set_Symbols(Byte[] value);
}
public class ObjectStream.Data.CompilerData : object {
    [CompilerGeneratedAttribute]

private bool <LoadDefaultReferences>k__BackingField;
    [CompilerGeneratedAttribute]

private string <OutputFile>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerPlatform <Platform>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerFile[] <ReferenceFiles>k__BackingField;
    [CompilerGeneratedAttribute]

private string <SdkVersion>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerFile[] <SourceFiles>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <StdLib>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerTarget <Target>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerLanguageVersion <Version>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]

private bool <Debug>k__BackingField;
    [CompilerGeneratedAttribute]

private String[] <Preprocessor>k__BackingField;
    
public bool LoadDefaultReferences { get; public set; }
    
public string OutputFile { get; public set; }
    
public CompilerPlatform Platform { get; public set; }
    
public CompilerFile[] ReferenceFiles { get; public set; }
    
public string SdkVersion { get; public set; }
    
public CompilerFile[] SourceFiles { get; public set; }
    
public bool StdLib { get; public set; }
    
public CompilerTarget Target { get; public set; }
    
public CompilerLanguageVersion Version { get; public set; }
    
public string Encoding { get; public set; }
    
public bool Debug { get; public set; }
    
public String[] Preprocessor { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_LoadDefaultReferences();
    [CompilerGeneratedAttribute]
public void set_LoadDefaultReferences(bool value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    [CompilerGeneratedAttribute]
public CompilerPlatform get_Platform();
    [CompilerGeneratedAttribute]
public void set_Platform(CompilerPlatform value);
    [CompilerGeneratedAttribute]
public CompilerFile[] get_ReferenceFiles();
    [CompilerGeneratedAttribute]
public void set_ReferenceFiles(CompilerFile[] value);
    [CompilerGeneratedAttribute]
public string get_SdkVersion();
    [CompilerGeneratedAttribute]
public void set_SdkVersion(string value);
    [CompilerGeneratedAttribute]
public CompilerFile[] get_SourceFiles();
    [CompilerGeneratedAttribute]
public void set_SourceFiles(CompilerFile[] value);
    [CompilerGeneratedAttribute]
public bool get_StdLib();
    [CompilerGeneratedAttribute]
public void set_StdLib(bool value);
    [CompilerGeneratedAttribute]
public CompilerTarget get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(CompilerTarget value);
    [CompilerGeneratedAttribute]
public CompilerLanguageVersion get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(CompilerLanguageVersion value);
    [CompilerGeneratedAttribute]
public string get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(string value);
    [CompilerGeneratedAttribute]
public bool get_Debug();
    [CompilerGeneratedAttribute]
public void set_Debug(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Preprocessor();
    [CompilerGeneratedAttribute]
public void set_Preprocessor(String[] value);
}
public class ObjectStream.Data.CompilerFile : object {
    
internal static Dictionary`2<string, CompilerFile> FileCache;
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private Byte[] <Data>k__BackingField;
    
internal DateTime LastRead;
    
internal bool KeepCached;
    
public string Name { get; public set; }
    
public Byte[] Data { get; public set; }
    internal CompilerFile(string name, Byte[] data);
    internal CompilerFile(string directory, string name);
    internal CompilerFile(string path);
    private static CompilerFile();
    public static CompilerFile CachedReadFile(string directory, string fileName, Byte[] data);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Byte[] get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(Byte[] value);
}
public enum ObjectStream.Data.CompilerLanguageVersion : Enum {
    
public int value__;
    
public static CompilerLanguageVersion Latest;
    
public static CompilerLanguageVersion V16;
    
public static CompilerLanguageVersion V15;
    
public static CompilerLanguageVersion V14;
    
public static CompilerLanguageVersion V13;
    
public static CompilerLanguageVersion V12;
    
public static CompilerLanguageVersion V11;
    
public static CompilerLanguageVersion V10;
    
public static CompilerLanguageVersion V9;
    
public static CompilerLanguageVersion V8;
    
public static CompilerLanguageVersion V7;
    
public static CompilerLanguageVersion V6;
    
public static CompilerLanguageVersion V5;
    
public static CompilerLanguageVersion V4;
    
public static CompilerLanguageVersion V3;
    
public static CompilerLanguageVersion V2;
    
public static CompilerLanguageVersion V1;
    
public static CompilerLanguageVersion Preview;
}
public class ObjectStream.Data.CompilerMessage : object {
    [CompilerGeneratedAttribute]

private object <Data>k__BackingField;
    [CompilerGeneratedAttribute]

private object <ExtraData>k__BackingField;
    [CompilerGeneratedAttribute]

private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]

private CompilerMessageType <Type>k__BackingField;
    
public object Data { get; public set; }
    
public object ExtraData { get; public set; }
    
public int Id { get; public set; }
    
public CompilerMessageType Type { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Data();
    [CompilerGeneratedAttribute]
public void set_Data(object value);
    [CompilerGeneratedAttribute]
public object get_ExtraData();
    [CompilerGeneratedAttribute]
public void set_ExtraData(object value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public CompilerMessageType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(CompilerMessageType value);
}
public enum ObjectStream.Data.CompilerMessageType : Enum {
    
public int value__;
    
public static CompilerMessageType Assembly;
    
public static CompilerMessageType Compile;
    
public static CompilerMessageType Error;
    
public static CompilerMessageType Exit;
    
public static CompilerMessageType Ready;
}
public enum ObjectStream.Data.CompilerPlatform : Enum {
    
public int value__;
    
public static CompilerPlatform AnyCPU;
    
public static CompilerPlatform AnyCPU32Preferred;
    
public static CompilerPlatform Arm;
    
public static CompilerPlatform X86;
    
public static CompilerPlatform X64;
    
public static CompilerPlatform IA64;
}
public enum ObjectStream.Data.CompilerTarget : Enum {
    
public int value__;
    
public static CompilerTarget Library;
    
public static CompilerTarget Exe;
    
public static CompilerTarget Module;
    
public static CompilerTarget WinExe;
}
public class ObjectStream.IO.BindChanger : SerializationBinder {
    public virtual Type BindToType(string assemblyName, string typeName);
}
public class ObjectStream.IO.ObjectStreamWrapper`1 : ObjectStreamWrapper`2<TReadWrite, TReadWrite> {
    public ObjectStreamWrapper`1(Stream inStream, Stream outStream);
}
public class ObjectStream.IO.ObjectStreamWrapper`2 : object {
    
private BinaryFormatter _binaryFormatter;
    
private Stream _inStream;
    
private Stream _outStream;
    
private bool _run;
    
public bool CanRead { get; }
    
public bool CanWrite { get; }
    public ObjectStreamWrapper`2(Stream inStream, Stream outStream);
    public bool get_CanRead();
    public bool get_CanWrite();
    public void Close();
    public TRead ReadObject();
    private int ReadLength();
    private TRead ReadObject(int len);
    public void WriteObject(TWrite obj);
    private Byte[] Serialize(TWrite obj);
    private void WriteLength(int len);
    private void WriteObject(Byte[] data);
    private void Flush();
}
public class ObjectStream.ObjectStreamClient`1 : ObjectStreamClient`2<TReadWrite, TReadWrite> {
    public ObjectStreamClient`1(Stream inStream, Stream outStream);
}
public class ObjectStream.ObjectStreamClient`2 : object {
    
private Stream _inStream;
    
private Stream _outStream;
    
private ObjectStreamConnection`2<TRead, TWrite> _connection;
    [CompilerGeneratedAttribute]

private ConnectionMessageEventHandler`2<TRead, TWrite> Message;
    [CompilerGeneratedAttribute]

private StreamExceptionEventHandler Error;
    public ObjectStreamClient`2(Stream inStream, Stream outStream);
    [CompilerGeneratedAttribute]
public void add_Message(ConnectionMessageEventHandler`2<TRead, TWrite> value);
    [CompilerGeneratedAttribute]
public void remove_Message(ConnectionMessageEventHandler`2<TRead, TWrite> value);
    [CompilerGeneratedAttribute]
public void add_Error(StreamExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Error(StreamExceptionEventHandler value);
    public void Start();
    public void PushMessage(TWrite message);
    public void Stop();
    private void ListenSync();
    private void OnReceiveMessage(ObjectStreamConnection`2<TRead, TWrite> connection, TRead message);
    private void ConnectionOnError(ObjectStreamConnection`2<TRead, TWrite> connection, Exception exception);
    private void OnError(Exception exception);
}
internal static class ObjectStream.ObjectStreamClientFactory : object {
    public static ObjectStreamWrapper`2<TRead, TWrite> Connect(Stream inStream, Stream outStream);
}
public class ObjectStream.ObjectStreamConnection`2 : object {
    
private ObjectStreamWrapper`2<TRead, TWrite> _streamWrapper;
    
private Queue`1<TWrite> _writeQueue;
    
private AutoResetEvent _writeSignal;
    [CompilerGeneratedAttribute]

private ConnectionMessageEventHandler`2<TRead, TWrite> ReceiveMessage;
    [CompilerGeneratedAttribute]

private ConnectionExceptionEventHandler`2<TRead, TWrite> Error;
    internal ObjectStreamConnection`2(Stream inStream, Stream outStream);
    [CompilerGeneratedAttribute]
public void add_ReceiveMessage(ConnectionMessageEventHandler`2<TRead, TWrite> value);
    [CompilerGeneratedAttribute]
public void remove_ReceiveMessage(ConnectionMessageEventHandler`2<TRead, TWrite> value);
    [CompilerGeneratedAttribute]
public void add_Error(ConnectionExceptionEventHandler`2<TRead, TWrite> value);
    [CompilerGeneratedAttribute]
public void remove_Error(ConnectionExceptionEventHandler`2<TRead, TWrite> value);
    public void Open();
    public void PushMessage(TWrite message);
    public void Close();
    private void CloseImpl();
    private void OnError(Exception exception);
    private void ReadStream();
    private void WriteStream();
}
public class ObjectStream.StreamExceptionEventHandler : MulticastDelegate {
    public StreamExceptionEventHandler(object object, IntPtr method);
    public virtual void Invoke(Exception exception);
    public virtual IAsyncResult BeginInvoke(Exception exception, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class ObjectStream.Threading.Worker : object {
    [CompilerGeneratedAttribute]

private WorkerExceptionEventHandler Error;
    [CompilerGeneratedAttribute]
public void add_Error(WorkerExceptionEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_Error(WorkerExceptionEventHandler value);
    public void DoWork(Action action);
    private void DoWorkImpl(object oAction);
    private void Fail(Exception exception);
    private void Callback(Action action);
}
internal class ObjectStream.Threading.WorkerExceptionEventHandler : MulticastDelegate {
    public WorkerExceptionEventHandler(object object, IntPtr method);
    public virtual void Invoke(Exception exception);
    public virtual IAsyncResult BeginInvoke(Exception exception, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class ObjectStream.Threading.WorkerSucceededEventHandler : MulticastDelegate {
    public WorkerSucceededEventHandler(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Oxide.Core.CSharp.DirectCallMethod : object {
    
private ModuleDefinition module;
    
private TypeDefinition type;
    
private MethodDefinition method;
    
private MethodBody body;
    
private Instruction endInstruction;
    
private Dictionary`2<Instruction, Node> jumpToEdgePlaceholderTargets;
    
private List`1<Instruction> jumpToEndPlaceholders;
    
private Dictionary`2<string, MethodDefinition> hookMethods;
    
private MethodReference getLength;
    
private MethodReference getChars;
    
private MethodReference isNullOrEmpty;
    
private MethodReference stringEquals;
    
private string hook_attribute;
    public DirectCallMethod(ModuleDefinition module, TypeDefinition type, ReaderParameters readerParameters);
    private bool IsHookMethod(MethodDefinition method);
    private void BuildNode(Node node, int edge_number);
    private void CallMethod(MethodDefinition method);
    private Instruction Return(bool value);
    private void JumpToEdge(Node node);
    private void JumpToEnd();
    private Instruction AddInstruction(OpCode opcode);
    private Instruction AddInstruction(OpCode opcode, Instruction instruction);
    private Instruction AddInstruction(OpCode opcode, MethodReference method_reference);
    private Instruction AddInstruction(OpCode opcode, TypeReference type_reference);
    private Instruction AddInstruction(OpCode opcode, int value);
    private Instruction AddInstruction(OpCode opcode, VariableDefinition value);
    private Instruction AddInstruction(Instruction instruction);
    public VariableDefinition AddVariable(TypeReference typeRef, string name);
    private Instruction Ldc_I4_n(int n);
}
internal class Oxide.CSharp.AssemblyResolver : DefaultAssemblyResolver {
    
internal AssemblyDefinition mscorlib;
    public virtual AssemblyDefinition Resolve(AssemblyNameReference name, ReaderParameters parameters);
}
internal class Oxide.CSharp.CompilerService : object {
    
private static Regex SymbolEscapeRegex;
    
private static string baseUrl;
    
private Hash`2<int, Compilation> compilations;
    
private Queue`1<CompilerMessage> messageQueue;
    
private Process process;
    
private Int32 modreq(System.Runtime.CompilerServices.IsVolatile) lastId;
    
private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) ready;
    
private TimerInstance idleTimer;
    
private ObjectStreamClient`1<CompilerMessage> client;
    
private string filePath;
    
private string remoteName;
    
private string compilerBasicArguments;
    
private static Regex fileErrorRegex;
    
private float startTime;
    
private String[] preprocessor;
    
public bool Installed { get; }
    public CompilerService(Extension extension);
    private static CompilerService();
    public bool get_Installed();
    private void ExpireFileCache();
    internal bool Precheck();
    private bool Start();
    internal void Stop(bool synchronous, string reason);
    private void OnMessage(ObjectStreamConnection`2<CompilerMessage, CompilerMessage> connection, CompilerMessage message);
    private void OnError(Exception exception);
    private void OnProcessExited(object sender, EventArgs eventArgs);
    private void ResetIdleTimer();
    internal void Compile(CompilablePlugin[] plugins, Action`1<Compilation> callback);
    internal void OnCompileTimeout();
    private void EnqueueCompilation(Compilation compilation);
    private void OnCompilerFailed(string reason);
    private static bool SetFilePermissions(string filePath);
    private static bool DownloadFile(string url, string path, int retries);
    private static bool TryDownload(string url, int retries, Int32& current, Nullable`1<DateTime> lastModified, Byte[]& data, Int32& code, Boolean& newerFound, String& md5);
    private static void Log(LogType type, string message, Exception exception);
    private string GetCompilerVersion();
    private static string GenerateFileHash(string file);
    private string EscapeSymbolName(string name);
    [CompilerGeneratedAttribute]
private void <OnMessage>b__22_0();
    [CompilerGeneratedAttribute]
private void <OnProcessExited>b__24_0();
    [CompilerGeneratedAttribute]
private void <ResetIdleTimer>b__25_0();
}
public interface Oxide.CSharp.Patching.IPatch {
    public abstract virtual void Patch(PatchContext context);
}
public class Oxide.CSharp.Patching.PatchContext : object {
    [CompilerGeneratedAttribute]

private AssemblyDefinition <Assembly>k__BackingField;
    [CompilerGeneratedAttribute]

private List`1<PatchValidationAttribute> <PatchValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private int <TotalPatches>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ContextPatches>k__BackingField;
    
public AssemblyDefinition Assembly { get; }
    
public List`1<PatchValidationAttribute> PatchValidators { get; internal set; }
    
public int TotalPatches { get; internal set; }
    
public int ContextPatches { get; internal set; }
    public PatchContext(AssemblyDefinition assembly);
    [CompilerGeneratedAttribute]
public AssemblyDefinition get_Assembly();
    [CompilerGeneratedAttribute]
public List`1<PatchValidationAttribute> get_PatchValidators();
    [CompilerGeneratedAttribute]
internal void set_PatchValidators(List`1<PatchValidationAttribute> value);
    [CompilerGeneratedAttribute]
public int get_TotalPatches();
    [CompilerGeneratedAttribute]
internal void set_TotalPatches(int value);
    [CompilerGeneratedAttribute]
public int get_ContextPatches();
    [CompilerGeneratedAttribute]
internal void set_ContextPatches(int value);
    public void IncrementPatches();
}
public static class Oxide.CSharp.Patching.Patcher : object {
    [CompilerGeneratedAttribute]

private static Type <PatchType>k__BackingField;
    [CompilerGeneratedAttribute]

private static Type <PatchValidationType>k__BackingField;
    
private static Dictionary`2<Type, List`1<PatchValidationAttribute>> Patches;
    
private static Type PatchType { get; }
    
private static Type PatchValidationType { get; }
    private static Patcher();
    [CompilerGeneratedAttribute]
private static Type get_PatchType();
    [CompilerGeneratedAttribute]
private static Type get_PatchValidationType();
    private static void GetPatches(Assembly module, Dictionary`2& patchTypes);
    private static void GetPatches(Assembly[] modules, Dictionary`2& patchTypes);
    public static bool Run(AssemblyDefinition module);
    public static Byte[] Run(Byte[] data, Boolean& patched);
    public static List`1<PatchValidationAttribute> GetValidationRules(Object[] attributes);
}
[HasNameAttribute("0Harmony", "2", "3")]
[HasNameAttribute("System", "2", "3")]
[HasNameAttribute("Microsoft", "2", "3")]
[HasNameAttribute("mscorlib", "2", "3")]
[HasNameAttribute("Unity", "2", "3")]
[HasNameAttribute("Mono", "2", "3")]
[HasNameAttribute("netstandard", "2", "3")]
[HasNameAttribute("Oxide", "2", "3")]
[HasNameAttribute("MySql.Data", "2", "3")]
[HasEnvironmentalVariableAttribute("AllowPublicize")]
public class Oxide.CSharp.Patching.Publicizer : TraversePatch {
    [HasVisabilityAttribute("False")]
[IsSpecialNameAttribute]
[HasAttributeAttribute("CompilerGeneratedAttribute", "4", "3")]
[HasAttributeAttribute("CompilerServices.ExtensionAttribute", "4", "3")]
protected virtual bool OnMemberDefinition(IMemberDefinition member);
    protected virtual bool OnTypeDefinition(TypeDefinition type);
    protected virtual bool OnFieldDefinition(FieldDefinition field);
    protected virtual bool OnPropertyDefinition(PropertyDefinition property);
    protected virtual bool OnMethodDefinition(MethodDefinition method);
}
public abstract class Oxide.CSharp.Patching.TraversePatch : object {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <TypeValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <PropertyValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <FieldValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <MethodValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <EventValidators>k__BackingField;
    [CompilerGeneratedAttribute]

private IEnumerable`1<PatchValidationAttribute> <MemberValidators>k__BackingField;
    
protected string Name { get; }
    
protected IEnumerable`1<PatchValidationAttribute> TypeValidators { get; }
    
protected IEnumerable`1<PatchValidationAttribute> PropertyValidators { get; }
    
protected IEnumerable`1<PatchValidationAttribute> FieldValidators { get; }
    
protected IEnumerable`1<PatchValidationAttribute> MethodValidators { get; }
    
protected IEnumerable`1<PatchValidationAttribute> EventValidators { get; }
    
protected IEnumerable`1<PatchValidationAttribute> MemberValidators { get; }
    [CompilerGeneratedAttribute]
protected virtual string get_Name();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_TypeValidators();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_PropertyValidators();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_FieldValidators();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_MethodValidators();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_EventValidators();
    [CompilerGeneratedAttribute]
protected IEnumerable`1<PatchValidationAttribute> get_MemberValidators();
    public sealed virtual void Patch(PatchContext context);
    private void RecurseType(TypeDefinition type, PatchContext context);
    protected virtual bool OnMemberDefinition(IMemberDefinition member);
    protected virtual bool OnTypeDefinition(TypeDefinition type);
    protected virtual bool OnPropertyDefinition(PropertyDefinition property);
    protected virtual bool OnFieldDefinition(FieldDefinition field);
    protected virtual bool OnMethodDefinition(MethodDefinition method);
    protected virtual bool OnEventDefinition(EventDefinition event);
    protected bool RunValidation(IMemberDefinition member, IEnumerable`1<PatchValidationAttribute> validations);
    protected void Log(string message, LogType logType, Exception e);
    private static IEnumerable`1<PatchValidationAttribute> GetValidationRules(string methodName, Type type);
}
public class Oxide.CSharp.Patching.Validation.HasAttributeAttribute : HasNameAttribute {
    public HasAttributeAttribute(string rule, StringValidationType type, StringComparison comparison);
    protected virtual bool IsValid(object item);
    [CompilerGeneratedAttribute]
private bool <IsValid>b__1_0(CustomAttribute a);
    [CompilerGeneratedAttribute]
private bool <IsValid>b__1_1(CustomAttribute a);
    [CompilerGeneratedAttribute]
private bool <IsValid>b__1_2(CustomAttribute a);
    [CompilerGeneratedAttribute]
private bool <IsValid>b__1_3(CustomAttribute a);
}
public class Oxide.CSharp.Patching.Validation.HasEnvironmentalVariableAttribute : PatchValidationAttribute {
    [CompilerGeneratedAttribute]

private string <VariableName>k__BackingField;
    
private string VariableName { get; }
    public HasEnvironmentalVariableAttribute(string rule);
    [CompilerGeneratedAttribute]
private string get_VariableName();
    protected virtual bool IsValid(object item);
}
public class Oxide.CSharp.Patching.Validation.HasNameAttribute : PatchValidationAttribute {
    [CompilerGeneratedAttribute]

private string <ValidationRule>k__BackingField;
    [CompilerGeneratedAttribute]

private StringValidationType <ValidationType>k__BackingField;
    [CompilerGeneratedAttribute]

private StringComparison <ValidationComparison>k__BackingField;
    
public string ValidationRule { get; }
    
public StringValidationType ValidationType { get; }
    
public StringComparison ValidationComparison { get; }
    public HasNameAttribute(string rule, StringValidationType type, StringComparison comparison);
    [CompilerGeneratedAttribute]
public string get_ValidationRule();
    [CompilerGeneratedAttribute]
public StringValidationType get_ValidationType();
    [CompilerGeneratedAttribute]
public StringComparison get_ValidationComparison();
    protected virtual bool IsValid(object item);
}
public class Oxide.CSharp.Patching.Validation.HasVisabilityAttribute : PatchValidationAttribute {
    [CompilerGeneratedAttribute]

private bool <IsPublic>k__BackingField;
    [CompilerGeneratedAttribute]

private Nullable`1<bool> <IsStatic>k__BackingField;
    
public bool IsPublic { get; }
    
public Nullable`1<bool> IsStatic { get; public set; }
    public HasVisabilityAttribute(bool isPublic);
    [CompilerGeneratedAttribute]
public bool get_IsPublic();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsStatic();
    [CompilerGeneratedAttribute]
public void set_IsStatic(Nullable`1<bool> value);
    protected virtual bool IsValid(object item);
}
public class Oxide.CSharp.Patching.Validation.IsHideBySig : PatchValidationAttribute {
    protected virtual bool IsValid(object item);
}
public class Oxide.CSharp.Patching.Validation.IsSpecialNameAttribute : PatchValidationAttribute {
    protected virtual bool IsValid(object item);
}
[AttributeUsageAttribute("1092")]
public abstract class Oxide.CSharp.Patching.Validation.PatchValidationAttribute : Attribute {
    [CompilerGeneratedAttribute]

private bool <InverseCheck>k__BackingField;
    
public bool InverseCheck { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_InverseCheck();
    [CompilerGeneratedAttribute]
public void set_InverseCheck(bool value);
    protected abstract virtual bool IsValid(object item);
    public bool Validate(object item);
    protected static T GetPropertyValue(object instance, string name, T defaultValue, BindingFlags flags);
}
public enum Oxide.CSharp.Patching.Validation.StringValidationType : Enum {
    
public int value__;
    
public static StringValidationType Equals;
    
public static StringValidationType Contains;
    
public static StringValidationType StartsWith;
    
public static StringValidationType EndsWith;
    
public static StringValidationType RegularExpression;
}
[FlagsAttribute]
public enum Oxide.CSharp.Patching.Validation.VersionCompareMethod : Enum {
    
public int value__;
    
public static VersionCompareMethod Equality;
    
public static VersionCompareMethod GreaterThan;
    
public static VersionCompareMethod LessThan;
    
public static VersionCompareMethod GreaterThanOrEqualTo;
    
public static VersionCompareMethod LessThanOrEqualTo;
}
[ExtensionAttribute]
public static class Oxide.ExtensionMethods : object {
    [ExtensionAttribute]
public static void WriteDebug(Logger logger, LogType level, Nullable`1<LogEvent> event, string source, string message, Exception exception);
}
public class Oxide.Logging.LogEvent : ValueType {
    [CompilerGeneratedAttribute]

private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]

private static LogEvent <Compile>k__BackingField;
    [CompilerGeneratedAttribute]

private static LogEvent <HookCall>k__BackingField;
    [CompilerGeneratedAttribute]

private static LogEvent <Patch>k__BackingField;
    
public int Id { get; }
    
public string Name { get; }
    
public static LogEvent Compile { get; }
    
public static LogEvent HookCall { get; }
    
public static LogEvent Patch { get; }
    internal LogEvent(int id, string name);
    private static LogEvent();
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public static LogEvent get_Compile();
    [CompilerGeneratedAttribute]
public static LogEvent get_HookCall();
    [CompilerGeneratedAttribute]
public static LogEvent get_Patch();
}
[AttributeUsageAttribute("64")]
public class Oxide.Plugins.ChatCommandAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Command>k__BackingField;
    
public string Command { get; private set; }
    public ChatCommandAttribute(string command);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
}
[AttributeUsageAttribute("64")]
public class Oxide.Plugins.CommandAttribute : Attribute {
    [CompilerGeneratedAttribute]

private String[] <Commands>k__BackingField;
    
public String[] Commands { get; }
    public CommandAttribute(String[] commands);
    [CompilerGeneratedAttribute]
public String[] get_Commands();
}
public class Oxide.Plugins.CompilableFile : object {
    
private static Timer timer;
    
private static object compileLock;
    
public CSharpExtension Extension;
    
public CSharpPluginLoader Loader;
    
public string Name;
    
public string Directory;
    
public string ScriptName;
    
public string ScriptPath;
    
public String[] ScriptLines;
    
public Encoding ScriptEncoding;
    
public HashSet`1<string> Requires;
    
public HashSet`1<string> References;
    
public HashSet`1<string> IncludePaths;
    
public string CompilerErrors;
    
public CompiledAssembly CompiledAssembly;
    
public DateTime LastModifiedAt;
    
public DateTime LastCachedScriptAt;
    
public DateTime LastCompiledAt;
    
public bool IsCompilationNeeded;
    
protected Action`1<CSharpPlugin> LoadCallback;
    
protected Action`1<bool> CompileCallback;
    
protected float CompilationQueuedAt;
    
private TimerInstance timeoutTimer;
    
public Byte[] ScriptSource { get; }
    public CompilableFile(CSharpExtension extension, CSharpPluginLoader loader, string directory, string name);
    private static CompilableFile();
    public Byte[] get_ScriptSource();
    internal void Compile(Action`1<bool> callback);
    internal virtual void OnCompilationStarted();
    internal void OnCompilationSucceeded(CompiledAssembly compiledAssembly);
    internal void OnCompilationFailed();
    internal void OnCompilationTimeout();
    internal bool HasBeenModified();
    internal void CheckLastModificationTime();
    internal DateTime GetLastModificationTime();
    protected virtual void OnLoadingStarted();
    protected virtual void OnCompilationRequested();
    protected virtual void InitFailed(string message);
    [CompilerGeneratedAttribute]
private void <OnCompilationStarted>b__27_0();
}
public class Oxide.Plugins.CompilablePlugin : CompilableFile {
    
private static object compileLock;
    
public CompiledAssembly LastGoodAssembly;
    
public bool IsLoading;
    public CompilablePlugin(CSharpExtension extension, CSharpPluginLoader loader, string directory, string name);
    private static CompilablePlugin();
    protected virtual void OnLoadingStarted();
    protected virtual void OnCompilationRequested();
    internal void LoadPlugin(Action`1<CSharpPlugin> callback);
    internal virtual void OnCompilationStarted();
    protected virtual void InitFailed(string message);
}
internal class Oxide.Plugins.Compilation : object {
    
public static Compilation Current;
    
internal int id;
    
internal string name;
    
internal Action`1<Compilation> callback;
    
internal ConcurrentHashSet`1<CompilablePlugin> queuedPlugins;
    
internal HashSet`1<CompilablePlugin> plugins;
    
internal float startedAt;
    
internal float endedAt;
    
internal Hash`2<string, CompilerFile> references;
    
internal HashSet`1<string> referencedPlugins;
    
internal CompiledAssembly compiledAssembly;
    
private string includePath;
    
private String[] extensionNames;
    
internal float duration { get; }
    internal Compilation(int id, Action`1<Compilation> callback, CompilablePlugin[] plugins);
    internal float get_duration();
    internal void Started();
    internal void Completed(Byte[] rawAssembly, Byte[] symbols);
    internal void Add(CompilablePlugin plugin);
    internal bool IncludesRequiredPlugin(string name);
    internal void Prepare(Action callback);
    private void PreparseScript(CompilablePlugin plugin);
    private void ResolveReferences(CompilablePlugin plugin);
    private void AddDependency(CompilablePlugin plugin);
    private void AddReference(CompilablePlugin plugin, string assemblyName);
    private void AddReference(CompilablePlugin plugin, AssemblyName reference);
    private bool CacheScriptLines(CompilablePlugin plugin);
    private void CacheModifiedScripts();
    private void RemovePlugin(CompilablePlugin plugin);
    [CompilerGeneratedAttribute]
private void <Completed>b__17_0();
}
public class Oxide.Plugins.CompiledAssembly : object {
    
public CompilablePlugin[] CompilablePlugins;
    
public String[] PluginNames;
    
public string Name;
    
public DateTime CompiledAt;
    
public Byte[] RawAssembly;
    
public Byte[] Symbols;
    
public Byte[] PatchedAssembly;
    
public float Duration;
    
public Assembly LoadedAssembly;
    
public bool IsLoading;
    
private List`1<Action`1<bool>> loadCallbacks;
    
private bool isPatching;
    
private bool isLoaded;
    
public bool IsBatch { get; }
    public CompiledAssembly(string name, CompilablePlugin[] plugins, Byte[] rawAssembly, float duration, Byte[] symbols);
    public bool get_IsBatch();
    public void LoadAssembly(Action`1<bool> callback);
    private void ValidateAssembly(Action`1<Byte[]> callback);
    public bool IsOutdated();
    [CompilerGeneratedAttribute]
private void <LoadAssembly>b__16_0(Byte[] rawAssembly);
    [CompilerGeneratedAttribute]
private bool <IsOutdated>b__18_0(CompilablePlugin pl);
}
[AttributeUsageAttribute("64")]
public class Oxide.Plugins.ConsoleCommandAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Command>k__BackingField;
    
public string Command { get; private set; }
    public ConsoleCommandAttribute(string command);
    [CompilerGeneratedAttribute]
public string get_Command();
    [CompilerGeneratedAttribute]
private void set_Command(string value);
}
public class Oxide.Plugins.CovalencePlugin : CSharpPlugin {
    
private static Covalence covalence;
    
protected string game;
    
protected IPlayerManager players;
    
protected IServer server;
    private static CovalencePlugin();
    protected void Log(string format, Object[] args);
    protected void LogWarning(string format, Object[] args);
    protected void LogError(string format, Object[] args);
    public virtual void HandleAddedToManager(PluginManager manager);
}
public class Oxide.Plugins.CSharpExtension : Extension {
    
internal static Assembly Assembly;
    
internal static AssemblyName AssemblyName;
    
internal static VersionNumber AssemblyVersion;
    
internal static string AssemblyAuthors;
    [CompilerGeneratedAttribute]

private FSWatcher <Watcher>k__BackingField;
    
private CSharpPluginLoader loader;
    
public bool IsCoreExtension { get; }
    
public string Name { get; }
    
public string Author { get; }
    
public VersionNumber Version { get; }
    
public FSWatcher Watcher { get; private set; }
    public CSharpExtension(ExtensionManager manager);
    private static CSharpExtension();
    public virtual bool get_IsCoreExtension();
    public virtual string get_Name();
    public virtual string get_Author();
    public virtual VersionNumber get_Version();
    [CompilerGeneratedAttribute]
public FSWatcher get_Watcher();
    [CompilerGeneratedAttribute]
private void set_Watcher(FSWatcher value);
    public virtual void Load();
    public virtual void LoadPluginWatchers(string pluginDirectory);
    public virtual void OnModLoad();
    public virtual void OnShutdown();
    private void OnFrame(float delta);
}
public abstract class Oxide.Plugins.CSharpPlugin : CSPlugin {
    
public FSWatcher Watcher;
    
protected Covalence covalence;
    
protected Lang lang;
    
protected Plugins plugins;
    
protected Permission permission;
    
protected WebRequests webrequest;
    
protected PluginTimers timer;
    
protected HashSet`1<PluginFieldInfo> onlinePlayerFields;
    
private Dictionary`2<string, MemberInfo> pluginReferenceMembers;
    
private bool hookDispatchFallback;
    [CompilerGeneratedAttribute]

private bool <HookedOnFrame>k__BackingField;
    
private static object _logFileLock;
    
public bool HookedOnFrame { get; private set; }
    private static CSharpPlugin();
    [CompilerGeneratedAttribute]
public bool get_HookedOnFrame();
    [CompilerGeneratedAttribute]
private void set_HookedOnFrame(bool value);
    public virtual bool SetPluginInfo(string name, string path);
    public virtual void HandleAddedToManager(PluginManager manager);
    public virtual void HandleRemovedFromManager(PluginManager manager);
    public virtual bool DirectCallHook(string name, Object& ret, Object[] args);
    protected virtual object InvokeMethod(HookMethod method, Object[] args);
    public void SetFailState(string reason);
    private void OnPluginLoaded(Plugin plugin);
    private void OnPluginUnloaded(Plugin plugin);
    protected void Puts(string format, Object[] args);
    protected void PrintWarning(string format, Object[] args);
    protected void PrintError(string format, Object[] args);
    protected void LogToFile(string filename, string text, Plugin plugin, bool datedFilename, bool timestampPrefix);
    protected void NextFrame(Action callback);
    protected void NextTick(Action callback);
    protected void QueueWorkerThread(Action`1<object> callback);
}
public class Oxide.Plugins.CSharpPluginLoader : PluginLoader {
    
public static String[] DefaultReferences;
    
public static HashSet`1<string> PluginReferences;
    
public static CSharpPluginLoader Instance;
    
private static CSharpExtension extension;
    
private static Dictionary`2<string, CompilablePlugin> plugins;
    
private static String[] AssemblyBlacklist;
    [CompilerGeneratedAttribute]

private Timer <timer>k__BackingField;
    
private List`1<CompilablePlugin> compilationQueue;
    
private CompilerService compiler;
    
private Timer timer { get; }
    
public string FileExtension { get; }
    public CSharpPluginLoader(CSharpExtension extension);
    private static CSharpPluginLoader();
    [CompilerGeneratedAttribute]
private Timer get_timer();
    public static CompilablePlugin GetCompilablePlugin(string directory, string name);
    public virtual string get_FileExtension();
    public void OnModLoaded();
    [IteratorStateMachineAttribute("Oxide.Plugins.CSharpPluginLoader/<ScanDirectory>d__16")]
public virtual IEnumerable`1<string> ScanDirectory(string directory);
    public virtual Plugin Load(string directory, string name);
    public virtual void Reload(string directory, string name);
    public virtual void Unloading(Plugin pluginBase);
    public void Load(CompilablePlugin plugin);
    public void CompilationRequested(CompilablePlugin plugin);
    public void PluginLoadingStarted(CompilablePlugin plugin);
    private void PluginLoadingCompleted(CompilablePlugin plugin);
    private void CompileAssembly(CompilablePlugin[] plugins);
    public void OnShutdown();
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private IEnumerable`1<string> <>n__0(string directory);
    [CompilerGeneratedAttribute]
private void <CompilationRequested>b__21_0();
    [CompilerGeneratedAttribute]
private void <CompileAssembly>b__24_0(Compilation compilation);
}
[AttributeUsageAttribute("4")]
public class Oxide.Plugins.DescriptionAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Description>k__BackingField;
    
public string Description { get; }
    public DescriptionAttribute(string description);
    [CompilerGeneratedAttribute]
public string get_Description();
}
[DefaultMemberAttribute("Item")]
public class Oxide.Plugins.Hash`2 : object {
    
private IDictionary`2<TKey, TValue> dictionary;
    
public TValue Item { get; public set; }
    
public ICollection`1<TKey> Keys { get; }
    
public ICollection`1<TValue> Values { get; }
    
public int Count { get; }
    
public bool IsReadOnly { get; }
    public Hash`2(IEqualityComparer`1<TKey> comparer);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int index);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[AttributeUsageAttribute("4")]
public class Oxide.Plugins.InfoAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]

private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]

private VersionNumber <Version>k__BackingField;
    [CompilerGeneratedAttribute]

private int <ResourceId>k__BackingField;
    
public string Title { get; }
    
public string Author { get; }
    
public VersionNumber Version { get; private set; }
    
public int ResourceId { get; public set; }
    public InfoAttribute(string Title, string Author, string Version);
    public InfoAttribute(string Title, string Author, double Version);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public VersionNumber get_Version();
    [CompilerGeneratedAttribute]
private void set_Version(VersionNumber value);
    [CompilerGeneratedAttribute]
public int get_ResourceId();
    [CompilerGeneratedAttribute]
public void set_ResourceId(int value);
    private void SetVersion(string version);
}
[AttributeUsageAttribute("256")]
public class Oxide.Plugins.OnlinePlayersAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
public class Oxide.Plugins.PermissionAttribute : Attribute {
    [CompilerGeneratedAttribute]

private String[] <Permission>k__BackingField;
    
public String[] Permission { get; }
    public PermissionAttribute(string permission);
    [CompilerGeneratedAttribute]
public String[] get_Permission();
}
public class Oxide.Plugins.PluginLoadFailure : Exception {
    public PluginLoadFailure(string reason);
}
[AttributeUsageAttribute("384")]
public class Oxide.Plugins.PluginReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]

private string <Name>k__BackingField;
    
public string Name { get; }
    public PluginReferenceAttribute(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
}
public class Oxide.Plugins.PluginTimers : object {
    
private Timer timer;
    
private Plugin plugin;
    public PluginTimers(Plugin plugin);
    public Timer Once(float seconds, Action callback);
    public Timer In(float seconds, Action callback);
    public Timer Every(float interval, Action callback);
    public Timer Repeat(float interval, int repeats, Action callback);
    public void Destroy(Timer& timer);
}
public class Oxide.Plugins.Timer : object {
    
private TimerInstance instance;
    
public int Repetitions { get; }
    
public float Delay { get; }
    
public Action Callback { get; }
    
public bool Destroyed { get; }
    
public Plugin Owner { get; }
    public Timer(TimerInstance instance);
    public int get_Repetitions();
    public float get_Delay();
    public Action get_Callback();
    public bool get_Destroyed();
    public Plugin get_Owner();
    public void Reset(float delay, int repetitions);
    public void Destroy();
    public void DestroyToPool();
}
