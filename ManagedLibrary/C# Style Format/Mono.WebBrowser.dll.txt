internal Consts : object {
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public int MonoCorlibVersion
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
internal Mono.Mozilla.AsciiString : object {
private bool disposed
private nsStringContainer unmanagedContainer
private HandleRef handle
private string str
private bool dirty
public HandleRef Handle
public string String
public int Length
public void .ctor(string value)
protected void Finalize()
protected void Dispose(bool disposing)
public void Dispose()
public HandleRef get_Handle()
public string get_String()
public void set_String(string value)
public int get_Length()
public string ToString()
}
internal Mono.Mozilla.Base : object {
private Hashtable boundControls
private bool initialized
private object initLock
private string monoMozDir
private bool isInitialized()
private BindingInfo getBinding(IWebBrowser control)
public void Debug(int signal)
public bool Init(WebBrowser control, Platform platform)
public bool Bind(WebBrowser control, IntPtr handle, int width, int height)
public bool Create(IWebBrowser control)
public void Shutdown(IWebBrowser control)
public void Focus(IWebBrowser control, FocusOption focus)
public void Blur(IWebBrowser control)
public void Activate(IWebBrowser control)
public void Deactivate(IWebBrowser control)
public void Resize(IWebBrowser control, int width, int height)
public void Home(IWebBrowser control)
public nsIWebNavigation GetWebNavigation(IWebBrowser control)
public IntPtr StringInit()
public void StringFinish(HandleRef str)
public string StringGet(HandleRef str)
public void StringSet(HandleRef str, string text)
public object GetProxyForObject(IWebBrowser control, Guid iid, object obj)
public nsIServiceManager GetServiceManager(IWebBrowser control)
public string EvalScript(IWebBrowser control, string script)
private void gluezilla_debug(int signal)
private short gluezilla_init(Platform platform, Platform& mozPlatform)
private IntPtr gluezilla_bind(IntPtr events, IntPtr hwnd, int width, int height, string startDir, string dataDir, Platform platform)
private int gluezilla_createBrowserWindow(IntPtr instance)
private IntPtr gluezilla_shutdown(IntPtr instance)
private int gluezilla_focus(IntPtr instance, FocusOption focus)
private int gluezilla_blur(IntPtr instance)
private int gluezilla_activate(IntPtr instance)
private int gluezilla_deactivate(IntPtr instance)
private int gluezilla_resize(IntPtr instance, int width, int height)
private int gluezilla_home(IntPtr instance)
private nsIWebNavigation gluezilla_getWebNavigation(IntPtr instance)
private IntPtr gluezilla_stringInit()
private int gluezilla_stringFinish(HandleRef str)
private IntPtr gluezilla_stringGet(HandleRef str)
private void gluezilla_stringSet(HandleRef str, string text)
private void gluezilla_getProxyForObject(IntPtr instance, Guid iid, object obj, IntPtr& ret)
public UInt32 gluezilla_StringContainerInit(HandleRef aStr)
public void gluezilla_StringContainerFinish(HandleRef aStr)
public UInt32 gluezilla_StringGetData(HandleRef aStr, IntPtr& aBuf, Boolean& aTerm)
public UInt32 gluezilla_StringSetData(HandleRef aStr, string aBuf, UInt32 aCount)
public UInt32 gluezilla_CStringContainerInit(HandleRef aStr)
public void gluezilla_CStringContainerFinish(HandleRef aStr)
public UInt32 gluezilla_CStringGetData(HandleRef aStr, IntPtr& aBuf, Boolean& aTerm)
public UInt32 gluezilla_CStringSetData(HandleRef aStr, string aBuf, UInt32 aCount)
public nsIServiceManager gluezilla_getServiceManager2(IntPtr instance)
private IntPtr gluezilla_evalScript(IntPtr instance, string script)
}
internal Mono.Mozilla.Callback : object {
private WebBrowser owner
private string currentUri
private bool calledLoadStarted
public void .ctor(WebBrowser owner)
public void OnWidgetLoaded()
public void OnStateChange(nsIWebProgress progress, nsIRequest request, int status, UInt32 state)
public void OnProgress(nsIWebProgress progress, nsIRequest request, int currentTotalProgress, int maxTotalProgress)
public void OnLocationChanged(nsIWebProgress progress, nsIRequest request, nsIURI uri)
public void OnStatusChange(nsIWebProgress progress, nsIRequest request, string message, int status)
public void OnSecurityChange(nsIWebProgress progress, nsIRequest request, UInt32 status)
public bool OnClientDomKeyDown(KeyInfo keyInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientDomKeyUp(KeyInfo keyInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientDomKeyPress(KeyInfo keyInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseDown(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseUp(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseClick(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseDoubleClick(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseOver(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientMouseOut(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public bool OnClientActivate()
public bool OnClientFocus()
public bool OnClientBlur()
public bool OnCreateNewWindow()
public void OnAlert(IntPtr title, IntPtr text)
public bool OnAlertCheck(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState)
public bool OnConfirm(IntPtr title, IntPtr text)
public bool OnConfirmCheck(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState)
public bool OnConfirmEx(IntPtr title, IntPtr text, DialogButtonFlags flags, IntPtr title0, IntPtr title1, IntPtr title2, IntPtr chkMsg, Boolean& chkState, Int32& retVal)
public bool OnPrompt(IntPtr title, IntPtr text, IntPtr& retVal)
public bool OnPromptUsernameAndPassword(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& username, IntPtr& password)
public bool OnPromptPassword(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& password)
public bool OnSelect(IntPtr title, IntPtr text, UInt32 count, IntPtr list, Int32& retVal)
public void OnLoad()
public void OnUnload()
public void OnShowContextMenu(UInt32 contextFlags, nsIDOMEvent eve, nsIDOMNode node)
public void OnGeneric(string type)
}
internal Mono.Mozilla.Callback2 : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.Callback2String : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(string arg1)
public IAsyncResult BeginInvoke(string arg1, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackBinder : ValueType {
public CallbackVoid OnWidgetLoaded
public CallbackOnStateChange OnStateChange
public CallbackOnProgress OnProgress
public CallbackOnLocationChanged OnLocationChanged
public CallbackOnStatusChange OnStatusChange
public CallbackOnSecurityChange OnSecurityChange
public KeyCallback OnKeyDown
public KeyCallback OnKeyUp
public KeyCallback OnKeyPress
public MouseCallback OnMouseDown
public MouseCallback OnMouseUp
public MouseCallback OnMouseClick
public MouseCallback OnMouseDoubleClick
public MouseCallback OnMouseOver
public MouseCallback OnMouseOut
public Callback2 OnActivate
public Callback2 OnFocus
public Callback2 OnBlur
public CallbackPtrPtr OnAlert
public CallbackOnAlertCheck OnAlertCheck
public CallbackOnConfirm OnConfirm
public CallbackOnConfirmCheck OnConfirmCheck
public CallbackOnConfirmEx OnConfirmEx
public CallbackOnPrompt OnPrompt
public CallbackOnPromptUsernameAndPassword OnPromptUsernameAndPassword
public CallbackOnPromptPassword OnPromptPassword
public CallbackOnSelect OnSelect
public CallbackVoid OnLoad
public CallbackVoid OnUnload
public CallbackOnShowContextMenu OnShowContextMenu
public CallbackWString OnGeneric
internal void .ctor(Callback callback)
}
internal Mono.Mozilla.CallbackBool : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(bool val)
public IAsyncResult BeginInvoke(bool val, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackIntInt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(int arg1, int arg2)
public IAsyncResult BeginInvoke(int arg1, int arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackIntUint : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(int arg2, UInt32 arg3)
public IAsyncResult BeginInvoke(int arg2, UInt32 arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnAlertCheck : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, AsyncCallback callback, object object)
public bool EndInvoke(Boolean& chkState, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnConfirm : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnConfirmCheck : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, AsyncCallback callback, object object)
public bool EndInvoke(Boolean& chkState, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnConfirmEx : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, DialogButtonFlags flags, IntPtr title0, IntPtr title1, IntPtr title2, IntPtr chkMsg, Boolean& chkState, Int32& retVal)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, DialogButtonFlags flags, IntPtr title0, IntPtr title1, IntPtr title2, IntPtr chkMsg, Boolean& chkState, Int32& retVal, AsyncCallback callback, object object)
public bool EndInvoke(Boolean& chkState, Int32& retVal, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnLocationChanged : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIWebProgress progress, nsIRequest request, nsIURI uri)
public IAsyncResult BeginInvoke(nsIWebProgress progress, nsIRequest request, nsIURI uri, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnProgress : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIWebProgress progress, nsIRequest request, int arg2, int arg3)
public IAsyncResult BeginInvoke(nsIWebProgress progress, nsIRequest request, int arg2, int arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnPrompt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, IntPtr& retVal)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, IntPtr& retVal, AsyncCallback callback, object object)
public bool EndInvoke(IntPtr& retVal, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnPromptPassword : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& password)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& password, AsyncCallback callback, object object)
public bool EndInvoke(Boolean& chkState, IntPtr& password, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnPromptUsernameAndPassword : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& username, IntPtr& password)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, IntPtr chkMsg, Boolean& chkState, IntPtr& username, IntPtr& password, AsyncCallback callback, object object)
public bool EndInvoke(Boolean& chkState, IntPtr& username, IntPtr& password, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnSecurityChange : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIWebProgress progress, nsIRequest request, UInt32 status)
public IAsyncResult BeginInvoke(nsIWebProgress progress, nsIRequest request, UInt32 status, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnSelect : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(IntPtr title, IntPtr text, UInt32 count, IntPtr list, Int32& retVal)
public IAsyncResult BeginInvoke(IntPtr title, IntPtr text, UInt32 count, IntPtr list, Int32& retVal, AsyncCallback callback, object object)
public bool EndInvoke(Int32& retVal, IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnShowContextMenu : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(UInt32 contextFlags, nsIDOMEvent eve, nsIDOMNode node)
public IAsyncResult BeginInvoke(UInt32 contextFlags, nsIDOMEvent eve, nsIDOMNode node, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnStateChange : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIWebProgress progress, nsIRequest request, int arg2, UInt32 arg3)
public IAsyncResult BeginInvoke(nsIWebProgress progress, nsIRequest request, int arg2, UInt32 arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackOnStatusChange : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIWebProgress progress, nsIRequest request, string message, int status)
public IAsyncResult BeginInvoke(nsIWebProgress progress, nsIRequest request, string message, int status, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackPtrPtr : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr arg1, IntPtr arg2)
public IAsyncResult BeginInvoke(IntPtr arg1, IntPtr arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackString : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1)
public IAsyncResult BeginInvoke(string arg1, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackStringInt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1, int arg2)
public IAsyncResult BeginInvoke(string arg1, int arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackStringIntInt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1, int arg2, int arg3)
public IAsyncResult BeginInvoke(string arg1, int arg2, int arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackStringIntUint : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1, int arg2, UInt32 arg3)
public IAsyncResult BeginInvoke(string arg1, int arg2, UInt32 arg3, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackStringString : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1, string arg2)
public IAsyncResult BeginInvoke(string arg1, string arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackUint : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(UInt32 arg1)
public IAsyncResult BeginInvoke(UInt32 arg1, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackUintInt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(UInt32 arg1, int arg2)
public IAsyncResult BeginInvoke(UInt32 arg1, int arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackVoid : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke()
public IAsyncResult BeginInvoke(AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackWString : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1)
public IAsyncResult BeginInvoke(string arg1, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.CallbackWStringInt : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(string arg1, int arg2)
public IAsyncResult BeginInvoke(string arg1, int arg2, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.DocumentEncoder : DOMObject {
private nsIDocumentEncoder docEncoder
private string mimeType
private DocumentEncoderFlags flags
public string MimeType
public DocumentEncoderFlags Flags
public void .ctor(WebBrowser control)
protected void Dispose(bool disposing)
public string get_MimeType()
public void set_MimeType(string value)
public DocumentEncoderFlags get_Flags()
public void set_Flags(DocumentEncoderFlags value)
private void Init(Document document, string mimeType, DocumentEncoderFlags flags)
public string EncodeToString(Document document)
public string EncodeToString(HTMLElement element)
public Stream EncodeToStream(Document document)
public Stream EncodeToStream(HTMLElement element)
}
internal Mono.Mozilla.DOM.Attribute : Node {
private nsIDOMAttr attribute
public string Name
public string Value
public void .ctor(WebBrowser control, nsIDOMAttr domAttribute)
protected void Dispose(bool disposing)
public string get_Name()
public string get_Value()
public void set_Value(string value)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.AttributeCollection : NodeList {
protected nsIDOMNamedNodeMap unmanagedNodes
public int Count
public IAttribute Item
public IAttribute Item
public void .ctor(WebBrowser control, nsIDOMNamedNodeMap nodeMap)
public void .ctor(WebBrowser control)
internal void Load()
public int get_Count()
public IAttribute get_Item(int index)
public void set_Item(int index, IAttribute value)
public IAttribute get_Item(string name)
public bool Exists(string name)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.ContentListener : object {
private WebBrowser owner
private EventHandlerList events
public EventHandlerList Events
public void .ctor(WebBrowser instance)
public EventHandlerList get_Events()
public void AddHandler(NavigationRequestedEventHandler value)
public void RemoveHandler(NavigationRequestedEventHandler value)
private bool Mono.Mozilla.nsIURIContentListener.onStartURIOpen(nsIURI aURI)
private bool Mono.Mozilla.nsIURIContentListener.doContent(string aContentType, bool aIsContentPreferred, nsIRequest aRequest, nsIStreamListener& aContentHandler)
private bool Mono.Mozilla.nsIURIContentListener.isPreferred(string aContentType, String& aDesiredContentType)
private bool Mono.Mozilla.nsIURIContentListener.canHandleContent(string aContentType, bool aIsContentPreferred, String& aDesiredContentType)
private IntPtr Mono.Mozilla.nsIURIContentListener.getLoadCookie()
private void Mono.Mozilla.nsIURIContentListener.setLoadCookie(IntPtr value)
private nsIURIContentListener Mono.Mozilla.nsIURIContentListener.getParentContentListener()
private void Mono.Mozilla.nsIURIContentListener.setParentContentListener(nsIURIContentListener value)
}
internal Mono.Mozilla.DOM.Document : Node {
private EventHandlerList events
internal object LoadStoppedEvent
internal nsIDOMDocument node
internal nsIDOMDocument XPComObject
public IElement Active
public string ActiveLinkColor
public IElementCollection Anchors
public IElementCollection Applets
public string Background
public string BackColor
public IElement Body
public string Charset
public string Cookie
public string Domain
public IElement DocumentElement
public IDocumentType DocType
public string ForeColor
public IElementCollection Forms
public IElementCollection Images
public IDOMImplementation Implementation
public string LinkColor
public IElementCollection Links
public IStylesheetList Stylesheets
public string Title
public string Url
public string VisitedLinkColor
public IWindow Window
internal EventHandlerList Events
internal nsIDOMDocument get_node()
internal void set_node(nsIDOMDocument value)
public void .ctor(WebBrowser control, nsIDOMHTMLDocument document)
public void .ctor(WebBrowser control, nsIDOMDocument document)
protected void Dispose(bool disposing)
internal nsIDOMDocument get_XPComObject()
public IElement get_Active()
public string get_ActiveLinkColor()
public void set_ActiveLinkColor(string value)
public IElementCollection get_Anchors()
public IElementCollection get_Applets()
public string get_Background()
public void set_Background(string value)
public string get_BackColor()
public void set_BackColor(string value)
public IElement get_Body()
public string get_Charset()
public void set_Charset(string value)
public string get_Cookie()
public void set_Cookie(string value)
public string get_Domain()
public IElement get_DocumentElement()
public IDocumentType get_DocType()
public string get_ForeColor()
public void set_ForeColor(string value)
public IElementCollection get_Forms()
public IElementCollection get_Images()
public IDOMImplementation get_Implementation()
public string get_LinkColor()
public void set_LinkColor(string value)
public IElementCollection get_Links()
public IStylesheetList get_Stylesheets()
public string get_Title()
public void set_Title(string value)
public string get_Url()
public string get_VisitedLinkColor()
public void set_VisitedLinkColor(string value)
public IWindow get_Window()
public IAttribute CreateAttribute(string name)
public IElement CreateElement(string tagName)
public IElement GetElementById(string id)
public IElementCollection GetElementsByTagName(string name)
public IElement GetElement(int x, int y)
public void Write(string text)
public string InvokeScript(string script)
internal EventHandlerList get_Events()
public void add_LoadStopped(EventHandler value)
public void remove_LoadStopped(EventHandler value)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.DocumentEncoderFlags : Enum {
public UInt32 value__
public DocumentEncoderFlags OutputSelectionOnly
public DocumentEncoderFlags OutputFormatted
public DocumentEncoderFlags OutputRaw
public DocumentEncoderFlags OutputBodyOnly
public DocumentEncoderFlags OutputPreformatted
public DocumentEncoderFlags OutputWrap
public DocumentEncoderFlags OutputFormatFlowed
public DocumentEncoderFlags OutputAbsoluteLinks
public DocumentEncoderFlags OutputEncodeW3CEntities
public DocumentEncoderFlags OutputCRLineBreak
public DocumentEncoderFlags OutputLFLineBreak
public DocumentEncoderFlags OutputNoScriptContent
public DocumentEncoderFlags OutputNoFramesContent
public DocumentEncoderFlags OutputNoFormattingInPre
public DocumentEncoderFlags OutputEncodeBasicEntities
public DocumentEncoderFlags OutputEncodeLatin1Entities
public DocumentEncoderFlags OutputEncodeHTMLEntities
public DocumentEncoderFlags OutputPersistNBSP
}
internal Mono.Mozilla.DOM.DocumentType : Node {
internal nsIDOMDocumentType doctype
internal nsIDOMDocumentType ComObject
public string Name
public INamedNodeMap Entities
public INamedNodeMap Notations
public string PublicId
public string SystemId
public string InternalSubset
public void .ctor(WebBrowser control, nsIDOMDocumentType doctype)
protected void Dispose(bool disposing)
internal nsIDOMDocumentType get_ComObject()
public string get_Name()
public INamedNodeMap get_Entities()
public INamedNodeMap get_Notations()
public string get_PublicId()
public string get_SystemId()
public string get_InternalSubset()
public int GetHashCode()
}
internal Mono.Mozilla.DOM.DOMImplementation : DOMObject {
private nsIDOMDOMImplementation unmanagedDomImpl
protected int hashcode
public void .ctor(WebBrowser control, nsIDOMDOMImplementation domImpl)
protected void Dispose(bool disposing)
public bool HasFeature(string feature, string version)
public IDocumentType CreateDocumentType(string qualifiedName, string publicId, string systemId)
public IDocument CreateDocument(string namespaceURI, string qualifiedName, IDocumentType doctype)
}
internal Mono.Mozilla.DOM.DOMObject : object {
private EventHandlerList event_handlers
protected WebBrowser control
internal HandleRef storage
protected bool disposed
protected Hashtable resources
protected EventHandlerList Events
internal void .ctor(WebBrowser control)
protected void Finalize()
protected void Dispose(bool disposing)
public void Dispose()
protected EventHandlerList get_Events()
internal INode GetTypedNode(nsIDOMNode obj)
}
internal Mono.Mozilla.DOM.Element : Node {
internal nsIDOMElement node
public string InnerText
public string OuterText
public string InnerHTML
public string OuterHTML
public Stream ContentStream
public IElementCollection All
public IElementCollection Children
public int TabIndex
public string TagName
public bool Disabled
public int ClientWidth
public int ClientHeight
public int ScrollHeight
public int ScrollWidth
public int ScrollLeft
public int ScrollTop
public int OffsetHeight
public int OffsetWidth
public int OffsetLeft
public int OffsetTop
public IElement OffsetParent
internal int Top
internal int Left
internal int Width
internal int Height
internal nsIDOMElement get_node()
internal void set_node(nsIDOMElement value)
public void .ctor(WebBrowser control, nsIDOMElement domElement)
protected void Dispose(bool disposing)
public IElement AppendChild(IElement child)
public string get_InnerText()
public void set_InnerText(string value)
public string get_OuterText()
public void set_OuterText(string value)
public string get_InnerHTML()
public void set_InnerHTML(string value)
public string get_OuterHTML()
public void set_OuterHTML(string value)
public Stream get_ContentStream()
public IElementCollection get_All()
private void Recurse(HTMLElementCollection col, nsIDOMNode parent)
public IElementCollection get_Children()
public int get_TabIndex()
public void set_TabIndex(int value)
public string get_TagName()
public bool get_Disabled()
public void set_Disabled(bool value)
public int get_ClientWidth()
public int get_ClientHeight()
public int get_ScrollHeight()
public int get_ScrollWidth()
public int get_ScrollLeft()
public void set_ScrollLeft(int value)
public int get_ScrollTop()
public void set_ScrollTop(int value)
public int get_OffsetHeight()
public int get_OffsetWidth()
public int get_OffsetLeft()
public int get_OffsetTop()
public IElement get_OffsetParent()
public void Blur()
public void Focus()
public IElementCollection GetElementsByTagName(string name)
public int GetHashCode()
public bool HasAttribute(string name)
public string GetAttribute(string name)
public void ScrollIntoView(bool alignWithTop)
public void SetAttribute(string name, string value)
internal int get_Top()
internal int get_Left()
internal int get_Width()
internal int get_Height()
}
internal Mono.Mozilla.DOM.EventListener : object {
private HandleRef storage
private bool disposed
private object owner
private EventHandlerList events
private nsIDOMEventTarget target
public EventHandlerList Events
public nsIDOMEventTarget Target
public EventHandlerList get_Events()
public nsIDOMEventTarget get_Target()
public void set_Target(nsIDOMEventTarget value)
public void .ctor(nsIDOMEventTarget target, object owner)
protected void Finalize()
protected void Dispose(bool disposing)
public void Dispose()
public void AddHandler(EventHandler handler, string _event)
public void RemoveHandler(EventHandler handler, string _event)
public void AddHandler(NodeEventHandler handler, string _event)
public void RemoveHandler(NodeEventHandler handler, string _event)
public int handleEvent(nsIDOMEvent _event)
}
internal Mono.Mozilla.DOM.History : DOMObject {
private Navigation navigation
public int Count
public void .ctor(WebBrowser control, Navigation navigation)
public int get_Count()
public void Back(int count)
public void Forward(int count)
public void GoToIndex(int index)
public void GoToUrl(string url)
}
internal Mono.Mozilla.DOM.HTMLElement : Element {
protected nsIDOMHTMLElement node
public string InnerHTML
public string OuterHTML
public Stream ContentStream
public bool Disabled
public int TabIndex
protected nsIDOMHTMLElement get_node()
protected void set_node(nsIDOMHTMLElement value)
public void .ctor(WebBrowser control, nsIDOMHTMLElement domHtmlElement)
protected void Dispose(bool disposing)
public string get_InnerHTML()
public void set_InnerHTML(string value)
public string get_OuterHTML()
public void set_OuterHTML(string value)
public Stream get_ContentStream()
public bool get_Disabled()
public void set_Disabled(bool value)
public int get_TabIndex()
public void set_TabIndex(int value)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.HTMLElementCollection : NodeList {
public IElement Item
public void .ctor(WebBrowser control, nsIDOMNodeList nodeList)
public void .ctor(WebBrowser control)
internal void Load()
public IElement get_Item(int index)
public void set_Item(int index, IElement value)
}
internal Mono.Mozilla.DOM.NamedNodeMap : NodeList {
protected nsIDOMNamedNodeMap unmanagedNodes
public int Count
public INode Item
public INode Item
public INode Item
public void .ctor(WebBrowser control, nsIDOMNamedNodeMap nodeMap)
internal void Load()
public int get_Count()
public INode get_Item(int index)
public void set_Item(int index, INode value)
public INode get_Item(string name)
public void set_Item(string name, INode value)
public INode RemoveNamedItem(string name)
public INode get_Item(string namespaceURI, string localName)
public void set_Item(string namespaceURI, string localName, INode value)
public INode RemoveNamedItemNS(string namespaceURI, string localName)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.Navigation : DOMObject {
internal nsIWebNavigation navigation
public bool CanGoBack
public bool CanGoForward
public int HistoryCount
internal Document Document
public void .ctor(WebBrowser control, nsIWebNavigation webNav)
protected void Dispose(bool disposing)
public bool get_CanGoBack()
public bool get_CanGoForward()
public bool Back()
public bool Forward()
public void Home()
public void Reload()
public void Reload(ReloadOption option)
public void Stop()
public void Go(int index)
public void Go(int index, bool relative)
public void Go(string url)
public void Go(string url, LoadFlags flags)
public int get_HistoryCount()
internal Document get_Document()
public int GetHashCode()
}
internal Mono.Mozilla.DOM.Node : DOMObject {
internal nsIDOMNode nodeNoProxy
private nsIDOMNode _node
protected int hashcode
private EventListener eventListener
private WebBrowser control
private EventHandlerList events
internal nsIDOMNode node
internal nsIDOMNode XPComObject
public IAttributeCollection Attributes
public INodeList ChildNodes
public INode FirstChild
public INode LastChild
public INode Parent
public INode Previous
public INode Next
public string LocalName
public IDocument Owner
public string Style
public NodeType Type
public string Value
public IntPtr AccessibleObject
private EventListener EventListener
public EventHandlerList Events
internal nsIDOMNode get_node()
internal void set_node(nsIDOMNode value)
public void .ctor(WebBrowser control, nsIDOMNode domNode)
protected void Dispose(bool disposing)
internal nsIDOMNode get_XPComObject()
public IAttributeCollection get_Attributes()
public INodeList get_ChildNodes()
public INode get_FirstChild()
public INode get_LastChild()
public INode get_Parent()
public INode get_Previous()
public INode get_Next()
public string get_LocalName()
public IDocument get_Owner()
public string get_Style()
public void set_Style(string value)
public NodeType get_Type()
public string get_Value()
public void set_Value(string value)
public IntPtr get_AccessibleObject()
public void FireEvent(string eventName)
public INode InsertBefore(INode child, INode refChild)
public INode ReplaceChild(INode child, INode oldChild)
public INode RemoveChild(INode child)
public INode AppendChild(INode child)
public bool Equals(object obj)
public bool op_Equality(Node left, Node right)
public bool op_Inequality(Node left, Node right)
public int GetHashCode()
private EventListener get_EventListener()
public void AttachEventHandler(string eventName, EventHandler handler)
public void DetachEventHandler(string eventName, EventHandler handler)
public EventHandlerList get_Events()
public void AttachEventHandler(string eventName, Delegate handler)
public void DetachEventHandler(string eventName, Delegate handler)
public void add_Click(NodeEventHandler value)
public void remove_Click(NodeEventHandler value)
public void add_DoubleClick(NodeEventHandler value)
public void remove_DoubleClick(NodeEventHandler value)
public void add_KeyDown(NodeEventHandler value)
public void remove_KeyDown(NodeEventHandler value)
public void add_KeyPress(NodeEventHandler value)
public void remove_KeyPress(NodeEventHandler value)
public void add_KeyUp(NodeEventHandler value)
public void remove_KeyUp(NodeEventHandler value)
public void add_MouseDown(NodeEventHandler value)
public void remove_MouseDown(NodeEventHandler value)
public void add_MouseEnter(NodeEventHandler value)
public void remove_MouseEnter(NodeEventHandler value)
public void add_MouseLeave(NodeEventHandler value)
public void remove_MouseLeave(NodeEventHandler value)
public void add_MouseMove(NodeEventHandler value)
public void remove_MouseMove(NodeEventHandler value)
public void add_MouseOver(NodeEventHandler value)
public void remove_MouseOver(NodeEventHandler value)
public void add_MouseUp(NodeEventHandler value)
public void remove_MouseUp(NodeEventHandler value)
public void add_OnFocus(NodeEventHandler value)
public void remove_OnFocus(NodeEventHandler value)
public void add_OnBlur(NodeEventHandler value)
public void remove_OnBlur(NodeEventHandler value)
}
internal Mono.Mozilla.DOM.NodeList : DOMObject {
protected nsIDOMNodeList unmanagedNodes
protected INode[] nodes
protected int nodeCount
public int Count
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public bool IsReadOnly
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public INode Item
public void .ctor(WebBrowser control, nsIDOMNodeList nodeList)
public void .ctor(WebBrowser control)
public void .ctor(WebBrowser control, bool loaded)
protected void Dispose(bool disposing)
protected void Clear()
internal void Load()
public IEnumerator GetEnumerator()
public void CopyTo(Array dest, int index)
public int get_Count()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public bool get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private void System.Collections.IList.RemoveAt(int index)
public void RemoveAt(int index)
public void Remove(INode node)
private void System.Collections.IList.Remove(object node)
public void Insert(int index, INode value)
private void System.Collections.IList.Insert(int index, object value)
public int IndexOf(INode node)
private int System.Collections.IList.IndexOf(object node)
public bool Contains(INode node)
private bool System.Collections.IList.Contains(object node)
private void System.Collections.IList.Clear()
public int Add(INode node)
private int System.Collections.IList.Add(object node)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public INode get_Item(int index)
public void set_Item(int index, INode value)
public int GetHashCode()
}
internal Mono.Mozilla.DOM.NodeType : Enum {
public ushort value__
public NodeType Element
public NodeType Attribute
public NodeType Text
public NodeType CDataSection
public NodeType EntityReference
public NodeType Entity
public NodeType ProcessingInstruction
public NodeType Comment
public NodeType Document
public NodeType DocumentType
public NodeType DocumentFragment
public NodeType Notation
}
internal Mono.Mozilla.DOM.Stylesheet : DOMObject {
private nsIDOMStyleSheet unmanagedStyle
protected int hashcode
public string Type
public string Href
public bool Disabled
public INode OwnerNode
public IStylesheet ParentStyleSheet
public string Title
public IMediaList Media
public void .ctor(WebBrowser control, nsIDOMStyleSheet stylesheet)
protected void Dispose(bool disposing)
public string get_Type()
public string get_Href()
public bool get_Disabled()
public void set_Disabled(bool value)
public INode get_OwnerNode()
public IStylesheet get_ParentStyleSheet()
public string get_Title()
public IMediaList get_Media()
public int GetHashCode()
}
internal Mono.Mozilla.DOM.StylesheetList : DOMObject {
private nsIDOMStyleSheetList unmanagedStyles
private List`1<IStylesheet> styles
public IStylesheet Item
public int Count
public void .ctor(WebBrowser control, nsIDOMStyleSheetList stylesheetList)
protected void Dispose(bool disposing)
protected void Clear()
internal void Load()
private IEnumerator System.Collections.IEnumerable.GetEnumerator()
public IStylesheet get_Item(int index)
public void set_Item(int index, IStylesheet value)
public int get_Count()
}
internal Mono.Mozilla.DOM.Window : DOMObject {
internal nsIDOMWindow window
private EventListener eventListener
private int hashcode
private object LoadEvent
private object UnloadEvent
public IDocument Document
public IWindowCollection Frames
public string Name
public IWindow Parent
public IWindow Top
public string StatusText
public IHistory History
private EventListener EventListener
public void .ctor(WebBrowser control, nsIDOMWindow domWindow)
protected void Dispose(bool disposing)
internal bool FindDocument(nsIDOMWindow& window, int docHashcode)
public IDocument get_Document()
public IWindowCollection get_Frames()
public string get_Name()
public void set_Name(string value)
public IWindow get_Parent()
public IWindow get_Top()
public string get_StatusText()
public IHistory get_History()
private EventListener get_EventListener()
public void AttachEventHandler(string eventName, EventHandler handler)
public void DetachEventHandler(string eventName, EventHandler handler)
public void Focus()
public void Open(string url)
public void ScrollTo(int x, int y)
public bool Equals(object obj)
public bool op_Equality(Window left, Window right)
public bool op_Inequality(Window left, Window right)
public int GetHashCode()
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_Unload(EventHandler value)
public void remove_Unload(EventHandler value)
public void add_OnFocus(EventHandler value)
public void remove_OnFocus(EventHandler value)
public void add_OnBlur(EventHandler value)
public void remove_OnBlur(EventHandler value)
public void add_Error(EventHandler value)
public void remove_Error(EventHandler value)
public void add_Scroll(EventHandler value)
public void remove_Scroll(EventHandler value)
public void OnLoad()
public void OnUnload()
}
internal Mono.Mozilla.DOM.WindowCollection : DOMObject {
protected nsIDOMWindowCollection unmanagedWindows
protected IWindow[] windows
protected int windowCount
public int Count
private object System.Collections.ICollection.SyncRoot
private bool System.Collections.ICollection.IsSynchronized
public bool IsReadOnly
private bool System.Collections.IList.IsFixedSize
private object System.Collections.IList.Item
public IWindow Item
public void .ctor(WebBrowser control, nsIDOMWindowCollection windowCol)
public void .ctor(WebBrowser control)
protected void Dispose(bool disposing)
protected void Clear()
internal void Load()
public IEnumerator GetEnumerator()
public void CopyTo(Array dest, int index)
public int get_Count()
private object System.Collections.ICollection.get_SyncRoot()
private bool System.Collections.ICollection.get_IsSynchronized()
public bool get_IsReadOnly()
private bool System.Collections.IList.get_IsFixedSize()
private void System.Collections.IList.RemoveAt(int index)
public void RemoveAt(int index)
public void Remove(IWindow window)
private void System.Collections.IList.Remove(object window)
public void Insert(int index, IWindow value)
private void System.Collections.IList.Insert(int index, object value)
public int IndexOf(IWindow window)
private int System.Collections.IList.IndexOf(object window)
public bool Contains(IWindow window)
private bool System.Collections.IList.Contains(object window)
private void System.Collections.IList.Clear()
public int Add(IWindow window)
private int System.Collections.IList.Add(object window)
private object System.Collections.IList.get_Item(int index)
private void System.Collections.IList.set_Item(int index, object value)
public IWindow get_Item(int index)
public void set_Item(int index, IWindow value)
public int GetHashCode()
}
internal Mono.Mozilla.GenericCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr type)
public IAsyncResult BeginInvoke(IntPtr type, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.KeyCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(KeyInfo keyInfo, ModifierKeys modifiers, nsIDOMNode target)
public IAsyncResult BeginInvoke(KeyInfo keyInfo, ModifierKeys modifiers, nsIDOMNode target, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.KeyInfo : ValueType {
public UInt32 charCode
public UInt32 keyCode
}
internal Mono.Mozilla.ModifierKeys : ValueType {
public int altKey
public int ctrlKey
public int metaKey
public int shiftKey
}
internal Mono.Mozilla.MouseCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target)
public IAsyncResult BeginInvoke(MouseInfo mouseInfo, ModifierKeys modifiers, nsIDOMNode target, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.MouseInfo : ValueType {
public ushort button
public int clientX
public int clientY
public int screenX
public int screenY
}
internal Mono.Mozilla.nsAccessibilityService : object {
public nsIAccessibilityService GetProxy(IWebBrowser control, nsIAccessibilityService obj)
}
internal Mono.Mozilla.nsAccessible : object {
public nsIAccessible GetProxy(IWebBrowser control, nsIAccessible obj)
}
internal Mono.Mozilla.nsAccessibleDocument : object {
public nsIAccessibleDocument GetProxy(IWebBrowser control, nsIAccessibleDocument obj)
}
internal Mono.Mozilla.nsAccessibleRelation : object {
public nsIAccessibleRelation GetProxy(IWebBrowser control, nsIAccessibleRelation obj)
}
internal Mono.Mozilla.nsAccessibleRetrieval : object {
public nsIAccessibleRetrieval GetProxy(IWebBrowser control, nsIAccessibleRetrieval obj)
}
internal Mono.Mozilla.nsAccessNode : object {
public nsIAccessNode GetProxy(IWebBrowser control, nsIAccessNode obj)
}
internal Mono.Mozilla.nsArray : object {
public nsIArray GetProxy(IWebBrowser control, nsIArray obj)
}
internal Mono.Mozilla.nsCancelable : object {
public nsICancelable GetProxy(IWebBrowser control, nsICancelable obj)
}
internal Mono.Mozilla.nsChannel : object {
public nsIChannel GetProxy(IWebBrowser control, nsIChannel obj)
}
internal Mono.Mozilla.nsClassInfo : object {
public nsIClassInfo GetProxy(IWebBrowser control, nsIClassInfo obj)
}
internal Mono.Mozilla.nsDocCharset : object {
public nsIDocCharset GetProxy(IWebBrowser control, nsIDocCharset obj)
}
internal Mono.Mozilla.nsDocumentEncoder : object {
public nsIDocumentEncoder GetProxy(IWebBrowser control, nsIDocumentEncoder obj)
}
internal Mono.Mozilla.nsDocumentEncoderNodeFixup : object {
public nsIDocumentEncoderNodeFixup GetProxy(IWebBrowser control, nsIDocumentEncoderNodeFixup obj)
}
internal Mono.Mozilla.nsDOMAbstractView : object {
public nsIDOMAbstractView GetProxy(IWebBrowser control, nsIDOMAbstractView obj)
}
internal Mono.Mozilla.nsDOMAttr : object {
public nsIDOMAttr GetProxy(IWebBrowser control, nsIDOMAttr obj)
}
internal Mono.Mozilla.nsDOMBarProp : object {
public nsIDOMBarProp GetProxy(IWebBrowser control, nsIDOMBarProp obj)
}
internal Mono.Mozilla.nsDOMCDATASection : object {
public nsIDOMCDATASection GetProxy(IWebBrowser control, nsIDOMCDATASection obj)
}
internal Mono.Mozilla.nsDOMCharacterData : object {
public nsIDOMCharacterData GetProxy(IWebBrowser control, nsIDOMCharacterData obj)
}
internal Mono.Mozilla.nsDOMComment : object {
public nsIDOMComment GetProxy(IWebBrowser control, nsIDOMComment obj)
}
internal Mono.Mozilla.nsDOMCounter : object {
public nsIDOMCounter GetProxy(IWebBrowser control, nsIDOMCounter obj)
}
internal Mono.Mozilla.nsDOMCSSPrimitiveValue : object {
public nsIDOMCSSPrimitiveValue GetProxy(IWebBrowser control, nsIDOMCSSPrimitiveValue obj)
}
internal Mono.Mozilla.nsDOMCSSRule : object {
public nsIDOMCSSRule GetProxy(IWebBrowser control, nsIDOMCSSRule obj)
}
internal Mono.Mozilla.nsDOMCSSRuleList : object {
public nsIDOMCSSRuleList GetProxy(IWebBrowser control, nsIDOMCSSRuleList obj)
}
internal Mono.Mozilla.nsDOMCSSStyleDeclaration : object {
public nsIDOMCSSStyleDeclaration GetProxy(IWebBrowser control, nsIDOMCSSStyleDeclaration obj)
}
internal Mono.Mozilla.nsDOMCSSStyleSheet : object {
public nsIDOMCSSStyleSheet GetProxy(IWebBrowser control, nsIDOMCSSStyleSheet obj)
}
internal Mono.Mozilla.nsDOMCSSValue : object {
public nsIDOMCSSValue GetProxy(IWebBrowser control, nsIDOMCSSValue obj)
}
internal Mono.Mozilla.nsDOMDocument : object {
public nsIDOMDocument GetProxy(IWebBrowser control, nsIDOMDocument obj)
}
internal Mono.Mozilla.nsDOMDocumentEvent : object {
public nsIDOMDocumentEvent GetProxy(IWebBrowser control, nsIDOMDocumentEvent obj)
}
internal Mono.Mozilla.nsDOMDocumentFragment : object {
public nsIDOMDocumentFragment GetProxy(IWebBrowser control, nsIDOMDocumentFragment obj)
}
internal Mono.Mozilla.nsDOMDocumentRange : object {
public nsIDOMDocumentRange GetProxy(IWebBrowser control, nsIDOMDocumentRange obj)
}
internal Mono.Mozilla.nsDOMDocumentStyle : object {
public nsIDOMDocumentStyle GetProxy(IWebBrowser control, nsIDOMDocumentStyle obj)
}
internal Mono.Mozilla.nsDOMDocumentType : object {
public nsIDOMDocumentType GetProxy(IWebBrowser control, nsIDOMDocumentType obj)
}
internal Mono.Mozilla.nsDOMDocumentView : object {
public nsIDOMDocumentView GetProxy(IWebBrowser control, nsIDOMDocumentView obj)
}
internal Mono.Mozilla.nsDOMDOMImplementation : object {
public nsIDOMDOMImplementation GetProxy(IWebBrowser control, nsIDOMDOMImplementation obj)
}
internal Mono.Mozilla.nsDOMDOMStringList : object {
public nsIDOMDOMStringList GetProxy(IWebBrowser control, nsIDOMDOMStringList obj)
}
internal Mono.Mozilla.nsDOMElement : object {
public nsIDOMElement GetProxy(IWebBrowser control, nsIDOMElement obj)
}
internal Mono.Mozilla.nsDOMEntityReference : object {
public nsIDOMEntityReference GetProxy(IWebBrowser control, nsIDOMEntityReference obj)
}
internal Mono.Mozilla.nsDOMEvent : object {
public nsIDOMEvent GetProxy(IWebBrowser control, nsIDOMEvent obj)
}
internal Mono.Mozilla.nsDOMEventListener : object {
public nsIDOMEventListener GetProxy(IWebBrowser control, nsIDOMEventListener obj)
}
internal Mono.Mozilla.nsDOMEventTarget : object {
public nsIDOMEventTarget GetProxy(IWebBrowser control, nsIDOMEventTarget obj)
}
internal Mono.Mozilla.nsDOMHTMLBodyElement : object {
public nsIDOMHTMLBodyElement GetProxy(IWebBrowser control, nsIDOMHTMLBodyElement obj)
}
internal Mono.Mozilla.nsDOMHTMLCollection : object {
public nsIDOMHTMLCollection GetProxy(IWebBrowser control, nsIDOMHTMLCollection obj)
}
internal Mono.Mozilla.nsDOMHTMLDocument : object {
public nsIDOMHTMLDocument GetProxy(IWebBrowser control, nsIDOMHTMLDocument obj)
}
internal Mono.Mozilla.nsDOMHTMLElement : object {
public nsIDOMHTMLElement GetProxy(IWebBrowser control, nsIDOMHTMLElement obj)
}
internal Mono.Mozilla.nsDOMHTMLStyleElement : object {
public nsIDOMHTMLStyleElement GetProxy(IWebBrowser control, nsIDOMHTMLStyleElement obj)
}
internal Mono.Mozilla.nsDOMKeyEvent : object {
public nsIDOMKeyEvent GetProxy(IWebBrowser control, nsIDOMKeyEvent obj)
}
internal Mono.Mozilla.nsDOMMediaList : object {
public nsIDOMMediaList GetProxy(IWebBrowser control, nsIDOMMediaList obj)
}
internal Mono.Mozilla.nsDOMMouseEvent : object {
public nsIDOMMouseEvent GetProxy(IWebBrowser control, nsIDOMMouseEvent obj)
}
internal Mono.Mozilla.nsDOMNamedNodeMap : object {
public nsIDOMNamedNodeMap GetProxy(IWebBrowser control, nsIDOMNamedNodeMap obj)
}
internal Mono.Mozilla.nsDOMNode : object {
public nsIDOMNode GetProxy(IWebBrowser control, nsIDOMNode obj)
}
internal Mono.Mozilla.nsDOMNodeList : object {
public nsIDOMNodeList GetProxy(IWebBrowser control, nsIDOMNodeList obj)
}
internal Mono.Mozilla.nsDOMNSHTMLElement : object {
public nsIDOMNSHTMLElement GetProxy(IWebBrowser control, nsIDOMNSHTMLElement obj)
}
internal Mono.Mozilla.nsDOMNSRange : object {
public nsIDOMNSRange GetProxy(IWebBrowser control, nsIDOMNSRange obj)
}
internal Mono.Mozilla.nsDOMProcessingInstruction : object {
public nsIDOMProcessingInstruction GetProxy(IWebBrowser control, nsIDOMProcessingInstruction obj)
}
internal Mono.Mozilla.nsDOMRange : object {
public nsIDOMRange GetProxy(IWebBrowser control, nsIDOMRange obj)
}
internal Mono.Mozilla.nsDOMRect : object {
public nsIDOMRect GetProxy(IWebBrowser control, nsIDOMRect obj)
}
internal Mono.Mozilla.nsDOMRGBColor : object {
public nsIDOMRGBColor GetProxy(IWebBrowser control, nsIDOMRGBColor obj)
}
internal Mono.Mozilla.nsDOMStyleSheet : object {
public nsIDOMStyleSheet GetProxy(IWebBrowser control, nsIDOMStyleSheet obj)
}
internal Mono.Mozilla.nsDOMStyleSheetList : object {
public nsIDOMStyleSheetList GetProxy(IWebBrowser control, nsIDOMStyleSheetList obj)
}
internal Mono.Mozilla.nsDOMText : object {
public nsIDOMText GetProxy(IWebBrowser control, nsIDOMText obj)
}
internal Mono.Mozilla.nsDOMUIEvent : object {
public nsIDOMUIEvent GetProxy(IWebBrowser control, nsIDOMUIEvent obj)
}
internal Mono.Mozilla.nsDOMViewCSS : object {
public nsIDOMViewCSS GetProxy(IWebBrowser control, nsIDOMViewCSS obj)
}
internal Mono.Mozilla.nsDOMWindow : object {
public nsIDOMWindow GetProxy(IWebBrowser control, nsIDOMWindow obj)
}
internal Mono.Mozilla.nsDOMWindowCollection : object {
public nsIDOMWindowCollection GetProxy(IWebBrowser control, nsIDOMWindowCollection obj)
}
internal Mono.Mozilla.nsErrorService : object {
public nsIErrorService GetProxy(IWebBrowser control, nsIErrorService obj)
}
internal Mono.Mozilla.nsFile : object {
public nsIFile GetProxy(IWebBrowser control, nsIFile obj)
}
internal Mono.Mozilla.nsHistoryEntry : object {
public nsIHistoryEntry GetProxy(IWebBrowser control, nsIHistoryEntry obj)
}
internal Mono.Mozilla.nsIAccessibilityService {
public int getAccessibleFor(nsIDOMNode aNode, nsIAccessible& ret)
public int getAttachedAccessibleFor(nsIDOMNode aNode, nsIAccessible& ret)
public int getRelevantContentNodeFor(nsIDOMNode aNode, nsIDOMNode& ret)
public int getAccessibleInWindow(nsIDOMNode aNode, nsIDOMWindow aDOMWin, nsIAccessible& ret)
public int getAccessibleInWeakShell(nsIDOMNode aNode, nsIWeakReference aPresShell, nsIAccessible& ret)
public int getAccessibleInShell(nsIDOMNode aNode, IntPtr aPresShell, nsIAccessible& ret)
public int getCachedAccessNode(nsIDOMNode aNode, nsIWeakReference aShell, nsIAccessNode& ret)
public int getCachedAccessible(nsIDOMNode aNode, nsIWeakReference aShell, nsIAccessible& ret)
public int getStringRole(UInt32 aRole, HandleRef ret)
public int getStringStates(UInt32 aStates, UInt32 aExtraStates, nsIDOMDOMStringList& ret)
public int getStringEventType(UInt32 aEventType, HandleRef ret)
public int getStringRelationType(UInt32 aRelationType, HandleRef ret)
public int createOuterDocAccessible(nsIDOMNode aNode, nsIAccessible& ret)
public int createRootAccessible(IntPtr aShell, IntPtr aDocument, nsIAccessible& ret)
public int createHTML4ButtonAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHyperTextAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLBRAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLButtonAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLAccessibleByMarkup(IntPtr aFrame, nsIWeakReference aWeakShell, nsIDOMNode aDOMNode, nsIAccessible& ret)
public int createHTMLLIAccessible(IntPtr aFrame, IntPtr aBulletFrame, HandleRef aBulletText, nsIAccessible& ret)
public int createHTMLCheckboxAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLComboboxAccessible(nsIDOMNode aNode, nsIWeakReference aPresShell, nsIAccessible& ret)
public int createHTMLGenericAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLGroupboxAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLHRAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLImageAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLLabelAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLListboxAccessible(nsIDOMNode aNode, nsIWeakReference aPresShell, nsIAccessible& ret)
public int createHTMLObjectFrameAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLRadioButtonAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLSelectOptionAccessible(nsIDOMNode aNode, nsIAccessible aAccParent, nsIWeakReference aPresShell, nsIAccessible& ret)
public int createHTMLTableAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLTableCellAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLTableHeadAccessible(nsIDOMNode aDOMNode, nsIAccessible& ret)
public int createHTMLTextAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLTextFieldAccessible(IntPtr aFrame, nsIAccessible& ret)
public int createHTMLCaptionAccessible(IntPtr aFrame, nsIAccessible& ret)
public int getAccessible(nsIDOMNode aNode, IntPtr aPresShell, nsIWeakReference aWeakShell, IntPtr& frameHint, Boolean& aIsHidden, nsIAccessible& ret)
public int addNativeRootAccessible(IntPtr aAtkAccessible, nsIAccessible& ret)
public int removeNativeRootAccessible(nsIAccessible aRootAccessible)
public int invalidateSubtreeFor(IntPtr aPresShell, IntPtr aChangedContent, UInt32 aEvent)
public int processDocLoadEvent(nsITimer aTimer, IntPtr aClosure, UInt32 aEventType)
}
internal Mono.Mozilla.nsIAccessible {
public int getParent(nsIAccessible& ret)
public int getNextSibling(nsIAccessible& ret)
public int getPreviousSibling(nsIAccessible& ret)
public int getFirstChild(nsIAccessible& ret)
public int getLastChild(nsIAccessible& ret)
public int getChildren(nsIArray& ret)
public int getChildCount(Int32& ret)
public int getIndexInParent(Int32& ret)
public int getName(HandleRef ret)
public int setName(HandleRef value)
public int getValue(HandleRef ret)
public int getDescription(HandleRef ret)
public int getKeyboardShortcut(HandleRef ret)
public int getDefaultKeyBinding(HandleRef ret)
public int getKeyBindings(char aActionIndex, nsIDOMDOMStringList& ret)
public int getRole(UInt32& ret)
public int getFinalRole(UInt32& ret)
public int getFinalState(UInt32& aState, UInt32& aExtraState)
public int getHelp(HandleRef ret)
public int getFocusedChild(nsIAccessible& ret)
public int getAttributes(nsIPersistentProperties& ret)
public int groupPosition(Int32& aGroupLevel, Int32& aSimilarItemsInGroup, Int32& aPositionInGroup)
public int getChildAtPoint(int x, int y, nsIAccessible& ret)
public int getChildAt(int aChildIndex, nsIAccessible& ret)
public int getAccessibleToRight(nsIAccessible& ret)
public int getAccessibleToLeft(nsIAccessible& ret)
public int getAccessibleAbove(nsIAccessible& ret)
public int getAccessibleBelow(nsIAccessible& ret)
public int getAccessibleRelated(UInt32 aRelationType, nsIAccessible& ret)
public int getRelationsCount(UInt32& ret)
public int getRelation(UInt32 index, nsIAccessibleRelation& ret)
public int getRelations(nsIArray& ret)
public int getBounds(Int32& x, Int32& y, Int32& width, Int32& height)
public int setSelected(bool isSelected)
public int extendSelection()
public int takeSelection()
public int takeFocus()
public int getNumActions(Char& ret)
public int getActionName(char index, HandleRef ret)
public int getActionDescription(char aIndex, HandleRef ret)
public int doAction(char index)
public int getNativeInterface(IntPtr& aOutAccessible)
}
internal Mono.Mozilla.nsIAccessibleDocument {
public int getURL(HandleRef ret)
public int getTitle(HandleRef ret)
public int getMimeType(HandleRef ret)
public int getDocType(HandleRef ret)
public int getDocument(nsIDOMDocument& ret)
public int getWindow(nsIDOMWindow& ret)
public int getNameSpaceURIForID(short nameSpaceID, HandleRef ret)
public int getWindowHandle(IntPtr ret)
public int getCachedAccessNode(IntPtr aUniqueID, nsIAccessNode& ret)
public int getAccessibleInParentChain(nsIDOMNode aDOMNode, bool aCanCreate, nsIAccessible& ret)
}
internal Mono.Mozilla.nsIAccessibleRelation {
public int getRelationType(UInt32& ret)
public int getTargetsCount(UInt32& ret)
public int getTarget(UInt32 index, nsIAccessible& ret)
public int getTargets(nsIArray& ret)
}
internal Mono.Mozilla.nsIAccessibleRetrieval {
public int getAccessibleFor(nsIDOMNode aNode, nsIAccessible& ret)
public int getAttachedAccessibleFor(nsIDOMNode aNode, nsIAccessible& ret)
public int getRelevantContentNodeFor(nsIDOMNode aNode, nsIDOMNode& ret)
public int getAccessibleInWindow(nsIDOMNode aNode, nsIDOMWindow aDOMWin, nsIAccessible& ret)
public int getAccessibleInWeakShell(nsIDOMNode aNode, nsIWeakReference aPresShell, nsIAccessible& ret)
public int getAccessibleInShell(nsIDOMNode aNode, IntPtr aPresShell, nsIAccessible& ret)
public int getCachedAccessNode(nsIDOMNode aNode, nsIWeakReference aShell, nsIAccessNode& ret)
public int getCachedAccessible(nsIDOMNode aNode, nsIWeakReference aShell, nsIAccessible& ret)
public int getStringRole(UInt32 aRole, HandleRef ret)
public int getStringStates(UInt32 aStates, UInt32 aExtraStates, nsIDOMDOMStringList& ret)
public int getStringEventType(UInt32 aEventType, HandleRef ret)
public int getStringRelationType(UInt32 aRelationType, HandleRef ret)
}
internal Mono.Mozilla.nsIAccessNode {
public int getDOMNode(nsIDOMNode& ret)
public int getNumChildren(Int32& ret)
public int getChildNodeAt(int childNum, nsIAccessNode& ret)
public int getParentNode(nsIAccessNode& ret)
public int getFirstChildNode(nsIAccessNode& ret)
public int getLastChildNode(nsIAccessNode& ret)
public int getPreviousSiblingNode(nsIAccessNode& ret)
public int getNextSiblingNode(nsIAccessNode& ret)
public int getAccessibleDocument(nsIAccessibleDocument& ret)
public int getInnerHTML(HandleRef ret)
public int scrollTo(UInt32 aScrollType)
public int scrollToPoint(UInt32 aCoordinateType, int aX, int aY)
public int getOwnerWindow(IntPtr ret)
public int getUniqueID(IntPtr ret)
public int getComputedStyleValue(HandleRef pseudoElt, HandleRef propertyName, HandleRef ret)
public int getComputedStyleCSSValue(HandleRef pseudoElt, HandleRef propertyName, nsIDOMCSSPrimitiveValue& ret)
public int getLanguage(HandleRef ret)
}
internal Mono.Mozilla.nsIArray {
public int getLength(UInt32& ret)
public int queryElementAt(UInt32 index, Guid uuid, IntPtr& result)
public int indexOf(UInt32 startIndex, IntPtr element, UInt32& ret)
public int enumerate(nsISimpleEnumerator& ret)
}
internal Mono.Mozilla.nsICancelable {
public int cancel(int aReason)
}
internal Mono.Mozilla.nsIChannel {
public int getName(HandleRef ret)
public int isPending(Boolean& ret)
public int getStatus(Int32& ret)
public int cancel(int aStatus)
public int suspend()
public int resume()
public int getLoadGroup(nsILoadGroup& ret)
public int setLoadGroup(nsILoadGroup value)
public int getLoadFlags(UInt64& ret)
public int setLoadFlags(ulong value)
public int getOriginalURI(nsIURI& ret)
public int setOriginalURI(nsIURI value)
public int getURI(nsIURI& ret)
public int getOwner(IntPtr& ret)
public int setOwner(IntPtr value)
public int getNotificationCallbacks(nsIInterfaceRequestor& ret)
public int setNotificationCallbacks(nsIInterfaceRequestor value)
public int getSecurityInfo(IntPtr& ret)
public int getContentType(HandleRef ret)
public int setContentType(HandleRef value)
public int getContentCharset(HandleRef ret)
public int setContentCharset(HandleRef value)
public int getContentLength(Int32& ret)
public int setContentLength(int value)
public int open(nsIInputStream& ret)
public int asyncOpen(nsIStreamListener aListener, IntPtr aContext)
}
internal Mono.Mozilla.nsIClassInfo {
public int getInterfaces(UInt32& count, IntPtr& array)
public int getHelperForLanguage(UInt32 language, IntPtr& ret)
public int getContractID(IntPtr& ret)
public int getClassDescription(IntPtr& ret)
public int getClassID(Guid& ret)
public int getImplementationLanguage(UInt32& ret)
public int getFlags(UInt32& ret)
public int getClassIDNoAlloc(Guid& ret)
}
internal Mono.Mozilla.nsIDocCharset {
public int getCharset(IntPtr& ret)
public int setCharset(string value)
}
internal Mono.Mozilla.nsIDocumentEncoder {
public void init(nsIDOMDocument aDocument, HandleRef aMimeType, UInt32 aFlags)
public void setSelection(nsISelection aSelection)
public void setRange(nsIDOMRange aRange)
public void setNode(nsIDOMNode aNode)
public void setContainerNode(nsIDOMNode aContainer)
public void setCharset(HandleRef aCharset)
public void setWrapColumn(UInt32 aWrapColumn)
public int getMimeType(HandleRef ret)
public void encodeToStream(nsIOutputStream aStream)
public int encodeToString(HandleRef ret)
public int encodeToStringWithContext(HandleRef aContextString, HandleRef aInfoString, HandleRef ret)
public void setNodeFixup(nsIDocumentEncoderNodeFixup aFixup)
}
internal Mono.Mozilla.nsIDocumentEncoderNodeFixup {
public nsIDOMNode fixupNode(nsIDOMNode aNode)
}
internal Mono.Mozilla.nsIDOMAbstractView {
public int getDocument(nsIDOMDocumentView& ret)
}
internal Mono.Mozilla.nsIDOMAttr {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getName(HandleRef ret)
public int getSpecified(Boolean& ret)
public int getValue(HandleRef ret)
public int setValue(HandleRef value)
public int getOwnerElement(nsIDOMElement& ret)
}
internal Mono.Mozilla.nsIDOMBarProp {
public int getVisible(Boolean& ret)
public int setVisible(bool value)
}
internal Mono.Mozilla.nsIDOMCDATASection {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getData(HandleRef ret)
public int setData(HandleRef value)
public int getLength(UInt32& ret)
public int substringData(UInt32 offset, UInt32 count, HandleRef ret)
public int appendData(HandleRef arg)
public int insertData(UInt32 offset, HandleRef arg)
public int deleteData(UInt32 offset, UInt32 count)
public int replaceData(UInt32 offset, UInt32 count, HandleRef arg)
public int splitText(UInt32 offset, nsIDOMText& ret)
}
internal Mono.Mozilla.nsIDOMCharacterData {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getData(HandleRef ret)
public int setData(HandleRef value)
public int getLength(UInt32& ret)
public int substringData(UInt32 offset, UInt32 count, HandleRef ret)
public int appendData(HandleRef arg)
public int insertData(UInt32 offset, HandleRef arg)
public int deleteData(UInt32 offset, UInt32 count)
public int replaceData(UInt32 offset, UInt32 count, HandleRef arg)
}
internal Mono.Mozilla.nsIDOMComment {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getData(HandleRef ret)
public int setData(HandleRef value)
public int getLength(UInt32& ret)
public int substringData(UInt32 offset, UInt32 count, HandleRef ret)
public int appendData(HandleRef arg)
public int insertData(UInt32 offset, HandleRef arg)
public int deleteData(UInt32 offset, UInt32 count)
public int replaceData(UInt32 offset, UInt32 count, HandleRef arg)
}
internal Mono.Mozilla.nsIDOMCounter {
public int getIdentifier(HandleRef ret)
public int getListStyle(HandleRef ret)
public int getSeparator(HandleRef ret)
}
internal Mono.Mozilla.nsIDOMCSSPrimitiveValue {
public int getCssText(HandleRef ret)
public int setCssText(HandleRef value)
public int getCssValueType(UInt16& ret)
public int getPrimitiveType(UInt16& ret)
public int setFloatValue(ushort unitType, float floatValue)
public int getFloatValue(ushort unitType, Single& ret)
public int setStringValue(ushort stringType, HandleRef stringValue)
public int getStringValue(HandleRef ret)
public int getCounterValue(nsIDOMCounter& ret)
public int getRectValue(nsIDOMRect& ret)
public int getRGBColorValue(nsIDOMRGBColor& ret)
}
internal Mono.Mozilla.nsIDOMCSSRule {
public int getType(UInt16& ret)
public int getCssText(HandleRef ret)
public int setCssText(HandleRef value)
public int getParentStyleSheet(nsIDOMCSSStyleSheet& ret)
public int getParentRule(nsIDOMCSSRule& ret)
}
internal Mono.Mozilla.nsIDOMCSSRuleList {
public int getLength(UInt32& ret)
public int item(UInt32 index, nsIDOMCSSRule& ret)
}
internal Mono.Mozilla.nsIDOMCSSStyleDeclaration {
public int getCssText(HandleRef ret)
public int setCssText(HandleRef value)
public int getPropertyValue(HandleRef propertyName, HandleRef ret)
public int getPropertyCSSValue(HandleRef propertyName, nsIDOMCSSValue& ret)
public int removeProperty(HandleRef propertyName, HandleRef ret)
public int getPropertyPriority(HandleRef propertyName, HandleRef ret)
public int setProperty(HandleRef propertyName, HandleRef value, HandleRef priority)
public int getLength(UInt32& ret)
public int item(UInt32 index, HandleRef ret)
public int getParentRule(nsIDOMCSSRule& ret)
}
internal Mono.Mozilla.nsIDOMCSSStyleSheet {
public int getType(HandleRef ret)
public int getDisabled(Boolean& ret)
public int setDisabled(bool value)
public int getOwnerNode(nsIDOMNode& ret)
public int getParentStyleSheet(nsIDOMStyleSheet& ret)
public int getHref(HandleRef ret)
public int getTitle(HandleRef ret)
public int getMedia(nsIDOMMediaList& ret)
public int getOwnerRule(nsIDOMCSSRule& ret)
public int getCssRules(nsIDOMCSSRuleList& ret)
public int insertRule(HandleRef rule, UInt32 index, UInt32& ret)
public int deleteRule(UInt32 index)
}
internal Mono.Mozilla.nsIDOMCSSValue {
public int getCssText(HandleRef ret)
public int setCssText(HandleRef value)
public int getCssValueType(UInt16& ret)
}
internal Mono.Mozilla.nsIDOMDocument {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getDoctype(nsIDOMDocumentType& ret)
public int getImplementation(nsIDOMDOMImplementation& ret)
public int getDocumentElement(nsIDOMElement& ret)
public int createElement(HandleRef tagName, nsIDOMElement& ret)
public int createDocumentFragment(nsIDOMDocumentFragment& ret)
public int createTextNode(HandleRef data, nsIDOMText& ret)
public int createComment(HandleRef data, nsIDOMComment& ret)
public int createCDATASection(HandleRef data, nsIDOMCDATASection& ret)
public int createProcessingInstruction(HandleRef target, HandleRef data, nsIDOMProcessingInstruction& ret)
public int createAttribute(HandleRef name, nsIDOMAttr& ret)
public int createEntityReference(HandleRef name, nsIDOMEntityReference& ret)
public int getElementsByTagName(HandleRef tagname, nsIDOMNodeList& ret)
public int importNode(nsIDOMNode importedNode, bool deep, nsIDOMNode& ret)
public int createElementNS(HandleRef namespaceURI, HandleRef qualifiedName, nsIDOMElement& ret)
public int createAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int getElementById(HandleRef elementId, nsIDOMElement& ret)
}
internal Mono.Mozilla.nsIDOMDocumentEvent {
public int createEvent(HandleRef eventType, nsIDOMEvent& ret)
}
internal Mono.Mozilla.nsIDOMDocumentFragment {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
}
internal Mono.Mozilla.nsIDOMDocumentRange {
public int createRange(nsIDOMRange& ret)
}
internal Mono.Mozilla.nsIDOMDocumentStyle {
public int getStyleSheets(nsIDOMStyleSheetList& ret)
}
internal Mono.Mozilla.nsIDOMDocumentType {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getName(HandleRef ret)
public int getEntities(nsIDOMNamedNodeMap& ret)
public int getNotations(nsIDOMNamedNodeMap& ret)
public int getPublicId(HandleRef ret)
public int getSystemId(HandleRef ret)
public int getInternalSubset(HandleRef ret)
}
internal Mono.Mozilla.nsIDOMDocumentView {
public int getDefaultView(nsIDOMAbstractView& ret)
}
internal Mono.Mozilla.nsIDOMDOMImplementation {
public int hasFeature(HandleRef feature, HandleRef version, Boolean& ret)
public int createDocumentType(HandleRef qualifiedName, HandleRef publicId, HandleRef systemId, nsIDOMDocumentType& ret)
public int createDocument(HandleRef namespaceURI, HandleRef qualifiedName, nsIDOMDocumentType doctype, nsIDOMDocument& ret)
}
internal Mono.Mozilla.nsIDOMDOMStringList {
public int item(UInt32 index, HandleRef ret)
public int getLength(UInt32& ret)
public int contains(HandleRef str, Boolean& ret)
}
internal Mono.Mozilla.nsIDOMElement {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getTagName(HandleRef ret)
public int getAttribute(HandleRef name, HandleRef ret)
public int setAttribute(HandleRef name, HandleRef value)
public int removeAttribute(HandleRef name)
public int getAttributeNode(HandleRef name, nsIDOMAttr& ret)
public int setAttributeNode(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int removeAttributeNode(nsIDOMAttr oldAttr, nsIDOMAttr& ret)
public int getElementsByTagName(HandleRef name, nsIDOMNodeList& ret)
public int getAttributeNS(HandleRef namespaceURI, HandleRef localName, HandleRef ret)
public int setAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, HandleRef value)
public int removeAttributeNS(HandleRef namespaceURI, HandleRef localName)
public int getAttributeNodeNS(HandleRef namespaceURI, HandleRef localName, nsIDOMAttr& ret)
public int setAttributeNodeNS(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int hasAttribute(HandleRef name, Boolean& ret)
public int hasAttributeNS(HandleRef namespaceURI, HandleRef localName, Boolean& ret)
}
internal Mono.Mozilla.nsIDOMEntityReference {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
}
internal Mono.Mozilla.nsIDOMEvent {
public int getType(HandleRef ret)
public int getTarget(nsIDOMEventTarget& ret)
public int getCurrentTarget(nsIDOMEventTarget& ret)
public int getEventPhase(UInt16& ret)
public int getBubbles(Boolean& ret)
public int getCancelable(Boolean& ret)
public int getTimeStamp(Int32& ret)
public int stopPropagation()
public int preventDefault()
public int initEvent(HandleRef eventTypeArg, bool canBubbleArg, bool cancelableArg)
}
internal Mono.Mozilla.nsIDOMEventListener {
public int handleEvent(nsIDOMEvent _event)
}
internal Mono.Mozilla.nsIDOMEventTarget {
public int addEventListener(HandleRef type, nsIDOMEventListener listener, bool useCapture)
public int removeEventListener(HandleRef type, nsIDOMEventListener listener, bool useCapture)
public int dispatchEvent(nsIDOMEvent evt, Boolean& ret)
}
internal Mono.Mozilla.nsIDOMHTMLBodyElement {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getTagName(HandleRef ret)
public int getAttribute(HandleRef name, HandleRef ret)
public int setAttribute(HandleRef name, HandleRef value)
public int removeAttribute(HandleRef name)
public int getAttributeNode(HandleRef name, nsIDOMAttr& ret)
public int setAttributeNode(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int removeAttributeNode(nsIDOMAttr oldAttr, nsIDOMAttr& ret)
public int getElementsByTagName(HandleRef name, nsIDOMNodeList& ret)
public int getAttributeNS(HandleRef namespaceURI, HandleRef localName, HandleRef ret)
public int setAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, HandleRef value)
public int removeAttributeNS(HandleRef namespaceURI, HandleRef localName)
public int getAttributeNodeNS(HandleRef namespaceURI, HandleRef localName, nsIDOMAttr& ret)
public int setAttributeNodeNS(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int hasAttribute(HandleRef name, Boolean& ret)
public int hasAttributeNS(HandleRef namespaceURI, HandleRef localName, Boolean& ret)
public int getId(HandleRef ret)
public int setId(HandleRef value)
public int getTitle(HandleRef ret)
public int setTitle(HandleRef value)
public int getLang(HandleRef ret)
public int setLang(HandleRef value)
public int getDir(HandleRef ret)
public int setDir(HandleRef value)
public int getClassName(HandleRef ret)
public int setClassName(HandleRef value)
public int getALink(HandleRef ret)
public int setALink(HandleRef value)
public int getBackground(HandleRef ret)
public int setBackground(HandleRef value)
public int getBgColor(HandleRef ret)
public int setBgColor(HandleRef value)
public int getLink(HandleRef ret)
public int setLink(HandleRef value)
public int getText(HandleRef ret)
public int setText(HandleRef value)
public int getVLink(HandleRef ret)
public int setVLink(HandleRef value)
}
internal Mono.Mozilla.nsIDOMHTMLCollection {
public int getLength(UInt32& ret)
public int item(UInt32 index, nsIDOMNode& ret)
public int namedItem(HandleRef name, nsIDOMNode& ret)
}
internal Mono.Mozilla.nsIDOMHTMLDocument {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getDoctype(nsIDOMDocumentType& ret)
public int getImplementation(nsIDOMDOMImplementation& ret)
public int getDocumentElement(nsIDOMElement& ret)
public int createElement(HandleRef tagName, nsIDOMElement& ret)
public int createDocumentFragment(nsIDOMDocumentFragment& ret)
public int createTextNode(HandleRef data, nsIDOMText& ret)
public int createComment(HandleRef data, nsIDOMComment& ret)
public int createCDATASection(HandleRef data, nsIDOMCDATASection& ret)
public int createProcessingInstruction(HandleRef target, HandleRef data, nsIDOMProcessingInstruction& ret)
public int createAttribute(HandleRef name, nsIDOMAttr& ret)
public int createEntityReference(HandleRef name, nsIDOMEntityReference& ret)
public int getElementsByTagName(HandleRef tagname, nsIDOMNodeList& ret)
public int importNode(nsIDOMNode importedNode, bool deep, nsIDOMNode& ret)
public int createElementNS(HandleRef namespaceURI, HandleRef qualifiedName, nsIDOMElement& ret)
public int createAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int getElementById(HandleRef elementId, nsIDOMElement& ret)
public int getTitle(HandleRef ret)
public int setTitle(HandleRef value)
public int getReferrer(HandleRef ret)
public int getDomain(HandleRef ret)
public int getURL(HandleRef ret)
public int getBody(nsIDOMHTMLElement& ret)
public int setBody(nsIDOMHTMLElement value)
public int getImages(nsIDOMHTMLCollection& ret)
public int getApplets(nsIDOMHTMLCollection& ret)
public int getLinks(nsIDOMHTMLCollection& ret)
public int getForms(nsIDOMHTMLCollection& ret)
public int getAnchors(nsIDOMHTMLCollection& ret)
public int getCookie(HandleRef ret)
public int setCookie(HandleRef value)
public int open()
public int close()
public int write(HandleRef text)
public int writeln(HandleRef text)
public int getElementsByName(HandleRef elementName, nsIDOMNodeList& ret)
}
internal Mono.Mozilla.nsIDOMHTMLElement {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getTagName(HandleRef ret)
public int getAttribute(HandleRef name, HandleRef ret)
public int setAttribute(HandleRef name, HandleRef value)
public int removeAttribute(HandleRef name)
public int getAttributeNode(HandleRef name, nsIDOMAttr& ret)
public int setAttributeNode(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int removeAttributeNode(nsIDOMAttr oldAttr, nsIDOMAttr& ret)
public int getElementsByTagName(HandleRef name, nsIDOMNodeList& ret)
public int getAttributeNS(HandleRef namespaceURI, HandleRef localName, HandleRef ret)
public int setAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, HandleRef value)
public int removeAttributeNS(HandleRef namespaceURI, HandleRef localName)
public int getAttributeNodeNS(HandleRef namespaceURI, HandleRef localName, nsIDOMAttr& ret)
public int setAttributeNodeNS(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int hasAttribute(HandleRef name, Boolean& ret)
public int hasAttributeNS(HandleRef namespaceURI, HandleRef localName, Boolean& ret)
public int getId(HandleRef ret)
public int setId(HandleRef value)
public int getTitle(HandleRef ret)
public int setTitle(HandleRef value)
public int getLang(HandleRef ret)
public int setLang(HandleRef value)
public int getDir(HandleRef ret)
public int setDir(HandleRef value)
public int getClassName(HandleRef ret)
public int setClassName(HandleRef value)
}
internal Mono.Mozilla.nsIDOMHTMLStyleElement {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getTagName(HandleRef ret)
public int getAttribute(HandleRef name, HandleRef ret)
public int setAttribute(HandleRef name, HandleRef value)
public int removeAttribute(HandleRef name)
public int getAttributeNode(HandleRef name, nsIDOMAttr& ret)
public int setAttributeNode(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int removeAttributeNode(nsIDOMAttr oldAttr, nsIDOMAttr& ret)
public int getElementsByTagName(HandleRef name, nsIDOMNodeList& ret)
public int getAttributeNS(HandleRef namespaceURI, HandleRef localName, HandleRef ret)
public int setAttributeNS(HandleRef namespaceURI, HandleRef qualifiedName, HandleRef value)
public int removeAttributeNS(HandleRef namespaceURI, HandleRef localName)
public int getAttributeNodeNS(HandleRef namespaceURI, HandleRef localName, nsIDOMAttr& ret)
public int setAttributeNodeNS(nsIDOMAttr newAttr, nsIDOMAttr& ret)
public int getElementsByTagNameNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNodeList& ret)
public int hasAttribute(HandleRef name, Boolean& ret)
public int hasAttributeNS(HandleRef namespaceURI, HandleRef localName, Boolean& ret)
public int getId(HandleRef ret)
public int setId(HandleRef value)
public int getTitle(HandleRef ret)
public int setTitle(HandleRef value)
public int getLang(HandleRef ret)
public int setLang(HandleRef value)
public int getDir(HandleRef ret)
public int setDir(HandleRef value)
public int getClassName(HandleRef ret)
public int setClassName(HandleRef value)
public int getDisabled(Boolean& ret)
public int setDisabled(bool value)
public int getMedia(HandleRef ret)
public int setMedia(HandleRef value)
public int getType(HandleRef ret)
public int setType(HandleRef value)
}
internal Mono.Mozilla.nsIDOMKeyEvent {
public int getType(HandleRef ret)
public int getTarget(nsIDOMEventTarget& ret)
public int getCurrentTarget(nsIDOMEventTarget& ret)
public int getEventPhase(UInt16& ret)
public int getBubbles(Boolean& ret)
public int getCancelable(Boolean& ret)
public int getTimeStamp(Int32& ret)
public int stopPropagation()
public int preventDefault()
public int initEvent(HandleRef eventTypeArg, bool canBubbleArg, bool cancelableArg)
public int getView(nsIDOMAbstractView& ret)
public int getDetail(Int32& ret)
public int initUIEvent(HandleRef typeArg, bool canBubbleArg, bool cancelableArg, nsIDOMAbstractView viewArg, int detailArg)
public int getCharCode(UInt32& ret)
public int getKeyCode(UInt32& ret)
public int getAltKey(Boolean& ret)
public int getCtrlKey(Boolean& ret)
public int getShiftKey(Boolean& ret)
public int getMetaKey(Boolean& ret)
public int initKeyEvent(HandleRef typeArg, bool canBubbleArg, bool cancelableArg, nsIDOMAbstractView viewArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, UInt32 keyCodeArg, UInt32 charCodeArg)
}
internal Mono.Mozilla.nsIDOMMediaList {
public int getMediaText(HandleRef ret)
public int setMediaText(HandleRef value)
public int getLength(UInt32& ret)
public int item(UInt32 index, HandleRef ret)
public int deleteMedium(HandleRef oldMedium)
public int appendMedium(HandleRef newMedium)
}
internal Mono.Mozilla.nsIDOMMouseEvent {
public int getType(HandleRef ret)
public int getTarget(nsIDOMEventTarget& ret)
public int getCurrentTarget(nsIDOMEventTarget& ret)
public int getEventPhase(UInt16& ret)
public int getBubbles(Boolean& ret)
public int getCancelable(Boolean& ret)
public int getTimeStamp(Int32& ret)
public int stopPropagation()
public int preventDefault()
public int initEvent(HandleRef eventTypeArg, bool canBubbleArg, bool cancelableArg)
public int getView(nsIDOMAbstractView& ret)
public int getDetail(Int32& ret)
public int initUIEvent(HandleRef typeArg, bool canBubbleArg, bool cancelableArg, nsIDOMAbstractView viewArg, int detailArg)
public int getScreenX(Int32& ret)
public int getScreenY(Int32& ret)
public int getClientX(Int32& ret)
public int getClientY(Int32& ret)
public int getCtrlKey(Boolean& ret)
public int getShiftKey(Boolean& ret)
public int getAltKey(Boolean& ret)
public int getMetaKey(Boolean& ret)
public int getButton(UInt16& ret)
public int getRelatedTarget(nsIDOMEventTarget& ret)
public int initMouseEvent(HandleRef typeArg, bool canBubbleArg, bool cancelableArg, nsIDOMAbstractView viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, bool ctrlKeyArg, bool altKeyArg, bool shiftKeyArg, bool metaKeyArg, ushort buttonArg, nsIDOMEventTarget relatedTargetArg)
}
internal Mono.Mozilla.nsIDOMNamedNodeMap {
public int getNamedItem(HandleRef name, nsIDOMNode& ret)
public int setNamedItem(nsIDOMNode arg, nsIDOMNode& ret)
public int removeNamedItem(HandleRef name, nsIDOMNode& ret)
public int item(UInt32 index, nsIDOMNode& ret)
public int getLength(UInt32& ret)
public int getNamedItemNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNode& ret)
public int setNamedItemNS(nsIDOMNode arg, nsIDOMNode& ret)
public int removeNamedItemNS(HandleRef namespaceURI, HandleRef localName, nsIDOMNode& ret)
}
internal Mono.Mozilla.nsIDOMNode {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
}
internal Mono.Mozilla.nsIDOMNodeList {
public int item(UInt32 index, nsIDOMNode& ret)
public int getLength(UInt32& ret)
}
internal Mono.Mozilla.nsIDOMNSHTMLElement {
public int getOffsetTop(Int32& ret)
public int getOffsetLeft(Int32& ret)
public int getOffsetWidth(Int32& ret)
public int getOffsetHeight(Int32& ret)
public int getOffsetParent(nsIDOMElement& ret)
public int getInnerHTML(HandleRef ret)
public int setInnerHTML(HandleRef value)
public int getScrollTop(Int32& ret)
public int setScrollTop(int value)
public int getScrollLeft(Int32& ret)
public int setScrollLeft(int value)
public int getScrollHeight(Int32& ret)
public int getScrollWidth(Int32& ret)
public int getClientHeight(Int32& ret)
public int getClientWidth(Int32& ret)
public int getTabIndex(Int32& ret)
public int setTabIndex(int value)
public int blur()
public int focus()
public int scrollIntoView(bool top)
}
internal Mono.Mozilla.nsIDOMNSRange {
public int createContextualFragment(HandleRef fragment, nsIDOMDocumentFragment& ret)
public int isPointInRange(nsIDOMNode parent, int offset, Boolean& ret)
public int comparePoint(nsIDOMNode parent, int offset, Int16& ret)
public int intersectsNode(nsIDOMNode n, Boolean& ret)
public int compareNode(nsIDOMNode n, UInt16& ret)
public int nSDetach()
}
internal Mono.Mozilla.nsIDOMProcessingInstruction {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getTarget(HandleRef ret)
public int getData(HandleRef ret)
public int setData(HandleRef value)
}
internal Mono.Mozilla.nsIDOMRange {
public int getStartContainer(nsIDOMNode& ret)
public int getStartOffset(Int32& ret)
public int getEndContainer(nsIDOMNode& ret)
public int getEndOffset(Int32& ret)
public int getCollapsed(Boolean& ret)
public int getCommonAncestorContainer(nsIDOMNode& ret)
public int setStart(nsIDOMNode refNode, int offset)
public int setEnd(nsIDOMNode refNode, int offset)
public int setStartBefore(nsIDOMNode refNode)
public int setStartAfter(nsIDOMNode refNode)
public int setEndBefore(nsIDOMNode refNode)
public int setEndAfter(nsIDOMNode refNode)
public int collapse(bool toStart)
public int selectNode(nsIDOMNode refNode)
public int selectNodeContents(nsIDOMNode refNode)
public int compareBoundaryPoints(ushort how, nsIDOMRange sourceRange, Int16& ret)
public int deleteContents()
public int extractContents(nsIDOMDocumentFragment& ret)
public int cloneContents(nsIDOMDocumentFragment& ret)
public int insertNode(nsIDOMNode newNode)
public int surroundContents(nsIDOMNode newParent)
public int cloneRange(nsIDOMRange& ret)
public int toString(HandleRef ret)
public int detach()
}
internal Mono.Mozilla.nsIDOMRect {
public int getTop(nsIDOMCSSPrimitiveValue& ret)
public int getRight(nsIDOMCSSPrimitiveValue& ret)
public int getBottom(nsIDOMCSSPrimitiveValue& ret)
public int getLeft(nsIDOMCSSPrimitiveValue& ret)
}
internal Mono.Mozilla.nsIDOMRGBColor {
public int getRed(nsIDOMCSSPrimitiveValue& ret)
public int getGreen(nsIDOMCSSPrimitiveValue& ret)
public int getBlue(nsIDOMCSSPrimitiveValue& ret)
}
internal Mono.Mozilla.nsIDOMStyleSheet {
public int getType(HandleRef ret)
public int getDisabled(Boolean& ret)
public int setDisabled(bool value)
public int getOwnerNode(nsIDOMNode& ret)
public int getParentStyleSheet(nsIDOMStyleSheet& ret)
public int getHref(HandleRef ret)
public int getTitle(HandleRef ret)
public int getMedia(nsIDOMMediaList& ret)
}
internal Mono.Mozilla.nsIDOMStyleSheetList {
public int getLength(UInt32& ret)
public int item(UInt32 index, nsIDOMStyleSheet& ret)
}
internal Mono.Mozilla.nsIDOMText {
public int getNodeName(HandleRef ret)
public int getNodeValue(HandleRef ret)
public int setNodeValue(HandleRef value)
public int getNodeType(UInt16& ret)
public int getParentNode(nsIDOMNode& ret)
public int getChildNodes(nsIDOMNodeList& ret)
public int getFirstChild(nsIDOMNode& ret)
public int getLastChild(nsIDOMNode& ret)
public int getPreviousSibling(nsIDOMNode& ret)
public int getNextSibling(nsIDOMNode& ret)
public int getAttributes(nsIDOMNamedNodeMap& ret)
public int getOwnerDocument(nsIDOMDocument& ret)
public int insertBefore(nsIDOMNode newChild, nsIDOMNode refChild, nsIDOMNode& ret)
public int replaceChild(nsIDOMNode newChild, nsIDOMNode oldChild, nsIDOMNode& ret)
public int removeChild(nsIDOMNode oldChild, nsIDOMNode& ret)
public int appendChild(nsIDOMNode newChild, nsIDOMNode& ret)
public int hasChildNodes(Boolean& ret)
public int cloneNode(bool deep, nsIDOMNode& ret)
public int normalize()
public int isSupported(HandleRef feature, HandleRef version, Boolean& ret)
public int getNamespaceURI(HandleRef ret)
public int getPrefix(HandleRef ret)
public int setPrefix(HandleRef value)
public int getLocalName(HandleRef ret)
public int hasAttributes(Boolean& ret)
public int getData(HandleRef ret)
public int setData(HandleRef value)
public int getLength(UInt32& ret)
public int substringData(UInt32 offset, UInt32 count, HandleRef ret)
public int appendData(HandleRef arg)
public int insertData(UInt32 offset, HandleRef arg)
public int deleteData(UInt32 offset, UInt32 count)
public int replaceData(UInt32 offset, UInt32 count, HandleRef arg)
public int splitText(UInt32 offset, nsIDOMText& ret)
}
internal Mono.Mozilla.nsIDOMUIEvent {
public int getType(HandleRef ret)
public int getTarget(nsIDOMEventTarget& ret)
public int getCurrentTarget(nsIDOMEventTarget& ret)
public int getEventPhase(UInt16& ret)
public int getBubbles(Boolean& ret)
public int getCancelable(Boolean& ret)
public int getTimeStamp(Int32& ret)
public int stopPropagation()
public int preventDefault()
public int initEvent(HandleRef eventTypeArg, bool canBubbleArg, bool cancelableArg)
public int getView(nsIDOMAbstractView& ret)
public int getDetail(Int32& ret)
public int initUIEvent(HandleRef typeArg, bool canBubbleArg, bool cancelableArg, nsIDOMAbstractView viewArg, int detailArg)
}
internal Mono.Mozilla.nsIDOMViewCSS {
public int getDocument(nsIDOMDocumentView& ret)
public int getComputedStyle(nsIDOMElement elt, HandleRef pseudoElt, nsIDOMCSSStyleDeclaration& ret)
}
internal Mono.Mozilla.nsIDOMWindow {
public int getDocument(nsIDOMDocument& ret)
public int getParent(nsIDOMWindow& ret)
public int getTop(nsIDOMWindow& ret)
public int getScrollbars(nsIDOMBarProp& ret)
public int getFrames(nsIDOMWindowCollection& ret)
public int getName(HandleRef ret)
public int setName(HandleRef value)
public int getTextZoom(Single& ret)
public int setTextZoom(float value)
public int getScrollX(Int32& ret)
public int getScrollY(Int32& ret)
public int scrollTo(int xScroll, int yScroll)
public int scrollBy(int xScrollDif, int yScrollDif)
public int getSelection(nsISelection& ret)
public int scrollByLines(int numLines)
public int scrollByPages(int numPages)
public int sizeToContent()
}
internal Mono.Mozilla.nsIDOMWindowCollection {
public int getLength(UInt32& ret)
public int item(UInt32 index, nsIDOMWindow& ret)
public int namedItem(HandleRef name, nsIDOMWindow& ret)
}
internal Mono.Mozilla.nsIErrorService {
public int registerErrorStringBundle(short errorModule, string stringBundleURL)
public int unregisterErrorStringBundle(short errorModule)
public int getErrorStringBundle(short errorModule, String& ret)
public int registerErrorStringBundleKey(int error, string stringBundleKey)
public int unregisterErrorStringBundleKey(int error)
public int getErrorStringBundleKey(int error, StringBuilder ret)
}
internal Mono.Mozilla.nsIFile {
public int append(HandleRef node)
public int appendNative(HandleRef node)
public int normalize()
public int create(UInt32 type, UInt32 permissions)
public int getLeafName(HandleRef ret)
public int setLeafName(HandleRef value)
public int getNativeLeafName(HandleRef ret)
public int setNativeLeafName(HandleRef value)
public int copyTo(nsIFile newParentDir, HandleRef newName)
public int CopyToNative(nsIFile newParentDir, HandleRef newName)
public int copyToFollowingLinks(nsIFile newParentDir, HandleRef newName)
public int copyToFollowingLinksNative(nsIFile newParentDir, HandleRef newName)
public int moveTo(nsIFile newParentDir, HandleRef newName)
public int moveToNative(nsIFile newParentDir, HandleRef newName)
public int remove(bool recursive)
public int getPermissions(UInt32& ret)
public int setPermissions(UInt32 value)
public int getPermissionsOfLink(UInt32& ret)
public int setPermissionsOfLink(UInt32 value)
public int getLastModifiedTime(Int64& ret)
public int setLastModifiedTime(long value)
public int getLastModifiedTimeOfLink(Int64& ret)
public int setLastModifiedTimeOfLink(long value)
public int getFileSize(Int64& ret)
public int setFileSize(long value)
public int getFileSizeOfLink(Int64& ret)
public int getTarget(HandleRef ret)
public int getNativeTarget(HandleRef ret)
public int getPath(HandleRef ret)
public int getNativePath(HandleRef ret)
public int exists(Boolean& ret)
public int isWritable(Boolean& ret)
public int isReadable(Boolean& ret)
public int isExecutable(Boolean& ret)
public int isHidden(Boolean& ret)
public int isDirectory(Boolean& ret)
public int isFile(Boolean& ret)
public int isSymlink(Boolean& ret)
public int isSpecial(Boolean& ret)
public int createUnique(UInt32 type, UInt32 permissions)
public int clone(nsIFile& ret)
public int equals(nsIFile inFile, Boolean& ret)
public int contains(nsIFile inFile, bool recur, Boolean& ret)
public int getParent(nsIFile& ret)
public int getDirectoryEntries(nsISimpleEnumerator& ret)
}
internal Mono.Mozilla.nsIHistoryEntry {
public int getURI(nsIURI& ret)
public int getTitle(string ret)
public int getIsSubFrame(Boolean& ret)
}
internal Mono.Mozilla.nsIInputStream {
public int close()
public int available(UInt32& ret)
public int read(HandleRef aBuf, UInt32 aCount, UInt32& ret)
public int readSegments(nsIWriteSegmentFunDelegate aWriter, IntPtr aClosure, UInt32 aCount, UInt32& ret)
public int isNonBlocking(Boolean& ret)
}
internal Mono.Mozilla.nsIInterfaceRequestor {
public int getInterface(Guid uuid, IntPtr& result)
}
internal Mono.Mozilla.nsIIOService {
public int getProtocolHandler(string aScheme, nsIProtocolHandler& ret)
public int getProtocolFlags(string aScheme, UInt32& ret)
public int newURI(HandleRef aSpec, string aOriginCharset, nsIURI aBaseURI, nsIURI& ret)
public int newFileURI(nsIFile aFile, nsIURI& ret)
public int newChannelFromURI(nsIURI aURI, nsIChannel& ret)
public int newChannel(HandleRef aSpec, string aOriginCharset, nsIURI aBaseURI, nsIChannel& ret)
public int getOffline(Boolean& ret)
public int setOffline(bool value)
public int allowPort(int aPort, string aScheme, Boolean& ret)
public int extractScheme(HandleRef urlString, HandleRef ret)
}
internal Mono.Mozilla.nsILoadGroup {
public int getName(HandleRef ret)
public int isPending(Boolean& ret)
public int getStatus(Int32& ret)
public int cancel(int aStatus)
public int suspend()
public int resume()
public int getLoadGroup(nsILoadGroup& ret)
public int setLoadGroup(nsILoadGroup value)
public int getLoadFlags(UInt64& ret)
public int setLoadFlags(ulong value)
public int getGroupObserver(nsIRequestObserver& ret)
public int setGroupObserver(nsIRequestObserver value)
public int getDefaultLoadRequest(nsIRequest& ret)
public int setDefaultLoadRequest(nsIRequest value)
public int addRequest(nsIRequest aRequest, IntPtr aContext)
public int removeRequest(nsIRequest aRequest, IntPtr aContext, int aStatus)
public int getRequests(nsISimpleEnumerator& ret)
public int getActiveCount(UInt32& ret)
public int getNotificationCallbacks(nsIInterfaceRequestor& ret)
public int setNotificationCallbacks(nsIInterfaceRequestor value)
}
internal Mono.Mozilla.nsInputStream : object {
public nsIInputStream GetProxy(IWebBrowser control, nsIInputStream obj)
}
internal Mono.Mozilla.nsInterfaceRequestor : object {
public nsIInterfaceRequestor GetProxy(IWebBrowser control, nsIInterfaceRequestor obj)
}
internal Mono.Mozilla.nsIObserver {
public int observe(IntPtr aSubject, string aTopic, string aData)
}
internal Mono.Mozilla.nsIOService : object {
public nsIIOService GetProxy(IWebBrowser control, nsIIOService obj)
}
internal Mono.Mozilla.nsIOutputStream {
public int close()
public int flush()
public int write(string aBuf, UInt32 aCount, UInt32& ret)
public int writeFrom(nsIInputStream aFromStream, UInt32 aCount, UInt32& ret)
public int writeSegments(nsIReadSegmentFunDelegate aReader, IntPtr aClosure, UInt32 aCount, UInt32& ret)
public int isNonBlocking(Boolean& ret)
}
internal Mono.Mozilla.nsIPersistentProperties {
public int get(string prop, Guid iid, IntPtr& result)
public int set(string prop, IntPtr value)
public int has(string prop, Boolean& ret)
public int undefine(string prop)
public int getKeys(UInt32& count, String[]& keys)
public int load(nsIInputStream input)
public int save(nsIOutputStream output, HandleRef header)
public int subclass(nsIPersistentProperties superclass)
public int enumerate(nsISimpleEnumerator& ret)
public int getStringProperty(HandleRef key, HandleRef ret)
public int setStringProperty(HandleRef key, HandleRef value, HandleRef ret)
}
internal Mono.Mozilla.nsIPrefBranch {
public int getRoot(IntPtr& ret)
public int getPrefType(string aPrefName, Int32& ret)
public int getBoolPref(string aPrefName, Boolean& ret)
public int setBoolPref(string aPrefName, int aValue)
public int getCharPref(string aPrefName, String& ret)
public int setCharPref(string aPrefName, string aValue)
public int getIntPref(string aPrefName, Int32& ret)
public int setIntPref(string aPrefName, int aValue)
public int getComplexValue(string aPrefName, Guid aType, IntPtr& aValue)
public int setComplexValue(string aPrefName, Guid aType, IntPtr aValue)
public int clearUserPref(string aPrefName)
public int lockPref(string aPrefName)
public int prefHasUserValue(string aPrefName, Boolean& ret)
public int prefIsLocked(string aPrefName, Boolean& ret)
public int unlockPref(string aPrefName)
public int deleteBranch(string aStartingAt)
public int getChildList(string aStartingAt, UInt32& aCount, String[]& aChildArray)
public int resetBranch(string aStartingAt)
}
internal Mono.Mozilla.nsIPrefService {
public int readUserPrefs(nsIFile aFile)
public int resetPrefs()
public int resetUserPrefs()
public int savePrefFile(nsIFile aFile)
public int getBranch(string aPrefRoot, nsIPrefBranch& ret)
public int getDefaultBranch(string aPrefRoot, nsIPrefBranch& ret)
}
internal Mono.Mozilla.nsIProperties {
public int get(string prop, Guid iid, IntPtr& result)
public int set(string prop, IntPtr value)
public int has(string prop, Boolean& ret)
public int undefine(string prop)
public int getKeys(UInt32& count, String[]& keys)
}
internal Mono.Mozilla.nsIProtocolHandler {
public int getScheme(HandleRef ret)
public int getDefaultPort(Int32& ret)
public int getProtocolFlags(UInt32& ret)
public int newURI(HandleRef aSpec, string aOriginCharset, nsIURI aBaseURI, nsIURI& ret)
public int newChannel(nsIURI aURI, nsIChannel& ret)
public int allowPort(int port, string scheme, Boolean& ret)
}
internal Mono.Mozilla.nsIReadSegmentFunDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIOutputStream aInStream, IntPtr aClosure, string aFromSegment, UInt32 aCount, UInt32& aWriteCount)
public IAsyncResult BeginInvoke(nsIOutputStream aInStream, IntPtr aClosure, string aFromSegment, UInt32 aCount, UInt32& aWriteCount, AsyncCallback callback, object object)
public void EndInvoke(UInt32& aWriteCount, IAsyncResult result)
}
internal Mono.Mozilla.nsIRequest {
public int getName(HandleRef ret)
public int isPending(Boolean& ret)
public int getStatus(UInt32& ret)
public int cancel(UInt32 aStatus)
public int suspend()
public int resume()
public int getLoadGroup(nsILoadGroup& ret)
public int setLoadGroup(nsILoadGroup value)
public int getLoadFlags(UInt64& ret)
public int setLoadFlags(ulong value)
}
internal Mono.Mozilla.nsIRequestObserver {
public int onStartRequest(nsIRequest aRequest, IntPtr aContext)
public int onStopRequest(nsIRequest aRequest, IntPtr aContext, int aStatusCode)
}
internal Mono.Mozilla.nsISelection {
public int getAnchorNode(nsIDOMNode& ret)
public int getAnchorOffset(Int32& ret)
public int getFocusNode(nsIDOMNode& ret)
public int getFocusOffset(Int32& ret)
public int getIsCollapsed(Boolean& ret)
public int getRangeCount(Int32& ret)
public int getRangeAt(int index, nsIDOMRange& ret)
public int collapse(nsIDOMNode parentNode, int offset)
public int extend(nsIDOMNode parentNode, int offset)
public int collapseToStart()
public int collapseToEnd()
public int containsNode(nsIDOMNode node, bool entirelyContained, Boolean& ret)
public int selectAllChildren(nsIDOMNode parentNode)
public int addRange(nsIDOMRange range)
public int removeRange(nsIDOMRange range)
public int removeAllRanges()
public int deleteFromDocument()
public int selectionLanguageChange(bool langRTL)
public int toString(string ret)
}
internal Mono.Mozilla.nsIServiceManager {
public IntPtr getService(Guid aClass, Guid aIID)
public int getServiceByContractID(string aContractID, Guid aIID, IntPtr& ret)
public bool isServiceInstantiated(Guid aClass, Guid aIID)
public bool isServiceInstantiatedByContractID(string aContractID, Guid aIID)
}
internal Mono.Mozilla.nsISHistory {
public int getCount(Int32& ret)
public int getIndex(Int32& ret)
public int getMaxLength(Int32& ret)
public int setMaxLength(int value)
public int getEntryAtIndex(int index, bool modifyIndex, nsIHistoryEntry& ret)
public int PurgeHistory(int numEntries)
public int addSHistoryListener(nsISHistoryListener aListener)
public int removeSHistoryListener(nsISHistoryListener aListener)
public int getSHistoryEnumerator(nsISimpleEnumerator& ret)
}
internal Mono.Mozilla.nsISHistoryListener {
public int OnHistoryNewEntry(nsIURI aNewURI)
public int OnHistoryGoBack(nsIURI aBackURI, Boolean& ret)
public int OnHistoryGoForward(nsIURI aForwardURI, Boolean& ret)
public int OnHistoryReload(nsIURI aReloadURI, UInt32 aReloadFlags, Boolean& ret)
public int OnHistoryGotoIndex(int aIndex, nsIURI aGotoURI, Boolean& ret)
public int OnHistoryPurge(int aNumEntries, Boolean& ret)
}
internal Mono.Mozilla.nsISimpleEnumerator {
public int hasMoreElements(Boolean& ret)
public int getNext(IntPtr& ret)
}
internal Mono.Mozilla.nsIStreamListener {
public int onStartRequest(nsIRequest aRequest, IntPtr aContext)
public int onStopRequest(nsIRequest aRequest, IntPtr aContext, int aStatusCode)
public int onDataAvailable(nsIRequest aRequest, IntPtr aContext, nsIInputStream aInputStream, UInt32 aOffset, UInt32 aCount)
}
internal Mono.Mozilla.nsITimer {
public int init(nsIObserver aObserver, UInt32 aDelay, UInt32 aType)
public int initWithFuncCallback(nsITimerCallbackDelegate aCallback, IntPtr aClosure, UInt32 aDelay, UInt32 aType)
public int initWithCallback(nsITimerCallback aCallback, UInt32 aDelay, UInt32 aType)
public int cancel()
public int getDelay(UInt32& ret)
public int setDelay(UInt32 value)
public int getType(UInt32& ret)
public int setType(UInt32 value)
public int getClosure(IntPtr ret)
public int getCallback(nsITimerCallback& ret)
}
internal Mono.Mozilla.nsITimerCallback {
public int notify(nsITimer timer)
}
internal Mono.Mozilla.nsITimerCallbackDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsITimer timer, IntPtr closure)
public IAsyncResult BeginInvoke(nsITimer timer, IntPtr closure, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Mozilla.nsIURI {
public int getSpec(HandleRef ret)
public int setSpec(HandleRef value)
public int getPrePath(HandleRef ret)
public int getScheme(HandleRef ret)
public int setScheme(HandleRef value)
public int getUserPass(HandleRef ret)
public int setUserPass(HandleRef value)
public int getUsername(HandleRef ret)
public int setUsername(HandleRef value)
public int getPassword(HandleRef ret)
public int setPassword(HandleRef value)
public int getHostPort(HandleRef ret)
public int setHostPort(HandleRef value)
public int getHost(HandleRef ret)
public int setHost(HandleRef value)
public int getPort(Int32& ret)
public int setPort(int value)
public int getPath(HandleRef ret)
public int setPath(HandleRef value)
public int equals(nsIURI other, Boolean& ret)
public int schemeIs(string scheme, Boolean& ret)
public int clone(nsIURI& ret)
public int resolve(HandleRef relativePath, HandleRef ret)
public int getAsciiSpec(HandleRef ret)
public int getAsciiHost(HandleRef ret)
public int getOriginCharset(HandleRef ret)
}
internal Mono.Mozilla.nsIURIContentListener {
public bool onStartURIOpen(nsIURI aURI)
public bool doContent(string aContentType, bool aIsContentPreferred, nsIRequest aRequest, nsIStreamListener& aContentHandler)
public bool isPreferred(string aContentType, String& aDesiredContentType)
public bool canHandleContent(string aContentType, bool aIsContentPreferred, String& aDesiredContentType)
public IntPtr getLoadCookie()
public void setLoadCookie(IntPtr value)
public nsIURIContentListener getParentContentListener()
public void setParentContentListener(nsIURIContentListener value)
}
internal Mono.Mozilla.nsIWeakReference {
public int QueryReferent(Guid uuid, IntPtr& result)
}
internal Mono.Mozilla.nsIWebBrowser {
public int addWebBrowserListener(nsIWeakReference aListener, Guid aIID)
public int removeWebBrowserListener(nsIWeakReference aListener, Guid aIID)
public int getContainerWindow(nsIWebBrowserChrome& ret)
public int setContainerWindow(nsIWebBrowserChrome value)
public int getParentURIContentListener(nsIURIContentListener& ret)
public int setParentURIContentListener(nsIURIContentListener value)
public int getContentDOMWindow(nsIDOMWindow& ret)
}
internal Mono.Mozilla.nsIWebBrowserChrome {
public int setStatus(UInt32 statusType, string status)
public int getWebBrowser(nsIWebBrowser& ret)
public int setWebBrowser(nsIWebBrowser value)
public int getChromeFlags(UInt32& ret)
public int setChromeFlags(UInt32 value)
public int destroyBrowserWindow()
public int sizeBrowserTo(int aCX, int aCY)
public int showAsModal()
public int isWindowModal(Boolean& ret)
public int exitModalEventLoop(int aStatus)
}
internal Mono.Mozilla.nsIWebBrowserChromeFocus {
public int focusNextElement()
public int focusPrevElement()
}
internal Mono.Mozilla.nsIWebBrowserFocus {
public int activate()
public int deactivate()
public int setFocusAtFirstElement()
public int setFocusAtLastElement()
public int getFocusedWindow(nsIDOMWindow& ret)
public int setFocusedWindow(nsIDOMWindow value)
public int getFocusedElement(nsIDOMElement& ret)
public int setFocusedElement(nsIDOMElement value)
}
internal Mono.Mozilla.nsIWebBrowserPersist {
public int cancel(int aReason)
public int getPersistFlags(UInt32& ret)
public int setPersistFlags(UInt32 value)
public int getCurrentState(UInt32& ret)
public int getResult(UInt32& ret)
public int getProgressListener(nsIWebProgressListener& ret)
public int setProgressListener(nsIWebProgressListener value)
public int saveURI(nsIURI aURI, IntPtr aCacheKey, nsIURI aReferrer, nsIInputStream aPostData, string aExtraHeaders, IntPtr aFile)
public int saveChannel(nsIChannel aChannel, IntPtr aFile)
public int saveDocument(nsIDOMDocument aDocument, IntPtr aFile, IntPtr aDataPath, string aOutputContentType, UInt32 aEncodingFlags, UInt32 aWrapColumn)
public int cancelSave()
}
internal Mono.Mozilla.nsIWebBrowserStream {
public int openStream(nsIURI aBaseURI, HandleRef aContentType)
public int appendToStream(IntPtr aData, UInt32 aLen)
public int closeStream()
}
internal Mono.Mozilla.nsIWebNavigation {
public int getCanGoBack(Boolean& ret)
public int getCanGoForward(Boolean& ret)
public int goBack()
public int goForward()
public int gotoIndex(int index)
public int loadURI(string aURI, UInt32 aLoadFlags, nsIURI aReferrer, nsIInputStream aPostData, nsIInputStream aHeaders)
public int reload(UInt32 aReloadFlags)
public int stop(UInt32 aStopFlags)
public int getDocument(nsIDOMDocument& ret)
public int getCurrentURI(nsIURI& ret)
public int getReferringURI(nsIURI& ret)
public int getSessionHistory(nsISHistory& ret)
public int setSessionHistory(nsISHistory value)
}
internal Mono.Mozilla.nsIWebProgress {
public int addProgressListener(nsIWebProgressListener aListener, UInt32 aNotifyMask)
public int removeProgressListener(nsIWebProgressListener aListener)
public int getDOMWindow(nsIDOMWindow& ret)
public int getIsLoadingDocument(Boolean& ret)
}
internal Mono.Mozilla.nsIWebProgressListener {
public int onStateChange(nsIWebProgress aWebProgress, nsIRequest aRequest, UInt32 aStateFlags, int aStatus)
public int onProgressChange(nsIWebProgress aWebProgress, nsIRequest aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress)
public int onLocationChange(nsIWebProgress aWebProgress, nsIRequest aRequest, nsIURI aLocation)
public int onStatusChange(nsIWebProgress aWebProgress, nsIRequest aRequest, int aStatus, string aMessage)
public int onSecurityChange(nsIWebProgress aWebProgress, nsIRequest aRequest, UInt32 aState)
}
internal Mono.Mozilla.nsIWriteSegmentFunDelegate : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(nsIInputStream aInStream, IntPtr aClosure, string aFromSegment, UInt32 aToOffset, UInt32 aCount, UInt32& aWriteCount)
public IAsyncResult BeginInvoke(nsIInputStream aInStream, IntPtr aClosure, string aFromSegment, UInt32 aToOffset, UInt32 aCount, UInt32& aWriteCount, AsyncCallback callback, object object)
public void EndInvoke(UInt32& aWriteCount, IAsyncResult result)
}
internal Mono.Mozilla.nsLoadGroup : object {
public nsILoadGroup GetProxy(IWebBrowser control, nsILoadGroup obj)
}
internal Mono.Mozilla.nsObserver : object {
public nsIObserver GetProxy(IWebBrowser control, nsIObserver obj)
}
internal Mono.Mozilla.nsOutputStream : object {
public nsIOutputStream GetProxy(IWebBrowser control, nsIOutputStream obj)
}
internal Mono.Mozilla.nsPersistentProperties : object {
public nsIPersistentProperties GetProxy(IWebBrowser control, nsIPersistentProperties obj)
}
internal Mono.Mozilla.nsPrefBranch : object {
public nsIPrefBranch GetProxy(IWebBrowser control, nsIPrefBranch obj)
}
internal Mono.Mozilla.nsPrefService : object {
public nsIPrefService GetProxy(IWebBrowser control, nsIPrefService obj)
}
internal Mono.Mozilla.nsProperties : object {
public nsIProperties GetProxy(IWebBrowser control, nsIProperties obj)
}
internal Mono.Mozilla.nsProtocolHandler : object {
public nsIProtocolHandler GetProxy(IWebBrowser control, nsIProtocolHandler obj)
}
internal Mono.Mozilla.nsRequest : object {
public nsIRequest GetProxy(IWebBrowser control, nsIRequest obj)
}
internal Mono.Mozilla.nsRequestObserver : object {
public nsIRequestObserver GetProxy(IWebBrowser control, nsIRequestObserver obj)
}
internal Mono.Mozilla.nsSelection : object {
public nsISelection GetProxy(IWebBrowser control, nsISelection obj)
}
internal Mono.Mozilla.nsServiceManager : object {
public nsIServiceManager GetProxy(IWebBrowser control, nsIServiceManager obj)
}
internal Mono.Mozilla.nsSHistory : object {
public nsISHistory GetProxy(IWebBrowser control, nsISHistory obj)
}
internal Mono.Mozilla.nsSHistoryListener : object {
public nsISHistoryListener GetProxy(IWebBrowser control, nsISHistoryListener obj)
}
internal Mono.Mozilla.nsSimpleEnumerator : object {
public nsISimpleEnumerator GetProxy(IWebBrowser control, nsISimpleEnumerator obj)
}
internal Mono.Mozilla.nsStreamListener : object {
public nsIStreamListener GetProxy(IWebBrowser control, nsIStreamListener obj)
}
internal Mono.Mozilla.nsTimer : object {
public nsITimer GetProxy(IWebBrowser control, nsITimer obj)
}
internal Mono.Mozilla.nsTimerCallback : object {
public nsITimerCallback GetProxy(IWebBrowser control, nsITimerCallback obj)
}
internal Mono.Mozilla.nsURI : object {
public nsIURI GetProxy(IWebBrowser control, nsIURI obj)
}
internal Mono.Mozilla.nsURIContentListener : object {
public nsIURIContentListener GetProxy(IWebBrowser control, nsIURIContentListener obj)
}
internal Mono.Mozilla.nsWeakReference : object {
public nsIWeakReference GetProxy(IWebBrowser control, nsIWeakReference obj)
}
internal Mono.Mozilla.nsWebBrowser : object {
public nsIWebBrowser GetProxy(IWebBrowser control, nsIWebBrowser obj)
}
internal Mono.Mozilla.nsWebBrowserChrome : object {
public nsIWebBrowserChrome GetProxy(IWebBrowser control, nsIWebBrowserChrome obj)
}
internal Mono.Mozilla.nsWebBrowserChromeFocus : object {
public nsIWebBrowserChromeFocus GetProxy(IWebBrowser control, nsIWebBrowserChromeFocus obj)
}
internal Mono.Mozilla.nsWebBrowserFocus : object {
public nsIWebBrowserFocus GetProxy(IWebBrowser control, nsIWebBrowserFocus obj)
}
internal Mono.Mozilla.nsWebBrowserPersist : object {
public nsIWebBrowserPersist GetProxy(IWebBrowser control, nsIWebBrowserPersist obj)
}
internal Mono.Mozilla.nsWebBrowserStream : object {
public nsIWebBrowserStream GetProxy(IWebBrowser control, nsIWebBrowserStream obj)
}
internal Mono.Mozilla.nsWebNavigation : object {
public nsIWebNavigation GetProxy(IWebBrowser control, nsIWebNavigation obj)
}
internal Mono.Mozilla.nsWebProgress : object {
public nsIWebProgress GetProxy(IWebBrowser control, nsIWebProgress obj)
}
internal Mono.Mozilla.nsWebProgressListener : object {
public nsIWebProgressListener GetProxy(IWebBrowser control, nsIWebProgressListener obj)
}
internal Mono.Mozilla.SizeInfo : ValueType {
public UInt32 width
public UInt32 height
}
internal Mono.Mozilla.StateFlags : Enum {
public int value__
public StateFlags Start
public StateFlags Redirecting
public StateFlags Transferring
public StateFlags Negotiating
public StateFlags Stop
public StateFlags IsRequest
public StateFlags IsDocument
public StateFlags IsNetwork
public StateFlags IsWindow
public StateFlags Restoring
public StateFlags IsInsecure
public StateFlags IsBroken
public StateFlags IsSecure
public StateFlags SecureHigh
public StateFlags SecureMed
public StateFlags SecureLow
}
internal Mono.Mozilla.StopOption : Enum {
public UInt32 value__
public StopOption Network
public StopOption Content
public StopOption All
}
internal Mono.Mozilla.Stream : object {
private Stream back
public Stream BaseStream
public void .ctor(Stream stream)
public Stream get_BaseStream()
public int close()
public int flush()
public int write(string str, UInt32 count, UInt32& ret)
public int writeFrom(nsIInputStream aFromStream, UInt32 aCount, UInt32& ret)
public int writeSegments(nsIReadSegmentFunDelegate aReader, IntPtr aClosure, UInt32 aCount, UInt32& ret)
public int isNonBlocking(Boolean& ret)
public int available(UInt32& ret)
public int read(HandleRef str, UInt32 count, UInt32& ret)
public int readSegments(nsIWriteSegmentFunDelegate aWriter, IntPtr aClosure, UInt32 aCount, UInt32& ret)
}
internal Mono.Mozilla.UniString : object {
private bool disposed
private nsStringContainer unmanagedContainer
private HandleRef handle
private string str
private bool dirty
public HandleRef Handle
public string String
public int Length
public void .ctor(string value)
protected void Finalize()
protected void Dispose(bool disposing)
public void Dispose()
public HandleRef get_Handle()
public string get_String()
public void set_String(string value)
public int get_Length()
public string ToString()
}
internal Mono.Mozilla.WebBrowser : object {
private bool loaded
internal bool created
private bool creating
internal Document document
internal Navigation navigation
internal Platform platform
internal Platform enginePlatform
internal Callback callbacks
private EventHandlerList events
private EventHandlerList domEvents
private string statusText
private bool streamingMode
internal Hashtable documents
private int width
private int height
private bool isDirty
private ContentListener contentListener
private nsIServiceManager servMan
private nsIIOService ioService
private nsIAccessibilityService accessibilityService
private nsIErrorService errorService
private DocumentEncoder docEncoder
internal object KeyDownEvent
internal object KeyPressEvent
internal object KeyUpEvent
internal object MouseClickEvent
internal object MouseDoubleClickEvent
internal object MouseDownEvent
internal object MouseEnterEvent
internal object MouseLeaveEvent
internal object MouseMoveEvent
internal object MouseUpEvent
internal object FocusEvent
internal object BlurEvent
internal object CreateNewWindowEvent
internal object AlertEvent
internal object LoadStartedEvent
internal object LoadCommitedEvent
internal object ProgressChangedEvent
internal object LoadFinishedEvent
internal object LoadEvent
internal object UnloadEvent
internal object StatusChangedEvent
internal object SecurityChangedEvent
internal object ProgressEvent
internal object ContextMenuEvent
internal object NavigationRequestedEvent
internal object GenericEvent
private bool Created
public bool Initialized
public IWindow Window
public IDocument Document
public INavigation Navigation
public string StatusText
public bool Offline
internal EventHandlerList DomEvents
internal EventHandlerList Events
private ContentListener ContentListener
internal nsIServiceManager ServiceManager
internal nsIIOService IOService
internal nsIAccessibilityService AccessibilityService
internal nsIErrorService ErrorService
internal DocumentEncoder DocEncoder
public void .ctor(Platform platform)
public bool Load(IntPtr handle, int width, int height)
private bool get_Created()
public void Shutdown()
internal void Reset()
public bool get_Initialized()
public IWindow get_Window()
public IDocument get_Document()
public INavigation get_Navigation()
public string get_StatusText()
public bool get_Offline()
public void set_Offline(bool value)
internal EventHandlerList get_DomEvents()
internal EventHandlerList get_Events()
private ContentListener get_ContentListener()
internal nsIServiceManager get_ServiceManager()
internal nsIIOService get_IOService()
internal nsIAccessibilityService get_AccessibilityService()
internal nsIErrorService get_ErrorService()
internal DocumentEncoder get_DocEncoder()
public void FocusIn(FocusOption focus)
public void FocusOut()
public void Activate()
public void Deactivate()
public void Resize(int width, int height)
public void Render(Byte[] data)
public void Render(string html)
public void Render(string html, string uri, string contentType)
public void ExecuteScript(string script)
internal void AttachEvent(INode node, string eve, EventHandler handler)
internal void DetachEvent(INode node, string eve, EventHandler handler)
public void add_KeyDown(NodeEventHandler value)
public void remove_KeyDown(NodeEventHandler value)
public void add_KeyPress(NodeEventHandler value)
public void remove_KeyPress(NodeEventHandler value)
public void add_KeyUp(NodeEventHandler value)
public void remove_KeyUp(NodeEventHandler value)
public void add_MouseClick(NodeEventHandler value)
public void remove_MouseClick(NodeEventHandler value)
public void add_MouseDoubleClick(NodeEventHandler value)
public void remove_MouseDoubleClick(NodeEventHandler value)
public void add_MouseDown(NodeEventHandler value)
public void remove_MouseDown(NodeEventHandler value)
public void add_MouseEnter(NodeEventHandler value)
public void remove_MouseEnter(NodeEventHandler value)
public void add_MouseLeave(NodeEventHandler value)
public void remove_MouseLeave(NodeEventHandler value)
public void add_MouseMove(NodeEventHandler value)
public void remove_MouseMove(NodeEventHandler value)
public void add_MouseUp(NodeEventHandler value)
public void remove_MouseUp(NodeEventHandler value)
public void add_Focus(EventHandler value)
public void remove_Focus(EventHandler value)
public void add_Blur(EventHandler value)
public void remove_Blur(EventHandler value)
public void add_CreateNewWindow(CreateNewWindowEventHandler value)
public void remove_CreateNewWindow(CreateNewWindowEventHandler value)
public void add_Alert(AlertEventHandler value)
public void remove_Alert(AlertEventHandler value)
public void add_Loaded(EventHandler value)
public void remove_Loaded(EventHandler value)
public void add_Unloaded(EventHandler value)
public void remove_Unloaded(EventHandler value)
public void add_StatusChanged(StatusChangedEventHandler value)
public void remove_StatusChanged(StatusChangedEventHandler value)
public void add_SecurityChanged(SecurityChangedEventHandler value)
public void remove_SecurityChanged(SecurityChangedEventHandler value)
public void add_LoadStarted(LoadStartedEventHandler value)
public void remove_LoadStarted(LoadStartedEventHandler value)
public void add_LoadCommited(LoadCommitedEventHandler value)
public void remove_LoadCommited(LoadCommitedEventHandler value)
public void add_ProgressChanged(ProgressChangedEventHandler value)
public void remove_ProgressChanged(ProgressChangedEventHandler value)
public void add_LoadFinished(LoadFinishedEventHandler value)
public void remove_LoadFinished(LoadFinishedEventHandler value)
public void add_ContextMenuShown(ContextMenuEventHandler value)
public void remove_ContextMenuShown(ContextMenuEventHandler value)
public void add_NavigationRequested(NavigationRequestedEventHandler value)
public void remove_NavigationRequested(NavigationRequestedEventHandler value)
internal void add_Generic(EventHandler value)
internal void remove_Generic(EventHandler value)
}
public Mono.WebBrowser.AlertEventArgs : EventArgs {
private DialogType type
private string title
private string text
private string text2
private string username
private string password
private string checkMsg
private bool checkState
private DialogButtonFlags dialogButtons
private StringCollection buttons
private StringCollection options
private object returnValue
public DialogType Type
public string Title
public string Text
public string Text2
public string CheckMessage
public bool CheckState
public DialogButtonFlags DialogButtons
public StringCollection Buttons
public StringCollection Options
public string Username
public string Password
public bool BoolReturn
public int IntReturn
public string StringReturn
public DialogType get_Type()
public void set_Type(DialogType value)
public string get_Title()
public void set_Title(string value)
public string get_Text()
public void set_Text(string value)
public string get_Text2()
public void set_Text2(string value)
public string get_CheckMessage()
public void set_CheckMessage(string value)
public bool get_CheckState()
public void set_CheckState(bool value)
public DialogButtonFlags get_DialogButtons()
public void set_DialogButtons(DialogButtonFlags value)
public StringCollection get_Buttons()
public void set_Buttons(StringCollection value)
public StringCollection get_Options()
public void set_Options(StringCollection value)
public string get_Username()
public void set_Username(string value)
public string get_Password()
public void set_Password(string value)
public bool get_BoolReturn()
public void set_BoolReturn(bool value)
public int get_IntReturn()
public void set_IntReturn(int value)
public string get_StringReturn()
public void set_StringReturn(string value)
}
public Mono.WebBrowser.AlertEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, AlertEventArgs e)
public IAsyncResult BeginInvoke(object sender, AlertEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.ContextMenuEventArgs : EventArgs {
private int x
private int y
public int X
public int Y
public int get_X()
public int get_Y()
public void .ctor(int x, int y)
}
public Mono.WebBrowser.ContextMenuEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ContextMenuEventArgs e)
public IAsyncResult BeginInvoke(object sender, ContextMenuEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.CreateNewWindowEventArgs : EventArgs {
private bool isModal
public bool IsModal
public void .ctor(bool isModal)
public bool get_IsModal()
}
public Mono.WebBrowser.CreateNewWindowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public bool Invoke(object sender, CreateNewWindowEventArgs e)
public IAsyncResult BeginInvoke(object sender, CreateNewWindowEventArgs e, AsyncCallback callback, object object)
public bool EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.DialogButtonFlags : Enum {
public int value__
public DialogButtonFlags BUTTON_POS_0
public DialogButtonFlags BUTTON_POS_1
public DialogButtonFlags BUTTON_POS_2
public DialogButtonFlags BUTTON_TITLE_OK
public DialogButtonFlags BUTTON_TITLE_CANCEL
public DialogButtonFlags BUTTON_TITLE_YES
public DialogButtonFlags BUTTON_TITLE_NO
public DialogButtonFlags BUTTON_TITLE_SAVE
public DialogButtonFlags BUTTON_TITLE_DONT_SAVE
public DialogButtonFlags BUTTON_TITLE_REVERT
public DialogButtonFlags BUTTON_TITLE_IS_STRING
public DialogButtonFlags BUTTON_POS_0_DEFAULT
public DialogButtonFlags BUTTON_POS_1_DEFAULT
public DialogButtonFlags BUTTON_POS_2_DEFAULT
public DialogButtonFlags BUTTON_DELAY_ENABLE
public DialogButtonFlags STD_OK_CANCEL_BUTTONS
}
public Mono.WebBrowser.DialogType : Enum {
public int value__
public DialogType Alert
public DialogType AlertCheck
public DialogType Confirm
public DialogType ConfirmEx
public DialogType ConfirmCheck
public DialogType Prompt
public DialogType PromptUsernamePassword
public DialogType PromptPassword
public DialogType Select
}
public Mono.WebBrowser.DOM.IAttribute {
public string Name
public string get_Name()
public int GetHashCode()
}
public Mono.WebBrowser.DOM.IAttributeCollection {
public IAttribute Item
public IAttribute get_Item(string name)
public bool Exists(string name)
public int GetHashCode()
}
public Mono.WebBrowser.DOM.IDocument {
public IElement Active
public string ActiveLinkColor
public IElementCollection Anchors
public IElementCollection Applets
public string Background
public string BackColor
public IElement Body
public string Charset
public string Cookie
public IElement DocumentElement
public IDocumentType DocType
public string Domain
public string ForeColor
public IElementCollection Forms
public IElementCollection Images
public IDOMImplementation Implementation
public string LinkColor
public IElementCollection Links
public IStylesheetList Stylesheets
public string Title
public string Url
public string VisitedLinkColor
public IWindow Window
public IElement get_Active()
public string get_ActiveLinkColor()
public void set_ActiveLinkColor(string value)
public IElementCollection get_Anchors()
public IElementCollection get_Applets()
public string get_Background()
public void set_Background(string value)
public string get_BackColor()
public void set_BackColor(string value)
public IElement get_Body()
public string get_Charset()
public void set_Charset(string value)
public string get_Cookie()
public void set_Cookie(string value)
public IElement get_DocumentElement()
public IDocumentType get_DocType()
public string get_Domain()
public string get_ForeColor()
public void set_ForeColor(string value)
public IElementCollection get_Forms()
public IElementCollection get_Images()
public IDOMImplementation get_Implementation()
public string get_LinkColor()
public void set_LinkColor(string value)
public IElementCollection get_Links()
public IStylesheetList get_Stylesheets()
public string get_Title()
public void set_Title(string value)
public string get_Url()
public string get_VisitedLinkColor()
public void set_VisitedLinkColor(string value)
public IWindow get_Window()
public IAttribute CreateAttribute(string name)
public IElement CreateElement(string tagName)
public IElement GetElementById(string id)
public IElement GetElement(int x, int y)
public IElementCollection GetElementsByTagName(string id)
public void Write(string text)
public string InvokeScript(string script)
public int GetHashCode()
public void add_LoadStopped(EventHandler value)
public void remove_LoadStopped(EventHandler value)
}
public Mono.WebBrowser.DOM.IDocumentType {
public string Name
public INamedNodeMap Entities
public INamedNodeMap Notations
public string PublicId
public string SystemId
public string InternalSubset
public string get_Name()
public INamedNodeMap get_Entities()
public INamedNodeMap get_Notations()
public string get_PublicId()
public string get_SystemId()
public string get_InternalSubset()
}
public Mono.WebBrowser.DOM.IDOMImplementation {
public bool HasFeature(string feature, string version)
public IDocumentType CreateDocumentType(string qualifiedName, string publicId, string systemId)
public IDocument CreateDocument(string namespaceURI, string qualifiedName, IDocumentType doctype)
}
public Mono.WebBrowser.DOM.IElement {
public IElementCollection All
public IElementCollection Children
public int ClientWidth
public int ClientHeight
public int ScrollHeight
public int ScrollWidth
public int ScrollLeft
public int ScrollTop
public int OffsetHeight
public int OffsetWidth
public int OffsetLeft
public int OffsetTop
public IElement OffsetParent
public string InnerText
public string InnerHTML
public string OuterText
public string OuterHTML
public string Style
public int TabIndex
public string TagName
public bool Disabled
public Stream ContentStream
public IElementCollection get_All()
public IElementCollection get_Children()
public int get_ClientWidth()
public int get_ClientHeight()
public int get_ScrollHeight()
public int get_ScrollWidth()
public int get_ScrollLeft()
public void set_ScrollLeft(int value)
public int get_ScrollTop()
public void set_ScrollTop(int value)
public int get_OffsetHeight()
public int get_OffsetWidth()
public int get_OffsetLeft()
public int get_OffsetTop()
public IElement get_OffsetParent()
public string get_InnerText()
public void set_InnerText(string value)
public string get_InnerHTML()
public void set_InnerHTML(string value)
public string get_OuterText()
public void set_OuterText(string value)
public string get_OuterHTML()
public void set_OuterHTML(string value)
public string get_Style()
public void set_Style(string value)
public int get_TabIndex()
public void set_TabIndex(int value)
public string get_TagName()
public bool get_Disabled()
public void set_Disabled(bool value)
public Stream get_ContentStream()
public IElement AppendChild(IElement child)
public void Blur()
public void Focus()
public bool HasAttribute(string name)
public string GetAttribute(string name)
public IElementCollection GetElementsByTagName(string id)
public int GetHashCode()
public void ScrollIntoView(bool alignWithTop)
public void SetAttribute(string name, string value)
}
public Mono.WebBrowser.DOM.IElementCollection {
public IElement Item
public IElement get_Item(int index)
public void set_Item(int index, IElement value)
public int GetHashCode()
}
public Mono.WebBrowser.DOM.IHistory {
public int Count
public int get_Count()
public void Back(int count)
public void Forward(int count)
public void GoToIndex(int index)
public void GoToUrl(string url)
}
public Mono.WebBrowser.DOM.INamedNodeMap {
public INode Item
public INode Item
public INode Item
public INode get_Item(string name)
public void set_Item(string name, INode value)
public INode RemoveNamedItem(string name)
public INode get_Item(int index)
public void set_Item(int index, INode value)
public INode get_Item(string namespaceURI, string localName)
public void set_Item(string namespaceURI, string localName, INode value)
public INode RemoveNamedItemNS(string namespaceURI, string localName)
}
public Mono.WebBrowser.DOM.INavigation {
public bool CanGoBack
public bool CanGoForward
public int HistoryCount
public bool get_CanGoBack()
public bool get_CanGoForward()
public bool Back()
public bool Forward()
public void Home()
public void Reload()
public void Reload(ReloadOption option)
public void Stop()
public void Go(int index)
public void Go(int index, bool relative)
public void Go(string url)
public void Go(string url, LoadFlags flags)
public int get_HistoryCount()
}
public Mono.WebBrowser.DOM.INode {
public IAttributeCollection Attributes
public INodeList ChildNodes
public INode FirstChild
public INode LastChild
public string LocalName
public INode Next
public IDocument Owner
public INode Parent
public INode Previous
public NodeType Type
public string Value
public IntPtr AccessibleObject
public IAttributeCollection get_Attributes()
public INodeList get_ChildNodes()
public INode get_FirstChild()
public INode InsertBefore(INode newChild, INode refChild)
public INode ReplaceChild(INode newChild, INode oldChild)
public INode RemoveChild(INode child)
public INode AppendChild(INode child)
public INode get_LastChild()
public string get_LocalName()
public INode get_Next()
public IDocument get_Owner()
public INode get_Parent()
public INode get_Previous()
public NodeType get_Type()
public string get_Value()
public void set_Value(string value)
public IntPtr get_AccessibleObject()
public void FireEvent(string eventName)
public int GetHashCode()
public bool Equals(object obj)
public void AttachEventHandler(string eventName, EventHandler handler)
public void DetachEventHandler(string eventName, EventHandler handler)
public void AttachEventHandler(string eventName, Delegate handler)
public void DetachEventHandler(string eventName, Delegate handler)
public void add_Click(NodeEventHandler value)
public void remove_Click(NodeEventHandler value)
public void add_DoubleClick(NodeEventHandler value)
public void remove_DoubleClick(NodeEventHandler value)
public void add_KeyDown(NodeEventHandler value)
public void remove_KeyDown(NodeEventHandler value)
public void add_KeyPress(NodeEventHandler value)
public void remove_KeyPress(NodeEventHandler value)
public void add_KeyUp(NodeEventHandler value)
public void remove_KeyUp(NodeEventHandler value)
public void add_MouseDown(NodeEventHandler value)
public void remove_MouseDown(NodeEventHandler value)
public void add_MouseEnter(NodeEventHandler value)
public void remove_MouseEnter(NodeEventHandler value)
public void add_MouseLeave(NodeEventHandler value)
public void remove_MouseLeave(NodeEventHandler value)
public void add_MouseMove(NodeEventHandler value)
public void remove_MouseMove(NodeEventHandler value)
public void add_MouseOver(NodeEventHandler value)
public void remove_MouseOver(NodeEventHandler value)
public void add_MouseUp(NodeEventHandler value)
public void remove_MouseUp(NodeEventHandler value)
public void add_OnFocus(NodeEventHandler value)
public void remove_OnFocus(NodeEventHandler value)
public void add_OnBlur(NodeEventHandler value)
public void remove_OnBlur(NodeEventHandler value)
}
public Mono.WebBrowser.DOM.INodeList {
public INode Item
public INode get_Item(int index)
public void set_Item(int index, INode value)
public int GetHashCode()
}
public Mono.WebBrowser.DOM.IStylesheet {
public string Type
public bool Disabled
public INode OwnerNode
public IStylesheet ParentStyleSheet
public string Href
public string Title
public IMediaList Media
public string get_Type()
public bool get_Disabled()
public void set_Disabled(bool value)
public INode get_OwnerNode()
public IStylesheet get_ParentStyleSheet()
public string get_Href()
public string get_Title()
public IMediaList get_Media()
}
public Mono.WebBrowser.DOM.IStylesheetList {
public int Count
public IStylesheet Item
public int get_Count()
public IStylesheet get_Item(int index)
public void set_Item(int index, IStylesheet value)
}
public Mono.WebBrowser.DOM.IWindow {
public IDocument Document
public IWindowCollection Frames
public string Name
public IWindow Parent
public string StatusText
public IWindow Top
public IHistory History
public IDocument get_Document()
public IWindowCollection get_Frames()
public string get_Name()
public void set_Name(string value)
public IWindow get_Parent()
public string get_StatusText()
public IWindow get_Top()
public IHistory get_History()
public void AttachEventHandler(string eventName, EventHandler handler)
public void DetachEventHandler(string eventName, EventHandler handler)
public void Focus()
public bool Equals(object obj)
public int GetHashCode()
public void Open(string url)
public void ScrollTo(int x, int y)
public void add_Load(EventHandler value)
public void remove_Load(EventHandler value)
public void add_Unload(EventHandler value)
public void remove_Unload(EventHandler value)
public void add_OnFocus(EventHandler value)
public void remove_OnFocus(EventHandler value)
public void add_OnBlur(EventHandler value)
public void remove_OnBlur(EventHandler value)
public void add_Error(EventHandler value)
public void remove_Error(EventHandler value)
public void add_Scroll(EventHandler value)
public void remove_Scroll(EventHandler value)
}
public Mono.WebBrowser.DOM.IWindowCollection {
public IWindow Item
public IWindow get_Item(int index)
public void set_Item(int index, IWindow value)
}
public Mono.WebBrowser.DOM.LoadFlags : Enum {
public UInt32 value__
public LoadFlags None
public LoadFlags AsMetaRefresh
public LoadFlags AsLinkClick
public LoadFlags BypassHistory
public LoadFlags ReplaceHistory
public LoadFlags BypassLocalCache
public LoadFlags BypassProxy
public LoadFlags CharsetChange
}
public Mono.WebBrowser.DOM.NodeEventArgs : EventArgs {
private INode node
public INode Node
public IElement Element
public IDocument Document
public void .ctor(INode node)
public INode get_Node()
public IElement get_Element()
public IDocument get_Document()
}
public Mono.WebBrowser.DOM.NodeEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, NodeEventArgs e)
public IAsyncResult BeginInvoke(object sender, NodeEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.DOM.NodeType : Enum {
public int value__
public NodeType Element
public NodeType Attribute
public NodeType Text
public NodeType CDataSection
public NodeType EntityReference
public NodeType Entity
public NodeType ProcessingInstruction
public NodeType Comment
public NodeType Document
public NodeType DocumentType
public NodeType DocumentFragment
public NodeType Notation
}
public Mono.WebBrowser.DOM.WindowEventArgs : EventArgs {
private IWindow window
public IWindow Window
public void .ctor(IWindow window)
public IWindow get_Window()
}
public Mono.WebBrowser.DOM.WindowEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, WindowEventArgs e)
public IAsyncResult BeginInvoke(object sender, WindowEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.Exception : Exception {
private ErrorCodes code
private ArrayList messages
internal ErrorCodes ErrorCode
internal ErrorCodes get_ErrorCode()
internal void .ctor(ErrorCodes code)
internal void .ctor(ErrorCodes code, string message)
internal void .ctor(ErrorCodes code, Exception innerException)
internal void .ctor(ErrorCodes code, string message, Exception innerException)
private string GetMessage(ErrorCodes code, string message)
}
public Mono.WebBrowser.FocusOption : Enum {
public int value__
public FocusOption None
public FocusOption FocusFirstElement
public FocusOption FocusLastElement
}
public Mono.WebBrowser.IWebBrowser {
public bool Initialized
public IWindow Window
public IDocument Document
public bool Offline
public INavigation Navigation
public bool Load(IntPtr handle, int width, int height)
public void Shutdown()
public void FocusIn(FocusOption focus)
public void FocusOut()
public void Activate()
public void Deactivate()
public void Resize(int width, int height)
public void Render(Byte[] data)
public void Render(string html)
public void Render(string html, string uri, string contentType)
public void ExecuteScript(string script)
public bool get_Initialized()
public IWindow get_Window()
public IDocument get_Document()
public bool get_Offline()
public void set_Offline(bool value)
public INavigation get_Navigation()
public void add_KeyDown(NodeEventHandler value)
public void remove_KeyDown(NodeEventHandler value)
public void add_KeyPress(NodeEventHandler value)
public void remove_KeyPress(NodeEventHandler value)
public void add_KeyUp(NodeEventHandler value)
public void remove_KeyUp(NodeEventHandler value)
public void add_MouseClick(NodeEventHandler value)
public void remove_MouseClick(NodeEventHandler value)
public void add_MouseDoubleClick(NodeEventHandler value)
public void remove_MouseDoubleClick(NodeEventHandler value)
public void add_MouseDown(NodeEventHandler value)
public void remove_MouseDown(NodeEventHandler value)
public void add_MouseEnter(NodeEventHandler value)
public void remove_MouseEnter(NodeEventHandler value)
public void add_MouseLeave(NodeEventHandler value)
public void remove_MouseLeave(NodeEventHandler value)
public void add_MouseMove(NodeEventHandler value)
public void remove_MouseMove(NodeEventHandler value)
public void add_MouseUp(NodeEventHandler value)
public void remove_MouseUp(NodeEventHandler value)
public void add_Focus(EventHandler value)
public void remove_Focus(EventHandler value)
public void add_CreateNewWindow(CreateNewWindowEventHandler value)
public void remove_CreateNewWindow(CreateNewWindowEventHandler value)
public void add_Alert(AlertEventHandler value)
public void remove_Alert(AlertEventHandler value)
public void add_LoadStarted(LoadStartedEventHandler value)
public void remove_LoadStarted(LoadStartedEventHandler value)
public void add_LoadCommited(LoadCommitedEventHandler value)
public void remove_LoadCommited(LoadCommitedEventHandler value)
public void add_ProgressChanged(ProgressChangedEventHandler value)
public void remove_ProgressChanged(ProgressChangedEventHandler value)
public void add_LoadFinished(LoadFinishedEventHandler value)
public void remove_LoadFinished(LoadFinishedEventHandler value)
public void add_StatusChanged(StatusChangedEventHandler value)
public void remove_StatusChanged(StatusChangedEventHandler value)
public void add_SecurityChanged(SecurityChangedEventHandler value)
public void remove_SecurityChanged(SecurityChangedEventHandler value)
public void add_ContextMenuShown(ContextMenuEventHandler value)
public void remove_ContextMenuShown(ContextMenuEventHandler value)
public void add_NavigationRequested(NavigationRequestedEventHandler value)
public void remove_NavigationRequested(NavigationRequestedEventHandler value)
}
public Mono.WebBrowser.LoadCommitedEventArgs : EventArgs {
private string uri
public string Uri
public string get_Uri()
public void .ctor(string uri)
}
public Mono.WebBrowser.LoadCommitedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LoadCommitedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LoadCommitedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.LoadFinishedEventArgs : EventArgs {
private string uri
public string Uri
public string get_Uri()
public void .ctor(string uri)
}
public Mono.WebBrowser.LoadFinishedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LoadFinishedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LoadFinishedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.LoadStartedEventArgs : CancelEventArgs {
private string uri
private string frameName
public string Uri
public string FrameName
public string get_Uri()
public string get_FrameName()
public void .ctor(string uri, string frameName)
}
public Mono.WebBrowser.LoadStartedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, LoadStartedEventArgs e)
public IAsyncResult BeginInvoke(object sender, LoadStartedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.Manager : object {
public IWebBrowser GetNewInstance()
public IWebBrowser GetNewInstance(Platform platform)
}
public Mono.WebBrowser.NavigationRequestedEventArgs : CancelEventArgs {
private string uri
public string Uri
public string get_Uri()
public void .ctor(string uri)
}
public Mono.WebBrowser.NavigationRequestedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, NavigationRequestedEventArgs e)
public IAsyncResult BeginInvoke(object sender, NavigationRequestedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.Platform : Enum {
public int value__
public Platform Unknown
public Platform Winforms
public Platform Gtk
}
public Mono.WebBrowser.ProgressChangedEventArgs : EventArgs {
private int progress
private int maxProgress
public int Progress
public int MaxProgress
public int get_Progress()
public int get_MaxProgress()
public void .ctor(int progress, int maxProgress)
}
public Mono.WebBrowser.ProgressChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, ProgressChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, ProgressChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.ReloadOption : Enum {
public UInt32 value__
public ReloadOption None
public ReloadOption Proxy
public ReloadOption Full
}
public Mono.WebBrowser.SecurityChangedEventArgs : EventArgs {
private SecurityLevel state
public SecurityLevel State
public SecurityLevel get_State()
public void set_State(SecurityLevel value)
public void .ctor(SecurityLevel state)
}
public Mono.WebBrowser.SecurityChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, SecurityChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, SecurityChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.WebBrowser.SecurityLevel : Enum {
public int value__
public SecurityLevel Insecure
public SecurityLevel Mixed
public SecurityLevel Secure
}
public Mono.WebBrowser.StatusChangedEventArgs : EventArgs {
private string message
private int status
public string Message
public int Status
public string get_Message()
public void set_Message(string value)
public int get_Status()
public void set_Status(int value)
public void .ctor(string message, int status)
}
public Mono.WebBrowser.StatusChangedEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, StatusChangedEventArgs e)
public IAsyncResult BeginInvoke(object sender, StatusChangedEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
