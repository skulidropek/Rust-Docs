internal static class Consts : object {
    public static string MonoCorlibVersion;
    public static string MonoVersion;
    public static string MonoCompany;
    public static string MonoProduct;
    public static string MonoCopyright;
    public static string FxVersion;
    public static string FxFileVersion;
    public static string EnvironmentVersion;
    public static string VsVersion;
    public static string VsFileVersion;
    private static string PublicKeyToken;
    public static string AssemblyI18N;
    public static string AssemblyMicrosoft_JScript;
    public static string AssemblyMicrosoft_VisualStudio;
    public static string AssemblyMicrosoft_VisualStudio_Web;
    public static string AssemblyMicrosoft_VSDesigner;
    public static string AssemblyMono_Http;
    public static string AssemblyMono_Posix;
    public static string AssemblyMono_Security;
    public static string AssemblyMono_Messaging_RabbitMQ;
    public static string AssemblyCorlib;
    public static string AssemblySystem;
    public static string AssemblySystem_Data;
    public static string AssemblySystem_Design;
    public static string AssemblySystem_DirectoryServices;
    public static string AssemblySystem_Drawing;
    public static string AssemblySystem_Drawing_Design;
    public static string AssemblySystem_Messaging;
    public static string AssemblySystem_Security;
    public static string AssemblySystem_ServiceProcess;
    public static string AssemblySystem_Web;
    public static string AssemblySystem_Windows_Forms;
    public static string AssemblySystem_2_0;
    public static string AssemblySystemCore_3_5;
    public static string AssemblySystem_Core;
    public static string WindowsBase_3_0;
    public static string AssemblyWindowsBase;
    public static string AssemblyPresentationCore_3_5;
    public static string AssemblyPresentationCore_4_0;
    public static string AssemblyPresentationFramework_3_5;
    public static string AssemblySystemServiceModel_3_0;
}
public enum Mono.Data.Sqlite.CollationEncodingEnum : Enum {
    public int value__;
    public static CollationEncodingEnum UTF8;
    public static CollationEncodingEnum UTF16LE;
    public static CollationEncodingEnum UTF16BE;
}
public class Mono.Data.Sqlite.CollationSequence : ValueType {
    public string Name;
    public CollationTypeEnum Type;
    public CollationEncodingEnum Encoding;
    internal SqliteFunction _func;
    public int Compare(string s1, string s2);
    public int Compare(Char[] c1, Char[] c2);
}
public enum Mono.Data.Sqlite.CollationTypeEnum : Enum {
    public int value__;
    public static CollationTypeEnum Binary;
    public static CollationTypeEnum NoCase;
    public static CollationTypeEnum Reverse;
    public static CollationTypeEnum Custom;
}
public class Mono.Data.Sqlite.CommitEventArgs : EventArgs {
    public bool AbortTransaction;
}
public enum Mono.Data.Sqlite.FunctionType : Enum {
    public int value__;
    public static FunctionType Scalar;
    public static FunctionType Aggregate;
    public static FunctionType Collation;
}
internal interface Mono.Data.Sqlite.ISQLiteSchemaExtensions {
    public abstract virtual void BuildTempSchema(SqliteConnection cnn);
}
internal class Mono.Data.Sqlite.SQLite3 : SQLiteBase {
    protected SqliteConnectionHandle _sql;
    protected string _fileName;
    protected bool _usePool;
    protected int _poolVersion;
    private bool _buildingSchema;
    protected SqliteFunction[] _functionsArray;
    internal string Version { get; }
    internal static string SQLiteVersion { get; }
    internal int Changes { get; }
    internal SQLite3(SQLiteDateFormats fmt);
    protected virtual void Dispose(bool bDisposing);
    internal virtual void Close();
    internal virtual void Cancel();
    internal virtual string get_Version();
    internal static string get_SQLiteVersion();
    internal virtual int get_Changes();
    internal virtual void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool);
    internal virtual void ClearPool();
    internal virtual void SetTimeout(int nTimeoutMS);
    internal virtual bool Step(SqliteStatement stmt);
    internal virtual int Reset(SqliteStatement stmt);
    internal virtual string SQLiteLastError();
    internal virtual SqliteStatement Prepare(SqliteConnection cnn, string strSql, SqliteStatement previous, UInt32 timeoutMS, String& strRemain);
    internal virtual void Bind_Double(SqliteStatement stmt, int index, double value);
    internal virtual void Bind_Int32(SqliteStatement stmt, int index, int value);
    internal virtual void Bind_Int64(SqliteStatement stmt, int index, long value);
    internal virtual void Bind_Text(SqliteStatement stmt, int index, string value);
    internal virtual void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt);
    internal virtual void Bind_Blob(SqliteStatement stmt, int index, Byte[] blobData);
    internal virtual void Bind_Null(SqliteStatement stmt, int index);
    internal virtual int Bind_ParamCount(SqliteStatement stmt);
    internal virtual string Bind_ParamName(SqliteStatement stmt, int index);
    internal virtual int Bind_ParamIndex(SqliteStatement stmt, string paramName);
    internal virtual int ColumnCount(SqliteStatement stmt);
    internal virtual string ColumnName(SqliteStatement stmt, int index);
    internal virtual TypeAffinity ColumnAffinity(SqliteStatement stmt, int index);
    internal virtual string ColumnType(SqliteStatement stmt, int index, TypeAffinity& nAffinity);
    internal virtual int ColumnIndex(SqliteStatement stmt, string columnName);
    internal virtual string ColumnOriginalName(SqliteStatement stmt, int index);
    internal virtual string ColumnDatabaseName(SqliteStatement stmt, int index);
    internal virtual string ColumnTableName(SqliteStatement stmt, int index);
    internal virtual void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement);
    internal virtual double GetDouble(SqliteStatement stmt, int index);
    internal virtual int GetInt32(SqliteStatement stmt, int index);
    internal virtual long GetInt64(SqliteStatement stmt, int index);
    internal virtual string GetText(SqliteStatement stmt, int index);
    internal virtual DateTime GetDateTime(SqliteStatement stmt, int index);
    internal virtual long GetBytes(SqliteStatement stmt, int index, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal virtual long GetChars(SqliteStatement stmt, int index, int nDataOffset, Char[] bDest, int nStart, int nLength);
    internal virtual bool IsNull(SqliteStatement stmt, int index);
    internal virtual int AggregateCount(IntPtr context);
    internal virtual void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal);
    internal virtual void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, IntPtr user_data);
    internal virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2);
    internal virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2);
    internal virtual CollationSequence GetCollationSequence(SqliteFunction func, IntPtr context);
    internal virtual long GetParamValueBytes(IntPtr p, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal virtual double GetParamValueDouble(IntPtr ptr);
    internal virtual int GetParamValueInt32(IntPtr ptr);
    internal virtual long GetParamValueInt64(IntPtr ptr);
    internal virtual string GetParamValueText(IntPtr ptr);
    internal virtual TypeAffinity GetParamValueType(IntPtr ptr);
    internal virtual void ReturnBlob(IntPtr context, Byte[] value);
    internal virtual void ReturnDouble(IntPtr context, double value);
    internal virtual void ReturnError(IntPtr context, string value);
    internal virtual void ReturnInt32(IntPtr context, int value);
    internal virtual void ReturnInt64(IntPtr context, long value);
    internal virtual void ReturnNull(IntPtr context);
    internal virtual void ReturnText(IntPtr context, string value);
    internal virtual IntPtr AggregateContext(IntPtr context);
    internal virtual void SetPassword(Byte[] passwordBytes);
    internal virtual void ChangePassword(Byte[] newPasswordBytes);
    internal virtual void SetUpdateHook(SQLiteUpdateCallback func);
    internal virtual void SetCommitHook(SQLiteCommitCallback func);
    internal virtual void SetRollbackHook(SQLiteRollbackCallback func);
    internal virtual object GetValue(SqliteStatement stmt, int index, SQLiteType typ);
    internal virtual int GetCursorForTable(SqliteStatement stmt, int db, int rootPage);
    internal virtual long GetRowIdForCursor(SqliteStatement stmt, int cursor);
    internal virtual void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence);
}
internal class Mono.Data.Sqlite.SQLite3_UTF16 : SQLite3 {
    internal SQLite3_UTF16(SQLiteDateFormats fmt);
    public virtual string ToString(IntPtr b, int nbytelen);
    public static string UTF16ToString(IntPtr b, int nbytelen);
    internal virtual void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool);
    internal virtual void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt);
    internal virtual void Bind_Text(SqliteStatement stmt, int index, string value);
    internal virtual DateTime GetDateTime(SqliteStatement stmt, int index);
    internal virtual string ColumnName(SqliteStatement stmt, int index);
    internal virtual string GetText(SqliteStatement stmt, int index);
    internal virtual string ColumnOriginalName(SqliteStatement stmt, int index);
    internal virtual string ColumnDatabaseName(SqliteStatement stmt, int index);
    internal virtual string ColumnTableName(SqliteStatement stmt, int index);
    internal virtual string GetParamValueText(IntPtr ptr);
    internal virtual void ReturnError(IntPtr context, string value);
    internal virtual void ReturnText(IntPtr context, string value);
}
internal abstract class Mono.Data.Sqlite.SQLiteBase : SqliteConvert {
    internal static object _lock;
    internal string Version { get; }
    internal int Changes { get; }
    internal SQLiteBase(SQLiteDateFormats fmt);
    private static SQLiteBase();
    internal abstract virtual string get_Version();
    internal abstract virtual int get_Changes();
    internal abstract virtual void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool);
    internal abstract virtual void Close();
    internal abstract virtual void SetTimeout(int nTimeoutMS);
    internal abstract virtual string SQLiteLastError();
    internal abstract virtual void ClearPool();
    internal abstract virtual SqliteStatement Prepare(SqliteConnection cnn, string strSql, SqliteStatement previous, UInt32 timeoutMS, String& strRemain);
    internal abstract virtual bool Step(SqliteStatement stmt);
    internal abstract virtual int Reset(SqliteStatement stmt);
    internal abstract virtual void Cancel();
    internal abstract virtual void Bind_Double(SqliteStatement stmt, int index, double value);
    internal abstract virtual void Bind_Int32(SqliteStatement stmt, int index, int value);
    internal abstract virtual void Bind_Int64(SqliteStatement stmt, int index, long value);
    internal abstract virtual void Bind_Text(SqliteStatement stmt, int index, string value);
    internal abstract virtual void Bind_Blob(SqliteStatement stmt, int index, Byte[] blobData);
    internal abstract virtual void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt);
    internal abstract virtual void Bind_Null(SqliteStatement stmt, int index);
    internal abstract virtual int Bind_ParamCount(SqliteStatement stmt);
    internal abstract virtual string Bind_ParamName(SqliteStatement stmt, int index);
    internal abstract virtual int Bind_ParamIndex(SqliteStatement stmt, string paramName);
    internal abstract virtual int ColumnCount(SqliteStatement stmt);
    internal abstract virtual string ColumnName(SqliteStatement stmt, int index);
    internal abstract virtual TypeAffinity ColumnAffinity(SqliteStatement stmt, int index);
    internal abstract virtual string ColumnType(SqliteStatement stmt, int index, TypeAffinity& nAffinity);
    internal abstract virtual int ColumnIndex(SqliteStatement stmt, string columnName);
    internal abstract virtual string ColumnOriginalName(SqliteStatement stmt, int index);
    internal abstract virtual string ColumnDatabaseName(SqliteStatement stmt, int index);
    internal abstract virtual string ColumnTableName(SqliteStatement stmt, int index);
    internal abstract virtual void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement);
    internal abstract virtual void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence);
    internal abstract virtual double GetDouble(SqliteStatement stmt, int index);
    internal abstract virtual int GetInt32(SqliteStatement stmt, int index);
    internal abstract virtual long GetInt64(SqliteStatement stmt, int index);
    internal abstract virtual string GetText(SqliteStatement stmt, int index);
    internal abstract virtual long GetBytes(SqliteStatement stmt, int index, int nDataoffset, Byte[] bDest, int nStart, int nLength);
    internal abstract virtual long GetChars(SqliteStatement stmt, int index, int nDataoffset, Char[] bDest, int nStart, int nLength);
    internal abstract virtual DateTime GetDateTime(SqliteStatement stmt, int index);
    internal abstract virtual bool IsNull(SqliteStatement stmt, int index);
    internal abstract virtual void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, IntPtr user_data);
    internal abstract virtual void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal);
    internal abstract virtual CollationSequence GetCollationSequence(SqliteFunction func, IntPtr context);
    internal abstract virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2);
    internal abstract virtual int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2);
    internal abstract virtual int AggregateCount(IntPtr context);
    internal abstract virtual IntPtr AggregateContext(IntPtr context);
    internal abstract virtual long GetParamValueBytes(IntPtr ptr, int nDataOffset, Byte[] bDest, int nStart, int nLength);
    internal abstract virtual double GetParamValueDouble(IntPtr ptr);
    internal abstract virtual int GetParamValueInt32(IntPtr ptr);
    internal abstract virtual long GetParamValueInt64(IntPtr ptr);
    internal abstract virtual string GetParamValueText(IntPtr ptr);
    internal abstract virtual TypeAffinity GetParamValueType(IntPtr ptr);
    internal abstract virtual void ReturnBlob(IntPtr context, Byte[] value);
    internal abstract virtual void ReturnDouble(IntPtr context, double value);
    internal abstract virtual void ReturnError(IntPtr context, string value);
    internal abstract virtual void ReturnInt32(IntPtr context, int value);
    internal abstract virtual void ReturnInt64(IntPtr context, long value);
    internal abstract virtual void ReturnNull(IntPtr context);
    internal abstract virtual void ReturnText(IntPtr context, string value);
    internal abstract virtual void SetPassword(Byte[] passwordBytes);
    internal abstract virtual void ChangePassword(Byte[] newPasswordBytes);
    internal abstract virtual void SetUpdateHook(SQLiteUpdateCallback func);
    internal abstract virtual void SetCommitHook(SQLiteCommitCallback func);
    internal abstract virtual void SetRollbackHook(SQLiteRollbackCallback func);
    internal abstract virtual int GetCursorForTable(SqliteStatement stmt, int database, int rootPage);
    internal abstract virtual long GetRowIdForCursor(SqliteStatement stmt, int cursor);
    internal abstract virtual object GetValue(SqliteStatement stmt, int index, SQLiteType typ);
    protected virtual void Dispose(bool bDisposing);
    public sealed virtual void Dispose();
    internal static string SQLiteLastError(SqliteConnectionHandle db);
    internal static void FinalizeStatement(SqliteStatementHandle stmt);
    internal static void CloseConnection(SqliteConnectionHandle db);
    internal static void ResetConnection(SqliteConnectionHandle db);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteCallback : MulticastDelegate {
    public SQLiteCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr context, int nArgs, IntPtr argsptr);
    public virtual IAsyncResult BeginInvoke(IntPtr context, int nArgs, IntPtr argsptr, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteCollation : MulticastDelegate {
    public SQLiteCollation(object object, IntPtr method);
    public virtual int Invoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
[DesignerAttribute("SQLite.Designer.SqliteCommandDesigner, SQLite.Designer, Version=1.0.36.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
[ToolboxItemAttribute("True")]
public class Mono.Data.Sqlite.SqliteCommand : DbCommand {
    private string _commandText;
    private SqliteConnection _cnn;
    private long _version;
    private WeakReference _activeReader;
    internal int _commandTimeout;
    private bool _designTimeVisible;
    private UpdateRowSource _updateRowSource;
    private SqliteParameterCollection _parameterCollection;
    internal List`1<SqliteStatement> _statementList;
    internal string _remainingText;
    private SqliteTransaction _transaction;
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
[EditorAttribute("Microsoft.VSDesigner.Data.SQL.Design.SqlCommandTextEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string CommandText { get; public set; }
    [DefaultValueAttribute("30")]
public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DbConnectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqliteConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    [DesignerSerializationVisibilityAttribute("2")]
public SqliteParameterCollection Parameters { get; }
    protected DbParameterCollection DbParameterCollection { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SqliteTransaction Transaction { get; public set; }
    protected DbTransaction DbTransaction { get; protected set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    [DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    public SqliteCommand(string commandText);
    public SqliteCommand(string commandText, SqliteConnection connection);
    public SqliteCommand(SqliteConnection connection);
    private SqliteCommand(SqliteCommand source);
    public SqliteCommand(string commandText, SqliteConnection connection, SqliteTransaction transaction);
    protected virtual void Dispose(bool disposing);
    internal void ClearCommands();
    internal SqliteStatement BuildNextCommand();
    internal SqliteStatement GetStatement(int index);
    public virtual void Cancel();
    public virtual string get_CommandText();
    public virtual void set_CommandText(string value);
    public virtual int get_CommandTimeout();
    public virtual void set_CommandTimeout(int value);
    public virtual CommandType get_CommandType();
    public virtual void set_CommandType(CommandType value);
    protected virtual DbParameter CreateDbParameter();
    public SqliteParameter CreateParameter();
    public SqliteConnection get_Connection();
    public void set_Connection(SqliteConnection value);
    protected virtual DbConnection get_DbConnection();
    protected virtual void set_DbConnection(DbConnection value);
    public SqliteParameterCollection get_Parameters();
    protected virtual DbParameterCollection get_DbParameterCollection();
    public SqliteTransaction get_Transaction();
    public void set_Transaction(SqliteTransaction value);
    protected virtual DbTransaction get_DbTransaction();
    protected virtual void set_DbTransaction(DbTransaction value);
    private void InitializeForReader();
    protected virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public SqliteDataReader ExecuteReader(CommandBehavior behavior);
    public SqliteDataReader ExecuteReader();
    internal void ClearDataReader();
    public virtual int ExecuteNonQuery();
    public virtual object ExecuteScalar();
    public virtual void Prepare();
    public virtual UpdateRowSource get_UpdatedRowSource();
    public virtual void set_UpdatedRowSource(UpdateRowSource value);
    public virtual bool get_DesignTimeVisible();
    public virtual void set_DesignTimeVisible(bool value);
    public sealed virtual object Clone();
}
public class Mono.Data.Sqlite.SqliteCommandBuilder : DbCommandBuilder {
    public SqliteDataAdapter DataAdapter { get; public set; }
    [BrowsableAttribute("False")]
public CatalogLocation CatalogLocation { get; public set; }
    [BrowsableAttribute("False")]
public string CatalogSeparator { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("[")]
public string QuotePrefix { get; public set; }
    [BrowsableAttribute("False")]
public string QuoteSuffix { get; public set; }
    [BrowsableAttribute("False")]
public string SchemaSeparator { get; public set; }
    public SqliteCommandBuilder(SqliteDataAdapter adp);
    protected virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual string GetParameterName(string parameterName);
    protected virtual string GetParameterName(int parameterOrdinal);
    protected virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    private void RowUpdatingEventHandler(object sender, RowUpdatingEventArgs e);
    public SqliteDataAdapter get_DataAdapter();
    public void set_DataAdapter(SqliteDataAdapter value);
    public SqliteCommand GetDeleteCommand();
    public SqliteCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public SqliteCommand GetUpdateCommand();
    public SqliteCommand GetUpdateCommand(bool useColumnsForParameterNames);
    public SqliteCommand GetInsertCommand();
    public SqliteCommand GetInsertCommand(bool useColumnsForParameterNames);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    private bool HasSchemaPrimaryKey(DataTable schema);
    private void ResetIsUniqueSchemaColumn(DataTable schema);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteCommitCallback : MulticastDelegate {
    public SQLiteCommitCallback(object object, IntPtr method);
    public virtual int Invoke(IntPtr puser);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object);
    public virtual int EndInvoke(IAsyncResult result);
}
public class Mono.Data.Sqlite.SQLiteCommitHandler : MulticastDelegate {
    public SQLiteCommitHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CommitEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CommitEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Mono.Data.Sqlite.SQLiteConfig : Enum {
    public int value__;
    public static SQLiteConfig SingleThread;
    public static SQLiteConfig MultiThread;
    public static SQLiteConfig Serialized;
}
public class Mono.Data.Sqlite.SqliteConnection : DbConnection {
    private static string _dataDirectory;
    private static string _masterdb;
    private static string _tempmasterdb;
    private ConnectionState _connectionState;
    private string _connectionString;
    internal int _transactionLevel;
    private IsolationLevel _defaultIsolation;
    internal SQLiteEnlistment _enlistment;
    internal SQLiteBase _sql;
    private string _dataSource;
    private Byte[] _password;
    private int _defaultTimeout;
    internal bool _binaryGuid;
    internal long _version;
    [CompilerGeneratedAttribute]
private SQLiteUpdateEventHandler _updateHandler;
    [CompilerGeneratedAttribute]
private SQLiteCommitHandler _commitHandler;
    [CompilerGeneratedAttribute]
private EventHandler _rollbackHandler;
    private SQLiteUpdateCallback _updateCallback;
    private SQLiteCommitCallback _commitCallback;
    private SQLiteRollbackCallback _rollbackCallback;
    [CompilerGeneratedAttribute]
private StateChangeEventHandler StateChange;
    protected DbProviderFactory DbProviderFactory { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
[EditorAttribute("SQLite.Designer.SqliteConnectionStringEditor, SQLite.Designer, Version=1.0.36.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public string ConnectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
public string DataSource { get; }
    [DesignerSerializationVisibilityAttribute("0")]
public string Database { get; }
    public int DefaultTimeout { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public string ServerVersion { get; }
    public static string SQLiteVersion { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ConnectionState State { get; }
    public SqliteConnection(string connectionString);
    public SqliteConnection(SqliteConnection connection);
    protected virtual DbProviderFactory get_DbProviderFactory();
    [CompilerGeneratedAttribute]
private void add__updateHandler(SQLiteUpdateEventHandler value);
    [CompilerGeneratedAttribute]
private void remove__updateHandler(SQLiteUpdateEventHandler value);
    [CompilerGeneratedAttribute]
private void add__commitHandler(SQLiteCommitHandler value);
    [CompilerGeneratedAttribute]
private void remove__commitHandler(SQLiteCommitHandler value);
    [CompilerGeneratedAttribute]
private void add__rollbackHandler(EventHandler value);
    [CompilerGeneratedAttribute]
private void remove__rollbackHandler(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChange(StateChangeEventHandler value);
    public sealed virtual object Clone();
    protected virtual void Dispose(bool disposing);
    public static void CreateFile(string databaseFileName);
    internal void OnStateChange(ConnectionState newState);
    [ObsoleteAttribute("Use one of the standard BeginTransaction methods, this one will be removed soon")]
public SqliteTransaction BeginTransaction(IsolationLevel isolationLevel, bool deferredLock);
    [ObsoleteAttribute("Use one of the standard BeginTransaction methods, this one will be removed soon")]
public SqliteTransaction BeginTransaction(bool deferredLock);
    public SqliteTransaction BeginTransaction(IsolationLevel isolationLevel);
    public SqliteTransaction BeginTransaction();
    protected virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public virtual void ChangeDatabase(string databaseName);
    public virtual void Close();
    public static void ClearPool(SqliteConnection connection);
    public static void ClearAllPools();
    public virtual string get_ConnectionString();
    public virtual void set_ConnectionString(string value);
    public SqliteCommand CreateCommand();
    protected virtual DbCommand CreateDbCommand();
    public virtual string get_DataSource();
    public virtual string get_Database();
    internal static void MapMonoKeyword(String[] arPiece, SortedList`2<string, string> ls);
    internal static string MapMonoUriPath(string path);
    internal static string MapUriPath(string path);
    internal static SortedList`2<string, string> ParseConnectionString(string connectionString);
    public virtual void EnlistTransaction(Transaction transaction);
    internal static string FindKey(SortedList`2<string, string> items, string key, string defValue);
    public virtual void Open();
    public int get_DefaultTimeout();
    public void set_DefaultTimeout(int value);
    public virtual string get_ServerVersion();
    public static string get_SQLiteVersion();
    public virtual ConnectionState get_State();
    public void ChangePassword(string newPassword);
    public void ChangePassword(Byte[] newPassword);
    public void SetPassword(string databasePassword);
    public void SetPassword(Byte[] databasePassword);
    private string ExpandFileName(string sourceFile);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    private static DataTable Schema_ReservedWords();
    private static DataTable Schema_MetaDataCollections();
    private DataTable Schema_DataSourceInformation();
    private DataTable Schema_Columns(string strCatalog, string strTable, string strColumn);
    private DataTable Schema_Indexes(string strCatalog, string strTable, string strIndex);
    private DataTable Schema_Triggers(string catalog, string table, string triggerName);
    private DataTable Schema_Tables(string strCatalog, string strTable, string strType);
    private DataTable Schema_Views(string strCatalog, string strView);
    private DataTable Schema_Catalogs(string strCatalog);
    private DataTable Schema_DataTypes();
    private DataTable Schema_IndexColumns(string strCatalog, string strTable, string strIndex, string strColumn);
    private DataTable Schema_ViewColumns(string strCatalog, string strView, string strColumn);
    private DataTable Schema_ForeignKeys(string strCatalog, string strTable, string strKeyName);
    public void add_Update(SQLiteUpdateEventHandler value);
    public void remove_Update(SQLiteUpdateEventHandler value);
    private void UpdateCallback(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid);
    public void add_Commit(SQLiteCommitHandler value);
    public void remove_Commit(SQLiteCommitHandler value);
    public void add_RollBack(EventHandler value);
    public void remove_RollBack(EventHandler value);
    private int CommitCallback(IntPtr parg);
    private void RollbackCallback(IntPtr parg);
    public static void SetConfig(SQLiteConfig config);
}
internal class Mono.Data.Sqlite.SqliteConnectionHandle : CriticalHandle {
    public bool IsInvalid { get; }
    private SqliteConnectionHandle(IntPtr db);
    public static IntPtr op_Implicit(SqliteConnectionHandle db);
    public static SqliteConnectionHandle op_Implicit(IntPtr db);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
internal static class Mono.Data.Sqlite.SqliteConnectionPool : object {
    private static SortedList`2<string, Pool> _connections;
    private static int _poolVersion;
    private static SqliteConnectionPool();
    internal static SqliteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version);
    internal static void ClearAllPools();
    internal static void ClearPool(string fileName);
    internal static void Add(string fileName, SqliteConnectionHandle hdl, int version);
    private static void ResizePool(Pool queue, bool forAdding);
}
[DefaultPropertyAttribute("DataSource")]
[DefaultMemberAttribute("Item")]
public class Mono.Data.Sqlite.SqliteConnectionStringBuilder : DbConnectionStringBuilder {
    private Hashtable _properties;
    [BrowsableAttribute("True")]
[DefaultValueAttribute("3")]
public int Version { get; public set; }
    [DisplayNameAttribute("Synchronous")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SynchronizationModes SyncMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool UseUTF16Encoding { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool Pooling { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool BinaryGUID { get; public set; }
    [DisplayNameAttribute("Data Source")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("")]
public string DataSource { get; public set; }
    [BrowsableAttribute("False")]
public string Uri { get; public set; }
    [DisplayNameAttribute("Default Timeout")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("30")]
public int DefaultTimeout { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("True")]
public bool Enlist { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool FailIfMissing { get; public set; }
    [DisplayNameAttribute("Legacy Format")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool LegacyFormat { get; public set; }
    [DisplayNameAttribute("Read Only")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("True")]
[PasswordPropertyTextAttribute("True")]
[DefaultValueAttribute("")]
public string Password { get; public set; }
    [DisplayNameAttribute("Page Size")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("1024")]
public int PageSize { get; public set; }
    [DisplayNameAttribute("Max Page Count")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("0")]
public int MaxPageCount { get; public set; }
    [DisplayNameAttribute("Cache Size")]
[BrowsableAttribute("True")]
[DefaultValueAttribute("2000")]
public int CacheSize { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SQLiteDateFormats DateTimeFormat { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Journal Mode")]
public SQLiteJournalModeEnum JournalMode { get; public set; }
    [BrowsableAttribute("True")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[DisplayNameAttribute("Default Isolation Level")]
public IsolationLevel DefaultIsolationLevel { get; public set; }
    public SqliteConnectionStringBuilder(string connectionString);
    private void Initialize(string cnnString);
    public int get_Version();
    public void set_Version(int value);
    public SynchronizationModes get_SyncMode();
    public void set_SyncMode(SynchronizationModes value);
    public bool get_UseUTF16Encoding();
    public void set_UseUTF16Encoding(bool value);
    public bool get_Pooling();
    public void set_Pooling(bool value);
    public bool get_BinaryGUID();
    public void set_BinaryGUID(bool value);
    public string get_DataSource();
    public void set_DataSource(string value);
    public string get_Uri();
    public void set_Uri(string value);
    public int get_DefaultTimeout();
    public void set_DefaultTimeout(int value);
    public bool get_Enlist();
    public void set_Enlist(bool value);
    public bool get_FailIfMissing();
    public void set_FailIfMissing(bool value);
    public bool get_LegacyFormat();
    public void set_LegacyFormat(bool value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public string get_Password();
    public void set_Password(string value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public int get_MaxPageCount();
    public void set_MaxPageCount(int value);
    public int get_CacheSize();
    public void set_CacheSize(int value);
    public SQLiteDateFormats get_DateTimeFormat();
    public void set_DateTimeFormat(SQLiteDateFormats value);
    public SQLiteJournalModeEnum get_JournalMode();
    public void set_JournalMode(SQLiteJournalModeEnum value);
    public IsolationLevel get_DefaultIsolationLevel();
    public void set_DefaultIsolationLevel(IsolationLevel value);
    public virtual bool TryGetValue(string keyword, Object& value);
    private void FallbackGetProperties(Hashtable propertyList);
}
public abstract class Mono.Data.Sqlite.SqliteConvert : object {
    protected static DateTime UnixEpoch;
    private static String[] _datetimeFormats;
    private static Encoding _utf8;
    internal SQLiteDateFormats _datetimeFormat;
    private static Type[] _affinitytotype;
    private static DbType[] _typetodbtype;
    private static Int32[] _dbtypetocolumnsize;
    private static Object[] _dbtypetonumericprecision;
    private static Object[] _dbtypetonumericscale;
    private static SQLiteTypeNames[] _dbtypeNames;
    private static Type[] _dbtypeToType;
    private static TypeAffinity[] _typecodeAffinities;
    private static SQLiteTypeNames[] _typeNames;
    internal SqliteConvert(SQLiteDateFormats fmt);
    private static SqliteConvert();
    public static Byte[] ToUTF8(string sourceText);
    public Byte[] ToUTF8(DateTime dateTimeValue);
    public virtual string ToString(IntPtr nativestring, int nativestringlen);
    public static string UTF8ToString(IntPtr nativestring, int nativestringlen);
    public DateTime ToDateTime(string dateText);
    public DateTime ToDateTime(double julianDay);
    public double ToJulianDay(DateTime value);
    public string ToString(DateTime dateValue);
    internal DateTime ToDateTime(IntPtr ptr, int len);
    public static String[] Split(string source, char separator);
    public static bool ToBoolean(object source);
    public static bool ToBoolean(string source);
    internal static void ColumnToType(SqliteStatement stmt, int i, SQLiteType typ);
    internal static Type SQLiteTypeToType(SQLiteType t);
    internal static DbType TypeToDbType(Type typ);
    internal static int DbTypeToColumnSize(DbType typ);
    internal static object DbTypeToNumericPrecision(DbType typ);
    internal static object DbTypeToNumericScale(DbType typ);
    internal static string DbTypeToTypeName(DbType typ);
    internal static Type DbTypeToType(DbType typ);
    internal static TypeAffinity TypeToAffinity(Type typ);
    internal static DbType TypeNameToDbType(string Name);
}
[DefaultEventAttribute("RowUpdated")]
[ToolboxItemAttribute("SQLite.Designer.SqliteDataAdapterToolboxItem, SQLite.Designer, Version=1.0.36.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
[DesignerAttribute("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public class Mono.Data.Sqlite.SqliteDataAdapter : DbDataAdapter {
    private static object _updatingEventPH;
    private static object _updatedEventPH;
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqliteCommand SelectCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqliteCommand InsertCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqliteCommand UpdateCommand { get; public set; }
    [DefaultValueAttribute("")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
public SqliteCommand DeleteCommand { get; public set; }
    public SqliteDataAdapter(SqliteCommand cmd);
    public SqliteDataAdapter(string commandText, SqliteConnection connection);
    public SqliteDataAdapter(string commandText, string connectionString);
    private static SqliteDataAdapter();
    public void add_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value);
    public void remove_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value);
    internal static Delegate FindBuilder(MulticastDelegate mcd);
    public void add_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value);
    public void remove_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    public SqliteCommand get_SelectCommand();
    public void set_SelectCommand(SqliteCommand value);
    public SqliteCommand get_InsertCommand();
    public void set_InsertCommand(SqliteCommand value);
    public SqliteCommand get_UpdateCommand();
    public void set_UpdateCommand(SqliteCommand value);
    public SqliteCommand get_DeleteCommand();
    public void set_DeleteCommand(SqliteCommand value);
}
[DefaultMemberAttribute("Item")]
public class Mono.Data.Sqlite.SqliteDataReader : DbDataReader {
    private SqliteCommand _command;
    private int _activeStatementIndex;
    private SqliteStatement _activeStatement;
    private int _readingState;
    private int _rowsAffected;
    private int _fieldCount;
    private SQLiteType[] _fieldTypeArray;
    private CommandBehavior _commandBehavior;
    internal bool _disposeCommand;
    private SqliteKeyReader _keyInfo;
    internal long _version;
    private static bool hasColumnMetadataSupport;
    public int Depth { get; }
    public int FieldCount { get; }
    public int VisibleFieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public object Item { get; }
    public object Item { get; }
    internal SqliteDataReader(SqliteCommand cmd, CommandBehavior behave);
    private static SqliteDataReader();
    internal void Cancel();
    public virtual void Close();
    private void CheckClosed();
    private void CheckValidRow();
    public virtual IEnumerator GetEnumerator();
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual int get_VisibleFieldCount();
    private TypeAffinity VerifyType(int i, DbType typ);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public virtual string GetDataTypeName(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual decimal GetDecimal(int i);
    public virtual double GetDouble(int i);
    public virtual Type GetFieldType(int i);
    public virtual float GetFloat(int i);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual string GetName(int i);
    public virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    internal DataTable GetSchemaTable(bool wantUniqueInfo, bool wantDefaultValue);
    public virtual string GetString(int i);
    public virtual object GetValue(int i);
    public virtual int GetValues(Object[] values);
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual bool IsDBNull(int i);
    public virtual bool NextResult();
    private SQLiteType GetSQLiteType(int i);
    public virtual bool Read();
    public virtual int get_RecordsAffected();
    public virtual object get_Item(string name);
    public virtual object get_Item(int i);
    private void LoadKeyInfo();
}
public class Mono.Data.Sqlite.SqliteDataSourceEnumerator : DbDataSourceEnumerator {
    public virtual DataTable GetDataSources();
}
public enum Mono.Data.Sqlite.SQLiteDateFormats : Enum {
    public int value__;
    public static SQLiteDateFormats Ticks;
    public static SQLiteDateFormats ISO8601;
    public static SQLiteDateFormats JulianDay;
    public static SQLiteDateFormats UnixEpoch;
}
internal class Mono.Data.Sqlite.SQLiteEnlistment : object {
    internal SqliteTransaction _transaction;
    internal Transaction _scope;
    internal bool _disposeConnection;
    internal SQLiteEnlistment(SqliteConnection cnn, Transaction scope);
    private void Cleanup(SqliteConnection cnn);
    public sealed virtual void Commit(Enlistment enlistment);
    public sealed virtual void InDoubt(Enlistment enlistment);
    public sealed virtual void Prepare(PreparingEnlistment preparingEnlistment);
    public sealed virtual void Rollback(Enlistment enlistment);
}
public enum Mono.Data.Sqlite.SQLiteErrorCode : Enum {
    public int value__;
    public static SQLiteErrorCode Ok;
    public static SQLiteErrorCode Error;
    public static SQLiteErrorCode Internal;
    public static SQLiteErrorCode Perm;
    public static SQLiteErrorCode Abort;
    public static SQLiteErrorCode Busy;
    public static SQLiteErrorCode Locked;
    public static SQLiteErrorCode NoMem;
    public static SQLiteErrorCode ReadOnly;
    public static SQLiteErrorCode Interrupt;
    public static SQLiteErrorCode IOErr;
    public static SQLiteErrorCode Corrupt;
    public static SQLiteErrorCode NotFound;
    public static SQLiteErrorCode Full;
    public static SQLiteErrorCode CantOpen;
    public static SQLiteErrorCode Protocol;
    public static SQLiteErrorCode Empty;
    public static SQLiteErrorCode Schema;
    public static SQLiteErrorCode TooBig;
    public static SQLiteErrorCode Constraint;
    public static SQLiteErrorCode Mismatch;
    public static SQLiteErrorCode Misuse;
    public static SQLiteErrorCode NOLFS;
    public static SQLiteErrorCode Auth;
    public static SQLiteErrorCode Format;
    public static SQLiteErrorCode Range;
    public static SQLiteErrorCode NotADatabase;
    public static SQLiteErrorCode Row;
    public static SQLiteErrorCode Done;
}
public class Mono.Data.Sqlite.SqliteException : DbException {
    private SQLiteErrorCode _errorCode;
    private static String[] _errorMessages;
    public SQLiteErrorCode ErrorCode { get; }
    private SqliteException(SerializationInfo info, StreamingContext context);
    public SqliteException(int errorCode, string extendedInformation);
    public SqliteException(string message);
    public SqliteException(string message, Exception innerException);
    private static SqliteException();
    public SQLiteErrorCode get_ErrorCode();
    private static string GetStockErrorMessage(int errorCode, string errorMessage);
}
public class Mono.Data.Sqlite.SqliteFactory : DbProviderFactory {
    private static Type _dbProviderServicesType;
    private static object _sqliteServices;
    public static SqliteFactory Instance;
    private static SqliteFactory();
    private sealed virtual override object System.IServiceProvider.GetService(Type serviceType);
    private object GetSQLiteProviderServicesInstance();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteFinalCallback : MulticastDelegate {
    public SQLiteFinalCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr context);
    public virtual IAsyncResult BeginInvoke(IntPtr context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Mono.Data.Sqlite.SqliteFunction : object {
    internal SQLiteBase _base;
    private Dictionary`2<long, AggregateData> _contextDataList;
    private SQLiteCallback _InvokeFunc;
    private SQLiteCallback _StepFunc;
    private SQLiteFinalCallback _FinalFunc;
    private SQLiteCollation _CompareFunc;
    private SQLiteCollation _CompareFunc16;
    internal IntPtr _context;
    private static List`1<SqliteFunctionAttribute> _registeredFunctions;
    public SqliteConvert SqliteConvert { get; }
    private static SqliteFunction();
    public SqliteConvert get_SqliteConvert();
    public virtual object Invoke(Object[] args);
    public virtual void Step(Object[] args, int stepNumber, Object& contextData);
    public virtual object Final(object contextData);
    public virtual int Compare(string param1, string param2);
    internal Object[] ConvertParams(int nArgs, IntPtr argsptr);
    private void SetReturnValue(IntPtr context, object returnValue);
    internal void ScalarCallback(IntPtr context, int nArgs, IntPtr argsptr);
    internal int CompareCallback(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2);
    internal int CompareCallback16(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2);
    internal void StepCallback(IntPtr context, int nArgs, IntPtr argsptr);
    internal void FinalCallback(IntPtr context);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public static void RegisterFunction(Type typ);
    internal static SqliteFunction[] BindFunctions(SQLiteBase sqlbase);
}
[AttributeUsageAttribute("4")]
public class Mono.Data.Sqlite.SqliteFunctionAttribute : Attribute {
    private string _name;
    private int _arguments;
    private FunctionType _functionType;
    internal Type _instanceType;
    public string Name { get; public set; }
    public int Arguments { get; public set; }
    public FunctionType FuncType { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public int get_Arguments();
    public void set_Arguments(int value);
    public FunctionType get_FuncType();
    public void set_FuncType(FunctionType value);
}
public class Mono.Data.Sqlite.SqliteFunctionEx : SqliteFunction {
    protected CollationSequence GetCollationSequence();
}
public enum Mono.Data.Sqlite.SQLiteJournalModeEnum : Enum {
    public int value__;
    public static SQLiteJournalModeEnum Delete;
    public static SQLiteJournalModeEnum Persist;
    public static SQLiteJournalModeEnum Off;
}
internal class Mono.Data.Sqlite.SqliteKeyReader : object {
    private KeyInfo[] _keyInfo;
    private SqliteStatement _stmt;
    private bool _isValid;
    internal int Count { get; }
    internal SqliteKeyReader(SqliteConnection cnn, SqliteDataReader reader, SqliteStatement stmt);
    internal int get_Count();
    internal void Sync(int i);
    internal void Sync();
    internal void Reset();
    public sealed virtual void Dispose();
    internal string GetDataTypeName(int i);
    internal Type GetFieldType(int i);
    internal string GetName(int i);
    internal int GetOrdinal(string name);
    internal bool GetBoolean(int i);
    internal byte GetByte(int i);
    internal long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    internal char GetChar(int i);
    internal long GetChars(int i, long fieldOffset, Char[] buffer, int bufferoffset, int length);
    internal DateTime GetDateTime(int i);
    internal decimal GetDecimal(int i);
    internal double GetDouble(int i);
    internal float GetFloat(int i);
    internal Guid GetGuid(int i);
    internal short GetInt16(int i);
    internal int GetInt32(int i);
    internal long GetInt64(int i);
    internal string GetString(int i);
    internal object GetValue(int i);
    internal bool IsDBNull(int i);
    internal void AppendSchemaTable(DataTable tbl);
}
public static class Mono.Data.Sqlite.SqliteMetaDataCollectionNames : object {
    public static string Catalogs;
    public static string Columns;
    public static string Indexes;
    public static string IndexColumns;
    public static string Tables;
    public static string Views;
    public static string ViewColumns;
    public static string ForeignKeys;
    public static string Triggers;
    private static SqliteMetaDataCollectionNames();
}
[FlagsAttribute]
internal enum Mono.Data.Sqlite.SQLiteOpenFlagsEnum : Enum {
    public int value__;
    public static SQLiteOpenFlagsEnum None;
    public static SQLiteOpenFlagsEnum ReadOnly;
    public static SQLiteOpenFlagsEnum ReadWrite;
    public static SQLiteOpenFlagsEnum Create;
    public static SQLiteOpenFlagsEnum Default;
    public static SQLiteOpenFlagsEnum FileProtectionComplete;
    public static SQLiteOpenFlagsEnum FileProtectionCompleteUnlessOpen;
    public static SQLiteOpenFlagsEnum FileProtectionCompleteUntilFirstUserAuthentication;
    public static SQLiteOpenFlagsEnum FileProtectionNone;
}
public class Mono.Data.Sqlite.SqliteParameter : DbParameter {
    internal int _dbType;
    private DataRowVersion _rowVersion;
    private object _objValue;
    private string _sourceColumn;
    private string _parameterName;
    private int _dataSize;
    private bool _nullable;
    private bool _nullMapping;
    public bool IsNullable { get; public set; }
    [DbProviderSpecificTypePropertyAttribute("True")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public string ParameterName { get; public set; }
    [DefaultValueAttribute("0")]
public int Size { get; public set; }
    public string SourceColumn { get; public set; }
    public bool SourceColumnNullMapping { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    [TypeConverterAttribute("System.ComponentModel.StringConverter")]
[RefreshPropertiesAttribute("1")]
public object Value { get; public set; }
    public SqliteParameter(string parameterName);
    public SqliteParameter(string parameterName, object value);
    public SqliteParameter(string parameterName, DbType dbType);
    public SqliteParameter(string parameterName, DbType dbType, string sourceColumn);
    public SqliteParameter(string parameterName, DbType dbType, string sourceColumn, DataRowVersion rowVersion);
    public SqliteParameter(DbType dbType);
    public SqliteParameter(DbType dbType, object value);
    public SqliteParameter(DbType dbType, string sourceColumn);
    public SqliteParameter(DbType dbType, string sourceColumn, DataRowVersion rowVersion);
    public SqliteParameter(string parameterName, DbType parameterType, int parameterSize);
    public SqliteParameter(string parameterName, DbType parameterType, int parameterSize, string sourceColumn);
    public SqliteParameter(string parameterName, DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion);
    private SqliteParameter(SqliteParameter source);
    [EditorBrowsableAttribute("2")]
public SqliteParameter(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, object value);
    [EditorBrowsableAttribute("2")]
public SqliteParameter(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, bool sourceColumnNullMapping, object value);
    public SqliteParameter(DbType parameterType, int parameterSize);
    public SqliteParameter(DbType parameterType, int parameterSize, string sourceColumn);
    public SqliteParameter(DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual DbType get_DbType();
    public virtual void set_DbType(DbType value);
    public virtual ParameterDirection get_Direction();
    public virtual void set_Direction(ParameterDirection value);
    public virtual string get_ParameterName();
    public virtual void set_ParameterName(string value);
    public virtual void ResetDbType();
    public virtual int get_Size();
    public virtual void set_Size(int value);
    public virtual string get_SourceColumn();
    public virtual void set_SourceColumn(string value);
    public virtual bool get_SourceColumnNullMapping();
    public virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public virtual object get_Value();
    public virtual void set_Value(object value);
    public sealed virtual object Clone();
}
[DefaultMemberAttribute("Item")]
[EditorAttribute("Microsoft.VSDesigner.Data.Design.DBParametersEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[ListBindableAttribute("False")]
public class Mono.Data.Sqlite.SqliteParameterCollection : DbParameterCollection {
    private SqliteCommand _command;
    private List`1<SqliteParameter> _parameterList;
    private bool _unboundFlag;
    public bool IsSynchronized { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public object SyncRoot { get; }
    public int Count { get; }
    public SqliteParameter Item { get; public set; }
    public SqliteParameter Item { get; public set; }
    internal SqliteParameterCollection(SqliteCommand cmd);
    public virtual bool get_IsSynchronized();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual object get_SyncRoot();
    public virtual IEnumerator GetEnumerator();
    public SqliteParameter Add(string parameterName, DbType parameterType, int parameterSize, string sourceColumn);
    public SqliteParameter Add(string parameterName, DbType parameterType, int parameterSize);
    public SqliteParameter Add(string parameterName, DbType parameterType);
    public int Add(SqliteParameter parameter);
    [EditorBrowsableAttribute("1")]
public virtual int Add(object value);
    public SqliteParameter AddWithValue(string parameterName, object value);
    public void AddRange(SqliteParameter[] values);
    public virtual void AddRange(Array values);
    public virtual void Clear();
    public virtual bool Contains(string parameterName);
    public virtual bool Contains(object value);
    public virtual void CopyTo(Array array, int index);
    public virtual int get_Count();
    public SqliteParameter get_Item(string parameterName);
    public void set_Item(string parameterName, SqliteParameter value);
    public SqliteParameter get_Item(int index);
    public void set_Item(int index, SqliteParameter value);
    protected virtual DbParameter GetParameter(string parameterName);
    protected virtual DbParameter GetParameter(int index);
    public virtual int IndexOf(string parameterName);
    public virtual int IndexOf(object value);
    public virtual void Insert(int index, object value);
    public virtual void Remove(object value);
    public virtual void RemoveAt(string parameterName);
    public virtual void RemoveAt(int index);
    protected virtual void SetParameter(string parameterName, DbParameter value);
    protected virtual void SetParameter(int index, DbParameter value);
    internal void Unbind();
    internal void MapParameters(SqliteStatement activeStatement);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteRollbackCallback : MulticastDelegate {
    public SQLiteRollbackCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr puser);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Mono.Data.Sqlite.SqliteStatement : object {
    internal SQLiteBase _sql;
    internal string _sqlStatement;
    internal SqliteStatementHandle _sqlite_stmt;
    internal int _unnamedParameters;
    internal String[] _paramNames;
    internal SqliteParameter[] _paramValues;
    internal SqliteCommand _command;
    private String[] _types;
    internal String[] TypeDefinitions { get; }
    internal SqliteStatement(SQLiteBase sqlbase, SqliteStatementHandle stmt, string strCommand, SqliteStatement previous);
    internal bool MapParameter(string s, SqliteParameter p);
    public sealed virtual void Dispose();
    internal void BindParameters();
    private void BindParameter(int index, SqliteParameter param);
    internal String[] get_TypeDefinitions();
    internal void SetTypes(string typedefs);
}
internal class Mono.Data.Sqlite.SqliteStatementHandle : CriticalHandle {
    public bool IsInvalid { get; }
    private SqliteStatementHandle(IntPtr stmt);
    public static IntPtr op_Implicit(SqliteStatementHandle stmt);
    public static SqliteStatementHandle op_Implicit(IntPtr stmt);
    protected virtual bool ReleaseHandle();
    public virtual bool get_IsInvalid();
}
public class Mono.Data.Sqlite.SqliteTransaction : DbTransaction {
    internal SqliteConnection _cnn;
    internal long _version;
    private IsolationLevel _level;
    public SqliteConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    internal SqliteTransaction(SqliteConnection connection, bool deferredLock);
    public virtual void Commit();
    public SqliteConnection get_Connection();
    protected virtual DbConnection get_DbConnection();
    protected virtual void Dispose(bool disposing);
    public virtual IsolationLevel get_IsolationLevel();
    public virtual void Rollback();
    internal static void IssueRollback(SqliteConnection cnn);
    internal bool IsValid(bool throwError);
}
internal class Mono.Data.Sqlite.SQLiteType : object {
    internal DbType Type;
    internal TypeAffinity Affinity;
}
internal class Mono.Data.Sqlite.SQLiteTypeNames : ValueType {
    internal string typeName;
    internal DbType dataType;
    internal SQLiteTypeNames(string newtypeName, DbType newdataType);
}
[UnmanagedFunctionPointerAttribute("2")]
internal class Mono.Data.Sqlite.SQLiteUpdateCallback : MulticastDelegate {
    public SQLiteUpdateCallback(object object, IntPtr method);
    public virtual void Invoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid);
    public virtual IAsyncResult BeginInvoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Mono.Data.Sqlite.SQLiteUpdateEventHandler : MulticastDelegate {
    public SQLiteUpdateEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UpdateEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UpdateEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DebuggerNonUserCodeAttribute]
internal class Mono.Data.Sqlite.SR : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string DataTypes { get; }
    internal static string Keywords { get; }
    internal static string MetaDataCollections { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DataTypes();
    internal static string get_Keywords();
    internal static string get_MetaDataCollections();
}
public enum Mono.Data.Sqlite.SynchronizationModes : Enum {
    public int value__;
    public static SynchronizationModes Normal;
    public static SynchronizationModes Full;
    public static SynchronizationModes Off;
}
public enum Mono.Data.Sqlite.TypeAffinity : Enum {
    public int value__;
    public static TypeAffinity Uninitialized;
    public static TypeAffinity Int64;
    public static TypeAffinity Double;
    public static TypeAffinity Text;
    public static TypeAffinity Blob;
    public static TypeAffinity Null;
    public static TypeAffinity DateTime;
    public static TypeAffinity None;
}
[SuppressUnmanagedCodeSecurityAttribute]
internal static class Mono.Data.Sqlite.UnsafeNativeMethods : object {
    internal static bool use_sqlite3_close_v2;
    internal static bool use_sqlite3_open_v2;
    internal static bool use_sqlite3_create_function_v2;
    private static string SQLITE_DLL;
    private static UnsafeNativeMethods();
    internal static int sqlite3_close(IntPtr db);
    internal static int sqlite3_close_v2(IntPtr db);
    internal static int sqlite3_create_function(IntPtr db, Byte[] strName, int nArgs, int nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal);
    internal static int sqlite3_create_function_v2(IntPtr db, Byte[] strName, int nArgs, int nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal, SQLiteFinalCallback fdestroy);
    internal static int sqlite3_finalize(IntPtr stmt);
    internal static int sqlite3_open_v2(Byte[] utf8Filename, IntPtr& db, int flags, IntPtr vfs);
    internal static int sqlite3_open(Byte[] utf8Filename, IntPtr& db);
    internal static int sqlite3_open16(string fileName, IntPtr& db);
    internal static int sqlite3_reset(IntPtr stmt);
    internal static IntPtr sqlite3_bind_parameter_name(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_database_name(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_database_name16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_decltype(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_decltype16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_name(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_name16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_origin_name(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_origin_name16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_table_name(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_table_name16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_text(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_text16(IntPtr stmt, int index);
    internal static IntPtr sqlite3_errmsg(IntPtr db);
    internal static int sqlite3_prepare(IntPtr db, IntPtr pSql, int nBytes, IntPtr& stmt, IntPtr& ptrRemain);
    internal static int sqlite3_table_column_metadata(IntPtr db, Byte[] dbName, Byte[] tblName, Byte[] colName, IntPtr& ptrDataType, IntPtr& ptrCollSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc);
    internal static IntPtr sqlite3_value_text(IntPtr p);
    internal static IntPtr sqlite3_value_text16(IntPtr p);
    internal static IntPtr sqlite3_libversion();
    internal static void sqlite3_interrupt(IntPtr db);
    internal static int sqlite3_changes(IntPtr db);
    internal static int sqlite3_busy_timeout(IntPtr db, int ms);
    internal static int sqlite3_bind_blob(IntPtr stmt, int index, Byte[] value, int nSize, IntPtr nTransient);
    internal static int sqlite3_bind_double(IntPtr stmt, int index, double value);
    internal static int sqlite3_bind_int(IntPtr stmt, int index, int value);
    internal static int sqlite3_bind_int64(IntPtr stmt, int index, long value);
    internal static int sqlite3_bind_null(IntPtr stmt, int index);
    internal static int sqlite3_bind_text(IntPtr stmt, int index, Byte[] value, int nlen, IntPtr pvReserved);
    internal static int sqlite3_bind_parameter_count(IntPtr stmt);
    internal static int sqlite3_bind_parameter_index(IntPtr stmt, Byte[] strName);
    internal static int sqlite3_column_count(IntPtr stmt);
    internal static int sqlite3_step(IntPtr stmt);
    internal static double sqlite3_column_double(IntPtr stmt, int index);
    internal static int sqlite3_column_int(IntPtr stmt, int index);
    internal static long sqlite3_column_int64(IntPtr stmt, int index);
    internal static IntPtr sqlite3_column_blob(IntPtr stmt, int index);
    internal static int sqlite3_column_bytes(IntPtr stmt, int index);
    internal static TypeAffinity sqlite3_column_type(IntPtr stmt, int index);
    internal static int sqlite3_create_collation(IntPtr db, Byte[] strName, int nType, IntPtr pvUser, SQLiteCollation func);
    internal static int sqlite3_aggregate_count(IntPtr context);
    internal static IntPtr sqlite3_value_blob(IntPtr p);
    internal static int sqlite3_value_bytes(IntPtr p);
    internal static double sqlite3_value_double(IntPtr p);
    internal static int sqlite3_value_int(IntPtr p);
    internal static long sqlite3_value_int64(IntPtr p);
    internal static TypeAffinity sqlite3_value_type(IntPtr p);
    internal static void sqlite3_result_blob(IntPtr context, Byte[] value, int nSize, IntPtr pvReserved);
    internal static void sqlite3_result_double(IntPtr context, double value);
    internal static void sqlite3_result_error(IntPtr context, Byte[] strErr, int nLen);
    internal static void sqlite3_result_int(IntPtr context, int value);
    internal static void sqlite3_result_int64(IntPtr context, long value);
    internal static void sqlite3_result_null(IntPtr context);
    internal static void sqlite3_result_text(IntPtr context, Byte[] value, int nLen, IntPtr pvReserved);
    internal static IntPtr sqlite3_aggregate_context(IntPtr context, int nBytes);
    internal static int sqlite3_bind_text16(IntPtr stmt, int index, string value, int nlen, IntPtr pvReserved);
    internal static void sqlite3_result_error16(IntPtr context, string strName, int nLen);
    internal static void sqlite3_result_text16(IntPtr context, string strName, int nLen, IntPtr pvReserved);
    internal static int sqlite3_key(IntPtr db, Byte[] key, int keylen);
    internal static int sqlite3_rekey(IntPtr db, Byte[] key, int keylen);
    internal static IntPtr sqlite3_update_hook(IntPtr db, SQLiteUpdateCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_commit_hook(IntPtr db, SQLiteCommitCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_rollback_hook(IntPtr db, SQLiteRollbackCallback func, IntPtr pvUser);
    internal static IntPtr sqlite3_db_handle(IntPtr stmt);
    internal static IntPtr sqlite3_next_stmt(IntPtr db, IntPtr stmt);
    internal static int sqlite3_exec(IntPtr db, Byte[] strSql, IntPtr pvCallback, IntPtr pvParam, IntPtr& errMsg);
    internal static int sqlite3_config(SQLiteConfig config);
    internal static IntPtr sqlite3_user_data(IntPtr context);
    internal static int sqlite3_free(IntPtr ptr);
    internal static int sqlite3_libversion_number();
}
public class Mono.Data.Sqlite.UpdateEventArgs : EventArgs {
    public string Database;
    public string Table;
    public UpdateEventType Event;
    public long RowId;
    internal UpdateEventArgs(string database, string table, UpdateEventType eventType, long rowid);
}
public enum Mono.Data.Sqlite.UpdateEventType : Enum {
    public int value__;
    public static UpdateEventType Delete;
    public static UpdateEventType Insert;
    public static UpdateEventType Update;
}
[ConditionalAttribute("MONOTOUCH")]
[ConditionalAttribute("FULL_AOT_RUNTIME")]
[ConditionalAttribute("UNITY")]
[AttributeUsageAttribute("64")]
internal class Mono.Util.MonoPInvokeCallbackAttribute : Attribute {
    public MonoPInvokeCallbackAttribute(Type t);
}
