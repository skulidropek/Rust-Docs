internal Consts : object {
public string MonoCorlibVersion
public string MonoVersion
public string MonoCompany
public string MonoProduct
public string MonoCopyright
public string FxVersion
public string FxFileVersion
public string EnvironmentVersion
public string VsVersion
public string VsFileVersion
private string PublicKeyToken
public string AssemblyI18N
public string AssemblyMicrosoft_JScript
public string AssemblyMicrosoft_VisualStudio
public string AssemblyMicrosoft_VisualStudio_Web
public string AssemblyMicrosoft_VSDesigner
public string AssemblyMono_Http
public string AssemblyMono_Posix
public string AssemblyMono_Security
public string AssemblyMono_Messaging_RabbitMQ
public string AssemblyCorlib
public string AssemblySystem
public string AssemblySystem_Data
public string AssemblySystem_Design
public string AssemblySystem_DirectoryServices
public string AssemblySystem_Drawing
public string AssemblySystem_Drawing_Design
public string AssemblySystem_Messaging
public string AssemblySystem_Security
public string AssemblySystem_ServiceProcess
public string AssemblySystem_Web
public string AssemblySystem_Windows_Forms
public string AssemblySystem_2_0
public string AssemblySystemCore_3_5
public string AssemblySystem_Core
public string WindowsBase_3_0
public string AssemblyWindowsBase
public string AssemblyPresentationCore_3_5
public string AssemblyPresentationCore_4_0
public string AssemblyPresentationFramework_3_5
public string AssemblySystemServiceModel_3_0
}
public Mono.Data.Sqlite.CollationEncodingEnum : Enum {
public int value__
public CollationEncodingEnum UTF8
public CollationEncodingEnum UTF16LE
public CollationEncodingEnum UTF16BE
}
public Mono.Data.Sqlite.CollationSequence : ValueType {
public string Name
public CollationTypeEnum Type
public CollationEncodingEnum Encoding
internal SqliteFunction _func
public int Compare(string s1, string s2)
public int Compare(Char[] c1, Char[] c2)
}
public Mono.Data.Sqlite.CollationTypeEnum : Enum {
public int value__
public CollationTypeEnum Binary
public CollationTypeEnum NoCase
public CollationTypeEnum Reverse
public CollationTypeEnum Custom
}
public Mono.Data.Sqlite.CommitEventArgs : EventArgs {
public bool AbortTransaction
}
public Mono.Data.Sqlite.FunctionType : Enum {
public int value__
public FunctionType Scalar
public FunctionType Aggregate
public FunctionType Collation
}
internal Mono.Data.Sqlite.ISQLiteSchemaExtensions {
public void BuildTempSchema(SqliteConnection cnn)
}
internal Mono.Data.Sqlite.SQLite3 : SQLiteBase {
protected SqliteConnectionHandle _sql
protected string _fileName
protected bool _usePool
protected int _poolVersion
private bool _buildingSchema
protected SqliteFunction[] _functionsArray
internal string Version
internal string SQLiteVersion
internal int Changes
internal void .ctor(SQLiteDateFormats fmt)
protected void Dispose(bool bDisposing)
internal void Close()
internal void Cancel()
internal string get_Version()
internal string get_SQLiteVersion()
internal int get_Changes()
internal void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool)
internal void ClearPool()
internal void SetTimeout(int nTimeoutMS)
internal bool Step(SqliteStatement stmt)
internal int Reset(SqliteStatement stmt)
internal string SQLiteLastError()
internal SqliteStatement Prepare(SqliteConnection cnn, string strSql, SqliteStatement previous, UInt32 timeoutMS, String& strRemain)
internal void Bind_Double(SqliteStatement stmt, int index, double value)
internal void Bind_Int32(SqliteStatement stmt, int index, int value)
internal void Bind_Int64(SqliteStatement stmt, int index, long value)
internal void Bind_Text(SqliteStatement stmt, int index, string value)
internal void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt)
internal void Bind_Blob(SqliteStatement stmt, int index, Byte[] blobData)
internal void Bind_Null(SqliteStatement stmt, int index)
internal int Bind_ParamCount(SqliteStatement stmt)
internal string Bind_ParamName(SqliteStatement stmt, int index)
internal int Bind_ParamIndex(SqliteStatement stmt, string paramName)
internal int ColumnCount(SqliteStatement stmt)
internal string ColumnName(SqliteStatement stmt, int index)
internal TypeAffinity ColumnAffinity(SqliteStatement stmt, int index)
internal string ColumnType(SqliteStatement stmt, int index, TypeAffinity& nAffinity)
internal int ColumnIndex(SqliteStatement stmt, string columnName)
internal string ColumnOriginalName(SqliteStatement stmt, int index)
internal string ColumnDatabaseName(SqliteStatement stmt, int index)
internal string ColumnTableName(SqliteStatement stmt, int index)
internal void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement)
internal double GetDouble(SqliteStatement stmt, int index)
internal int GetInt32(SqliteStatement stmt, int index)
internal long GetInt64(SqliteStatement stmt, int index)
internal string GetText(SqliteStatement stmt, int index)
internal DateTime GetDateTime(SqliteStatement stmt, int index)
internal long GetBytes(SqliteStatement stmt, int index, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal long GetChars(SqliteStatement stmt, int index, int nDataOffset, Char[] bDest, int nStart, int nLength)
internal bool IsNull(SqliteStatement stmt, int index)
internal int AggregateCount(IntPtr context)
internal void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal)
internal void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, IntPtr user_data)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2)
internal CollationSequence GetCollationSequence(SqliteFunction func, IntPtr context)
internal long GetParamValueBytes(IntPtr p, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal double GetParamValueDouble(IntPtr ptr)
internal int GetParamValueInt32(IntPtr ptr)
internal long GetParamValueInt64(IntPtr ptr)
internal string GetParamValueText(IntPtr ptr)
internal TypeAffinity GetParamValueType(IntPtr ptr)
internal void ReturnBlob(IntPtr context, Byte[] value)
internal void ReturnDouble(IntPtr context, double value)
internal void ReturnError(IntPtr context, string value)
internal void ReturnInt32(IntPtr context, int value)
internal void ReturnInt64(IntPtr context, long value)
internal void ReturnNull(IntPtr context)
internal void ReturnText(IntPtr context, string value)
internal IntPtr AggregateContext(IntPtr context)
internal void SetPassword(Byte[] passwordBytes)
internal void ChangePassword(Byte[] newPasswordBytes)
internal void SetUpdateHook(SQLiteUpdateCallback func)
internal void SetCommitHook(SQLiteCommitCallback func)
internal void SetRollbackHook(SQLiteRollbackCallback func)
internal object GetValue(SqliteStatement stmt, int index, SQLiteType typ)
internal int GetCursorForTable(SqliteStatement stmt, int db, int rootPage)
internal long GetRowIdForCursor(SqliteStatement stmt, int cursor)
internal void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence)
}
internal Mono.Data.Sqlite.SQLite3_UTF16 : SQLite3 {
internal void .ctor(SQLiteDateFormats fmt)
public string ToString(IntPtr b, int nbytelen)
public string UTF16ToString(IntPtr b, int nbytelen)
internal void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool)
internal void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt)
internal void Bind_Text(SqliteStatement stmt, int index, string value)
internal DateTime GetDateTime(SqliteStatement stmt, int index)
internal string ColumnName(SqliteStatement stmt, int index)
internal string GetText(SqliteStatement stmt, int index)
internal string ColumnOriginalName(SqliteStatement stmt, int index)
internal string ColumnDatabaseName(SqliteStatement stmt, int index)
internal string ColumnTableName(SqliteStatement stmt, int index)
internal string GetParamValueText(IntPtr ptr)
internal void ReturnError(IntPtr context, string value)
internal void ReturnText(IntPtr context, string value)
}
internal Mono.Data.Sqlite.SQLiteBase : SqliteConvert {
internal object _lock
internal string Version
internal int Changes
internal void .ctor(SQLiteDateFormats fmt)
internal string get_Version()
internal int get_Changes()
internal void Open(string strFilename, SQLiteOpenFlagsEnum flags, int maxPoolSize, bool usePool)
internal void Close()
internal void SetTimeout(int nTimeoutMS)
internal string SQLiteLastError()
internal void ClearPool()
internal SqliteStatement Prepare(SqliteConnection cnn, string strSql, SqliteStatement previous, UInt32 timeoutMS, String& strRemain)
internal bool Step(SqliteStatement stmt)
internal int Reset(SqliteStatement stmt)
internal void Cancel()
internal void Bind_Double(SqliteStatement stmt, int index, double value)
internal void Bind_Int32(SqliteStatement stmt, int index, int value)
internal void Bind_Int64(SqliteStatement stmt, int index, long value)
internal void Bind_Text(SqliteStatement stmt, int index, string value)
internal void Bind_Blob(SqliteStatement stmt, int index, Byte[] blobData)
internal void Bind_DateTime(SqliteStatement stmt, int index, DateTime dt)
internal void Bind_Null(SqliteStatement stmt, int index)
internal int Bind_ParamCount(SqliteStatement stmt)
internal string Bind_ParamName(SqliteStatement stmt, int index)
internal int Bind_ParamIndex(SqliteStatement stmt, string paramName)
internal int ColumnCount(SqliteStatement stmt)
internal string ColumnName(SqliteStatement stmt, int index)
internal TypeAffinity ColumnAffinity(SqliteStatement stmt, int index)
internal string ColumnType(SqliteStatement stmt, int index, TypeAffinity& nAffinity)
internal int ColumnIndex(SqliteStatement stmt, string columnName)
internal string ColumnOriginalName(SqliteStatement stmt, int index)
internal string ColumnDatabaseName(SqliteStatement stmt, int index)
internal string ColumnTableName(SqliteStatement stmt, int index)
internal void ColumnMetaData(string dataBase, string table, string column, String& dataType, String& collateSequence, Boolean& notNull, Boolean& primaryKey, Boolean& autoIncrement)
internal void GetIndexColumnExtendedInfo(string database, string index, string column, Int32& sortMode, Int32& onError, String& collationSequence)
internal double GetDouble(SqliteStatement stmt, int index)
internal int GetInt32(SqliteStatement stmt, int index)
internal long GetInt64(SqliteStatement stmt, int index)
internal string GetText(SqliteStatement stmt, int index)
internal long GetBytes(SqliteStatement stmt, int index, int nDataoffset, Byte[] bDest, int nStart, int nLength)
internal long GetChars(SqliteStatement stmt, int index, int nDataoffset, Char[] bDest, int nStart, int nLength)
internal DateTime GetDateTime(SqliteStatement stmt, int index)
internal bool IsNull(SqliteStatement stmt, int index)
internal void CreateCollation(string strCollation, SQLiteCollation func, SQLiteCollation func16, IntPtr user_data)
internal void CreateFunction(string strFunction, int nArgs, bool needCollSeq, SQLiteCallback func, SQLiteCallback funcstep, SQLiteFinalCallback funcfinal)
internal CollationSequence GetCollationSequence(SqliteFunction func, IntPtr context)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, string s1, string s2)
internal int ContextCollateCompare(CollationEncodingEnum enc, IntPtr context, Char[] c1, Char[] c2)
internal int AggregateCount(IntPtr context)
internal IntPtr AggregateContext(IntPtr context)
internal long GetParamValueBytes(IntPtr ptr, int nDataOffset, Byte[] bDest, int nStart, int nLength)
internal double GetParamValueDouble(IntPtr ptr)
internal int GetParamValueInt32(IntPtr ptr)
internal long GetParamValueInt64(IntPtr ptr)
internal string GetParamValueText(IntPtr ptr)
internal TypeAffinity GetParamValueType(IntPtr ptr)
internal void ReturnBlob(IntPtr context, Byte[] value)
internal void ReturnDouble(IntPtr context, double value)
internal void ReturnError(IntPtr context, string value)
internal void ReturnInt32(IntPtr context, int value)
internal void ReturnInt64(IntPtr context, long value)
internal void ReturnNull(IntPtr context)
internal void ReturnText(IntPtr context, string value)
internal void SetPassword(Byte[] passwordBytes)
internal void ChangePassword(Byte[] newPasswordBytes)
internal void SetUpdateHook(SQLiteUpdateCallback func)
internal void SetCommitHook(SQLiteCommitCallback func)
internal void SetRollbackHook(SQLiteRollbackCallback func)
internal int GetCursorForTable(SqliteStatement stmt, int database, int rootPage)
internal long GetRowIdForCursor(SqliteStatement stmt, int cursor)
internal object GetValue(SqliteStatement stmt, int index, SQLiteType typ)
protected void Dispose(bool bDisposing)
public void Dispose()
internal string SQLiteLastError(SqliteConnectionHandle db)
internal void FinalizeStatement(SqliteStatementHandle stmt)
internal void CloseConnection(SqliteConnectionHandle db)
internal void ResetConnection(SqliteConnectionHandle db)
}
internal Mono.Data.Sqlite.SQLiteCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr context, int nArgs, IntPtr argsptr)
public IAsyncResult BeginInvoke(IntPtr context, int nArgs, IntPtr argsptr, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Data.Sqlite.SQLiteCollation : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2)
public IAsyncResult BeginInvoke(IntPtr puser, int len1, IntPtr pv1, int len2, IntPtr pv2, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
public Mono.Data.Sqlite.SqliteCommand : DbCommand {
private string _commandText
private SqliteConnection _cnn
private long _version
private WeakReference _activeReader
internal int _commandTimeout
private bool _designTimeVisible
private UpdateRowSource _updateRowSource
private SqliteParameterCollection _parameterCollection
internal List`1<SqliteStatement> _statementList
internal string _remainingText
private SqliteTransaction _transaction
public string CommandText
public int CommandTimeout
public CommandType CommandType
public SqliteConnection Connection
protected DbConnection DbConnection
public SqliteParameterCollection Parameters
protected DbParameterCollection DbParameterCollection
public SqliteTransaction Transaction
protected DbTransaction DbTransaction
public UpdateRowSource UpdatedRowSource
public bool DesignTimeVisible
public void .ctor(string commandText)
public void .ctor(string commandText, SqliteConnection connection)
public void .ctor(SqliteConnection connection)
private void .ctor(SqliteCommand source)
public void .ctor(string commandText, SqliteConnection connection, SqliteTransaction transaction)
protected void Dispose(bool disposing)
internal void ClearCommands()
internal SqliteStatement BuildNextCommand()
internal SqliteStatement GetStatement(int index)
public void Cancel()
public string get_CommandText()
public void set_CommandText(string value)
public int get_CommandTimeout()
public void set_CommandTimeout(int value)
public CommandType get_CommandType()
public void set_CommandType(CommandType value)
protected DbParameter CreateDbParameter()
public SqliteParameter CreateParameter()
public SqliteConnection get_Connection()
public void set_Connection(SqliteConnection value)
protected DbConnection get_DbConnection()
protected void set_DbConnection(DbConnection value)
public SqliteParameterCollection get_Parameters()
protected DbParameterCollection get_DbParameterCollection()
public SqliteTransaction get_Transaction()
public void set_Transaction(SqliteTransaction value)
protected DbTransaction get_DbTransaction()
protected void set_DbTransaction(DbTransaction value)
private void InitializeForReader()
protected DbDataReader ExecuteDbDataReader(CommandBehavior behavior)
public SqliteDataReader ExecuteReader(CommandBehavior behavior)
public SqliteDataReader ExecuteReader()
internal void ClearDataReader()
public int ExecuteNonQuery()
public object ExecuteScalar()
public void Prepare()
public UpdateRowSource get_UpdatedRowSource()
public void set_UpdatedRowSource(UpdateRowSource value)
public bool get_DesignTimeVisible()
public void set_DesignTimeVisible(bool value)
public object Clone()
}
public Mono.Data.Sqlite.SqliteCommandBuilder : DbCommandBuilder {
public SqliteDataAdapter DataAdapter
public CatalogLocation CatalogLocation
public string CatalogSeparator
public string QuotePrefix
public string QuoteSuffix
public string SchemaSeparator
public void .ctor(SqliteDataAdapter adp)
protected void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause)
protected string GetParameterName(string parameterName)
protected string GetParameterName(int parameterOrdinal)
protected string GetParameterPlaceholder(int parameterOrdinal)
protected void SetRowUpdatingHandler(DbDataAdapter adapter)
private void RowUpdatingEventHandler(object sender, RowUpdatingEventArgs e)
public SqliteDataAdapter get_DataAdapter()
public void set_DataAdapter(SqliteDataAdapter value)
public SqliteCommand GetDeleteCommand()
public SqliteCommand GetDeleteCommand(bool useColumnsForParameterNames)
public SqliteCommand GetUpdateCommand()
public SqliteCommand GetUpdateCommand(bool useColumnsForParameterNames)
public SqliteCommand GetInsertCommand()
public SqliteCommand GetInsertCommand(bool useColumnsForParameterNames)
public CatalogLocation get_CatalogLocation()
public void set_CatalogLocation(CatalogLocation value)
public string get_CatalogSeparator()
public void set_CatalogSeparator(string value)
public string get_QuotePrefix()
public void set_QuotePrefix(string value)
public string get_QuoteSuffix()
public void set_QuoteSuffix(string value)
public string QuoteIdentifier(string unquotedIdentifier)
public string UnquoteIdentifier(string quotedIdentifier)
public string get_SchemaSeparator()
public void set_SchemaSeparator(string value)
protected DataTable GetSchemaTable(DbCommand sourceCommand)
private bool HasSchemaPrimaryKey(DataTable schema)
private void ResetIsUniqueSchemaColumn(DataTable schema)
}
internal Mono.Data.Sqlite.SQLiteCommitCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public int Invoke(IntPtr puser)
public IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object)
public int EndInvoke(IAsyncResult result)
}
public Mono.Data.Sqlite.SQLiteCommitHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, CommitEventArgs e)
public IAsyncResult BeginInvoke(object sender, CommitEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Data.Sqlite.SQLiteConfig : Enum {
public int value__
public SQLiteConfig SingleThread
public SQLiteConfig MultiThread
public SQLiteConfig Serialized
}
public Mono.Data.Sqlite.SqliteConnection : DbConnection {
private string _dataDirectory
private string _masterdb
private string _tempmasterdb
private ConnectionState _connectionState
private string _connectionString
internal int _transactionLevel
private IsolationLevel _defaultIsolation
internal SQLiteEnlistment _enlistment
internal SQLiteBase _sql
private string _dataSource
private Byte[] _password
private int _defaultTimeout
internal bool _binaryGuid
internal long _version
private SQLiteUpdateEventHandler _updateHandler
private SQLiteCommitHandler _commitHandler
private EventHandler _rollbackHandler
private SQLiteUpdateCallback _updateCallback
private SQLiteCommitCallback _commitCallback
private SQLiteRollbackCallback _rollbackCallback
private StateChangeEventHandler StateChange
protected DbProviderFactory DbProviderFactory
public string ConnectionString
public string DataSource
public string Database
public int DefaultTimeout
public string ServerVersion
public string SQLiteVersion
public ConnectionState State
protected DbProviderFactory get_DbProviderFactory()
private void add__updateHandler(SQLiteUpdateEventHandler value)
private void remove__updateHandler(SQLiteUpdateEventHandler value)
private void add__commitHandler(SQLiteCommitHandler value)
private void remove__commitHandler(SQLiteCommitHandler value)
private void add__rollbackHandler(EventHandler value)
private void remove__rollbackHandler(EventHandler value)
public void add_StateChange(StateChangeEventHandler value)
public void remove_StateChange(StateChangeEventHandler value)
public void .ctor(string connectionString)
public void .ctor(SqliteConnection connection)
public object Clone()
protected void Dispose(bool disposing)
public void CreateFile(string databaseFileName)
internal void OnStateChange(ConnectionState newState)
public SqliteTransaction BeginTransaction(IsolationLevel isolationLevel, bool deferredLock)
public SqliteTransaction BeginTransaction(bool deferredLock)
public SqliteTransaction BeginTransaction(IsolationLevel isolationLevel)
public SqliteTransaction BeginTransaction()
protected DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
public void ChangeDatabase(string databaseName)
public void Close()
public void ClearPool(SqliteConnection connection)
public void ClearAllPools()
public string get_ConnectionString()
public void set_ConnectionString(string value)
public SqliteCommand CreateCommand()
protected DbCommand CreateDbCommand()
public string get_DataSource()
public string get_Database()
internal void MapMonoKeyword(String[] arPiece, SortedList`2<string, string> ls)
internal string MapMonoUriPath(string path)
internal string MapUriPath(string path)
internal SortedList`2<string, string> ParseConnectionString(string connectionString)
public void EnlistTransaction(Transaction transaction)
internal string FindKey(SortedList`2<string, string> items, string key, string defValue)
public void Open()
public int get_DefaultTimeout()
public void set_DefaultTimeout(int value)
public string get_ServerVersion()
public string get_SQLiteVersion()
public ConnectionState get_State()
public void ChangePassword(string newPassword)
public void ChangePassword(Byte[] newPassword)
public void SetPassword(string databasePassword)
public void SetPassword(Byte[] databasePassword)
private string ExpandFileName(string sourceFile)
public DataTable GetSchema()
public DataTable GetSchema(string collectionName)
public DataTable GetSchema(string collectionName, String[] restrictionValues)
private DataTable Schema_ReservedWords()
private DataTable Schema_MetaDataCollections()
private DataTable Schema_DataSourceInformation()
private DataTable Schema_Columns(string strCatalog, string strTable, string strColumn)
private DataTable Schema_Indexes(string strCatalog, string strTable, string strIndex)
private DataTable Schema_Triggers(string catalog, string table, string triggerName)
private DataTable Schema_Tables(string strCatalog, string strTable, string strType)
private DataTable Schema_Views(string strCatalog, string strView)
private DataTable Schema_Catalogs(string strCatalog)
private DataTable Schema_DataTypes()
private DataTable Schema_IndexColumns(string strCatalog, string strTable, string strIndex, string strColumn)
private DataTable Schema_ViewColumns(string strCatalog, string strView, string strColumn)
private DataTable Schema_ForeignKeys(string strCatalog, string strTable, string strKeyName)
public void add_Update(SQLiteUpdateEventHandler value)
public void remove_Update(SQLiteUpdateEventHandler value)
private void UpdateCallback(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid)
public void add_Commit(SQLiteCommitHandler value)
public void remove_Commit(SQLiteCommitHandler value)
public void add_RollBack(EventHandler value)
public void remove_RollBack(EventHandler value)
private int CommitCallback(IntPtr parg)
private void RollbackCallback(IntPtr parg)
public void SetConfig(SQLiteConfig config)
}
internal Mono.Data.Sqlite.SqliteConnectionHandle : CriticalHandle {
public bool IsInvalid
public IntPtr op_Implicit(SqliteConnectionHandle db)
public SqliteConnectionHandle op_Implicit(IntPtr db)
private void .ctor(IntPtr db)
protected bool ReleaseHandle()
public bool get_IsInvalid()
}
internal Mono.Data.Sqlite.SqliteConnectionPool : object {
private SortedList`2<string, Pool> _connections
private int _poolVersion
internal SqliteConnectionHandle Remove(string fileName, int maxPoolSize, Int32& version)
internal void ClearAllPools()
internal void ClearPool(string fileName)
internal void Add(string fileName, SqliteConnectionHandle hdl, int version)
private void ResizePool(Pool queue, bool forAdding)
}
public Mono.Data.Sqlite.SqliteConnectionStringBuilder : DbConnectionStringBuilder {
private Hashtable _properties
public int Version
public SynchronizationModes SyncMode
public bool UseUTF16Encoding
public bool Pooling
public bool BinaryGUID
public string DataSource
public string Uri
public int DefaultTimeout
public bool Enlist
public bool FailIfMissing
public bool LegacyFormat
public bool ReadOnly
public string Password
public int PageSize
public int MaxPageCount
public int CacheSize
public SQLiteDateFormats DateTimeFormat
public SQLiteJournalModeEnum JournalMode
public IsolationLevel DefaultIsolationLevel
public void .ctor(string connectionString)
private void Initialize(string cnnString)
public int get_Version()
public void set_Version(int value)
public SynchronizationModes get_SyncMode()
public void set_SyncMode(SynchronizationModes value)
public bool get_UseUTF16Encoding()
public void set_UseUTF16Encoding(bool value)
public bool get_Pooling()
public void set_Pooling(bool value)
public bool get_BinaryGUID()
public void set_BinaryGUID(bool value)
public string get_DataSource()
public void set_DataSource(string value)
public string get_Uri()
public void set_Uri(string value)
public int get_DefaultTimeout()
public void set_DefaultTimeout(int value)
public bool get_Enlist()
public void set_Enlist(bool value)
public bool get_FailIfMissing()
public void set_FailIfMissing(bool value)
public bool get_LegacyFormat()
public void set_LegacyFormat(bool value)
public bool get_ReadOnly()
public void set_ReadOnly(bool value)
public string get_Password()
public void set_Password(string value)
public int get_PageSize()
public void set_PageSize(int value)
public int get_MaxPageCount()
public void set_MaxPageCount(int value)
public int get_CacheSize()
public void set_CacheSize(int value)
public SQLiteDateFormats get_DateTimeFormat()
public void set_DateTimeFormat(SQLiteDateFormats value)
public SQLiteJournalModeEnum get_JournalMode()
public void set_JournalMode(SQLiteJournalModeEnum value)
public IsolationLevel get_DefaultIsolationLevel()
public void set_DefaultIsolationLevel(IsolationLevel value)
public bool TryGetValue(string keyword, Object& value)
private void FallbackGetProperties(Hashtable propertyList)
}
public Mono.Data.Sqlite.SqliteConvert : object {
protected DateTime UnixEpoch
private String[] _datetimeFormats
private Encoding _utf8
internal SQLiteDateFormats _datetimeFormat
private Type[] _affinitytotype
private DbType[] _typetodbtype
private Int32[] _dbtypetocolumnsize
private Object[] _dbtypetonumericprecision
private Object[] _dbtypetonumericscale
private SQLiteTypeNames[] _dbtypeNames
private Type[] _dbtypeToType
private TypeAffinity[] _typecodeAffinities
private SQLiteTypeNames[] _typeNames
internal void .ctor(SQLiteDateFormats fmt)
public Byte[] ToUTF8(string sourceText)
public Byte[] ToUTF8(DateTime dateTimeValue)
public string ToString(IntPtr nativestring, int nativestringlen)
public string UTF8ToString(IntPtr nativestring, int nativestringlen)
public DateTime ToDateTime(string dateText)
public DateTime ToDateTime(double julianDay)
public double ToJulianDay(DateTime value)
public string ToString(DateTime dateValue)
internal DateTime ToDateTime(IntPtr ptr, int len)
public String[] Split(string source, char separator)
public bool ToBoolean(object source)
public bool ToBoolean(string source)
internal void ColumnToType(SqliteStatement stmt, int i, SQLiteType typ)
internal Type SQLiteTypeToType(SQLiteType t)
internal DbType TypeToDbType(Type typ)
internal int DbTypeToColumnSize(DbType typ)
internal object DbTypeToNumericPrecision(DbType typ)
internal object DbTypeToNumericScale(DbType typ)
internal string DbTypeToTypeName(DbType typ)
internal Type DbTypeToType(DbType typ)
internal TypeAffinity TypeToAffinity(Type typ)
internal DbType TypeNameToDbType(string Name)
}
public Mono.Data.Sqlite.SqliteDataAdapter : DbDataAdapter {
private object _updatingEventPH
private object _updatedEventPH
public SqliteCommand SelectCommand
public SqliteCommand InsertCommand
public SqliteCommand UpdateCommand
public SqliteCommand DeleteCommand
public void .ctor(SqliteCommand cmd)
public void .ctor(string commandText, SqliteConnection connection)
public void .ctor(string commandText, string connectionString)
public void add_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value)
public void remove_RowUpdating(EventHandler`1<RowUpdatingEventArgs> value)
internal Delegate FindBuilder(MulticastDelegate mcd)
public void add_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value)
public void remove_RowUpdated(EventHandler`1<RowUpdatedEventArgs> value)
protected void OnRowUpdating(RowUpdatingEventArgs value)
protected void OnRowUpdated(RowUpdatedEventArgs value)
public SqliteCommand get_SelectCommand()
public void set_SelectCommand(SqliteCommand value)
public SqliteCommand get_InsertCommand()
public void set_InsertCommand(SqliteCommand value)
public SqliteCommand get_UpdateCommand()
public void set_UpdateCommand(SqliteCommand value)
public SqliteCommand get_DeleteCommand()
public void set_DeleteCommand(SqliteCommand value)
}
public Mono.Data.Sqlite.SqliteDataReader : DbDataReader {
private SqliteCommand _command
private int _activeStatementIndex
private SqliteStatement _activeStatement
private int _readingState
private int _rowsAffected
private int _fieldCount
private SQLiteType[] _fieldTypeArray
private CommandBehavior _commandBehavior
internal bool _disposeCommand
private SqliteKeyReader _keyInfo
internal long _version
private bool hasColumnMetadataSupport
public int Depth
public int FieldCount
public int VisibleFieldCount
public bool HasRows
public bool IsClosed
public int RecordsAffected
public object Item
public object Item
internal void .ctor(SqliteCommand cmd, CommandBehavior behave)
internal void Cancel()
public void Close()
private void CheckClosed()
private void CheckValidRow()
public IEnumerator GetEnumerator()
public int get_Depth()
public int get_FieldCount()
public int get_VisibleFieldCount()
private TypeAffinity VerifyType(int i, DbType typ)
public bool GetBoolean(int i)
public byte GetByte(int i)
public long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
public char GetChar(int i)
public long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length)
public string GetDataTypeName(int i)
public DateTime GetDateTime(int i)
public decimal GetDecimal(int i)
public double GetDouble(int i)
public Type GetFieldType(int i)
public float GetFloat(int i)
public Guid GetGuid(int i)
public short GetInt16(int i)
public int GetInt32(int i)
public long GetInt64(int i)
public string GetName(int i)
public int GetOrdinal(string name)
public DataTable GetSchemaTable()
internal DataTable GetSchemaTable(bool wantUniqueInfo, bool wantDefaultValue)
public string GetString(int i)
public object GetValue(int i)
public int GetValues(Object[] values)
public bool get_HasRows()
public bool get_IsClosed()
public bool IsDBNull(int i)
public bool NextResult()
private SQLiteType GetSQLiteType(int i)
public bool Read()
public int get_RecordsAffected()
public object get_Item(string name)
public object get_Item(int i)
private void LoadKeyInfo()
}
public Mono.Data.Sqlite.SqliteDataSourceEnumerator : DbDataSourceEnumerator {
public DataTable GetDataSources()
}
public Mono.Data.Sqlite.SQLiteDateFormats : Enum {
public int value__
public SQLiteDateFormats Ticks
public SQLiteDateFormats ISO8601
public SQLiteDateFormats JulianDay
public SQLiteDateFormats UnixEpoch
}
internal Mono.Data.Sqlite.SQLiteEnlistment : object {
internal SqliteTransaction _transaction
internal Transaction _scope
internal bool _disposeConnection
internal void .ctor(SqliteConnection cnn, Transaction scope)
private void Cleanup(SqliteConnection cnn)
public void Commit(Enlistment enlistment)
public void InDoubt(Enlistment enlistment)
public void Prepare(PreparingEnlistment preparingEnlistment)
public void Rollback(Enlistment enlistment)
}
public Mono.Data.Sqlite.SQLiteErrorCode : Enum {
public int value__
public SQLiteErrorCode Ok
public SQLiteErrorCode Error
public SQLiteErrorCode Internal
public SQLiteErrorCode Perm
public SQLiteErrorCode Abort
public SQLiteErrorCode Busy
public SQLiteErrorCode Locked
public SQLiteErrorCode NoMem
public SQLiteErrorCode ReadOnly
public SQLiteErrorCode Interrupt
public SQLiteErrorCode IOErr
public SQLiteErrorCode Corrupt
public SQLiteErrorCode NotFound
public SQLiteErrorCode Full
public SQLiteErrorCode CantOpen
public SQLiteErrorCode Protocol
public SQLiteErrorCode Empty
public SQLiteErrorCode Schema
public SQLiteErrorCode TooBig
public SQLiteErrorCode Constraint
public SQLiteErrorCode Mismatch
public SQLiteErrorCode Misuse
public SQLiteErrorCode NOLFS
public SQLiteErrorCode Auth
public SQLiteErrorCode Format
public SQLiteErrorCode Range
public SQLiteErrorCode NotADatabase
public SQLiteErrorCode Row
public SQLiteErrorCode Done
}
public Mono.Data.Sqlite.SqliteException : DbException {
private SQLiteErrorCode _errorCode
private String[] _errorMessages
public SQLiteErrorCode ErrorCode
private void .ctor(SerializationInfo info, StreamingContext context)
public void .ctor(int errorCode, string extendedInformation)
public void .ctor(string message)
public void .ctor(string message, Exception innerException)
public SQLiteErrorCode get_ErrorCode()
private string GetStockErrorMessage(int errorCode, string errorMessage)
}
public Mono.Data.Sqlite.SqliteFactory : DbProviderFactory {
private Type _dbProviderServicesType
private object _sqliteServices
public SqliteFactory Instance
private object System.IServiceProvider.GetService(Type serviceType)
private object GetSQLiteProviderServicesInstance()
public DbCommand CreateCommand()
public DbCommandBuilder CreateCommandBuilder()
public DbConnection CreateConnection()
public DbConnectionStringBuilder CreateConnectionStringBuilder()
public DbDataAdapter CreateDataAdapter()
public DbParameter CreateParameter()
}
internal Mono.Data.Sqlite.SQLiteFinalCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr context)
public IAsyncResult BeginInvoke(IntPtr context, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Data.Sqlite.SqliteFunction : object {
internal SQLiteBase _base
private Dictionary`2<long, AggregateData> _contextDataList
private SQLiteCallback _InvokeFunc
private SQLiteCallback _StepFunc
private SQLiteFinalCallback _FinalFunc
private SQLiteCollation _CompareFunc
private SQLiteCollation _CompareFunc16
internal IntPtr _context
private List`1<SqliteFunctionAttribute> _registeredFunctions
public SqliteConvert SqliteConvert
public SqliteConvert get_SqliteConvert()
public object Invoke(Object[] args)
public void Step(Object[] args, int stepNumber, Object& contextData)
public object Final(object contextData)
public int Compare(string param1, string param2)
internal Object[] ConvertParams(int nArgs, IntPtr argsptr)
private void SetReturnValue(IntPtr context, object returnValue)
internal void ScalarCallback(IntPtr context, int nArgs, IntPtr argsptr)
internal int CompareCallback(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2)
internal int CompareCallback16(IntPtr ptr, int len1, IntPtr ptr1, int len2, IntPtr ptr2)
internal void StepCallback(IntPtr context, int nArgs, IntPtr argsptr)
internal void FinalCallback(IntPtr context)
protected void Dispose(bool disposing)
public void Dispose()
public void RegisterFunction(Type typ)
internal SqliteFunction[] BindFunctions(SQLiteBase sqlbase)
}
public Mono.Data.Sqlite.SqliteFunctionAttribute : Attribute {
private string _name
private int _arguments
private FunctionType _functionType
internal Type _instanceType
public string Name
public int Arguments
public FunctionType FuncType
public string get_Name()
public void set_Name(string value)
public int get_Arguments()
public void set_Arguments(int value)
public FunctionType get_FuncType()
public void set_FuncType(FunctionType value)
}
public Mono.Data.Sqlite.SqliteFunctionEx : SqliteFunction {
protected CollationSequence GetCollationSequence()
}
public Mono.Data.Sqlite.SQLiteJournalModeEnum : Enum {
public int value__
public SQLiteJournalModeEnum Delete
public SQLiteJournalModeEnum Persist
public SQLiteJournalModeEnum Off
}
internal Mono.Data.Sqlite.SqliteKeyReader : object {
private KeyInfo[] _keyInfo
private SqliteStatement _stmt
private bool _isValid
internal int Count
internal void .ctor(SqliteConnection cnn, SqliteDataReader reader, SqliteStatement stmt)
internal int get_Count()
internal void Sync(int i)
internal void Sync()
internal void Reset()
public void Dispose()
internal string GetDataTypeName(int i)
internal Type GetFieldType(int i)
internal string GetName(int i)
internal int GetOrdinal(string name)
internal bool GetBoolean(int i)
internal byte GetByte(int i)
internal long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length)
internal char GetChar(int i)
internal long GetChars(int i, long fieldOffset, Char[] buffer, int bufferoffset, int length)
internal DateTime GetDateTime(int i)
internal decimal GetDecimal(int i)
internal double GetDouble(int i)
internal float GetFloat(int i)
internal Guid GetGuid(int i)
internal short GetInt16(int i)
internal int GetInt32(int i)
internal long GetInt64(int i)
internal string GetString(int i)
internal object GetValue(int i)
internal bool IsDBNull(int i)
internal void AppendSchemaTable(DataTable tbl)
}
public Mono.Data.Sqlite.SqliteMetaDataCollectionNames : object {
public string Catalogs
public string Columns
public string Indexes
public string IndexColumns
public string Tables
public string Views
public string ViewColumns
public string ForeignKeys
public string Triggers
}
internal Mono.Data.Sqlite.SQLiteOpenFlagsEnum : Enum {
public int value__
public SQLiteOpenFlagsEnum None
public SQLiteOpenFlagsEnum ReadOnly
public SQLiteOpenFlagsEnum ReadWrite
public SQLiteOpenFlagsEnum Create
public SQLiteOpenFlagsEnum Default
public SQLiteOpenFlagsEnum FileProtectionComplete
public SQLiteOpenFlagsEnum FileProtectionCompleteUnlessOpen
public SQLiteOpenFlagsEnum FileProtectionCompleteUntilFirstUserAuthentication
public SQLiteOpenFlagsEnum FileProtectionNone
}
public Mono.Data.Sqlite.SqliteParameter : DbParameter {
internal int _dbType
private DataRowVersion _rowVersion
private object _objValue
private string _sourceColumn
private string _parameterName
private int _dataSize
private bool _nullable
private bool _nullMapping
public bool IsNullable
public DbType DbType
public ParameterDirection Direction
public string ParameterName
public int Size
public string SourceColumn
public bool SourceColumnNullMapping
public DataRowVersion SourceVersion
public object Value
public void .ctor(string parameterName)
public void .ctor(string parameterName, object value)
public void .ctor(string parameterName, DbType dbType)
public void .ctor(string parameterName, DbType dbType, string sourceColumn)
public void .ctor(string parameterName, DbType dbType, string sourceColumn, DataRowVersion rowVersion)
public void .ctor(DbType dbType)
public void .ctor(DbType dbType, object value)
public void .ctor(DbType dbType, string sourceColumn)
public void .ctor(DbType dbType, string sourceColumn, DataRowVersion rowVersion)
public void .ctor(string parameterName, DbType parameterType, int parameterSize)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, string sourceColumn)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion)
private void .ctor(SqliteParameter source)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, bool isNullable, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, object value)
public void .ctor(string parameterName, DbType parameterType, int parameterSize, ParameterDirection direction, byte precision, byte scale, string sourceColumn, DataRowVersion rowVersion, bool sourceColumnNullMapping, object value)
public void .ctor(DbType parameterType, int parameterSize)
public void .ctor(DbType parameterType, int parameterSize, string sourceColumn)
public void .ctor(DbType parameterType, int parameterSize, string sourceColumn, DataRowVersion rowVersion)
public bool get_IsNullable()
public void set_IsNullable(bool value)
public DbType get_DbType()
public void set_DbType(DbType value)
public ParameterDirection get_Direction()
public void set_Direction(ParameterDirection value)
public string get_ParameterName()
public void set_ParameterName(string value)
public void ResetDbType()
public int get_Size()
public void set_Size(int value)
public string get_SourceColumn()
public void set_SourceColumn(string value)
public bool get_SourceColumnNullMapping()
public void set_SourceColumnNullMapping(bool value)
public DataRowVersion get_SourceVersion()
public void set_SourceVersion(DataRowVersion value)
public object get_Value()
public void set_Value(object value)
public object Clone()
}
public Mono.Data.Sqlite.SqliteParameterCollection : DbParameterCollection {
private SqliteCommand _command
private List`1<SqliteParameter> _parameterList
private bool _unboundFlag
public bool IsSynchronized
public bool IsFixedSize
public bool IsReadOnly
public object SyncRoot
public int Count
public SqliteParameter Item
public SqliteParameter Item
internal void .ctor(SqliteCommand cmd)
public bool get_IsSynchronized()
public bool get_IsFixedSize()
public bool get_IsReadOnly()
public object get_SyncRoot()
public IEnumerator GetEnumerator()
public SqliteParameter Add(string parameterName, DbType parameterType, int parameterSize, string sourceColumn)
public SqliteParameter Add(string parameterName, DbType parameterType, int parameterSize)
public SqliteParameter Add(string parameterName, DbType parameterType)
public int Add(SqliteParameter parameter)
public int Add(object value)
public SqliteParameter AddWithValue(string parameterName, object value)
public void AddRange(SqliteParameter[] values)
public void AddRange(Array values)
public void Clear()
public bool Contains(string parameterName)
public bool Contains(object value)
public void CopyTo(Array array, int index)
public int get_Count()
public SqliteParameter get_Item(string parameterName)
public void set_Item(string parameterName, SqliteParameter value)
public SqliteParameter get_Item(int index)
public void set_Item(int index, SqliteParameter value)
protected DbParameter GetParameter(string parameterName)
protected DbParameter GetParameter(int index)
public int IndexOf(string parameterName)
public int IndexOf(object value)
public void Insert(int index, object value)
public void Remove(object value)
public void RemoveAt(string parameterName)
public void RemoveAt(int index)
protected void SetParameter(string parameterName, DbParameter value)
protected void SetParameter(int index, DbParameter value)
internal void Unbind()
internal void MapParameters(SqliteStatement activeStatement)
}
internal Mono.Data.Sqlite.SQLiteRollbackCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr puser)
public IAsyncResult BeginInvoke(IntPtr puser, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Data.Sqlite.SqliteStatement : object {
internal SQLiteBase _sql
internal string _sqlStatement
internal SqliteStatementHandle _sqlite_stmt
internal int _unnamedParameters
internal String[] _paramNames
internal SqliteParameter[] _paramValues
internal SqliteCommand _command
private String[] _types
internal String[] TypeDefinitions
internal void .ctor(SQLiteBase sqlbase, SqliteStatementHandle stmt, string strCommand, SqliteStatement previous)
internal bool MapParameter(string s, SqliteParameter p)
public void Dispose()
internal void BindParameters()
private void BindParameter(int index, SqliteParameter param)
internal String[] get_TypeDefinitions()
internal void SetTypes(string typedefs)
}
internal Mono.Data.Sqlite.SqliteStatementHandle : CriticalHandle {
public bool IsInvalid
public IntPtr op_Implicit(SqliteStatementHandle stmt)
public SqliteStatementHandle op_Implicit(IntPtr stmt)
private void .ctor(IntPtr stmt)
protected bool ReleaseHandle()
public bool get_IsInvalid()
}
public Mono.Data.Sqlite.SqliteTransaction : DbTransaction {
internal SqliteConnection _cnn
internal long _version
private IsolationLevel _level
public SqliteConnection Connection
protected DbConnection DbConnection
public IsolationLevel IsolationLevel
internal void .ctor(SqliteConnection connection, bool deferredLock)
public void Commit()
public SqliteConnection get_Connection()
protected DbConnection get_DbConnection()
protected void Dispose(bool disposing)
public IsolationLevel get_IsolationLevel()
public void Rollback()
internal void IssueRollback(SqliteConnection cnn)
internal bool IsValid(bool throwError)
}
internal Mono.Data.Sqlite.SQLiteType : object {
internal DbType Type
internal TypeAffinity Affinity
}
internal Mono.Data.Sqlite.SQLiteTypeNames : ValueType {
internal string typeName
internal DbType dataType
internal void .ctor(string newtypeName, DbType newdataType)
}
internal Mono.Data.Sqlite.SQLiteUpdateCallback : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid)
public IAsyncResult BeginInvoke(IntPtr puser, int type, IntPtr database, IntPtr table, long rowid, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
public Mono.Data.Sqlite.SQLiteUpdateEventHandler : MulticastDelegate {
public void .ctor(object object, IntPtr method)
public void Invoke(object sender, UpdateEventArgs e)
public IAsyncResult BeginInvoke(object sender, UpdateEventArgs e, AsyncCallback callback, object object)
public void EndInvoke(IAsyncResult result)
}
internal Mono.Data.Sqlite.SR : object {
private ResourceManager resourceMan
private CultureInfo resourceCulture
internal ResourceManager ResourceManager
internal CultureInfo Culture
internal string DataTypes
internal string Keywords
internal string MetaDataCollections
internal ResourceManager get_ResourceManager()
internal CultureInfo get_Culture()
internal void set_Culture(CultureInfo value)
internal string get_DataTypes()
internal string get_Keywords()
internal string get_MetaDataCollections()
}
public Mono.Data.Sqlite.SynchronizationModes : Enum {
public int value__
public SynchronizationModes Normal
public SynchronizationModes Full
public SynchronizationModes Off
}
public Mono.Data.Sqlite.TypeAffinity : Enum {
public int value__
public TypeAffinity Uninitialized
public TypeAffinity Int64
public TypeAffinity Double
public TypeAffinity Text
public TypeAffinity Blob
public TypeAffinity Null
public TypeAffinity DateTime
public TypeAffinity None
}
internal Mono.Data.Sqlite.UnsafeNativeMethods : object {
internal bool use_sqlite3_close_v2
internal bool use_sqlite3_open_v2
internal bool use_sqlite3_create_function_v2
private string SQLITE_DLL
internal int sqlite3_close(IntPtr db)
internal int sqlite3_close_v2(IntPtr db)
internal int sqlite3_create_function(IntPtr db, Byte[] strName, int nArgs, int nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal)
internal int sqlite3_create_function_v2(IntPtr db, Byte[] strName, int nArgs, int nType, IntPtr pvUser, SQLiteCallback func, SQLiteCallback fstep, SQLiteFinalCallback ffinal, SQLiteFinalCallback fdestroy)
internal int sqlite3_finalize(IntPtr stmt)
internal int sqlite3_open_v2(Byte[] utf8Filename, IntPtr& db, int flags, IntPtr vfs)
internal int sqlite3_open(Byte[] utf8Filename, IntPtr& db)
internal int sqlite3_open16(string fileName, IntPtr& db)
internal int sqlite3_reset(IntPtr stmt)
internal IntPtr sqlite3_bind_parameter_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_database_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_database_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_decltype(IntPtr stmt, int index)
internal IntPtr sqlite3_column_decltype16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_origin_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_origin_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_table_name(IntPtr stmt, int index)
internal IntPtr sqlite3_column_table_name16(IntPtr stmt, int index)
internal IntPtr sqlite3_column_text(IntPtr stmt, int index)
internal IntPtr sqlite3_column_text16(IntPtr stmt, int index)
internal IntPtr sqlite3_errmsg(IntPtr db)
internal int sqlite3_prepare(IntPtr db, IntPtr pSql, int nBytes, IntPtr& stmt, IntPtr& ptrRemain)
internal int sqlite3_table_column_metadata(IntPtr db, Byte[] dbName, Byte[] tblName, Byte[] colName, IntPtr& ptrDataType, IntPtr& ptrCollSeq, Int32& notNull, Int32& primaryKey, Int32& autoInc)
internal IntPtr sqlite3_value_text(IntPtr p)
internal IntPtr sqlite3_value_text16(IntPtr p)
internal IntPtr sqlite3_libversion()
internal void sqlite3_interrupt(IntPtr db)
internal int sqlite3_changes(IntPtr db)
internal int sqlite3_busy_timeout(IntPtr db, int ms)
internal int sqlite3_bind_blob(IntPtr stmt, int index, Byte[] value, int nSize, IntPtr nTransient)
internal int sqlite3_bind_double(IntPtr stmt, int index, double value)
internal int sqlite3_bind_int(IntPtr stmt, int index, int value)
internal int sqlite3_bind_int64(IntPtr stmt, int index, long value)
internal int sqlite3_bind_null(IntPtr stmt, int index)
internal int sqlite3_bind_text(IntPtr stmt, int index, Byte[] value, int nlen, IntPtr pvReserved)
internal int sqlite3_bind_parameter_count(IntPtr stmt)
internal int sqlite3_bind_parameter_index(IntPtr stmt, Byte[] strName)
internal int sqlite3_column_count(IntPtr stmt)
internal int sqlite3_step(IntPtr stmt)
internal double sqlite3_column_double(IntPtr stmt, int index)
internal int sqlite3_column_int(IntPtr stmt, int index)
internal long sqlite3_column_int64(IntPtr stmt, int index)
internal IntPtr sqlite3_column_blob(IntPtr stmt, int index)
internal int sqlite3_column_bytes(IntPtr stmt, int index)
internal TypeAffinity sqlite3_column_type(IntPtr stmt, int index)
internal int sqlite3_create_collation(IntPtr db, Byte[] strName, int nType, IntPtr pvUser, SQLiteCollation func)
internal int sqlite3_aggregate_count(IntPtr context)
internal IntPtr sqlite3_value_blob(IntPtr p)
internal int sqlite3_value_bytes(IntPtr p)
internal double sqlite3_value_double(IntPtr p)
internal int sqlite3_value_int(IntPtr p)
internal long sqlite3_value_int64(IntPtr p)
internal TypeAffinity sqlite3_value_type(IntPtr p)
internal void sqlite3_result_blob(IntPtr context, Byte[] value, int nSize, IntPtr pvReserved)
internal void sqlite3_result_double(IntPtr context, double value)
internal void sqlite3_result_error(IntPtr context, Byte[] strErr, int nLen)
internal void sqlite3_result_int(IntPtr context, int value)
internal void sqlite3_result_int64(IntPtr context, long value)
internal void sqlite3_result_null(IntPtr context)
internal void sqlite3_result_text(IntPtr context, Byte[] value, int nLen, IntPtr pvReserved)
internal IntPtr sqlite3_aggregate_context(IntPtr context, int nBytes)
internal int sqlite3_bind_text16(IntPtr stmt, int index, string value, int nlen, IntPtr pvReserved)
internal void sqlite3_result_error16(IntPtr context, string strName, int nLen)
internal void sqlite3_result_text16(IntPtr context, string strName, int nLen, IntPtr pvReserved)
internal int sqlite3_key(IntPtr db, Byte[] key, int keylen)
internal int sqlite3_rekey(IntPtr db, Byte[] key, int keylen)
internal IntPtr sqlite3_update_hook(IntPtr db, SQLiteUpdateCallback func, IntPtr pvUser)
internal IntPtr sqlite3_commit_hook(IntPtr db, SQLiteCommitCallback func, IntPtr pvUser)
internal IntPtr sqlite3_rollback_hook(IntPtr db, SQLiteRollbackCallback func, IntPtr pvUser)
internal IntPtr sqlite3_db_handle(IntPtr stmt)
internal IntPtr sqlite3_next_stmt(IntPtr db, IntPtr stmt)
internal int sqlite3_exec(IntPtr db, Byte[] strSql, IntPtr pvCallback, IntPtr pvParam, IntPtr& errMsg)
internal int sqlite3_config(SQLiteConfig config)
internal IntPtr sqlite3_user_data(IntPtr context)
internal int sqlite3_free(IntPtr ptr)
internal int sqlite3_libversion_number()
}
public Mono.Data.Sqlite.UpdateEventArgs : EventArgs {
public string Database
public string Table
public UpdateEventType Event
public long RowId
internal void .ctor(string database, string table, UpdateEventType eventType, long rowid)
}
public Mono.Data.Sqlite.UpdateEventType : Enum {
public int value__
public UpdateEventType Delete
public UpdateEventType Insert
public UpdateEventType Update
}
internal Mono.Util.MonoPInvokeCallbackAttribute : Attribute {
public void .ctor(Type t)
}
