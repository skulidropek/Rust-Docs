Сборка: LZ4pn.dll
==================================================
Класс: <Module>
Поля:
Свойства:
Методы:
--------------------------------------------------
Класс: LZ4pn.LZ4Codec
Наследуется от: object
Поля:
  int MEMORY_USAGE
  int NOTCOMPRESSIBLE_DETECTIONLEVEL
  int MINMATCH
  int SKIPSTRENGTH
  int COPYLENGTH
  int LASTLITERALS
  int MFLIMIT
  int MINLENGTH
  int MAXD_LOG
  int MAXD
  int MAXD_MASK
  int MAX_DISTANCE
  int ML_BITS
  int ML_MASK
  int RUN_BITS
  int RUN_MASK
  int STEPSIZE_64
  int STEPSIZE_32
  int LZ4_64KLIMIT
  int HASH_LOG
  int HASH_TABLESIZE
  int HASH_ADJUST
  int HASH64K_LOG
  int HASH64K_TABLESIZE
  int HASH64K_ADJUST
  int HASHHC_LOG
  int HASHHC_TABLESIZE
  int HASHHC_ADJUST
  int MAX_NB_ATTEMPTS
  int OPTIMAL_ML
  Int32[] DECODER_TABLE_32
  Int32[] DECODER_TABLE_64
  Int32[] DEBRUIJN_TABLE_32
  Int32[] DEBRUIJN_TABLE_64
Свойства:
Методы:
  int MaximumOutputLength(int inputLength)
  void CheckArguments(Byte[] input, int inputOffset, Int32& inputLength, Byte[] output, int outputOffset, Int32& outputLength)
  void BlockCopy(Byte* src, Byte* dst, int len)
  void BlockFill(Byte* dst, int len, byte val)
  int Encode32(Byte* input, Byte* output, int inputLength, int outputLength)
  int Encode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
  Byte[] Encode32(Byte[] input, int inputOffset, int inputLength)
  int Decode32(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength)
  int Decode32(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength)
  Byte[] Decode32(Byte[] input, int inputOffset, int inputLength, int outputLength)
  int Encode64(Byte* input, Byte* output, int inputLength, int outputLength)
  int Encode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
  Byte[] Encode64(Byte[] input, int inputOffset, int inputLength)
  int Decode64(Byte* input, int inputLength, Byte* output, int outputLength, bool knownOutputLength)
  int Decode64(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength, bool knownOutputLength)
  Byte[] Decode64(Byte[] input, int inputOffset, int inputLength, int outputLength)
  LZ4HC_Data_Structure LZ4HC_Create(Byte* src)
  int LZ4_compressHC_32(Byte* input, Byte* output, int inputLength, int outputLength)
  int Encode32HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
  Byte[] Encode32HC(Byte[] input, int inputOffset, int inputLength)
  int LZ4_compressHC_64(Byte* input, Byte* output, int inputLength, int outputLength)
  int Encode64HC(Byte[] input, int inputOffset, int inputLength, Byte[] output, int outputOffset, int outputLength)
  Byte[] Encode64HC(Byte[] input, int inputOffset, int inputLength)
  int LZ4_compressCtx_32(Byte** hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  int LZ4_compress64kCtx_32(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  int LZ4_uncompress_32(Byte* src, Byte* dst, int dst_len)
  int LZ4_uncompress_unknownOutputSize_32(Byte* src, Byte* dst, int src_len, int dst_maxlen)
  void LZ4HC_Insert_32(LZ4HC_Data_Structure hc4, Byte* src_p)
  int LZ4HC_CommonLength_32(Byte* p1, Byte* p2, Byte* src_LASTLITERALS)
  int LZ4HC_InsertAndFindBestMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos)
  int LZ4HC_InsertAndGetWiderMatch_32(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos)
  int LZ4_encodeSequence_32(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* xxx_ref, Byte* dst_end)
  int LZ4_compressHCCtx_32(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  int LZ4_compressCtx_64(UInt32* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  int LZ4_compress64kCtx_64(UInt16* hash_table, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  int LZ4_uncompress_64(Byte* src, Byte* dst, int dst_len)
  int LZ4_uncompress_unknownOutputSize_64(Byte* src, Byte* dst, int src_len, int dst_maxlen)
  void LZ4HC_Insert_64(LZ4HC_Data_Structure hc4, Byte* src_p)
  int LZ4HC_CommonLength_64(Byte* p1, Byte* p2, Byte* src_LASTLITERALS)
  int LZ4HC_InsertAndFindBestMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* src_LASTLITERALS, Byte*& matchpos)
  int LZ4HC_InsertAndGetWiderMatch_64(LZ4HC_Data_Structure hc4, Byte* src_p, Byte* startLimit, Byte* src_LASTLITERALS, int longest, Byte*& matchpos, Byte*& startpos)
  int LZ4_encodeSequence_64(Byte*& src_p, Byte*& dst_p, Byte*& src_anchor, int matchLength, Byte* src_ref, Byte* dst_end)
  int LZ4_compressHCCtx_64(LZ4HC_Data_Structure ctx, Byte* src, Byte* dst, int src_len, int dst_maxlen)
  void .cctor()
--------------------------------------------------
Класс: <PrivateImplementationDetails>{A0874672-3A49-45D7-A8B0-51E6098CECDA}
Наследуется от: object
Поля:
  __StaticArrayInitTypeSize=32 $$method0x600002d-1
  __StaticArrayInitTypeSize=32 $$method0x600002d-2
  __StaticArrayInitTypeSize=128 $$method0x600002d-3
  __StaticArrayInitTypeSize=256 $$method0x600002d-4
Свойства:
Методы:
--------------------------------------------------
